/*! For license information please see vendor.js.LICENSE.txt */
(self.webpackChunk=self.webpackChunk||[]).push([[898],{7757:(e,t,n)=>{e.exports=n(5666)},1988:(e,t,n)=>{"use strict";function r(){return r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}function o(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function s(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}n.d(t,{Ul:()=>s,gY:()=>r,gK:()=>o})},2055:(e,t,n)=>{"use strict";n.d(t,{d:()=>l,f:()=>c});var r=n(1988),o=n(821),i=n(574),s=n(2122),a=Symbol("DescriptionContext");function c(e){var t=void 0===e?{}:e,n=t.slot,r=void 0===n?(0,o.ref)({}):n,i=t.name,s=void 0===i?"Description":i,c=t.props,l=void 0===c?{}:c,u=(0,o.ref)([]);return(0,o.provide)(a,{register:function(e){return u.value.push(e),function(){var t=u.value.indexOf(e);-1!==t&&u.value.splice(t,1)}},slot:r,name:s,props:l}),(0,o.computed)((function(){return u.value.length>0?u.value.join(" "):void 0}))}var l=(0,o.defineComponent)({name:"Description",props:{as:{type:[Object,String],default:"p"}},render:function(){var e=this.context,t=e.name,n=void 0===t?"Description":t,s=e.slot,a=void 0===s?(0,o.ref)({}):s,c=e.props,l=void 0===c?{}:c,u=this.$props,f=(0,r.gY)({},Object.entries(l).reduce((function(e,t){var n,r=t[0],i=t[1];return Object.assign(e,((n={})[r]=(0,o.unref)(i),n))}),{}),{id:this.id});return(0,i.sY)({props:(0,r.gY)({},u,f),slot:a.value,attrs:this.$attrs,slots:this.$slots,name:n})},setup:function(){var e=function(){var e=(0,o.inject)(a,null);if(null===e)throw new Error("Missing parent");return e}(),t="headlessui-description-"+(0,s.M)();return(0,o.onMounted)((function(){return(0,o.onUnmounted)(e.register(t))})),{id:t,context:e}}})},1920:(e,t,n)=>{"use strict";n.d(t,{Vq:()=>$,t9:()=>U,$N:()=>D});var r=n(1988),o=n(821),i=n(3343),s=n(574),a=n(9639),c=n(2122);function l(e,t,n){"undefined"!=typeof window&&(0,o.watchEffect)((function(r){window.addEventListener(e,t,n),r((function(){window.removeEventListener(e,t,n)}))}))}function u(e,t){for(var n,o=(0,r.Ul)(e);!(n=o()).done;){if(n.value.contains(t))return!0}return!1}var f,p,d,h,v=["[contentEditable=true]","[tabindex]","a[href]","area[href]","button:not([disabled])","iframe","input:not([disabled])","select:not([disabled])","textarea:not([disabled])"].map((function(e){return e+":not([tabindex='-1'])"})).join(",");function m(e){null==e||e.focus({preventScroll:!0})}function y(e,t){var n=Array.isArray(e)?e.slice().sort((function(e,t){var n=e.compareDocumentPosition(t);return n&Node.DOCUMENT_POSITION_FOLLOWING?-1:n&Node.DOCUMENT_POSITION_PRECEDING?1:0})):function(e){return void 0===e&&(e=document.body),null==e?[]:Array.from(e.querySelectorAll(v))}(e),r=document.activeElement,o=function(){if(t&(f.First|f.Next))return d.Next;if(t&(f.Previous|f.Last))return d.Previous;throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last")}(),i=function(){if(t&f.First)return 0;if(t&f.Previous)return Math.max(0,n.indexOf(r))-1;if(t&f.Next)return Math.max(0,n.indexOf(r))+1;if(t&f.Last)return n.length-1;throw new Error("Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last")}(),s=t&f.NoScroll?{preventScroll:!0}:{},a=0,c=n.length,l=void 0;do{var u;if(a>=c||a+c<=0)return p.Error;var h=i+a;if(t&f.WrapAround)h=(h+c)%c;else{if(h<0)return p.Underflow;if(h>=c)return p.Overflow}null==(u=l=n[h])||u.focus(s),a+=o}while(l!==document.activeElement);return l.hasAttribute("tabindex")||l.setAttribute("tabindex","0"),p.Success}!function(e){e[e.First=1]="First",e[e.Previous=2]="Previous",e[e.Next=4]="Next",e[e.Last=8]="Last",e[e.WrapAround=16]="WrapAround",e[e.NoScroll=32]="NoScroll"}(f||(f={})),function(e){e[e.Error=0]="Error",e[e.Overflow=1]="Overflow",e[e.Success=2]="Success",e[e.Underflow=3]="Underflow"}(p||(p={})),function(e){e[e.Previous=-1]="Previous",e[e.Next=1]="Next"}(d||(d={})),function(e){e[e.Strict=0]="Strict",e[e.Loose=1]="Loose"}(h||(h={}));var g="body > *",b=new Set,w=new Map;function S(e){e.setAttribute("aria-hidden","true"),e.inert=!0}function _(e){var t=w.get(e);t&&(null===t["aria-hidden"]?e.removeAttribute("aria-hidden"):e.setAttribute("aria-hidden",t["aria-hidden"]),e.inert=t.inert)}var x,k=Symbol("StackContext");function E(){return(0,o.inject)(k,(function(){}))}function C(e){var t=E();(0,o.provide)(k,(function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];null==e||e.apply(void 0,r),t.apply(void 0,r)}))}!function(e){e[e.AddElement=0]="AddElement",e[e.RemoveElement=1]="RemoveElement"}(x||(x={}));var O=Symbol("ForcePortalRootContext");var j=(0,o.defineComponent)({name:"ForcePortalRoot",props:{as:{type:[Object,String],default:"template"},force:{type:Boolean,default:!1}},setup:function(e,t){var n=t.slots,i=t.attrs;return(0,o.provide)(O,e.force),function(){var t=(0,r.gK)(e,["force"]);return(0,s.sY)({props:t,slot:{},slots:n,attrs:i,name:"ForcePortalRoot"})}}});function A(){var e=document.getElementById("headlessui-portal-root");if(e)return e;var t=document.createElement("div");return t.setAttribute("id","headlessui-portal-root"),document.body.appendChild(t)}var T,P=(0,o.defineComponent)({name:"Portal",props:{as:{type:[Object,String],default:"div"}},setup:function(e,t){var n=t.slots,i=t.attrs,a=(0,o.inject)(O,!1),c=(0,o.inject)(N,null),l=(0,o.ref)(!0===a||null===c?A():c.resolveTarget());(0,o.watchEffect)((function(){a||null!==c&&(l.value=c.resolveTarget())}));var u=(0,o.ref)(null);return function(e){var t=E();(0,o.watchEffect)((function(n){var r=null==e?void 0:e.value;r&&(t(x.AddElement,r),n((function(){return t(x.RemoveElement,r)})))}))}(u),(0,o.onUnmounted)((function(){var e,t=document.getElementById("headlessui-portal-root");t&&(l.value===t&&l.value.children.length<=0&&(null==(e=l.value.parentElement)||e.removeChild(l.value)))})),C(),function(){if(null===l.value)return null;var t={ref:u};return(0,o.h)(o.Teleport,{to:l.value},(0,s.sY)({props:(0,r.gY)({},e,t),slot:{},attrs:i,slots:n,name:"Portal"}))}}}),N=Symbol("PortalGroupContext"),M=(0,o.defineComponent)({name:"PortalGroup",props:{as:{type:[Object,String],default:"template"},target:{type:Object,default:null}},setup:function(e,t){var n=t.attrs,i=t.slots,a=(0,o.reactive)({resolveTarget:function(){return e.target}});return(0,o.provide)(N,a),function(){var t=(0,r.gK)(e,["target"]);return(0,s.sY)({props:t,slot:{},attrs:n,slots:i,name:"PortalGroup"})}}}),R=n(2055),L=n(779),F=n(1357);!function(e){e[e.Open=0]="Open",e[e.Closed=1]="Closed"}(T||(T={}));var I=Symbol("DialogContext");function B(e){var t=(0,o.inject)(I,null);if(null===t){var n=new Error("<"+e+" /> is missing a parent <Dialog /> component.");throw Error.captureStackTrace&&Error.captureStackTrace(n,B),n}return t}var V="DC8F892D-2EBD-447C-A4C8-A03058436FF4",$=(0,o.defineComponent)({name:"Dialog",inheritAttrs:!1,props:{as:{type:[Object,String],default:"div"},static:{type:Boolean,default:!1},unmount:{type:Boolean,default:!0},open:{type:[Boolean,String],default:V},initialFocus:{type:Object,default:null}},emits:{close:function(e){return!0}},render:function(){var e=this,t=(0,r.gY)({},this.$attrs,{ref:"el",id:this.id,role:"dialog","aria-modal":this.dialogState===T.Open||void 0,"aria-labelledby":this.titleId,"aria-describedby":this.describedby,onClick:this.handleClick}),n=this.$props,i=(0,r.gK)(n,["open","initialFocus"]),a={open:this.dialogState===T.Open};return(0,o.h)(j,{force:!0},(function(){return(0,o.h)(P,(function(){return(0,o.h)(M,{target:e.dialogRef},(function(){return(0,o.h)(j,{force:!1},(function(){return(0,s.sY)({props:(0,r.gY)({},i,t),slot:a,attrs:e.$attrs,slots:e.$slots,visible:e.visible,features:s.AN.RenderStrategy|s.AN.Static,name:"Dialog"})}))}))}))}))},setup:function(e,t){var n=t.emit,s=(0,o.ref)(new Set),d=(0,F.oJ)(),h=(0,o.computed)((function(){var t;return e.open===V&&null!==d?(0,i.E)(d.value,((t={})[F.ZM.Open]=!0,t[F.ZM.Closed]=!1,t)):e.open}));if(!(e.open!==V||null!==d))throw new Error("You forgot to provide an `open` prop to the `Dialog`.");if("boolean"!=typeof h.value)throw new Error("You provided an `open` prop to the `Dialog`, but the value is not a boolean. Received: "+(h.value===V?void 0:e.open));var v=(0,o.computed)((function(){return e.open?T.Open:T.Closed})),k=(0,o.computed)((function(){return null!==d?d.value===F.ZM.Open:v.value===T.Open})),E=(0,o.ref)(null),O=(0,o.ref)(v.value===T.Open);(0,o.onUpdated)((function(){O.value=v.value===T.Open}));var j="headlessui-dialog-"+(0,c.M)(),A=(0,o.computed)((function(){return{initialFocus:e.initialFocus}}));!function(e,t,n){void 0===t&&(t=(0,o.ref)(!0)),void 0===n&&(n=(0,o.ref)({}));var i=(0,o.ref)("undefined"!=typeof window?document.activeElement:null),s=(0,o.ref)(null);function c(){if(t.value&&1===e.value.size){var o=n.value.initialFocus,a=document.activeElement;if(o){if(o===a)return}else if(u(e.value,a))return;if(i.value=a,o)m(o);else{for(var c,l=!1,d=(0,r.Ul)(e.value);!(c=d()).done;)if(y(c.value,f.First)===p.Success){l=!0;break}l||console.warn("There are no focusable elements inside the <FocusTrap />")}s.value=document.activeElement}}function d(){m(i.value),i.value=null,s.value=null}(0,o.watchEffect)(c),(0,o.onUpdated)((function(){t.value?c():d()})),(0,o.onUnmounted)(d),l("keydown",(function(n){if(t.value&&n.key===a.R.Tab&&document.activeElement&&1===e.value.size){n.preventDefault();for(var o,i=(0,r.Ul)(e.value);!(o=i()).done;)if(y(o.value,(n.shiftKey?f.Previous:f.Next)|f.WrapAround)===p.Success){s.value=document.activeElement;break}}})),l("focus",(function(n){if(t.value&&1===e.value.size){var r=s.value;if(r){var o=n.target;o&&o instanceof HTMLElement?u(e.value,o)?(s.value=o,m(o)):(n.preventDefault(),n.stopPropagation(),m(r)):m(s.value)}}}),!0)}(s,O,A),function(e,t){void 0===t&&(t=(0,o.ref)(!0)),(0,o.watchEffect)((function(n){if(t.value&&e.value){var o=e.value;b.add(o);for(var i,s=(0,r.Ul)(w.keys());!(i=s()).done;){var a=i.value;a.contains(o)&&(_(a),w.delete(a))}document.querySelectorAll(g).forEach((function(e){if(e instanceof HTMLElement){for(var t,n=(0,r.Ul)(b);!(t=n()).done;){var o=t.value;if(e.contains(o))return}1===b.size&&(w.set(e,{"aria-hidden":e.getAttribute("aria-hidden"),inert:e.inert}),S(e))}})),n((function(){if(b.delete(o),b.size>0)document.querySelectorAll(g).forEach((function(e){if(e instanceof HTMLElement&&!w.has(e)){for(var t,n=(0,r.Ul)(b);!(t=n()).done;){var o=t.value;if(e.contains(o))return}w.set(e,{"aria-hidden":e.getAttribute("aria-hidden"),inert:e.inert}),S(e)}}));else for(var e,t=(0,r.Ul)(w.keys());!(e=t()).done;){var n=e.value;_(n),w.delete(n)}}))}}))}(E,O),C((function(e,t){var n;return(0,i.E)(e,((n={})[x.AddElement]=function(){s.value.add(t)},n[x.RemoveElement]=function(){s.value.delete(t)},n))}));var P=(0,R.f)({name:"DialogDescription",slot:(0,o.computed)((function(){return{open:h.value}}))}),N=(0,o.ref)(null),M={titleId:N,dialogState:v,setTitleId:function(e){N.value!==e&&(N.value=e)},close:function(){n("close",!1)}};return(0,o.provide)(I,M),l("mousedown",(function(e){var t=e.target;v.value===T.Open&&1===s.value.size&&(u(s.value,t)||(M.close(),(0,o.nextTick)((function(){return null==t?void 0:t.focus()}))))})),l("keydown",(function(e){e.key===a.R.Escape&&v.value===T.Open&&(s.value.size>1||(e.preventDefault(),e.stopPropagation(),M.close()))})),(0,o.watchEffect)((function(e){if(v.value===T.Open){var t=document.documentElement.style.overflow,n=document.documentElement.style.paddingRight,r=window.innerWidth-document.documentElement.clientWidth;document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=r+"px",e((function(){document.documentElement.style.overflow=t,document.documentElement.style.paddingRight=n}))}})),(0,o.watchEffect)((function(e){if(v.value===T.Open){var t=(0,L.v)(E);if(t){var n=new IntersectionObserver((function(e){for(var t,n=(0,r.Ul)(e);!(t=n()).done;){var o=t.value;0===o.boundingClientRect.x&&0===o.boundingClientRect.y&&0===o.boundingClientRect.width&&0===o.boundingClientRect.height&&M.close()}}));n.observe(t),e((function(){return n.disconnect()}))}}})),{id:j,el:E,dialogRef:E,containers:s,dialogState:v,titleId:N,describedby:P,visible:k,open:h,handleClick:function(e){e.stopPropagation()}}}}),U=(0,o.defineComponent)({name:"DialogOverlay",props:{as:{type:[Object,String],default:"div"}},render:function(){var e=B("DialogOverlay"),t={ref:"el",id:this.id,"aria-hidden":!0,onClick:this.handleClick},n=this.$props;return(0,s.sY)({props:(0,r.gY)({},n,t),slot:{open:e.dialogState.value===T.Open},attrs:this.$attrs,slots:this.$slots,name:"DialogOverlay"})},setup:function(){var e=B("DialogOverlay");return{id:"headlessui-dialog-overlay-"+(0,c.M)(),handleClick:function(t){t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.close())}}}}),D=(0,o.defineComponent)({name:"DialogTitle",props:{as:{type:[Object,String],default:"h2"}},render:function(){var e=B("DialogTitle"),t={id:this.id},n=this.$props;return(0,s.sY)({props:(0,r.gY)({},n,t),slot:{open:e.dialogState.value===T.Open},attrs:this.$attrs,slots:this.$slots,name:"DialogTitle"})},setup:function(){var e=B("DialogTitle"),t="headlessui-dialog-title-"+(0,c.M)();return(0,o.onMounted)((function(){e.setTitleId(t),(0,o.onUnmounted)((function(){return e.setTitleId(null)}))})),{id:t}}});R.d},9623:(e,t,n)=>{"use strict";n.d(t,{rs:()=>m,Mv:()=>v,$A:()=>y});var r=n(1988),o=n(821),i=n(574),s=n(9639),a=n(2122),c=n(2055),l=n(779);function u(e,t){if(e)return e;var n=null!=t?t:"button";return"string"==typeof n&&"button"===n.toLowerCase()?"button":void 0}var f=Symbol("LabelContext");function p(){var e=(0,o.inject)(f,null);if(null===e){var t=new Error("You used a <Label /> component, but it is not inside a parent.");throw Error.captureStackTrace&&Error.captureStackTrace(t,p),t}return e}var d=(0,o.defineComponent)({name:"Label",props:{as:{type:[Object,String],default:"label"},passive:{type:[Boolean],default:!1}},render:function(){var e=this.context,t=e.name,n=void 0===t?"Label":t,s=e.slot,a=void 0===s?{}:s,c=e.props,l=void 0===c?{}:c,u=this.$props,f=u.passive,p=(0,r.gK)(u,["passive"]),d=(0,r.gY)({},Object.entries(l).reduce((function(e,t){var n,r=t[0],i=t[1];return Object.assign(e,((n={})[r]=(0,o.unref)(i),n))}),{}),{id:this.id}),h=(0,r.gY)({},p,d);return f&&delete h.onClick,(0,i.sY)({props:h,slot:a,attrs:this.$attrs,slots:this.$slots,name:n})},setup:function(){var e=p(),t="headlessui-label-"+(0,a.M)();return(0,o.onMounted)((function(){return(0,o.onUnmounted)(e.register(t))})),{id:t,context:e}}}),h=Symbol("GroupContext"),v=(0,o.defineComponent)({name:"SwitchGroup",props:{as:{type:[Object,String],default:"template"}},setup:function(e,t){var n=t.slots,r=t.attrs,s=(0,o.ref)(null),a=function(e){var t=void 0===e?{}:e,n=t.slot,r=void 0===n?{}:n,i=t.name,s=void 0===i?"Label":i,a=t.props,c=void 0===a?{}:a,l=(0,o.ref)([]);return(0,o.provide)(f,{register:function(e){return l.value.push(e),function(){var t=l.value.indexOf(e);-1!==t&&l.value.splice(t,1)}},slot:r,name:s,props:c}),(0,o.computed)((function(){return l.value.length>0?l.value.join(" "):void 0}))}({name:"SwitchLabel",props:{onClick:function(){s.value&&(s.value.click(),s.value.focus({preventScroll:!0}))}}}),l=(0,c.f)({name:"SwitchDescription"}),u={switchRef:s,labelledby:a,describedby:l};return(0,o.provide)(h,u),function(){return(0,i.sY)({props:e,slot:{},slots:n,attrs:r,name:"SwitchGroup"})}}}),m=(0,o.defineComponent)({name:"Switch",emits:{"update:modelValue":function(e){return!0}},props:{as:{type:[Object,String],default:"button"},modelValue:{type:Boolean,default:!1}},render:function(){var e={checked:this.$props.modelValue},t={id:this.id,ref:"el",role:"switch",type:this.type,tabIndex:0,"aria-checked":this.$props.modelValue,"aria-labelledby":this.labelledby,"aria-describedby":this.describedby,onClick:this.handleClick,onKeyup:this.handleKeyUp,onKeypress:this.handleKeyPress};return(0,i.sY)({props:(0,r.gY)({},this.$props,t),slot:e,attrs:this.$attrs,slots:this.$slots,name:"Switch"})},setup:function(e,t){var n=t.emit,r=t.attrs,i=(0,o.inject)(h,null),c="headlessui-switch-"+(0,a.M)();function f(){n("update:modelValue",!e.modelValue)}var p,d,v,m=(0,o.ref)(null),y=null===i?m:i.switchRef;return{id:c,el:y,type:(p=(0,o.computed)((function(){return{as:e.as,type:r.type}})),d=y,v=(0,o.ref)(u(p.value.type,p.value.as)),(0,o.onMounted)((function(){v.value=u(p.value.type,p.value.as)})),(0,o.watchEffect)((function(){var e;v.value||(0,l.v)(d)&&(0,l.v)(d)instanceof HTMLButtonElement&&!(null==(e=(0,l.v)(d))?void 0:e.hasAttribute("type"))&&(v.value="button")})),v),labelledby:null==i?void 0:i.labelledby,describedby:null==i?void 0:i.describedby,handleClick:function(e){e.preventDefault(),f()},handleKeyUp:function(e){e.key!==s.R.Tab&&e.preventDefault(),e.key===s.R.Space&&f()},handleKeyPress:function(e){e.preventDefault()}}}}),y=d;c.d},2494:(e,t,n)=>{"use strict";n.d(t,{x:()=>_,Q:()=>x});var r,o=n(1988),i=n(821),s=n(3343),a=n(574),c=n(2122),l=n(779),u=n(1357);function f(){var e=[],t={requestAnimationFrame:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(){var e=requestAnimationFrame.apply(void 0,arguments);t.add((function(){return cancelAnimationFrame(e)}))})),nextFrame:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.requestAnimationFrame((function(){t.requestAnimationFrame.apply(t,n)}))},setTimeout:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(){var e=setTimeout.apply(void 0,arguments);t.add((function(){return clearTimeout(e)}))})),add:function(t){e.push(t)},dispose:function(){for(var t,n=(0,o.Ul)(e.splice(0));!(t=n()).done;){var r=t.value;r()}}};return t}function p(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e&&r.length>0&&(t=e.classList).add.apply(t,r)}function d(e){for(var t,n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];e&&r.length>0&&(t=e.classList).remove.apply(t,r)}function h(e,t,n,o,i,s){var a,c,l=f(),u=void 0!==s?(a=s,c={called:!1},function(){if(!c.called)return c.called=!0,a.apply(void 0,arguments)}):function(){};return d.apply(void 0,[e].concat(i)),p.apply(void 0,[e].concat(t,n)),l.nextFrame((function(){d.apply(void 0,[e].concat(n)),p.apply(void 0,[e].concat(o)),l.add(function(e,t){var n=f();if(!e)return n.dispose;var o=getComputedStyle(e),i=[o.transitionDuration,o.transitionDelay].map((function(e){var t=e.split(",").filter(Boolean).map((function(e){return e.includes("ms")?parseFloat(e):1e3*parseFloat(e)})).sort((function(e,t){return t-e}))[0];return void 0===t?0:t})),s=i[0],a=i[1];return 0!==s?n.setTimeout((function(){return t(r.Finished)}),s+a):t(r.Finished),n.add((function(){return t(r.Cancelled)})),n.dispose}(e,(function(n){return d.apply(void 0,[e].concat(o,t)),p.apply(void 0,[e].concat(i)),u(n)})))})),l.add((function(){return d.apply(void 0,[e].concat(t,n,o,i))})),l.add((function(){return u(r.Cancelled)})),l.dispose}function v(e){return void 0===e&&(e=""),e.split(" ").filter((function(e){return e.trim().length>1}))}!function(e){e.Finished="finished",e.Cancelled="cancelled"}(r||(r={}));var m,y=Symbol("TransitionContext");!function(e){e.Visible="visible",e.Hidden="hidden"}(m||(m={}));var g=Symbol("NestingContext");function b(e){return"children"in e?b(e.children):e.value.filter((function(e){return e.state===m.Visible})).length>0}function w(e){var t=(0,i.ref)([]),n=(0,i.ref)(!1);function r(r,o){var i;void 0===o&&(o=a.l4.Hidden);var c=t.value.findIndex((function(e){return e.id===r}));-1!==c&&((0,s.E)(o,((i={})[a.l4.Unmount]=function(){t.value.splice(c,1)},i[a.l4.Hidden]=function(){t.value[c].state=m.Hidden},i)),!b(t)&&n.value&&(null==e||e()))}return(0,i.onMounted)((function(){return n.value=!0})),(0,i.onUnmounted)((function(){return n.value=!1})),{children:t,register:function(e){var n=t.value.find((function(t){return t.id===e}));return n?n.state!==m.Visible&&(n.state=m.Visible):t.value.push({id:e,state:m.Visible}),function(){return r(e,a.l4.Unmount)}},unregister:r}}var S=a.AN.RenderStrategy,_=(0,i.defineComponent)({props:{as:{type:[Object,String],default:"div"},show:{type:[Boolean],default:null},unmount:{type:[Boolean],default:!0},appear:{type:[Boolean],default:!1},enter:{type:[String],default:""},enterFrom:{type:[String],default:""},enterTo:{type:[String],default:""},entered:{type:[String],default:""},leave:{type:[String],default:""},leaveFrom:{type:[String],default:""},leaveTo:{type:[String],default:""}},emits:{beforeEnter:function(){return!0},afterEnter:function(){return!0},beforeLeave:function(){return!0},afterLeave:function(){return!0}},render:function(){var e=this;if(this.renderAsRoot)return(0,i.h)(x,(0,o.gY)({},this.$props,{onBeforeEnter:function(){return e.$emit("beforeEnter")},onAfterEnter:function(){return e.$emit("afterEnter")},onBeforeLeave:function(){return e.$emit("beforeLeave")},onAfterLeave:function(){return e.$emit("afterLeave")}}),this.$slots);var t=this.$props,n=(0,o.gK)(t,["appear","show","enter","enterFrom","enterTo","entered","leave","leaveFrom","leaveTo"]);return(0,a.sY)({props:(0,o.gY)({},n,{ref:"el"}),slot:{},slots:this.$slots,attrs:this.$attrs,features:S,visible:this.state===m.Visible,name:"TransitionChild"})},setup:function(e,t){var n=t.emit;if(null===(0,i.inject)(y,null)&&(0,u.ih)())return{renderAsRoot:!0};var o=(0,i.ref)(null),f=(0,i.ref)(m.Visible),p=(0,i.computed)((function(){return e.unmount?a.l4.Unmount:a.l4.Hidden})),d=function(){var e=(0,i.inject)(y,null);if(null===e)throw new Error("A <TransitionChild /> is used but it is missing a parent <TransitionRoot />.");return e}(),S=d.show,_=d.appear,x=function(){var e=(0,i.inject)(g,null);if(null===e)throw new Error("A <TransitionChild /> is used but it is missing a parent <TransitionRoot />.");return e}(),k=x.register,E=x.unregister,C={value:!0},O=(0,c.M)(),j={value:!1},A=w((function(){j.value||(f.value=m.Hidden,E(O),n("afterLeave"))}));(0,i.onMounted)((function(){var e=k(O);(0,i.onUnmounted)(e)})),(0,i.watchEffect)((function(){var e;p.value===a.l4.Hidden&&O&&(S&&f.value!==m.Visible?f.value=m.Visible:(0,s.E)(f.value,((e={})[m.Hidden]=function(){return E(O)},e[m.Visible]=function(){return k(O)},e)))}));var T=v(e.enter),P=v(e.enterFrom),N=v(e.enterTo),M=v(e.entered),R=v(e.leave),L=v(e.leaveFrom),F=v(e.leaveTo);return(0,i.onMounted)((function(){(0,i.watchEffect)((function(){if(f.value===m.Visible){var e=(0,l.v)(o);if(e instanceof Comment&&""===e.data)throw new Error("Did you forget to passthrough the `ref` to the actual DOM node?")}}))})),(0,i.onMounted)((function(){(0,i.watch)([S,_],(function(e,t,i){!function(e){var t=C.value&&!_.value,i=(0,l.v)(o);i&&i instanceof HTMLElement&&(t||(j.value=!0,S.value&&n("beforeEnter"),S.value||n("beforeLeave"),e(S.value?h(i,T,P,N,M,(function(e){j.value=!1,e===r.Finished&&n("afterEnter")})):h(i,R,L,F,M,(function(e){j.value=!1,e===r.Finished&&(b(A)||(f.value=m.Hidden,E(O),n("afterLeave")))})))))}(i),C.value=!1}),{immediate:!0})})),(0,i.provide)(g,A),(0,u.Rb)((0,i.computed)((function(){var e;return(0,s.E)(f.value,((e={})[m.Visible]=u.ZM.Open,e[m.Hidden]=u.ZM.Closed,e))}))),{el:o,renderAsRoot:!1,state:f}}}),x=(0,i.defineComponent)({inheritAttrs:!1,props:{as:{type:[Object,String],default:"div"},show:{type:[Boolean],default:null},unmount:{type:[Boolean],default:!0},appear:{type:[Boolean],default:!1},enter:{type:[String],default:""},enterFrom:{type:[String],default:""},enterTo:{type:[String],default:""},entered:{type:[String],default:""},leave:{type:[String],default:""},leaveFrom:{type:[String],default:""},leaveTo:{type:[String],default:""}},emits:{beforeEnter:function(){return!0},afterEnter:function(){return!0},beforeLeave:function(){return!0},afterLeave:function(){return!0}},render:function(){var e=this,t=this.$props,n=t.unmount,r=(0,o.gK)(t,["show","appear","unmount"]),s={unmount:n};return(0,a.sY)({props:(0,o.gY)({},s,{as:"template"}),slot:{},slots:(0,o.gY)({},this.$slots,{default:function(){return[(0,i.h)(_,(0,o.gY)({onBeforeEnter:function(){return e.$emit("beforeEnter")},onAfterEnter:function(){return e.$emit("afterEnter")},onBeforeLeave:function(){return e.$emit("beforeLeave")},onAfterLeave:function(){return e.$emit("afterLeave")}},e.$attrs,s,r),e.$slots.default)]}}),attrs:{},features:S,visible:this.state===m.Visible,name:"Transition"})},setup:function(e){var t=(0,u.oJ)(),n=(0,i.computed)((function(){var n;return null===e.show&&null!==t?(0,s.E)(t.value,((n={})[u.ZM.Open]=!0,n[u.ZM.Closed]=!1,n)):e.show}));(0,i.watchEffect)((function(){if(![!0,!1].includes(n.value))throw new Error('A <Transition /> is used but it is missing a `:show="true | false"` prop.')}));var r=(0,i.ref)(n.value?m.Visible:m.Hidden),o=w((function(){r.value=m.Hidden})),a={value:!0},c={show:n,appear:(0,i.computed)((function(){return e.appear||!a.value}))};return(0,i.onMounted)((function(){(0,i.watchEffect)((function(){a.value=!1,n.value?r.value=m.Visible:b(o)||(r.value=m.Hidden)}))})),(0,i.provide)(g,o),(0,i.provide)(y,c),{state:r,show:n}}})},2122:(e,t,n)=>{"use strict";n.d(t,{M:()=>o});var r=0;function o(){return++r}},1357:(e,t,n)=>{"use strict";n.d(t,{ZM:()=>r,ih:()=>s,oJ:()=>a,Rb:()=>c});var r,o=n(821),i=Symbol("Context");function s(){return null!==a()}function a(){return(0,o.inject)(i,null)}function c(e){(0,o.provide)(i,e)}!function(e){e[e.Open=0]="Open",e[e.Closed=1]="Closed"}(r||(r={}))},9639:(e,t,n)=>{"use strict";var r;n.d(t,{R:()=>r}),function(e){e.Space=" ",e.Enter="Enter",e.Escape="Escape",e.Backspace="Backspace",e.ArrowLeft="ArrowLeft",e.ArrowUp="ArrowUp",e.ArrowRight="ArrowRight",e.ArrowDown="ArrowDown",e.Home="Home",e.End="End",e.PageUp="PageUp",e.PageDown="PageDown",e.Tab="Tab"}(r||(r={}))},779:(e,t,n)=>{"use strict";function r(e){var t;return null==e||null==e.value?null:null!=(t=e.value.$el)?t:e.value}n.d(t,{v:()=>r})},3343:(e,t,n)=>{"use strict";function r(e,t){if(e in t){for(var n=t[e],o=arguments.length,i=new Array(o>2?o-2:0),s=2;s<o;s++)i[s-2]=arguments[s];return"function"==typeof n?n.apply(void 0,i):n}var a=new Error('Tried to handle "'+e+'" but there is no handler defined. Only defined handlers are: '+Object.keys(t).map((function(e){return'"'+e+'"'})).join(", ")+".");throw Error.captureStackTrace&&Error.captureStackTrace(a,r),a}n.d(t,{E:()=>r})},574:(e,t,n)=>{"use strict";n.d(t,{AN:()=>r,l4:()=>o,sY:()=>c});var r,o,i=n(1988),s=n(821),a=n(3343);function c(e){var t=e.visible,n=void 0===t||t,s=e.features,c=void 0===s?r.None:s,u=(0,i.gK)(e,["visible","features"]);if(n)return l(u);if(c&r.Static&&u.props.static)return l(u);if(c&r.RenderStrategy){var f,p,d=null==(f=u.props.unmount)||f?o.Unmount:o.Hidden;return(0,a.E)(d,((p={})[o.Unmount]=function(){return null},p[o.Hidden]=function(){return l((0,i.gY)({},u,{props:(0,i.gY)({},u.props,{hidden:!0,style:{display:"none"}})}))},p))}return l(u)}function l(e){var t,n=e.props,r=e.attrs,o=e.slots,a=e.slot,c=e.name,l=function(e,t){void 0===t&&(t=[]);for(var n,r=Object.assign({},e),o=(0,i.Ul)(t);!(n=o()).done;){var s=n.value;s in r&&delete r[s]}return r}(n,["unmount","static"]),u=l.as,f=(0,i.gK)(l,["as"]),p=null==o.default?void 0:o.default(a);if("template"===u){if(Object.keys(f).length>0||Object.keys(r).length>0){var d=null!=p?p:[],h=d[0],v=d.slice(1);if(null==(t=h)||"string"!=typeof t.type&&"object"!=typeof t.type&&"function"!=typeof t.type||v.length>0)throw new Error(['Passing props on "template"!',"","The current component <"+c+' /> is rendering a "template".',"However we need to passthrough the following props:",Object.keys(f).concat(Object.keys(r)).map((function(e){return"  - "+e})).join("\n"),"","You can apply a few solutions:",['Add an `as="..."` prop, to ensure that we render an actual element instead of a "template".',"Render a single element as the child so that we can forward the props onto that element."].map((function(e){return"  - "+e})).join("\n")].join("\n"));return(0,s.cloneVNode)(h,f)}return Array.isArray(p)&&1===p.length?p[0]:p}return(0,s.h)(u,f,p)}!function(e){e[e.None=0]="None",e[e.RenderStrategy=1]="RenderStrategy",e[e.Static=2]="Static"}(r||(r={})),function(e){e[e.Unmount=0]="Unmount",e[e.Hidden=1]="Hidden"}(o||(o={}))},9038:(e,t,n)=>{function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var o=r(n(2307)),i=n(821),s=r(n(3465)),a=n(9680);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(){var e=[].slice.call(arguments),t="string"==typeof e[0]?e[0]:null,n=("string"==typeof e[0]?e[1]:e[0])||{},r=t?a.Inertia.restore(t):null,l=s(n),u=null,f=null,p=function(e){return e},d=i.reactive(c({},r?r.data:n,{isDirty:!1,errors:r?r.errors:{},hasErrors:!1,processing:!1,progress:null,wasSuccessful:!1,recentlySuccessful:!1,data:function(){var e=this;return Object.keys(n).reduce((function(t,n){return t[n]=e[n],t}),{})},transform:function(e){return p=e,this},defaults:function(e,t){var n;return l=void 0===e?this.data():Object.assign({},s(l),t?((n={})[e]=t,n):e),this},reset:function(){var e=[].slice.call(arguments),t=s(l);return Object.assign(this,0===e.length?t:Object.keys(t).filter((function(t){return e.includes(t)})).reduce((function(e,n){return e[n]=t[n],e}),{})),this},setError:function(e,t){var n;return Object.assign(this.errors,t?((n={})[e]=t,n):e),this.hasErrors=Object.keys(this.errors).length>0,this},clearErrors:function(){var e=this,t=[].slice.call(arguments);return this.errors=Object.keys(this.errors).reduce((function(n,r){var o;return c({},n,t.length>0&&!t.includes(r)?((o={})[r]=e.errors[r],o):{})}),{}),this.hasErrors=Object.keys(this.errors).length>0,this},submit:function(e,t,n){var r=this,o=this;void 0===n&&(n={});var i=p(this.data()),d=c({},n,{onCancelToken:function(e){if(u=e,n.onCancelToken)return n.onCancelToken(e)},onBefore:function(e){if(o.wasSuccessful=!1,o.recentlySuccessful=!1,clearTimeout(f),n.onBefore)return n.onBefore(e)},onStart:function(e){if(o.processing=!0,n.onStart)return n.onStart(e)},onProgress:function(e){if(o.progress=e,n.onProgress)return n.onProgress(e)},onSuccess:function(e){try{var t=function(e){return l=s(r.data()),r.isDirty=!1,e};return r.processing=!1,r.progress=null,r.clearErrors(),r.wasSuccessful=!0,r.recentlySuccessful=!0,f=setTimeout((function(){return r.recentlySuccessful=!1}),2e3),Promise.resolve(n.onSuccess?Promise.resolve(n.onSuccess(e)).then(t):t(null))}catch(e){return Promise.reject(e)}},onError:function(e){if(o.processing=!1,o.progress=null,o.clearErrors().setError(e),n.onError)return n.onError(e)},onCancel:function(){if(o.processing=!1,o.progress=null,n.onCancel)return n.onCancel()},onFinish:function(){if(o.processing=!1,o.progress=null,u=null,n.onFinish)return n.onFinish()}});"delete"===e?a.Inertia.delete(t,c({},d,{data:i})):a.Inertia[e](t,i,d)},get:function(e,t){this.submit("get",e,t)},post:function(e,t){this.submit("post",e,t)},put:function(e,t){this.submit("put",e,t)},patch:function(e,t){this.submit("patch",e,t)},delete:function(e,t){this.submit("delete",e,t)},cancel:function(){u&&u.cancel()},__rememberable:null===t,__remember:function(){return{data:this.data(),errors:this.errors}},__restore:function(e){Object.assign(this,e.data),this.setError(e.errors)}}));return i.watch(d,(function(e){d.isDirty=!o(d.data(),l),t&&a.Inertia.remember(s(e.__remember()),t)}),{immediate:!0,deep:!0}),d}var u={created:function(){var e=this;if(this.$options.remember){Array.isArray(this.$options.remember)&&(this.$options.remember={data:this.$options.remember}),"string"==typeof this.$options.remember&&(this.$options.remember={data:[this.$options.remember]}),"string"==typeof this.$options.remember.data&&(this.$options.remember={data:[this.$options.remember.data]});var t=this.$options.remember.key instanceof Function?this.$options.remember.key.call(this):this.$options.remember.key,n=a.Inertia.restore(t),r=this.$options.remember.data.filter((function(t){return!(null!==e[t]&&"object"==typeof e[t]&&!1===e[t].__rememberable)})),o=function(t){return null!==e[t]&&"object"==typeof e[t]&&"function"==typeof e[t].__remember&&"function"==typeof e[t].__restore};r.forEach((function(i){void 0!==e[i]&&void 0!==n&&void 0!==n[i]&&(o(i)?e[i].__restore(n[i]):e[i]=n[i]),e.$watch(i,(function(){a.Inertia.remember(r.reduce((function(t,n){var r;return c({},t,((r={})[n]=s(o(n)?e[n].__remember():e[n]),r))}),{}),t)}),{immediate:!0,deep:!0})}))}}},f=i.ref(null),p=i.ref({}),d=i.ref(null),h=null,v={name:"Inertia",props:{initialPage:{type:Object,required:!0},initialComponent:{type:Object,required:!1},resolveComponent:{type:Function,required:!1},titleCallback:{type:Function,required:!1,default:function(e){return e}},onHeadUpdate:{type:Function,required:!1,default:function(){return function(){}}}},setup:function(e){var t=e.initialPage,n=e.initialComponent,r=e.resolveComponent,o=e.titleCallback,s=e.onHeadUpdate;f.value=n?i.markRaw(n):null,p.value=t,d.value=null;var l="undefined"==typeof window;return h=a.createHeadManager(l,o,s),l||a.Inertia.init({initialPage:t,resolveComponent:r,swapComponent:function(e){try{return f.value=i.markRaw(e.component),p.value=e.page,d.value=e.preserveState?d.value:Date.now(),Promise.resolve()}catch(e){return Promise.reject(e)}}}),function(){if(f.value){f.value.inheritAttrs=!!f.value.inheritAttrs;var e=i.h(f.value,c({},p.value.props,{key:d.value}));return f.value.layout?"function"==typeof f.value.layout?f.value.layout(i.h,e):(Array.isArray(f.value.layout)?f.value.layout:[f.value.layout]).concat(e).reverse().reduce((function(e,t){return t.inheritAttrs=!!t.inheritAttrs,i.h(t,c({},p.value.props),(function(){return e}))})):e}}}},m={install:function(e){a.Inertia.form=l,Object.defineProperty(e.config.globalProperties,"$inertia",{get:function(){return a.Inertia}}),Object.defineProperty(e.config.globalProperties,"$page",{get:function(){return p.value}}),Object.defineProperty(e.config.globalProperties,"$headManager",{get:function(){return h}}),e.mixin(u)}},y={props:{title:{type:String,required:!1}},data:function(){return{provider:this.$headManager.createProvider()}},beforeUnmount:function(){this.provider.disconnect()},methods:{isUnaryTag:function(e){return["area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"].indexOf(e.type)>-1},renderTagStart:function(e){e.props=e.props||{},e.props.inertia=void 0!==e.props["head-key"]?e.props["head-key"]:"";var t=Object.keys(e.props).reduce((function(t,n){var r=e.props[n];return["key","head-key"].includes(n)?t:""===r?t+" "+n:t+" "+n+'="'+r+'"'}),"");return"<"+e.type+t+">"},renderTagChildren:function(e){var t=this;return"string"==typeof e.children?e.children:e.children.reduce((function(e,n){return e+t.renderTag(n)}),"")},renderTag:function(e){if("Symbol(Text)"===e.type.toString())return e.children;if("Symbol()"===e.type.toString())return"";if("Symbol(Comment)"===e.type.toString())return"";var t=this.renderTagStart(e);return e.children&&(t+=this.renderTagChildren(e)),this.isUnaryTag(e)||(t+="</"+e.type+">"),t},addTitleElement:function(e){return this.title&&!e.find((function(e){return e.startsWith("<title")}))&&e.push("<title inertia>"+this.title+"</title>"),e},renderNodes:function(e){var t=this;return this.addTitleElement(e.flatMap((function(e){return"Symbol(Fragment)"===e.type.toString()?e.children:e})).map((function(e){return t.renderTag(e)})).filter((function(e){return e})))}},render:function(){this.provider.update(this.renderNodes(this.$slots.default?this.$slots.default():[]))}},g={name:"InertiaLink",props:{as:{type:String,default:"a"},data:{type:Object,default:function(){return{}}},href:{type:String},method:{type:String,default:"get"},replace:{type:Boolean,default:!1},preserveScroll:{type:Boolean,default:!1},preserveState:{type:Boolean,default:null},only:{type:Array,default:function(){return[]}},headers:{type:Object,default:function(){return{}}},queryStringArrayFormat:{type:String,default:"brackets"}},setup:function(e,t){var n=t.slots,r=t.attrs;return function(e){var t=e.as.toLowerCase(),o=e.method.toLowerCase(),s=a.mergeDataIntoQueryString(o,e.href||"",e.data,e.queryStringArrayFormat),l=s[0],u=s[1];return"a"===t&&"get"!==o&&console.warn('Creating POST/PUT/PATCH/DELETE <a> links is discouraged as it causes "Open Link in New Tab/Window" accessibility issues.\n\nPlease specify a more appropriate element using the "as" attribute. For example:\n\n<Link href="'+l+'" method="'+o+'" as="button">...</Link>'),i.h(e.as,c({},r,"a"===t?{href:l}:{},{onClick:function(t){var n;a.shouldIntercept(t)&&(t.preventDefault(),a.Inertia.visit(l,{data:u,method:o,replace:e.replace,preserveScroll:e.preserveScroll,preserveState:null!=(n=e.preserveState)?n:"get"!==o,only:e.only,headers:e.headers,onCancelToken:r.onCancelToken||function(){return{}},onBefore:r.onBefore||function(){return{}},onStart:r.onStart||function(){return{}},onProgress:r.onProgress||function(){return{}},onFinish:r.onFinish||function(){return{}},onCancel:r.onCancel||function(){return{}},onSuccess:r.onSuccess||function(){return{}},onError:r.onError||function(){return{}}}))}}),n)}}};t.Fb=y,t.rU=g,t.yP=function(e){try{var t,n,r,o,s,a,c;n=void 0===(t=e.id)?"app":t,r=e.resolve,o=e.setup,s=e.title,a=e.page,c=e.render;var l="undefined"==typeof window,u=l?null:document.getElementById(n),f=a||JSON.parse(u.dataset.page),p=function(e){return Promise.resolve(r(e)).then((function(e){return e.default||e}))},d=[];return Promise.resolve(p(f.component).then((function(e){return o({el:u,app:v,App:v,props:{initialPage:f,initialComponent:e,resolveComponent:p,titleCallback:s,onHeadUpdate:l?function(e){return d=e}:null},plugin:m})}))).then((function(e){return function(){if(l)return Promise.resolve(c(i.createSSRApp({render:function(){return i.h("div",{id:n,"data-page":JSON.stringify(f),innerHTML:c(e)})}}))).then((function(e){return{head:d,body:e}}))}()}))}catch(e){return Promise.reject(e)}},t.cI=l},9680:(e,t,n)=>{function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var o=r(n(9669)),i=n(129),s=r(n(9996));function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var c,l={modal:null,listener:null,show:function(e){var t=this;"object"==typeof e&&(e="All Inertia requests must receive a valid Inertia response, however a plain JSON response was received.<hr>"+JSON.stringify(e));var n=document.createElement("html");n.innerHTML=e,n.querySelectorAll("a").forEach((function(e){return e.setAttribute("target","_top")})),this.modal=document.createElement("div"),this.modal.style.position="fixed",this.modal.style.width="100vw",this.modal.style.height="100vh",this.modal.style.padding="50px",this.modal.style.boxSizing="border-box",this.modal.style.backgroundColor="rgba(0, 0, 0, .6)",this.modal.style.zIndex=2e5,this.modal.addEventListener("click",(function(){return t.hide()}));var r=document.createElement("iframe");if(r.style.backgroundColor="white",r.style.borderRadius="5px",r.style.width="100%",r.style.height="100%",this.modal.appendChild(r),document.body.prepend(this.modal),document.body.style.overflow="hidden",!r.contentWindow)throw new Error("iframe not yet ready.");r.contentWindow.document.open(),r.contentWindow.document.write(n.outerHTML),r.contentWindow.document.close(),this.listener=this.hideOnEscape.bind(this),document.addEventListener("keydown",this.listener)},hide:function(){this.modal.outerHTML="",this.modal=null,document.body.style.overflow="visible",document.removeEventListener("keydown",this.listener)},hideOnEscape:function(e){27===e.keyCode&&this.hide()}};function u(e,t){var n;return function(){var r=arguments,o=this;clearTimeout(n),n=setTimeout((function(){return e.apply(o,[].slice.call(r))}),t)}}function f(e,t,n){for(var r in void 0===t&&(t=new FormData),void 0===n&&(n=null),e=e||{})Object.prototype.hasOwnProperty.call(e,r)&&d(t,p(n,r),e[r]);return t}function p(e,t){return e?e+"["+t+"]":t}function d(e,t,n){return Array.isArray(n)?Array.from(n.keys()).forEach((function(r){return d(e,p(t,r.toString()),n[r])})):n instanceof Date?e.append(t,n.toISOString()):n instanceof File?e.append(t,n,n.name):n instanceof Blob?e.append(t,n):"boolean"==typeof n?e.append(t,n?"1":"0"):"string"==typeof n?e.append(t,n):"number"==typeof n?e.append(t,""+n):null==n?e.append(t,""):void f(n,e,t)}function h(e){return new URL(e.toString(),window.location.toString())}function v(e,n,r,o){void 0===o&&(o="brackets");var a=/^https?:\/\//.test(n.toString()),c=a||n.toString().startsWith("/"),l=!c&&!n.toString().startsWith("#")&&!n.toString().startsWith("?"),u=n.toString().includes("?")||e===t.Method.GET&&Object.keys(r).length,f=n.toString().includes("#"),p=new URL(n.toString(),"http://localhost");return e===t.Method.GET&&Object.keys(r).length&&(p.search=i.stringify(s(i.parse(p.search,{ignoreQueryPrefix:!0}),r),{encodeValuesOnly:!0,arrayFormat:o}),r={}),[[a?p.protocol+"//"+p.host:"",c?p.pathname:"",l?p.pathname.substring(1):"",u?p.search:"",f?p.hash:""].join(""),r]}function m(e){return(e=new URL(e.href)).hash="",e}function y(e,t){return document.dispatchEvent(new CustomEvent("inertia:"+e,t))}(c=t.Method||(t.Method={})).GET="get",c.POST="post",c.PUT="put",c.PATCH="patch",c.DELETE="delete";var g=function(e){return y("finish",{detail:{visit:e}})},b=function(e){return y("navigate",{detail:{page:e}})},w="undefined"==typeof window,S=function(){function e(){this.visitId=null}var n=e.prototype;return n.init=function(e){var t=e.resolveComponent,n=e.swapComponent;this.page=e.initialPage,this.resolveComponent=t,this.swapComponent=n,this.isBackForwardVisit()?this.handleBackForwardVisit(this.page):this.isLocationVisit()?this.handleLocationVisit(this.page):this.handleInitialPageVisit(this.page),this.setupEventListeners()},n.handleInitialPageVisit=function(e){this.page.url+=window.location.hash,this.setPage(e,{preserveState:!0}).then((function(){return b(e)}))},n.setupEventListeners=function(){window.addEventListener("popstate",this.handlePopstateEvent.bind(this)),document.addEventListener("scroll",u(this.handleScrollEvent.bind(this),100),!0)},n.scrollRegions=function(){return document.querySelectorAll("[scroll-region]")},n.handleScrollEvent=function(e){"function"==typeof e.target.hasAttribute&&e.target.hasAttribute("scroll-region")&&this.saveScrollPositions()},n.saveScrollPositions=function(){this.replaceState(a({},this.page,{scrollRegions:Array.from(this.scrollRegions()).map((function(e){return{top:e.scrollTop,left:e.scrollLeft}}))}))},n.resetScrollPositions=function(){var e;document.documentElement.scrollTop=0,document.documentElement.scrollLeft=0,this.scrollRegions().forEach((function(e){e.scrollTop=0,e.scrollLeft=0})),this.saveScrollPositions(),window.location.hash&&(null==(e=document.getElementById(window.location.hash.slice(1)))||e.scrollIntoView())},n.restoreScrollPositions=function(){var e=this;this.page.scrollRegions&&this.scrollRegions().forEach((function(t,n){var r=e.page.scrollRegions[n];r&&(t.scrollTop=r.top,t.scrollLeft=r.left)}))},n.isBackForwardVisit=function(){return window.history.state&&window.performance&&window.performance.getEntriesByType("navigation").length>0&&"back_forward"===window.performance.getEntriesByType("navigation")[0].type},n.handleBackForwardVisit=function(e){var t=this;window.history.state.version=e.version,this.setPage(window.history.state,{preserveScroll:!0,preserveState:!0}).then((function(){t.restoreScrollPositions(),b(e)}))},n.locationVisit=function(e,t){try{window.sessionStorage.setItem("inertiaLocationVisit",JSON.stringify({preserveScroll:t})),window.location.href=e.href,m(window.location).href===m(e).href&&window.location.reload()}catch(e){return!1}},n.isLocationVisit=function(){try{return null!==window.sessionStorage.getItem("inertiaLocationVisit")}catch(e){return!1}},n.handleLocationVisit=function(e){var t,n,r,o,i=this,s=JSON.parse(window.sessionStorage.getItem("inertiaLocationVisit")||"");window.sessionStorage.removeItem("inertiaLocationVisit"),e.url+=window.location.hash,e.rememberedState=null!=(t=null==(n=window.history.state)?void 0:n.rememberedState)?t:{},e.scrollRegions=null!=(r=null==(o=window.history.state)?void 0:o.scrollRegions)?r:[],this.setPage(e,{preserveScroll:s.preserveScroll,preserveState:!0}).then((function(){s.preserveScroll&&i.restoreScrollPositions(),b(e)}))},n.isLocationVisitResponse=function(e){return e&&409===e.status&&e.headers["x-inertia-location"]},n.isInertiaResponse=function(e){return null==e?void 0:e.headers["x-inertia"]},n.createVisitId=function(){return this.visitId={},this.visitId},n.cancelVisit=function(e,t){var n=t.cancelled,r=void 0!==n&&n,o=t.interrupted,i=void 0!==o&&o;!e||e.completed||e.cancelled||e.interrupted||(e.cancelToken.cancel(),e.onCancel(),e.completed=!1,e.cancelled=r,e.interrupted=i,g(e),e.onFinish(e))},n.finishVisit=function(e){e.cancelled||e.interrupted||(e.completed=!0,e.cancelled=!1,e.interrupted=!1,g(e),e.onFinish(e))},n.resolvePreserveOption=function(e,t){return"function"==typeof e?e(t):"errors"===e?Object.keys(t.props.errors||{}).length>0:e},n.visit=function(e,n){var r=this,i=void 0===n?{}:n,s=i.method,c=void 0===s?t.Method.GET:s,u=i.data,p=void 0===u?{}:u,d=i.replace,g=void 0!==d&&d,b=i.preserveScroll,w=void 0!==b&&b,S=i.preserveState,_=void 0!==S&&S,x=i.only,k=void 0===x?[]:x,E=i.headers,C=void 0===E?{}:E,O=i.errorBag,j=void 0===O?"":O,A=i.forceFormData,T=void 0!==A&&A,P=i.onCancelToken,N=void 0===P?function(){}:P,M=i.onBefore,R=void 0===M?function(){}:M,L=i.onStart,F=void 0===L?function(){}:L,I=i.onProgress,B=void 0===I?function(){}:I,V=i.onFinish,$=void 0===V?function(){}:V,U=i.onCancel,D=void 0===U?function(){}:U,H=i.onSuccess,z=void 0===H?function(){}:H,W=i.onError,q=void 0===W?function(){}:W,G=i.queryStringArrayFormat,K=void 0===G?"brackets":G,J="string"==typeof e?h(e):e;if(!function e(t){return t instanceof File||t instanceof Blob||t instanceof FileList&&t.length>0||t instanceof FormData&&Array.from(t.values()).some((function(t){return e(t)}))||"object"==typeof t&&null!==t&&Object.values(t).some((function(t){return e(t)}))}(p)&&!T||p instanceof FormData||(p=f(p)),!(p instanceof FormData)){var Y=v(c,J,p,K),Q=Y[1];J=h(Y[0]),p=Q}var X={url:J,method:c,data:p,replace:g,preserveScroll:w,preserveState:_,only:k,headers:C,errorBag:j,forceFormData:T,queryStringArrayFormat:K,cancelled:!1,completed:!1,interrupted:!1};if(!1!==R(X)&&function(e){return y("before",{cancelable:!0,detail:{visit:e}})}(X)){this.activeVisit&&this.cancelVisit(this.activeVisit,{interrupted:!0}),this.saveScrollPositions();var Z=this.createVisitId();this.activeVisit=a({},X,{onCancelToken:N,onBefore:R,onStart:F,onProgress:B,onFinish:$,onCancel:D,onSuccess:z,onError:q,queryStringArrayFormat:K,cancelToken:o.CancelToken.source()}),N({cancel:function(){r.activeVisit&&r.cancelVisit(r.activeVisit,{cancelled:!0})}}),function(e){y("start",{detail:{visit:e}})}(X),F(X),o({method:c,url:m(J).href,data:c===t.Method.GET?{}:p,params:c===t.Method.GET?p:{},cancelToken:this.activeVisit.cancelToken.token,headers:a({},C,{Accept:"text/html, application/xhtml+xml","X-Requested-With":"XMLHttpRequest","X-Inertia":!0},k.length?{"X-Inertia-Partial-Component":this.page.component,"X-Inertia-Partial-Data":k.join(",")}:{},j&&j.length?{"X-Inertia-Error-Bag":j}:{},this.page.version?{"X-Inertia-Version":this.page.version}:{}),onUploadProgress:function(e){p instanceof FormData&&(e.percentage=Math.round(e.loaded/e.total*100),function(e){y("progress",{detail:{progress:e}})}(e),B(e))}}).then((function(e){var t;if(!r.isInertiaResponse(e))return Promise.reject({response:e});var n=e.data;k.length&&n.component===r.page.component&&(n.props=a({},r.page.props,n.props)),w=r.resolvePreserveOption(w,n),(_=r.resolvePreserveOption(_,n))&&null!=(t=window.history.state)&&t.rememberedState&&n.component===r.page.component&&(n.rememberedState=window.history.state.rememberedState);var o=J,i=h(n.url);return o.hash&&!i.hash&&m(o).href===i.href&&(i.hash=o.hash,n.url=i.href),r.setPage(n,{visitId:Z,replace:g,preserveScroll:w,preserveState:_})})).then((function(){var e=r.page.props.errors||{};if(Object.keys(e).length>0){var t=j?e[j]?e[j]:{}:e;return function(e){y("error",{detail:{errors:e}})}(t),q(t)}return y("success",{detail:{page:r.page}}),z(r.page)})).catch((function(e){if(r.isInertiaResponse(e.response))return r.setPage(e.response.data,{visitId:Z});if(r.isLocationVisitResponse(e.response)){var t=h(e.response.headers["x-inertia-location"]),n=J;n.hash&&!t.hash&&m(n).href===t.href&&(t.hash=n.hash),r.locationVisit(t,!0===w)}else{if(!e.response)return Promise.reject(e);y("invalid",{cancelable:!0,detail:{response:e.response}})&&l.show(e.response.data)}})).then((function(){r.activeVisit&&r.finishVisit(r.activeVisit)})).catch((function(e){if(!o.isCancel(e)){var t=y("exception",{cancelable:!0,detail:{exception:e}});if(r.activeVisit&&r.finishVisit(r.activeVisit),t)return Promise.reject(e)}}))}},n.setPage=function(e,t){var n=this,r=void 0===t?{}:t,o=r.visitId,i=void 0===o?this.createVisitId():o,s=r.replace,a=void 0!==s&&s,c=r.preserveScroll,l=void 0!==c&&c,u=r.preserveState,f=void 0!==u&&u;return Promise.resolve(this.resolveComponent(e.component)).then((function(t){i===n.visitId&&(e.scrollRegions=e.scrollRegions||[],e.rememberedState=e.rememberedState||{},(a=a||h(e.url).href===window.location.href)?n.replaceState(e):n.pushState(e),n.swapComponent({component:t,page:e,preserveState:f}).then((function(){l||n.resetScrollPositions(),a||b(e)})))}))},n.pushState=function(e){this.page=e,window.history.pushState(e,"",e.url)},n.replaceState=function(e){this.page=e,window.history.replaceState(e,"",e.url)},n.handlePopstateEvent=function(e){var t=this;if(null!==e.state){var n=e.state,r=this.createVisitId();Promise.resolve(this.resolveComponent(n.component)).then((function(e){r===t.visitId&&(t.page=n,t.swapComponent({component:e,page:n,preserveState:!1}).then((function(){t.restoreScrollPositions(),b(n)})))}))}else{var o=h(this.page.url);o.hash=window.location.hash,this.replaceState(a({},this.page,{url:o.href})),this.resetScrollPositions()}},n.get=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),this.visit(e,a({},r,{method:t.Method.GET,data:n}))},n.reload=function(e){return void 0===e&&(e={}),this.visit(window.location.href,a({},e,{preserveScroll:!0,preserveState:!0}))},n.replace=function(e,t){var n;return void 0===t&&(t={}),console.warn("Inertia.replace() has been deprecated and will be removed in a future release. Please use Inertia."+(null!=(n=t.method)?n:"get")+"() instead."),this.visit(e,a({preserveState:!0},t,{replace:!0}))},n.post=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),this.visit(e,a({preserveState:!0},r,{method:t.Method.POST,data:n}))},n.put=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),this.visit(e,a({preserveState:!0},r,{method:t.Method.PUT,data:n}))},n.patch=function(e,n,r){return void 0===n&&(n={}),void 0===r&&(r={}),this.visit(e,a({preserveState:!0},r,{method:t.Method.PATCH,data:n}))},n.delete=function(e,n){return void 0===n&&(n={}),this.visit(e,a({preserveState:!0},n,{method:t.Method.DELETE}))},n.remember=function(e,t){var n,r;void 0===t&&(t="default"),w||this.replaceState(a({},this.page,{rememberedState:a({},null==(n=this.page)?void 0:n.rememberedState,(r={},r[t]=e,r))}))},n.restore=function(e){var t,n;if(void 0===e&&(e="default"),!w)return null==(t=window.history.state)||null==(n=t.rememberedState)?void 0:n[e]},n.on=function(e,t){var n=function(e){var n=t(e);e.cancelable&&!e.defaultPrevented&&!1===n&&e.preventDefault()};return document.addEventListener("inertia:"+e,n),function(){return document.removeEventListener("inertia:"+e,n)}},e}(),_={buildDOMElement:function(e){var t=document.createElement("template");t.innerHTML=e;var n=t.content.firstChild;if(!e.startsWith("<script "))return n;var r=document.createElement("script");return r.innerHTML=n.innerHTML,n.getAttributeNames().forEach((function(e){r.setAttribute(e,n.getAttribute(e)||"")})),r},isInertiaManagedElement:function(e){return e.nodeType===Node.ELEMENT_NODE&&null!==e.getAttribute("inertia")},findMatchingElementIndex:function(e,t){var n=e.getAttribute("inertia");return null!==n?t.findIndex((function(e){return e.getAttribute("inertia")===n})):-1},update:u((function(e){var t=this,n=e.map((function(e){return t.buildDOMElement(e)}));Array.from(document.head.childNodes).filter((function(e){return t.isInertiaManagedElement(e)})).forEach((function(e){var r=t.findMatchingElementIndex(e,n);if(-1!==r){var o,i=n.splice(r,1)[0];i&&!e.isEqualNode(i)&&(null==e||null==(o=e.parentNode)||o.replaceChild(i,e))}else{var s;null==e||null==(s=e.parentNode)||s.removeChild(e)}})),n.forEach((function(e){return document.head.appendChild(e)}))}),1)},x=new S;t.Inertia=x,t.createHeadManager=function(e,t,n){var r={},o=0;function i(){var e=Object.values(r).reduce((function(e,t){return e.concat(t)}),[]).reduce((function(e,n){if(-1===n.indexOf("<"))return e;if(0===n.indexOf("<title ")){var r=n.match(/(<title [^>]+>)(.*?)(<\/title>)/);return e.title=r?""+r[1]+t(r[2])+r[3]:n,e}var o=n.match(/ inertia="[^"]+"/);return o?e[o[0]]=n:e[Object.keys(e).length]=n,e}),{});return Object.values(e)}function s(){e?n(i()):_.update(i())}return{createProvider:function(){var e=function(){var e=o+=1;return r[e]=[],e.toString()}();return{update:function(t){return function(e,t){void 0===t&&(t=[]),null!==e&&Object.keys(r).indexOf(e)>-1&&(r[e]=t),s()}(e,t)},disconnect:function(){return function(e){null!==e&&-1!==Object.keys(r).indexOf(e)&&(delete r[e],s())}(e)}}}}},t.hrefToUrl=h,t.mergeDataIntoQueryString=v,t.shouldIntercept=function(e){var t="a"===e.currentTarget.tagName.toLowerCase();return!(e.target&&null!=e&&e.target.isContentEditable||e.defaultPrevented||t&&e.which>1||t&&e.altKey||t&&e.ctrlKey||t&&e.metaKey||t&&e.shiftKey)},t.urlWithoutHash=m},1966:(e,t,n)=>{var r,o=(r=n(4865))&&"object"==typeof r&&"default"in r?r.default:r,i=null;function s(e){document.addEventListener("inertia:start",a.bind(null,e)),document.addEventListener("inertia:progress",c),document.addEventListener("inertia:finish",l)}function a(e){i=setTimeout((function(){return o.start()}),e)}function c(e){o.isStarted()&&e.detail.progress.percentage&&o.set(Math.max(o.status,e.detail.progress.percentage/100*.9))}function l(e){clearTimeout(i),o.isStarted()&&(e.detail.visit.completed?o.done():e.detail.visit.interrupted?o.set(0):e.detail.visit.cancelled&&(o.done(),o.remove()))}t.I={init:function(e){var t=void 0===e?{}:e,n=t.delay,r=t.color,i=void 0===r?"#29d":r,a=t.includeCSS,c=void 0===a||a,l=t.showSpinner,u=void 0!==l&&l;s(void 0===n?250:n),o.configure({showSpinner:u}),c&&function(e){var t=document.createElement("style");t.type="text/css",t.textContent="\n    #nprogress {\n      pointer-events: none;\n    }\n\n    #nprogress .bar {\n      background: "+e+";\n\n      position: fixed;\n      z-index: 1031;\n      top: 0;\n      left: 0;\n\n      width: 100%;\n      height: 2px;\n    }\n\n    #nprogress .peg {\n      display: block;\n      position: absolute;\n      right: 0px;\n      width: 100px;\n      height: 100%;\n      box-shadow: 0 0 10px "+e+", 0 0 5px "+e+";\n      opacity: 1.0;\n\n      -webkit-transform: rotate(3deg) translate(0px, -4px);\n          -ms-transform: rotate(3deg) translate(0px, -4px);\n              transform: rotate(3deg) translate(0px, -4px);\n    }\n\n    #nprogress .spinner {\n      display: block;\n      position: fixed;\n      z-index: 1031;\n      top: 15px;\n      right: 15px;\n    }\n\n    #nprogress .spinner-icon {\n      width: 18px;\n      height: 18px;\n      box-sizing: border-box;\n\n      border: solid 2px transparent;\n      border-top-color: "+e+";\n      border-left-color: "+e+";\n      border-radius: 50%;\n\n      -webkit-animation: nprogress-spinner 400ms linear infinite;\n              animation: nprogress-spinner 400ms linear infinite;\n    }\n\n    .nprogress-custom-parent {\n      overflow: hidden;\n      position: relative;\n    }\n\n    .nprogress-custom-parent #nprogress .spinner,\n    .nprogress-custom-parent #nprogress .bar {\n      position: absolute;\n    }\n\n    @-webkit-keyframes nprogress-spinner {\n      0%   { -webkit-transform: rotate(0deg); }\n      100% { -webkit-transform: rotate(360deg); }\n    }\n    @keyframes nprogress-spinner {\n      0%   { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n  ",document.head.appendChild(t)}(i)}}},9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),s=n(5327),a=n(4097),c=n(4109),l=n(7985),u=n(5061);e.exports=function(e){return new Promise((function(t,n){var f=e.data,p=e.headers,d=e.responseType;r.isFormData(f)&&delete p["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var v=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";p.Authorization="Basic "+btoa(v+":"+m)}var y=a(e.baseURL,e.url);function g(){if(h){var r="getAllResponseHeaders"in h?c(h.getAllResponseHeaders()):null,i={data:d&&"text"!==d&&"json"!==d?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};o(t,n,i),h=null}}if(h.open(e.method.toUpperCase(),s(y,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,"onloadend"in h?h.onloadend=g:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(g)},h.onabort=function(){h&&(n(u("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){n(u("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(u(t,e,e.transitional&&e.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var b=(e.withCredentials||l(y))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;b&&(p[e.xsrfHeaderName]=b)}"setRequestHeader"in h&&r.forEach(p,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete p[t]:h.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),d&&"json"!==d&&(h.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),n(e),h=null)})),f||(f=null),h.send(f)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),s=n(7185);function a(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var c=a(n(5655));c.Axios=i,c.create=function(e){return a(s(c.defaults,e))},c.Cancel=n(5263),c.CancelToken=n(4972),c.isCancel=n(6502),c.all=function(e){return Promise.all(e)},c.spread=n(8713),c.isAxiosError=n(6268),e.exports=c,e.exports.default=c},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),s=n(3572),a=n(7185),c=n(4875),l=c.validators;function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=a(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;void 0!==t&&c.assertOptions(t,{silentJSONParsing:l.transitional(l.boolean,"1.0.0"),forcedJSONParsing:l.transitional(l.boolean,"1.0.0"),clarifyTimeoutError:l.transitional(l.boolean,"1.0.0")},!1);var n=[],r=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(r=r&&t.synchronous,n.unshift(t.fulfilled,t.rejected))}));var o,i=[];if(this.interceptors.response.forEach((function(e){i.push(e.fulfilled,e.rejected)})),!r){var u=[s,void 0];for(Array.prototype.unshift.apply(u,n),u=u.concat(i),o=Promise.resolve(e);u.length;)o=o.then(u.shift(),u.shift());return o}for(var f=e;n.length;){var p=n.shift(),d=n.shift();try{f=p(f)}catch(e){d(e);break}}try{o=s(f)}catch(e){return Promise.reject(e)}for(;i.length;)o=o.then(i.shift(),i.shift());return o},u.prototype.getUri=function(e){return e=a(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,n){return this.request(a(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,n,r){return this.request(a(r||{},{method:e,url:t,data:n}))}})),e.exports=u},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,i){var s=new Error(e);return r(s,t,n,o,i)}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),s=n(5655);function a(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return a(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return a(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(a(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],i=["headers","auth","proxy","params"],s=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],a=["validateStatus"];function c(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function l(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=c(void 0,e[o])):n[o]=c(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=c(void 0,t[e]))})),r.forEach(i,l),r.forEach(s,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=c(void 0,e[o])):n[o]=c(void 0,t[o])})),r.forEach(a,(function(r){r in t?n[r]=c(e[r],t[r]):r in e&&(n[r]=c(void 0,e[r]))}));var u=o.concat(i).concat(s).concat(a),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===u.indexOf(e)}));return r.forEach(f,l),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5655);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5655:(e,t,n)=>{"use strict";var r=n(4155),o=n(4867),i=n(6016),s=n(481),a={"Content-Type":"application/x-www-form-urlencoded"};function c(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==r&&"[object process]"===Object.prototype.toString.call(r))&&(l=n(5448)),l),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(c(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)||t&&"application/json"===t["Content-Type"]?(c(t,"application/json"),function(e,t,n){if(o.isString(e))try{return(t||JSON.parse)(e),o.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(n||JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional,n=t&&t.silentJSONParsing,r=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||r&&o.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw s(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),o.forEach(["post","put","patch"],(function(e){u.headers[e]=o.merge(a)})),e.exports=u},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var s=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(o(t)+"="+o(e))})))})),i=s.join("&")}if(i){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(o)&&a.push("path="+o),r.isString(i)&&a.push("domain="+i),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,s={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(s[t]&&o.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}})),s):s}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4875:(e,t,n)=>{"use strict";var r=n(8593),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var i={},s=r.version.split(".");function a(e,t){for(var n=t?t.split("."):s,r=e.split("."),o=0;o<3;o++){if(n[o]>r[o])return!0;if(n[o]<r[o])return!1}return!1}o.transitional=function(e,t,n){var o=t&&a(t);function s(e,t){return"[Axios v"+r.version+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,a){if(!1===e)throw new Error(s(r," has been removed in "+t));return o&&!i[r]&&(i[r]=!0,console.warn(s(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,a)}},e.exports={isOlderVersion:a,assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var i=r[o],s=t[i];if(s){var a=e[i],c=void 0===a||s(a,i,e);if(!0!==c)throw new TypeError("option "+i+" must be "+c)}else if(!0!==n)throw Error("Unknown option "+i)}},validators:o}},4867:(e,t,n)=>{"use strict";var r=n(1849),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function s(e){return void 0===e}function a(e){return null!==e&&"object"==typeof e}function c(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function l(e){return"[object Function]"===o.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isPlainObject:c,isUndefined:s,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:l,isStream:function(e){return a(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:u,merge:function e(){var t={};function n(n,r){c(t[r])&&c(n)?t[r]=e(t[r],n):c(n)?t[r]=e({},n):i(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)u(arguments[r],n);return t},extend:function(e,t,n){return u(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},1924:(e,t,n)=>{"use strict";var r=n(210),o=n(5559),i=o(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?o(n):n}},5559:(e,t,n)=>{"use strict";var r=n(8612),o=n(210),i=o("%Function.prototype.apply%"),s=o("%Function.prototype.call%"),a=o("%Reflect.apply%",!0)||r.call(s,i),c=o("%Object.getOwnPropertyDescriptor%",!0),l=o("%Object.defineProperty%",!0),u=o("%Math.max%");if(l)try{l({},"a",{value:1})}catch(e){l=null}e.exports=function(e){var t=a(r,s,arguments);if(c&&l){var n=c(t,"length");n.configurable&&l(t,"length",{value:1+u(0,e.length-(arguments.length-1))})}return t};var f=function(){return a(r,i,arguments)};l?l(e.exports,"apply",{value:f}):e.exports.apply=f},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(o[s]=!0)}for(var a=0;a<e.length;a++){var c=[].concat(e[a]);r&&o[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),t.push(c))}},t}},4015:e=>{"use strict";function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null==n)return;var r,o,i=[],s=!0,a=!1;try{for(n=n.call(e);!(s=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);s=!0);}catch(e){a=!0,o=e}finally{try{s||null==n.return||n.return()}finally{if(a)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n=t(e,4),r=n[1],o=n[3];if(!o)return r;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(s," */"),c=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[r].concat(c).concat([a]).join("\n")}return[r].join("\n")}},9996:e=>{"use strict";var t=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===n}(e)}(e)};var n="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function r(e,t){return!1!==t.clone&&t.isMergeableObject(e)?c((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function o(e,t,n){return e.concat(t).map((function(e){return r(e,n)}))}function i(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function s(e,t){try{return t in e}catch(e){return!1}}function a(e,t,n){var o={};return n.isMergeableObject(e)&&i(e).forEach((function(t){o[t]=r(e[t],n)})),i(t).forEach((function(i){(function(e,t){return s(e,t)&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))})(e,i)||(s(e,i)&&n.isMergeableObject(t[i])?o[i]=function(e,t){if(!t.customMerge)return c;var n=t.customMerge(e);return"function"==typeof n?n:c}(i,n)(e[i],t[i],n):o[i]=r(t[i],n))})),o}function c(e,n,i){(i=i||{}).arrayMerge=i.arrayMerge||o,i.isMergeableObject=i.isMergeableObject||t,i.cloneUnlessOtherwiseSpecified=r;var s=Array.isArray(n);return s===Array.isArray(e)?s?i.arrayMerge(e,n,i):a(e,n,i):r(n,i)}c.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return c(e,n,t)}),{})};var l=c;e.exports=l},7648:e=>{"use strict";var t="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,r=Object.prototype.toString,o="[object Function]";e.exports=function(e){var i=this;if("function"!=typeof i||r.call(i)!==o)throw new TypeError(t+i);for(var s,a=n.call(arguments,1),c=function(){if(this instanceof s){var t=i.apply(this,a.concat(n.call(arguments)));return Object(t)===t?t:this}return i.apply(e,a.concat(n.call(arguments)))},l=Math.max(0,i.length-a.length),u=[],f=0;f<l;f++)u.push("$"+f);if(s=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")(c),i.prototype){var p=function(){};p.prototype=i.prototype,s.prototype=new p,p.prototype=null}return s}},8612:(e,t,n)=>{"use strict";var r=n(7648);e.exports=Function.prototype.bind||r},210:(e,t,n)=>{"use strict";var r,o=SyntaxError,i=Function,s=TypeError,a=function(e){try{return i('"use strict"; return ('+e+").constructor;")()}catch(e){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(e){c=null}var l=function(){throw new s},u=c?function(){try{return l}catch(e){try{return c(arguments,"callee").get}catch(e){return l}}}():l,f=n(1405)(),p=Object.getPrototypeOf||function(e){return e.__proto__},d={},h="undefined"==typeof Uint8Array?r:p(Uint8Array),v={"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":f?p([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":d,"%AsyncGenerator%":d,"%AsyncGeneratorFunction%":d,"%AsyncIteratorPrototype%":d,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":d,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f?p(p([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f?p((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f?p((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f?p(""[Symbol.iterator]()):r,"%Symbol%":f?Symbol:r,"%SyntaxError%":o,"%ThrowTypeError%":u,"%TypedArray%":h,"%TypeError%":s,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet},m=function e(t){var n;if("%AsyncFunction%"===t)n=a("async function () {}");else if("%GeneratorFunction%"===t)n=a("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=a("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&(n=p(o.prototype))}return v[t]=n,n},y={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},g=n(8612),b=n(7642),w=g.call(Function.call,Array.prototype.concat),S=g.call(Function.apply,Array.prototype.splice),_=g.call(Function.call,String.prototype.replace),x=g.call(Function.call,String.prototype.slice),k=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,E=/\\(\\)?/g,C=function(e){var t=x(e,0,1),n=x(e,-1);if("%"===t&&"%"!==n)throw new o("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new o("invalid intrinsic syntax, expected opening `%`");var r=[];return _(e,k,(function(e,t,n,o){r[r.length]=n?_(o,E,"$1"):t||e})),r},O=function(e,t){var n,r=e;if(b(y,r)&&(r="%"+(n=y[r])[0]+"%"),b(v,r)){var i=v[r];if(i===d&&(i=m(r)),void 0===i&&!t)throw new s("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:i}}throw new o("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new s("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new s('"allowMissing" argument must be a boolean');var n=C(e),r=n.length>0?n[0]:"",i=O("%"+r+"%",t),a=i.name,l=i.value,u=!1,f=i.alias;f&&(r=f[0],S(n,w([0,1],f)));for(var p=1,d=!0;p<n.length;p+=1){var h=n[p],m=x(h,0,1),y=x(h,-1);if(('"'===m||"'"===m||"`"===m||'"'===y||"'"===y||"`"===y)&&m!==y)throw new o("property names with quotes must have matching quotes");if("constructor"!==h&&d||(u=!0),b(v,a="%"+(r+="."+h)+"%"))l=v[a];else if(null!=l){if(!(h in l)){if(!t)throw new s("base intrinsic for "+e+" exists, but the property is not available.");return}if(c&&p+1>=n.length){var g=c(l,h);l=(d=!!g)&&"get"in g&&!("originalValue"in g.get)?g.get:l[h]}else d=b(l,h),l=l[h];d&&!u&&(v[a]=l)}}return l}},1405:(e,t,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,o=n(5419);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&o())))}},5419:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},7642:(e,t,n)=>{"use strict";var r=n(8612);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},3465:(e,t,n)=>{e=n.nmd(e);var r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",s="[object Boolean]",a="[object Date]",c="[object Function]",l="[object GeneratorFunction]",u="[object Map]",f="[object Number]",p="[object Object]",d="[object Promise]",h="[object RegExp]",v="[object Set]",m="[object String]",y="[object Symbol]",g="[object WeakMap]",b="[object ArrayBuffer]",w="[object DataView]",S="[object Float32Array]",_="[object Float64Array]",x="[object Int8Array]",k="[object Int16Array]",E="[object Int32Array]",C="[object Uint8Array]",O="[object Uint8ClampedArray]",j="[object Uint16Array]",A="[object Uint32Array]",T=/\w*$/,P=/^\[object .+?Constructor\]$/,N=/^(?:0|[1-9]\d*)$/,M={};M[i]=M["[object Array]"]=M[b]=M[w]=M[s]=M[a]=M[S]=M[_]=M[x]=M[k]=M[E]=M[u]=M[f]=M[p]=M[h]=M[v]=M[m]=M[y]=M[C]=M[O]=M[j]=M[A]=!0,M["[object Error]"]=M[c]=M[g]=!1;var R="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,L="object"==typeof self&&self&&self.Object===Object&&self,F=R||L||Function("return this")(),I=t&&!t.nodeType&&t,B=I&&e&&!e.nodeType&&e,V=B&&B.exports===I;function $(e,t){return e.set(t[0],t[1]),e}function U(e,t){return e.add(t),e}function D(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function H(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function z(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function W(e,t){return function(n){return e(t(n))}}function q(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var G,K=Array.prototype,J=Function.prototype,Y=Object.prototype,Q=F["__core-js_shared__"],X=(G=/[^.]+$/.exec(Q&&Q.keys&&Q.keys.IE_PROTO||""))?"Symbol(src)_1."+G:"",Z=J.toString,ee=Y.hasOwnProperty,te=Y.toString,ne=RegExp("^"+Z.call(ee).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),re=V?F.Buffer:void 0,oe=F.Symbol,ie=F.Uint8Array,se=W(Object.getPrototypeOf,Object),ae=Object.create,ce=Y.propertyIsEnumerable,le=K.splice,ue=Object.getOwnPropertySymbols,fe=re?re.isBuffer:void 0,pe=W(Object.keys,Object),de=Be(F,"DataView"),he=Be(F,"Map"),ve=Be(F,"Promise"),me=Be(F,"Set"),ye=Be(F,"WeakMap"),ge=Be(Object,"create"),be=He(de),we=He(he),Se=He(ve),_e=He(me),xe=He(ye),ke=oe?oe.prototype:void 0,Ee=ke?ke.valueOf:void 0;function Ce(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Oe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function je(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ae(e){this.__data__=new Oe(e)}function Te(e,t){var n=We(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&qe(e)}(e)&&ee.call(e,"callee")&&(!ce.call(e,"callee")||te.call(e)==i)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],r=n.length,o=!!r;for(var s in e)!t&&!ee.call(e,s)||o&&("length"==s||Ue(s,r))||n.push(s);return n}function Pe(e,t,n){var r=e[t];ee.call(e,t)&&ze(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function Ne(e,t){for(var n=e.length;n--;)if(ze(e[n][0],t))return n;return-1}function Me(e,t,n,r,o,d,g){var P;if(r&&(P=d?r(e,o,d,g):r(e)),void 0!==P)return P;if(!Je(e))return e;var N=We(e);if(N){if(P=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&ee.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,P)}else{var R=$e(e),L=R==c||R==l;if(Ge(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if(R==p||R==i||L&&!d){if(H(e))return d?e:{};if(P=function(e){return"function"!=typeof e.constructor||De(e)?{}:(t=se(e),Je(t)?ae(t):{});var t}(L?{}:e),!t)return function(e,t){return Fe(e,Ve(e),t)}(e,function(e,t){return e&&Fe(t,Ye(t),e)}(P,e))}else{if(!M[R])return d?e:{};P=function(e,t,n,r){var o=e.constructor;switch(t){case b:return Le(e);case s:case a:return new o(+e);case w:return function(e,t){var n=t?Le(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case S:case _:case x:case k:case E:case C:case O:case j:case A:return function(e,t){var n=t?Le(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case u:return function(e,t,n){return D(t?n(z(e),!0):z(e),$,new e.constructor)}(e,r,n);case f:case m:return new o(e);case h:return function(e){var t=new e.constructor(e.source,T.exec(e));return t.lastIndex=e.lastIndex,t}(e);case v:return function(e,t,n){return D(t?n(q(e),!0):q(e),U,new e.constructor)}(e,r,n);case y:return i=e,Ee?Object(Ee.call(i)):{}}var i}(e,R,Me,t)}}g||(g=new Ae);var F=g.get(e);if(F)return F;if(g.set(e,P),!N)var I=n?function(e){return function(e,t,n){var r=t(e);return We(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Ye,Ve)}(e):Ye(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(I||e,(function(o,i){I&&(o=e[i=o]),Pe(P,i,Me(o,t,n,r,i,e,g))})),P}function Re(e){return!(!Je(e)||(t=e,X&&X in t))&&(Ke(e)||H(e)?ne:P).test(He(e));var t}function Le(e){var t=new e.constructor(e.byteLength);return new ie(t).set(new ie(e)),t}function Fe(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var s=t[o],a=r?r(n[s],e[s],s,n,e):void 0;Pe(n,s,void 0===a?e[s]:a)}return n}function Ie(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Be(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Re(n)?n:void 0}Ce.prototype.clear=function(){this.__data__=ge?ge(null):{}},Ce.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},Ce.prototype.get=function(e){var t=this.__data__;if(ge){var n=t[e];return n===r?void 0:n}return ee.call(t,e)?t[e]:void 0},Ce.prototype.has=function(e){var t=this.__data__;return ge?void 0!==t[e]:ee.call(t,e)},Ce.prototype.set=function(e,t){return this.__data__[e]=ge&&void 0===t?r:t,this},Oe.prototype.clear=function(){this.__data__=[]},Oe.prototype.delete=function(e){var t=this.__data__,n=Ne(t,e);return!(n<0)&&(n==t.length-1?t.pop():le.call(t,n,1),!0)},Oe.prototype.get=function(e){var t=this.__data__,n=Ne(t,e);return n<0?void 0:t[n][1]},Oe.prototype.has=function(e){return Ne(this.__data__,e)>-1},Oe.prototype.set=function(e,t){var n=this.__data__,r=Ne(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},je.prototype.clear=function(){this.__data__={hash:new Ce,map:new(he||Oe),string:new Ce}},je.prototype.delete=function(e){return Ie(this,e).delete(e)},je.prototype.get=function(e){return Ie(this,e).get(e)},je.prototype.has=function(e){return Ie(this,e).has(e)},je.prototype.set=function(e,t){return Ie(this,e).set(e,t),this},Ae.prototype.clear=function(){this.__data__=new Oe},Ae.prototype.delete=function(e){return this.__data__.delete(e)},Ae.prototype.get=function(e){return this.__data__.get(e)},Ae.prototype.has=function(e){return this.__data__.has(e)},Ae.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Oe){var r=n.__data__;if(!he||r.length<199)return r.push([e,t]),this;n=this.__data__=new je(r)}return n.set(e,t),this};var Ve=ue?W(ue,Object):function(){return[]},$e=function(e){return te.call(e)};function Ue(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||N.test(e))&&e>-1&&e%1==0&&e<t}function De(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Y)}function He(e){if(null!=e){try{return Z.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function ze(e,t){return e===t||e!=e&&t!=t}(de&&$e(new de(new ArrayBuffer(1)))!=w||he&&$e(new he)!=u||ve&&$e(ve.resolve())!=d||me&&$e(new me)!=v||ye&&$e(new ye)!=g)&&($e=function(e){var t=te.call(e),n=t==p?e.constructor:void 0,r=n?He(n):void 0;if(r)switch(r){case be:return w;case we:return u;case Se:return d;case _e:return v;case xe:return g}return t});var We=Array.isArray;function qe(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}(e.length)&&!Ke(e)}var Ge=fe||function(){return!1};function Ke(e){var t=Je(e)?te.call(e):"";return t==c||t==l}function Je(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Ye(e){return qe(e)?Te(e):function(e){if(!De(e))return pe(e);var t=[];for(var n in Object(e))ee.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}e.exports=function(e){return Me(e,!0,!0)}},2307:(e,t,n)=>{e=n.nmd(e);var r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",s="[object Array]",a="[object Boolean]",c="[object Date]",l="[object Error]",u="[object Function]",f="[object Map]",p="[object Number]",d="[object Object]",h="[object Promise]",v="[object RegExp]",m="[object Set]",y="[object String]",g="[object Symbol]",b="[object WeakMap]",w="[object ArrayBuffer]",S="[object DataView]",_=/^\[object .+?Constructor\]$/,x=/^(?:0|[1-9]\d*)$/,k={};k["[object Float32Array]"]=k["[object Float64Array]"]=k["[object Int8Array]"]=k["[object Int16Array]"]=k["[object Int32Array]"]=k["[object Uint8Array]"]=k["[object Uint8ClampedArray]"]=k["[object Uint16Array]"]=k["[object Uint32Array]"]=!0,k[i]=k[s]=k[w]=k[a]=k[S]=k[c]=k[l]=k[u]=k[f]=k[p]=k[d]=k[v]=k[m]=k[y]=k[b]=!1;var E="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,C="object"==typeof self&&self&&self.Object===Object&&self,O=E||C||Function("return this")(),j=t&&!t.nodeType&&t,A=j&&e&&!e.nodeType&&e,T=A&&A.exports===j,P=T&&E.process,N=function(){try{return P&&P.binding&&P.binding("util")}catch(e){}}(),M=N&&N.isTypedArray;function R(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function L(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function F(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var I,B,V,$=Array.prototype,U=Function.prototype,D=Object.prototype,H=O["__core-js_shared__"],z=U.toString,W=D.hasOwnProperty,q=(I=/[^.]+$/.exec(H&&H.keys&&H.keys.IE_PROTO||""))?"Symbol(src)_1."+I:"",G=D.toString,K=RegExp("^"+z.call(W).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),J=T?O.Buffer:void 0,Y=O.Symbol,Q=O.Uint8Array,X=D.propertyIsEnumerable,Z=$.splice,ee=Y?Y.toStringTag:void 0,te=Object.getOwnPropertySymbols,ne=J?J.isBuffer:void 0,re=(B=Object.keys,V=Object,function(e){return B(V(e))}),oe=Ne(O,"DataView"),ie=Ne(O,"Map"),se=Ne(O,"Promise"),ae=Ne(O,"Set"),ce=Ne(O,"WeakMap"),le=Ne(Object,"create"),ue=Fe(oe),fe=Fe(ie),pe=Fe(se),de=Fe(ae),he=Fe(ce),ve=Y?Y.prototype:void 0,me=ve?ve.valueOf:void 0;function ye(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ge(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function be(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function we(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new be;++t<n;)this.add(e[t])}function Se(e){var t=this.__data__=new ge(e);this.size=t.size}function _e(e,t){var n=Ve(e),r=!n&&Be(e),o=!n&&!r&&$e(e),i=!n&&!r&&!o&&We(e),s=n||r||o||i,a=s?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],c=a.length;for(var l in e)!t&&!W.call(e,l)||s&&("length"==l||o&&("offset"==l||"parent"==l)||i&&("buffer"==l||"byteLength"==l||"byteOffset"==l)||Le(l,c))||a.push(l);return a}function xe(e,t){for(var n=e.length;n--;)if(Ie(e[n][0],t))return n;return-1}function ke(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":ee&&ee in Object(e)?function(e){var t=W.call(e,ee),n=e[ee];try{e[ee]=void 0;var r=!0}catch(e){}var o=G.call(e);r&&(t?e[ee]=n:delete e[ee]);return o}(e):function(e){return G.call(e)}(e)}function Ee(e){return ze(e)&&ke(e)==i}function Ce(e,t,n,r,o){return e===t||(null==e||null==t||!ze(e)&&!ze(t)?e!=e&&t!=t:function(e,t,n,r,o,u){var h=Ve(e),b=Ve(t),_=h?s:Re(e),x=b?s:Re(t),k=(_=_==i?d:_)==d,E=(x=x==i?d:x)==d,C=_==x;if(C&&$e(e)){if(!$e(t))return!1;h=!0,k=!1}if(C&&!k)return u||(u=new Se),h||We(e)?Ae(e,t,n,r,o,u):function(e,t,n,r,o,i,s){switch(n){case S:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case w:return!(e.byteLength!=t.byteLength||!i(new Q(e),new Q(t)));case a:case c:case p:return Ie(+e,+t);case l:return e.name==t.name&&e.message==t.message;case v:case y:return e==t+"";case f:var u=L;case m:var d=1&r;if(u||(u=F),e.size!=t.size&&!d)return!1;var h=s.get(e);if(h)return h==t;r|=2,s.set(e,t);var b=Ae(u(e),u(t),r,o,i,s);return s.delete(e),b;case g:if(me)return me.call(e)==me.call(t)}return!1}(e,t,_,n,r,o,u);if(!(1&n)){var O=k&&W.call(e,"__wrapped__"),j=E&&W.call(t,"__wrapped__");if(O||j){var A=O?e.value():e,T=j?t.value():t;return u||(u=new Se),o(A,T,n,r,u)}}if(!C)return!1;return u||(u=new Se),function(e,t,n,r,o,i){var s=1&n,a=Te(e),c=a.length,l=Te(t).length;if(c!=l&&!s)return!1;var u=c;for(;u--;){var f=a[u];if(!(s?f in t:W.call(t,f)))return!1}var p=i.get(e);if(p&&i.get(t))return p==t;var d=!0;i.set(e,t),i.set(t,e);var h=s;for(;++u<c;){var v=e[f=a[u]],m=t[f];if(r)var y=s?r(m,v,f,t,e,i):r(v,m,f,e,t,i);if(!(void 0===y?v===m||o(v,m,n,r,i):y)){d=!1;break}h||(h="constructor"==f)}if(d&&!h){var g=e.constructor,b=t.constructor;g==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof b&&b instanceof b||(d=!1)}return i.delete(e),i.delete(t),d}(e,t,n,r,o,u)}(e,t,n,r,Ce,o))}function Oe(e){return!(!He(e)||function(e){return!!q&&q in e}(e))&&(Ue(e)?K:_).test(Fe(e))}function je(e){if(n=(t=e)&&t.constructor,r="function"==typeof n&&n.prototype||D,t!==r)return re(e);var t,n,r,o=[];for(var i in Object(e))W.call(e,i)&&"constructor"!=i&&o.push(i);return o}function Ae(e,t,n,r,o,i){var s=1&n,a=e.length,c=t.length;if(a!=c&&!(s&&c>a))return!1;var l=i.get(e);if(l&&i.get(t))return l==t;var u=-1,f=!0,p=2&n?new we:void 0;for(i.set(e,t),i.set(t,e);++u<a;){var d=e[u],h=t[u];if(r)var v=s?r(h,d,u,t,e,i):r(d,h,u,e,t,i);if(void 0!==v){if(v)continue;f=!1;break}if(p){if(!R(t,(function(e,t){if(s=t,!p.has(s)&&(d===e||o(d,e,n,r,i)))return p.push(t);var s}))){f=!1;break}}else if(d!==h&&!o(d,h,n,r,i)){f=!1;break}}return i.delete(e),i.delete(t),f}function Te(e){return function(e,t,n){var r=t(e);return Ve(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,qe,Me)}function Pe(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Ne(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Oe(n)?n:void 0}ye.prototype.clear=function(){this.__data__=le?le(null):{},this.size=0},ye.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ye.prototype.get=function(e){var t=this.__data__;if(le){var n=t[e];return n===r?void 0:n}return W.call(t,e)?t[e]:void 0},ye.prototype.has=function(e){var t=this.__data__;return le?void 0!==t[e]:W.call(t,e)},ye.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=le&&void 0===t?r:t,this},ge.prototype.clear=function(){this.__data__=[],this.size=0},ge.prototype.delete=function(e){var t=this.__data__,n=xe(t,e);return!(n<0)&&(n==t.length-1?t.pop():Z.call(t,n,1),--this.size,!0)},ge.prototype.get=function(e){var t=this.__data__,n=xe(t,e);return n<0?void 0:t[n][1]},ge.prototype.has=function(e){return xe(this.__data__,e)>-1},ge.prototype.set=function(e,t){var n=this.__data__,r=xe(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},be.prototype.clear=function(){this.size=0,this.__data__={hash:new ye,map:new(ie||ge),string:new ye}},be.prototype.delete=function(e){var t=Pe(this,e).delete(e);return this.size-=t?1:0,t},be.prototype.get=function(e){return Pe(this,e).get(e)},be.prototype.has=function(e){return Pe(this,e).has(e)},be.prototype.set=function(e,t){var n=Pe(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},we.prototype.add=we.prototype.push=function(e){return this.__data__.set(e,r),this},we.prototype.has=function(e){return this.__data__.has(e)},Se.prototype.clear=function(){this.__data__=new ge,this.size=0},Se.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Se.prototype.get=function(e){return this.__data__.get(e)},Se.prototype.has=function(e){return this.__data__.has(e)},Se.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ge){var r=n.__data__;if(!ie||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new be(r)}return n.set(e,t),this.size=n.size,this};var Me=te?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var s=e[n];t(s,n,e)&&(i[o++]=s)}return i}(te(e),(function(t){return X.call(e,t)})))}:function(){return[]},Re=ke;function Le(e,t){return!!(t=null==t?o:t)&&("number"==typeof e||x.test(e))&&e>-1&&e%1==0&&e<t}function Fe(e){if(null!=e){try{return z.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ie(e,t){return e===t||e!=e&&t!=t}(oe&&Re(new oe(new ArrayBuffer(1)))!=S||ie&&Re(new ie)!=f||se&&Re(se.resolve())!=h||ae&&Re(new ae)!=m||ce&&Re(new ce)!=b)&&(Re=function(e){var t=ke(e),n=t==d?e.constructor:void 0,r=n?Fe(n):"";if(r)switch(r){case ue:return S;case fe:return f;case pe:return h;case de:return m;case he:return b}return t});var Be=Ee(function(){return arguments}())?Ee:function(e){return ze(e)&&W.call(e,"callee")&&!X.call(e,"callee")},Ve=Array.isArray;var $e=ne||function(){return!1};function Ue(e){if(!He(e))return!1;var t=ke(e);return t==u||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function De(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}function He(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ze(e){return null!=e&&"object"==typeof e}var We=M?function(e){return function(t){return e(t)}}(M):function(e){return ze(e)&&De(e.length)&&!!k[ke(e)]};function qe(e){return null!=(t=e)&&De(t.length)&&!Ue(t)?_e(e):je(e);var t}e.exports=function(e,t){return Ce(e,t)}},4865:function(e,t,n){var r,o;r=function(){var e,t,n={version:"0.2.0"},r=n.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function o(e,t,n){return e<t?t:e>n?n:e}function i(e){return 100*(-1+e)}function s(e,t,n){var o;return(o="translate3d"===r.positionUsing?{transform:"translate3d("+i(e)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(e)+"%,0)"}:{"margin-left":i(e)+"%"}).transition="all "+t+"ms "+n,o}n.configure=function(e){var t,n;for(t in e)void 0!==(n=e[t])&&e.hasOwnProperty(t)&&(r[t]=n);return this},n.status=null,n.set=function(e){var t=n.isStarted();e=o(e,r.minimum,1),n.status=1===e?null:e;var i=n.render(!t),l=i.querySelector(r.barSelector),u=r.speed,f=r.easing;return i.offsetWidth,a((function(t){""===r.positionUsing&&(r.positionUsing=n.getPositioningCSS()),c(l,s(e,u,f)),1===e?(c(i,{transition:"none",opacity:1}),i.offsetWidth,setTimeout((function(){c(i,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){n.remove(),t()}),u)}),u)):setTimeout(t,u)})),this},n.isStarted=function(){return"number"==typeof n.status},n.start=function(){n.status||n.set(0);var e=function(){setTimeout((function(){n.status&&(n.trickle(),e())}),r.trickleSpeed)};return r.trickle&&e(),this},n.done=function(e){return e||n.status?n.inc(.3+.5*Math.random()).set(1):this},n.inc=function(e){var t=n.status;return t?("number"!=typeof e&&(e=(1-t)*o(Math.random()*t,.1,.95)),t=o(t+e,0,.994),n.set(t)):n.start()},n.trickle=function(){return n.inc(Math.random()*r.trickleRate)},e=0,t=0,n.promise=function(r){return r&&"resolved"!==r.state()?(0===t&&n.start(),e++,t++,r.always((function(){0==--t?(e=0,n.done()):n.set((e-t)/e)})),this):this},n.render=function(e){if(n.isRendered())return document.getElementById("nprogress");u(document.documentElement,"nprogress-busy");var t=document.createElement("div");t.id="nprogress",t.innerHTML=r.template;var o,s=t.querySelector(r.barSelector),a=e?"-100":i(n.status||0),l=document.querySelector(r.parent);return c(s,{transition:"all 0 linear",transform:"translate3d("+a+"%,0,0)"}),r.showSpinner||(o=t.querySelector(r.spinnerSelector))&&d(o),l!=document.body&&u(l,"nprogress-custom-parent"),l.appendChild(t),t},n.remove=function(){f(document.documentElement,"nprogress-busy"),f(document.querySelector(r.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&d(e)},n.isRendered=function(){return!!document.getElementById("nprogress")},n.getPositioningCSS=function(){var e=document.body.style,t="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return t+"Perspective"in e?"translate3d":t+"Transform"in e?"translate":"margin"};var a=function(){var e=[];function t(){var n=e.shift();n&&n(t)}return function(n){e.push(n),1==e.length&&t()}}(),c=function(){var e=["Webkit","O","Moz","ms"],t={};function n(e){return e.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,t){return t.toUpperCase()}))}function r(t){var n=document.body.style;if(t in n)return t;for(var r,o=e.length,i=t.charAt(0).toUpperCase()+t.slice(1);o--;)if((r=e[o]+i)in n)return r;return t}function o(e){return e=n(e),t[e]||(t[e]=r(e))}function i(e,t,n){t=o(t),e.style[t]=n}return function(e,t){var n,r,o=arguments;if(2==o.length)for(n in t)void 0!==(r=t[n])&&t.hasOwnProperty(n)&&i(e,n,r);else i(e,o[1],o[2])}}();function l(e,t){return("string"==typeof e?e:p(e)).indexOf(" "+t+" ")>=0}function u(e,t){var n=p(e),r=n+t;l(n,t)||(e.className=r.substring(1))}function f(e,t){var n,r=p(e);l(e,t)&&(n=r.replace(" "+t+" "," "),e.className=n.substring(1,n.length-1))}function p(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function d(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return n},void 0===(o="function"==typeof r?r.call(t,n,t,e):r)||(e.exports=o)},631:(e,t,n)=>{var r="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=r&&o&&"function"==typeof o.get?o.get:null,s=r&&Map.prototype.forEach,a="function"==typeof Set&&Set.prototype,c=Object.getOwnPropertyDescriptor&&a?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,l=a&&c&&"function"==typeof c.get?c.get:null,u=a&&Set.prototype.forEach,f="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,d="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,h=Boolean.prototype.valueOf,v=Object.prototype.toString,m=Function.prototype.toString,y=String.prototype.match,g=String.prototype.slice,b=String.prototype.replace,w=String.prototype.toUpperCase,S=String.prototype.toLowerCase,_=RegExp.prototype.test,x=Array.prototype.concat,k=Array.prototype.join,E=Array.prototype.slice,C=Math.floor,O="function"==typeof BigInt?BigInt.prototype.valueOf:null,j=Object.getOwnPropertySymbols,A="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,T="function"==typeof Symbol&&"object"==typeof Symbol.iterator,P="function"==typeof Symbol&&Symbol.toStringTag&&(typeof Symbol.toStringTag===T||"symbol")?Symbol.toStringTag:null,N=Object.prototype.propertyIsEnumerable,M=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function R(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||_.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-C(-e):C(e);if(r!==e){var o=String(r),i=g.call(t,o.length+1);return b.call(o,n,"$&_")+"."+b.call(b.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return b.call(t,n,"$&_")}var L=n(4654).custom,F=L&&$(L)?L:null;function I(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function B(e){return b.call(String(e),/"/g,"&quot;")}function V(e){return!("[object Array]"!==H(e)||P&&"object"==typeof e&&P in e)}function $(e){if(T)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!A)return!1;try{return A.call(e),!0}catch(e){}return!1}e.exports=function e(t,n,r,o){var a=n||{};if(D(a,"quoteStyle")&&"single"!==a.quoteStyle&&"double"!==a.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(D(a,"maxStringLength")&&("number"==typeof a.maxStringLength?a.maxStringLength<0&&a.maxStringLength!==1/0:null!==a.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var c=!D(a,"customInspect")||a.customInspect;if("boolean"!=typeof c&&"symbol"!==c)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(D(a,"indent")&&null!==a.indent&&"\t"!==a.indent&&!(parseInt(a.indent,10)===a.indent&&a.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(D(a,"numericSeparator")&&"boolean"!=typeof a.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var v=a.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return W(t,a);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var w=String(t);return v?R(t,w):w}if("bigint"==typeof t){var _=String(t)+"n";return v?R(t,_):_}var C=void 0===a.depth?5:a.depth;if(void 0===r&&(r=0),r>=C&&C>0&&"object"==typeof t)return V(t)?"[Array]":"[Object]";var j=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=k.call(Array(e.indent+1)," ")}return{base:n,prev:k.call(Array(t+1),n)}}(a,r);if(void 0===o)o=[];else if(z(o,t)>=0)return"[Circular]";function L(t,n,i){if(n&&(o=E.call(o)).push(n),i){var s={depth:a.depth};return D(a,"quoteStyle")&&(s.quoteStyle=a.quoteStyle),e(t,s,r+1,o)}return e(t,a,r+1,o)}if("function"==typeof t){var U=function(e){if(e.name)return e.name;var t=y.call(m.call(e),/^function\s*([\w$]+)/);if(t)return t[1];return null}(t),q=Q(t,L);return"[Function"+(U?": "+U:" (anonymous)")+"]"+(q.length>0?" { "+k.call(q,", ")+" }":"")}if($(t)){var X=T?b.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):A.call(t);return"object"!=typeof t||T?X:G(X)}if(function(e){if(!e||"object"!=typeof e)return!1;if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement)return!0;return"string"==typeof e.nodeName&&"function"==typeof e.getAttribute}(t)){for(var Z="<"+S.call(String(t.nodeName)),ee=t.attributes||[],te=0;te<ee.length;te++)Z+=" "+ee[te].name+"="+I(B(ee[te].value),"double",a);return Z+=">",t.childNodes&&t.childNodes.length&&(Z+="..."),Z+="</"+S.call(String(t.nodeName))+">"}if(V(t)){if(0===t.length)return"[]";var ne=Q(t,L);return j&&!function(e){for(var t=0;t<e.length;t++)if(z(e[t],"\n")>=0)return!1;return!0}(ne)?"["+Y(ne,j)+"]":"[ "+k.call(ne,", ")+" ]"}if(function(e){return!("[object Error]"!==H(e)||P&&"object"==typeof e&&P in e)}(t)){var re=Q(t,L);return"cause"in t&&!N.call(t,"cause")?"{ ["+String(t)+"] "+k.call(x.call("[cause]: "+L(t.cause),re),", ")+" }":0===re.length?"["+String(t)+"]":"{ ["+String(t)+"] "+k.call(re,", ")+" }"}if("object"==typeof t&&c){if(F&&"function"==typeof t[F])return t[F]();if("symbol"!==c&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!i||!e||"object"!=typeof e)return!1;try{i.call(e);try{l.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var oe=[];return s.call(t,(function(e,n){oe.push(L(n,t,!0)+" => "+L(e,t))})),J("Map",i.call(t),oe,j)}if(function(e){if(!l||!e||"object"!=typeof e)return!1;try{l.call(e);try{i.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var ie=[];return u.call(t,(function(e){ie.push(L(e,t))})),J("Set",l.call(t),ie,j)}if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{p.call(e,p)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return K("WeakMap");if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{p.call(e,p);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return K("WeakSet");if(function(e){if(!d||!e||"object"!=typeof e)return!1;try{return d.call(e),!0}catch(e){}return!1}(t))return K("WeakRef");if(function(e){return!("[object Number]"!==H(e)||P&&"object"==typeof e&&P in e)}(t))return G(L(Number(t)));if(function(e){if(!e||"object"!=typeof e||!O)return!1;try{return O.call(e),!0}catch(e){}return!1}(t))return G(L(O.call(t)));if(function(e){return!("[object Boolean]"!==H(e)||P&&"object"==typeof e&&P in e)}(t))return G(h.call(t));if(function(e){return!("[object String]"!==H(e)||P&&"object"==typeof e&&P in e)}(t))return G(L(String(t)));if(!function(e){return!("[object Date]"!==H(e)||P&&"object"==typeof e&&P in e)}(t)&&!function(e){return!("[object RegExp]"!==H(e)||P&&"object"==typeof e&&P in e)}(t)){var se=Q(t,L),ae=M?M(t)===Object.prototype:t instanceof Object||t.constructor===Object,ce=t instanceof Object?"":"null prototype",le=!ae&&P&&Object(t)===t&&P in t?g.call(H(t),8,-1):ce?"Object":"",ue=(ae||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(le||ce?"["+k.call(x.call([],le||[],ce||[]),": ")+"] ":"");return 0===se.length?ue+"{}":j?ue+"{"+Y(se,j)+"}":ue+"{ "+k.call(se,", ")+" }"}return String(t)};var U=Object.prototype.hasOwnProperty||function(e){return e in this};function D(e,t){return U.call(e,t)}function H(e){return v.call(e)}function z(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function W(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return W(g.call(e,0,t.maxStringLength),t)+r}return I(b.call(b.call(e,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,q),"single",t)}function q(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+w.call(t.toString(16))}function G(e){return"Object("+e+")"}function K(e){return e+" { ? }"}function J(e,t,n,r){return e+" ("+t+") {"+(r?Y(n,r):k.call(n,", "))+"}"}function Y(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+k.call(e,","+n)+"\n"+t.prev}function Q(e,t){var n=V(e),r=[];if(n){r.length=e.length;for(var o=0;o<e.length;o++)r[o]=D(e,o)?t(e[o],e):""}var i,s="function"==typeof j?j(e):[];if(T){i={};for(var a=0;a<s.length;a++)i["$"+s[a]]=s[a]}for(var c in e)D(e,c)&&(n&&String(Number(c))===c&&c<e.length||T&&i["$"+c]instanceof Symbol||(_.call(/[^\w$]/,c)?r.push(t(c,e)+": "+t(e[c],e)):r.push(c+": "+t(e[c],e))));if("function"==typeof j)for(var l=0;l<s.length;l++)N.call(e,s[l])&&r.push("["+t(s[l])+"]: "+t(e[s[l]],e));return r}},4155:e=>{var t,n,r=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===o||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:o}catch(e){t=o}try{n="function"==typeof clearTimeout?clearTimeout:i}catch(e){n=i}}();var a,c=[],l=!1,u=-1;function f(){l&&a&&(l=!1,a.length?c=a.concat(c):u=-1,c.length&&p())}function p(){if(!l){var e=s(f);l=!0;for(var t=c.length;t;){for(a=c,c=[];++u<t;)a&&a[u].run();u=-1,t=c.length}a=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===i||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function h(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new d(e,t)),1!==c.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=h,r.addListener=h,r.once=h,r.off=h,r.removeListener=h,r.removeAllListeners=h,r.emit=h,r.prependListener=h,r.prependOnceListener=h,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},5798:e=>{"use strict";var t=String.prototype.replace,n=/%20/g,r="RFC1738",o="RFC3986";e.exports={default:o,formatters:{RFC1738:function(e){return t.call(e,n,"+")},RFC3986:function(e){return String(e)}},RFC1738:r,RFC3986:o}},129:(e,t,n)=>{"use strict";var r=n(8261),o=n(5235),i=n(5798);e.exports={formats:i,parse:o,stringify:r}},5235:(e,t,n)=>{"use strict";var r=n(2769),o=Object.prototype.hasOwnProperty,i=Array.isArray,s={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},c=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},l=function(e,t,n,r){if(e){var i=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,a=n.depth>0&&/(\[[^[\]]*])/.exec(i),l=a?i.slice(0,a.index):i,u=[];if(l){if(!n.plainObjects&&o.call(Object.prototype,l)&&!n.allowPrototypes)return;u.push(l)}for(var f=0;n.depth>0&&null!==(a=s.exec(i))&&f<n.depth;){if(f+=1,!n.plainObjects&&o.call(Object.prototype,a[1].slice(1,-1))&&!n.allowPrototypes)return;u.push(a[1])}return a&&u.push("["+i.slice(a.index)+"]"),function(e,t,n,r){for(var o=r?t:c(t,n),i=e.length-1;i>=0;--i){var s,a=e[i];if("[]"===a&&n.parseArrays)s=[].concat(o);else{s=n.plainObjects?Object.create(null):{};var l="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,u=parseInt(l,10);n.parseArrays||""!==l?!isNaN(u)&&a!==l&&String(u)===l&&u>=0&&n.parseArrays&&u<=n.arrayLimit?(s=[])[u]=o:"__proto__"!==l&&(s[l]=o):s={0:o}}o=s}return o}(u,t,n,r)}};e.exports=function(e,t){var n=function(e){if(!e)return s;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?s.charset:e.charset;return{allowDots:void 0===e.allowDots?s.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:s.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:s.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:s.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:s.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:s.comma,decoder:"function"==typeof e.decoder?e.decoder:s.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:s.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:s.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:s.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:s.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:s.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:s.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var u="string"==typeof e?function(e,t){var n,l={},u=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,f=t.parameterLimit===1/0?void 0:t.parameterLimit,p=u.split(t.delimiter,f),d=-1,h=t.charset;if(t.charsetSentinel)for(n=0;n<p.length;++n)0===p[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===p[n]?h="utf-8":"utf8=%26%2310003%3B"===p[n]&&(h="iso-8859-1"),d=n,n=p.length);for(n=0;n<p.length;++n)if(n!==d){var v,m,y=p[n],g=y.indexOf("]="),b=-1===g?y.indexOf("="):g+1;-1===b?(v=t.decoder(y,s.decoder,h,"key"),m=t.strictNullHandling?null:""):(v=t.decoder(y.slice(0,b),s.decoder,h,"key"),m=r.maybeMap(c(y.slice(b+1),t),(function(e){return t.decoder(e,s.decoder,h,"value")}))),m&&t.interpretNumericEntities&&"iso-8859-1"===h&&(m=a(m)),y.indexOf("[]=")>-1&&(m=i(m)?[m]:m),o.call(l,v)?l[v]=r.combine(l[v],m):l[v]=m}return l}(e,n):e,f=n.plainObjects?Object.create(null):{},p=Object.keys(u),d=0;d<p.length;++d){var h=p[d],v=l(h,u[h],n,"string"==typeof e);f=r.merge(f,v,n)}return!0===n.allowSparse?f:r.compact(f)}},8261:(e,t,n)=>{"use strict";var r=n(7478),o=n(2769),i=n(5798),s=Object.prototype.hasOwnProperty,a={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},c=Array.isArray,l=String.prototype.split,u=Array.prototype.push,f=function(e,t){u.apply(e,c(t)?t:[t])},p=Date.prototype.toISOString,d=i.default,h={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:o.encode,encodeValuesOnly:!1,format:d,formatter:i.formatters[d],indices:!1,serializeDate:function(e){return p.call(e)},skipNulls:!1,strictNullHandling:!1},v={},m=function e(t,n,i,s,a,u,p,d,m,y,g,b,w,S,_){for(var x,k=t,E=_,C=0,O=!1;void 0!==(E=E.get(v))&&!O;){var j=E.get(t);if(C+=1,void 0!==j){if(j===C)throw new RangeError("Cyclic object value");O=!0}void 0===E.get(v)&&(C=0)}if("function"==typeof p?k=p(n,k):k instanceof Date?k=y(k):"comma"===i&&c(k)&&(k=o.maybeMap(k,(function(e){return e instanceof Date?y(e):e}))),null===k){if(s)return u&&!w?u(n,h.encoder,S,"key",g):n;k=""}if("string"==typeof(x=k)||"number"==typeof x||"boolean"==typeof x||"symbol"==typeof x||"bigint"==typeof x||o.isBuffer(k)){if(u){var A=w?n:u(n,h.encoder,S,"key",g);if("comma"===i&&w){for(var T=l.call(String(k),","),P="",N=0;N<T.length;++N)P+=(0===N?"":",")+b(u(T[N],h.encoder,S,"value",g));return[b(A)+"="+P]}return[b(A)+"="+b(u(k,h.encoder,S,"value",g))]}return[b(n)+"="+b(String(k))]}var M,R=[];if(void 0===k)return R;if("comma"===i&&c(k))M=[{value:k.length>0?k.join(",")||null:void 0}];else if(c(p))M=p;else{var L=Object.keys(k);M=d?L.sort(d):L}for(var F=0;F<M.length;++F){var I=M[F],B="object"==typeof I&&void 0!==I.value?I.value:k[I];if(!a||null!==B){var V=c(k)?"function"==typeof i?i(n,I):n:n+(m?"."+I:"["+I+"]");_.set(t,C);var $=r();$.set(v,_),f(R,e(B,V,i,s,a,u,p,d,m,y,g,b,w,S,$))}}return R};e.exports=function(e,t){var n,o=e,l=function(e){if(!e)return h;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||h.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!s.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=i.formatters[n],o=h.filter;return("function"==typeof e.filter||c(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:h.addQueryPrefix,allowDots:void 0===e.allowDots?h.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:h.charsetSentinel,delimiter:void 0===e.delimiter?h.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:h.encode,encoder:"function"==typeof e.encoder?e.encoder:h.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:h.encodeValuesOnly,filter:o,format:n,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:h.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:h.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:h.strictNullHandling}}(t);"function"==typeof l.filter?o=(0,l.filter)("",o):c(l.filter)&&(n=l.filter);var u,p=[];if("object"!=typeof o||null===o)return"";u=t&&t.arrayFormat in a?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var d=a[u];n||(n=Object.keys(o)),l.sort&&n.sort(l.sort);for(var v=r(),y=0;y<n.length;++y){var g=n[y];l.skipNulls&&null===o[g]||f(p,m(o[g],g,d,l.strictNullHandling,l.skipNulls,l.encode?l.encoder:null,l.filter,l.sort,l.allowDots,l.serializeDate,l.format,l.formatter,l.encodeValuesOnly,l.charset,v))}var b=p.join(l.delimiter),w=!0===l.addQueryPrefix?"?":"";return l.charsetSentinel&&("iso-8859-1"===l.charset?w+="utf8=%26%2310003%3B&":w+="utf8=%E2%9C%93&"),b.length>0?w+b:""}},2769:(e,t,n)=>{"use strict";var r=n(5798),o=Object.prototype.hasOwnProperty,i=Array.isArray,s=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),a=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:a,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var o=t[r],s=o.obj[o.prop],a=Object.keys(s),c=0;c<a.length;++c){var l=a[c],u=s[l];"object"==typeof u&&null!==u&&-1===n.indexOf(u)&&(t.push({obj:s,prop:l}),n.push(u))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],o=0;o<n.length;++o)void 0!==n[o]&&r.push(n[o]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,o,i){if(0===e.length)return e;var a=e;if("symbol"==typeof e?a=Symbol.prototype.toString.call(e):"string"!=typeof e&&(a=String(e)),"iso-8859-1"===n)return escape(a).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var c="",l=0;l<a.length;++l){var u=a.charCodeAt(l);45===u||46===u||95===u||126===u||u>=48&&u<=57||u>=65&&u<=90||u>=97&&u<=122||i===r.RFC1738&&(40===u||41===u)?c+=a.charAt(l):u<128?c+=s[u]:u<2048?c+=s[192|u>>6]+s[128|63&u]:u<55296||u>=57344?c+=s[224|u>>12]+s[128|u>>6&63]+s[128|63&u]:(l+=1,u=65536+((1023&u)<<10|1023&a.charCodeAt(l)),c+=s[240|u>>18]+s[128|u>>12&63]+s[128|u>>6&63]+s[128|63&u])}return c},isBuffer:function(e){return!(!e||"object"!=typeof e)&&!!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(i(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!o.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var s=t;return i(t)&&!i(n)&&(s=a(t,r)),i(t)&&i(n)?(n.forEach((function(n,i){if(o.call(t,i)){var s=t[i];s&&"object"==typeof s&&n&&"object"==typeof n?t[i]=e(s,n,r):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var s=n[i];return o.call(t,i)?t[i]=e(t[i],s,r):t[i]=s,t}),s)}}},5666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",a=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,i=Object.create(o.prototype),s=new j(r||[]);return i._invoke=function(e,t,n){var r=f;return function(o,i){if(r===d)throw new Error("Generator is already running");if(r===h){if("throw"===o)throw i;return T()}for(n.method=o,n.arg=i;;){var s=n.delegate;if(s){var a=E(s,n);if(a){if(a===v)continue;return a}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=h,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=d;var c=u(e,t,n);if("normal"===c.type){if(r=n.done?h:p,c.arg===v)continue;return{value:c.arg,done:n.done}}"throw"===c.type&&(r=h,n.method="throw",n.arg=c.arg)}}}(e,n,s),i}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var f="suspendedStart",p="suspendedYield",d="executing",h="completed",v={};function m(){}function y(){}function g(){}var b={};c(b,i,(function(){return this}));var w=Object.getPrototypeOf,S=w&&w(w(A([])));S&&S!==n&&r.call(S,i)&&(b=S);var _=g.prototype=m.prototype=Object.create(b);function x(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function k(e,t){function n(o,i,s,a){var c=u(e[o],e,i);if("throw"!==c.type){var l=c.arg,f=l.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,s,a)}),(function(e){n("throw",e,s,a)})):t.resolve(f).then((function(e){l.value=e,s(l)}),(function(e){return n("throw",e,s,a)}))}a(c.arg)}var o;this._invoke=function(e,r){function i(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(i,i):i()}}function E(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,E(e,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function O(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function A(e){if(e){var n=e[i];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,s=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return s.next=s}}return{next:T}}function T(){return{value:t,done:!0}}return y.prototype=g,c(_,"constructor",g),c(g,"constructor",y),y.displayName=c(g,a,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,c(e,a,"GeneratorFunction")),e.prototype=Object.create(_),e},e.awrap=function(e){return{__await:e}},x(k.prototype),c(k.prototype,s,(function(){return this})),e.AsyncIterator=k,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var s=new k(l(t,n,r,o),i);return e.isGeneratorFunction(n)?s:s.next().then((function(e){return e.done?e.value:s.next()}))},x(_),c(_,a,"Generator"),c(_,i,(function(){return this})),c(_,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=A,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(O),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return a.type="throw",a.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var s=this.tryEntries[i],a=s.completion;if("root"===s.tryLoc)return o("end");if(s.tryLoc<=this.prev){var c=r.call(s,"catchLoc"),l=r.call(s,"finallyLoc");if(c&&l){if(this.prev<s.catchLoc)return o(s.catchLoc,!0);if(this.prev<s.finallyLoc)return o(s.finallyLoc)}else if(c){if(this.prev<s.catchLoc)return o(s.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return o(s.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var s=i?i.completion:{};return s.type=e,s.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(s)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),O(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;O(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:A(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),v}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},7478:(e,t,n)=>{"use strict";var r=n(210),o=n(1924),i=n(631),s=r("%TypeError%"),a=r("%WeakMap%",!0),c=r("%Map%",!0),l=o("WeakMap.prototype.get",!0),u=o("WeakMap.prototype.set",!0),f=o("WeakMap.prototype.has",!0),p=o("Map.prototype.get",!0),d=o("Map.prototype.set",!0),h=o("Map.prototype.has",!0),v=function(e,t){for(var n,r=e;null!==(n=r.next);r=n)if(n.key===t)return r.next=n.next,n.next=e.next,e.next=n,n};e.exports=function(){var e,t,n,r={assert:function(e){if(!r.has(e))throw new s("Side channel does not contain "+i(e))},get:function(r){if(a&&r&&("object"==typeof r||"function"==typeof r)){if(e)return l(e,r)}else if(c){if(t)return p(t,r)}else if(n)return function(e,t){var n=v(e,t);return n&&n.value}(n,r)},has:function(r){if(a&&r&&("object"==typeof r||"function"==typeof r)){if(e)return f(e,r)}else if(c){if(t)return h(t,r)}else if(n)return function(e,t){return!!v(e,t)}(n,r);return!1},set:function(r,o){a&&r&&("object"==typeof r||"function"==typeof r)?(e||(e=new a),u(e,r,o)):c?(t||(t=new c),d(t,r,o)):(n||(n={key:{},next:null}),function(e,t,n){var r=v(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(n,r,o))}};return r}},3379:(e,t,n)=>{"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},i=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),s=[];function a(e){for(var t=-1,n=0;n<s.length;n++)if(s[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var i=e[o],c=t.base?i[0]+t.base:i[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var f=a(u),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==f?(s[f].references++,s[f].updater(p)):s.push({identifier:u,updater:m(p,t),references:1}),r.push(u)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=n.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var s=i(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(t)}return t}var u,f=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function p(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=f(t,o);else{var i=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}function d(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,v=0;function m(e,t){var n,r,o;if(t.singleton){var i=v++;n=h||(h=l(t)),r=p.bind(null,n,i,!1),o=p.bind(null,n,i,!0)}else n=l(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);s[o].references--}for(var i=c(e,t),l=0;l<n.length;l++){var u=a(n[l]);0===s[u].references&&(s[u].updater(),s.splice(u,1))}n=i}}}},4279:e=>{function t(){}t.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function o(){r.off(e,o),t.apply(n,arguments)}return o._=t,this.on(e,o,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,o=n.length;r<o;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],o=[];if(r&&t)for(var i=0,s=r.length;i<s;i++)r[i].fn!==t&&r[i].fn._!==t&&o.push(r[i]);return o.length?n[e]=o:delete n[e],this}},e.exports=t,e.exports.TinyEmitter=t},6497:(e,t,n)=>{var r=n(4279);e.exports=new r},3744:(e,t)=>{"use strict";t.Z=(e,t)=>{const n=e.__vccOpts||e;for(const[e,r]of t)n[e]=r;return n}},821:(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>dr,Comment:()=>Wo,EffectScope:()=>ae,Fragment:()=>Ho,KeepAlive:()=>Er,ReactiveEffect:()=>_e,Static:()=>qo,Suspense:()=>Kn,Teleport:()=>Lo,Text:()=>zo,Transition:()=>Gs,TransitionGroup:()=>fa,VueElement:()=>$s,callWithAsyncErrorHandling:()=>rn,callWithErrorHandling:()=>nn,camelize:()=>J,capitalize:()=>X,cloneVNode:()=>di,compatUtils:()=>bs,compile:()=>Nf,computed:()=>Zi,createApp:()=>Da,createBlock:()=>ni,createCommentVNode:()=>mi,createElementBlock:()=>ti,createElementVNode:()=>li,createHydrationRenderer:()=>Oo,createPropsRestProxy:()=>cs,createRenderer:()=>Co,createSSRApp:()=>Ha,createSlots:()=>xi,createStaticVNode:()=>vi,createTextVNode:()=>hi,createVNode:()=>ui,customRef:()=>Gt,defineAsyncComponent:()=>_r,defineComponent:()=>wr,defineCustomElement:()=>Is,defineEmits:()=>ts,defineExpose:()=>ns,defineProps:()=>es,defineSSRCustomElement:()=>Bs,devtools:()=>jn,effect:()=>ke,effectScope:()=>ce,getCurrentInstance:()=>Li,getCurrentScope:()=>ue,getTransitionRawChildren:()=>br,guardReactiveProps:()=>pi,h:()=>us,handleError:()=>on,hydrate:()=>Ua,initCustomFormatter:()=>ds,initDirectivesForSSR:()=>qa,inject:()=>tr,isMemoSame:()=>vs,isProxy:()=>Tt,isReactive:()=>Ot,isReadonly:()=>jt,isRef:()=>It,isRuntimeOnly:()=>Wi,isShallow:()=>At,isVNode:()=>ri,markRaw:()=>Nt,mergeDefaults:()=>as,mergeProps:()=>wi,nextTick:()=>bn,normalizeClass:()=>d,normalizeProps:()=>h,normalizeStyle:()=>l,onActivated:()=>Or,onBeforeMount:()=>Lr,onBeforeUnmount:()=>Vr,onBeforeUpdate:()=>Ir,onDeactivated:()=>jr,onErrorCaptured:()=>zr,onMounted:()=>Fr,onRenderTracked:()=>Hr,onRenderTriggered:()=>Dr,onScopeDispose:()=>fe,onServerPrefetch:()=>Ur,onUnmounted:()=>$r,onUpdated:()=>Br,openBlock:()=>Jo,popScopeId:()=>Vn,provide:()=>er,proxyRefs:()=>Wt,pushScopeId:()=>Bn,queuePostFlushCb:()=>xn,reactive:()=>_t,readonly:()=>kt,ref:()=>Bt,registerRuntimeCompiler:()=>zi,render:()=>$a,renderList:()=>_i,renderSlot:()=>ki,resolveComponent:()=>Io,resolveDirective:()=>$o,resolveDynamicComponent:()=>Vo,resolveFilter:()=>gs,resolveTransitionHooks:()=>vr,setBlockTracking:()=>Zo,setDevtoolsHook:()=>Pn,setTransitionHooks:()=>gr,shallowReactive:()=>xt,shallowReadonly:()=>Et,shallowRef:()=>Vt,ssrContextKey:()=>fs,ssrUtils:()=>ys,stop:()=>Ee,toDisplayString:()=>w,toHandlerKey:()=>Z,toHandlers:()=>Ci,toRaw:()=>Pt,toRef:()=>Yt,toRefs:()=>Kt,transformVNodeArgs:()=>ii,triggerRef:()=>Dt,unref:()=>Ht,useAttrs:()=>is,useCssModule:()=>Us,useCssVars:()=>Ds,useSSRContext:()=>ps,useSlots:()=>os,useTransitionState:()=>fr,vModelCheckbox:()=>ba,vModelDynamic:()=>Ca,vModelRadio:()=>Sa,vModelSelect:()=>_a,vModelText:()=>ga,vShow:()=>Ma,version:()=>ms,warn:()=>Zt,watch:()=>sr,watchEffect:()=>nr,watchPostEffect:()=>rr,watchSyncEffect:()=>or,withAsyncContext:()=>ls,withCtx:()=>Un,withDefaults:()=>rs,withDirectives:()=>vo,withKeys:()=>Na,withMemo:()=>hs,withModifiers:()=>Ta,withScopeId:()=>$n});var r={};function o(e,t){const n=Object.create(null),r=e.split(",");for(let e=0;e<r.length;e++)n[r[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}n.r(r),n.d(r,{BaseTransition:()=>dr,Comment:()=>Wo,EffectScope:()=>ae,Fragment:()=>Ho,KeepAlive:()=>Er,ReactiveEffect:()=>_e,Static:()=>qo,Suspense:()=>Kn,Teleport:()=>Lo,Text:()=>zo,Transition:()=>Gs,TransitionGroup:()=>fa,VueElement:()=>$s,callWithAsyncErrorHandling:()=>rn,callWithErrorHandling:()=>nn,camelize:()=>J,capitalize:()=>X,cloneVNode:()=>di,compatUtils:()=>bs,computed:()=>Zi,createApp:()=>Da,createBlock:()=>ni,createCommentVNode:()=>mi,createElementBlock:()=>ti,createElementVNode:()=>li,createHydrationRenderer:()=>Oo,createPropsRestProxy:()=>cs,createRenderer:()=>Co,createSSRApp:()=>Ha,createSlots:()=>xi,createStaticVNode:()=>vi,createTextVNode:()=>hi,createVNode:()=>ui,customRef:()=>Gt,defineAsyncComponent:()=>_r,defineComponent:()=>wr,defineCustomElement:()=>Is,defineEmits:()=>ts,defineExpose:()=>ns,defineProps:()=>es,defineSSRCustomElement:()=>Bs,devtools:()=>jn,effect:()=>ke,effectScope:()=>ce,getCurrentInstance:()=>Li,getCurrentScope:()=>ue,getTransitionRawChildren:()=>br,guardReactiveProps:()=>pi,h:()=>us,handleError:()=>on,hydrate:()=>Ua,initCustomFormatter:()=>ds,initDirectivesForSSR:()=>qa,inject:()=>tr,isMemoSame:()=>vs,isProxy:()=>Tt,isReactive:()=>Ot,isReadonly:()=>jt,isRef:()=>It,isRuntimeOnly:()=>Wi,isShallow:()=>At,isVNode:()=>ri,markRaw:()=>Nt,mergeDefaults:()=>as,mergeProps:()=>wi,nextTick:()=>bn,normalizeClass:()=>d,normalizeProps:()=>h,normalizeStyle:()=>l,onActivated:()=>Or,onBeforeMount:()=>Lr,onBeforeUnmount:()=>Vr,onBeforeUpdate:()=>Ir,onDeactivated:()=>jr,onErrorCaptured:()=>zr,onMounted:()=>Fr,onRenderTracked:()=>Hr,onRenderTriggered:()=>Dr,onScopeDispose:()=>fe,onServerPrefetch:()=>Ur,onUnmounted:()=>$r,onUpdated:()=>Br,openBlock:()=>Jo,popScopeId:()=>Vn,provide:()=>er,proxyRefs:()=>Wt,pushScopeId:()=>Bn,queuePostFlushCb:()=>xn,reactive:()=>_t,readonly:()=>kt,ref:()=>Bt,registerRuntimeCompiler:()=>zi,render:()=>$a,renderList:()=>_i,renderSlot:()=>ki,resolveComponent:()=>Io,resolveDirective:()=>$o,resolveDynamicComponent:()=>Vo,resolveFilter:()=>gs,resolveTransitionHooks:()=>vr,setBlockTracking:()=>Zo,setDevtoolsHook:()=>Pn,setTransitionHooks:()=>gr,shallowReactive:()=>xt,shallowReadonly:()=>Et,shallowRef:()=>Vt,ssrContextKey:()=>fs,ssrUtils:()=>ys,stop:()=>Ee,toDisplayString:()=>w,toHandlerKey:()=>Z,toHandlers:()=>Ci,toRaw:()=>Pt,toRef:()=>Yt,toRefs:()=>Kt,transformVNodeArgs:()=>ii,triggerRef:()=>Dt,unref:()=>Ht,useAttrs:()=>is,useCssModule:()=>Us,useCssVars:()=>Ds,useSSRContext:()=>ps,useSlots:()=>os,useTransitionState:()=>fr,vModelCheckbox:()=>ba,vModelDynamic:()=>Ca,vModelRadio:()=>Sa,vModelSelect:()=>_a,vModelText:()=>ga,vShow:()=>Ma,version:()=>ms,warn:()=>Zt,watch:()=>sr,watchEffect:()=>nr,watchPostEffect:()=>rr,watchSyncEffect:()=>or,withAsyncContext:()=>ls,withCtx:()=>Un,withDefaults:()=>rs,withDirectives:()=>vo,withKeys:()=>Na,withMemo:()=>hs,withModifiers:()=>Ta,withScopeId:()=>$n});const i=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt");const s="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",a=o(s);function c(e){return!!e||""===e}function l(e){if(M(e)){const t={};for(let n=0;n<e.length;n++){const r=e[n],o=B(r)?p(r):l(r);if(o)for(const e in o)t[e]=o[e]}return t}return B(e)||$(e)?e:void 0}const u=/;(?![^(]*\))/g,f=/:(.+)/;function p(e){const t={};return e.split(u).forEach((e=>{if(e){const n=e.split(f);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function d(e){let t="";if(B(e))t=e;else if(M(e))for(let n=0;n<e.length;n++){const r=d(e[n]);r&&(t+=r+" ")}else if($(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function h(e){if(!e)return null;let{class:t,style:n}=e;return t&&!B(t)&&(e.class=d(t)),n&&(e.style=l(n)),e}const v=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),m=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),y=o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function g(e,t){if(e===t)return!0;let n=F(e),r=F(t);if(n||r)return!(!n||!r)&&e.getTime()===t.getTime();if(n=M(e),r=M(t),n||r)return!(!n||!r)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let r=0;n&&r<e.length;r++)n=g(e[r],t[r]);return n}(e,t);if(n=$(e),r=$(t),n||r){if(!n||!r)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const r=e.hasOwnProperty(n),o=t.hasOwnProperty(n);if(r&&!o||!r&&o||!g(e[n],t[n]))return!1}}return String(e)===String(t)}function b(e,t){return e.findIndex((e=>g(e,t)))}const w=e=>null==e?"":M(e)||$(e)&&(e.toString===D||!I(e.toString))?JSON.stringify(e,S,2):String(e),S=(e,t)=>t&&t.__v_isRef?S(e,t.value):R(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:L(t)?{[`Set(${t.size})`]:[...t.values()]}:!$(t)||M(t)||z(t)?t:String(t),_={},x=[],k=()=>{},E=()=>!1,C=/^on[^a-z]/,O=e=>C.test(e),j=e=>e.startsWith("onUpdate:"),A=Object.assign,T=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},P=Object.prototype.hasOwnProperty,N=(e,t)=>P.call(e,t),M=Array.isArray,R=e=>"[object Map]"===H(e),L=e=>"[object Set]"===H(e),F=e=>e instanceof Date,I=e=>"function"==typeof e,B=e=>"string"==typeof e,V=e=>"symbol"==typeof e,$=e=>null!==e&&"object"==typeof e,U=e=>$(e)&&I(e.then)&&I(e.catch),D=Object.prototype.toString,H=e=>D.call(e),z=e=>"[object Object]"===H(e),W=e=>B(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,q=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),G=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},K=/-(\w)/g,J=G((e=>e.replace(K,((e,t)=>t?t.toUpperCase():"")))),Y=/\B([A-Z])/g,Q=G((e=>e.replace(Y,"-$1").toLowerCase())),X=G((e=>e.charAt(0).toUpperCase()+e.slice(1))),Z=G((e=>e?`on${X(e)}`:"")),ee=(e,t)=>!Object.is(e,t),te=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},ne=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},re=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let oe;let ie;const se=[];class ae{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&ie&&(this.parent=ie,this.index=(ie.scopes||(ie.scopes=[])).push(this)-1)}run(e){if(this.active)try{return this.on(),e()}finally{this.off()}else 0}on(){this.active&&(se.push(this),ie=this)}off(){this.active&&(se.pop(),ie=se[se.length-1])}stop(e){if(this.active){if(this.effects.forEach((e=>e.stop())),this.cleanups.forEach((e=>e())),this.scopes&&this.scopes.forEach((e=>e.stop(!0))),this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function ce(e){return new ae(e)}function le(e,t){(t=t||ie)&&t.active&&t.effects.push(e)}function ue(){return ie}function fe(e){ie&&ie.cleanups.push(e)}const pe=e=>{const t=new Set(e);return t.w=0,t.n=0,t},de=e=>(e.w&ye)>0,he=e=>(e.n&ye)>0,ve=new WeakMap;let me=0,ye=1;const ge=[];let be;const we=Symbol(""),Se=Symbol("");class _e{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],le(this,n)}run(){if(!this.active)return this.fn();if(!ge.length||!ge.includes(this))try{return ge.push(be=this),Oe.push(Ce),Ce=!0,ye=1<<++me,me<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=ye})(this):xe(this),this.fn()}finally{me<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let r=0;r<t.length;r++){const o=t[r];de(o)&&!he(o)?o.delete(e):t[n++]=o,o.w&=~ye,o.n&=~ye}t.length=n}})(this),ye=1<<--me,Ae(),ge.pop();const e=ge.length;be=e>0?ge[e-1]:void 0}}stop(){this.active&&(xe(this),this.onStop&&this.onStop(),this.active=!1)}}function xe(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function ke(e,t){e.effect&&(e=e.effect.fn);const n=new _e(e);t&&(A(n,t),t.scope&&le(n,t.scope)),t&&t.lazy||n.run();const r=n.run.bind(n);return r.effect=n,r}function Ee(e){e.effect.stop()}let Ce=!0;const Oe=[];function je(){Oe.push(Ce),Ce=!1}function Ae(){const e=Oe.pop();Ce=void 0===e||e}function Te(e,t,n){if(!Pe())return;let r=ve.get(e);r||ve.set(e,r=new Map);let o=r.get(n);o||r.set(n,o=pe());Ne(o,undefined)}function Pe(){return Ce&&void 0!==be}function Ne(e,t){let n=!1;me<=30?he(e)||(e.n|=ye,n=!de(e)):n=!e.has(be),n&&(e.add(be),be.deps.push(e))}function Me(e,t,n,r,o,i){const s=ve.get(e);if(!s)return;let a=[];if("clear"===t)a=[...s.values()];else if("length"===n&&M(e))s.forEach(((e,t)=>{("length"===t||t>=r)&&a.push(e)}));else switch(void 0!==n&&a.push(s.get(n)),t){case"add":M(e)?W(n)&&a.push(s.get("length")):(a.push(s.get(we)),R(e)&&a.push(s.get(Se)));break;case"delete":M(e)||(a.push(s.get(we)),R(e)&&a.push(s.get(Se)));break;case"set":R(e)&&a.push(s.get(we))}if(1===a.length)a[0]&&Re(a[0]);else{const e=[];for(const t of a)t&&e.push(...t);Re(pe(e))}}function Re(e,t){for(const t of M(e)?e:[...e])(t!==be||t.allowRecurse)&&(t.scheduler?t.scheduler():t.run())}const Le=o("__proto__,__v_isRef,__isVue"),Fe=new Set(Object.getOwnPropertyNames(Symbol).map((e=>Symbol[e])).filter(V)),Ie=He(),Be=He(!1,!0),Ve=He(!0),$e=He(!0,!0),Ue=De();function De(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=Pt(this);for(let e=0,t=this.length;e<t;e++)Te(n,0,e+"");const r=n[t](...e);return-1===r||!1===r?n[t](...e.map(Pt)):r}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){je();const n=Pt(this)[t].apply(this,e);return Ae(),n}})),e}function He(e=!1,t=!1){return function(n,r,o){if("__v_isReactive"===r)return!e;if("__v_isReadonly"===r)return e;if("__v_isShallow"===r)return t;if("__v_raw"===r&&o===(e?t?wt:bt:t?gt:yt).get(n))return n;const i=M(n);if(!e&&i&&N(Ue,r))return Reflect.get(Ue,r,o);const s=Reflect.get(n,r,o);if(V(r)?Fe.has(r):Le(r))return s;if(e||Te(n,0,r),t)return s;if(It(s)){return!i||!W(r)?s.value:s}return $(s)?e?kt(s):_t(s):s}}function ze(e=!1){return function(t,n,r,o){let i=t[n];if(jt(i)&&It(i)&&!It(r))return!1;if(!e&&!jt(r)&&(At(r)||(r=Pt(r),i=Pt(i)),!M(t)&&It(i)&&!It(r)))return i.value=r,!0;const s=M(t)&&W(n)?Number(n)<t.length:N(t,n),a=Reflect.set(t,n,r,o);return t===Pt(o)&&(s?ee(r,i)&&Me(t,"set",n,r):Me(t,"add",n,r)),a}}const We={get:Ie,set:ze(),deleteProperty:function(e,t){const n=N(e,t),r=(e[t],Reflect.deleteProperty(e,t));return r&&n&&Me(e,"delete",t,void 0),r},has:function(e,t){const n=Reflect.has(e,t);return V(t)&&Fe.has(t)||Te(e,0,t),n},ownKeys:function(e){return Te(e,0,M(e)?"length":we),Reflect.ownKeys(e)}},qe={get:Ve,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Ge=A({},We,{get:Be,set:ze(!0)}),Ke=A({},qe,{get:$e}),Je=e=>e,Ye=e=>Reflect.getPrototypeOf(e);function Qe(e,t,n=!1,r=!1){const o=Pt(e=e.__v_raw),i=Pt(t);t!==i&&!n&&Te(o,0,t),!n&&Te(o,0,i);const{has:s}=Ye(o),a=r?Je:n?Rt:Mt;return s.call(o,t)?a(e.get(t)):s.call(o,i)?a(e.get(i)):void(e!==o&&e.get(t))}function Xe(e,t=!1){const n=this.__v_raw,r=Pt(n),o=Pt(e);return e!==o&&!t&&Te(r,0,e),!t&&Te(r,0,o),e===o?n.has(e):n.has(e)||n.has(o)}function Ze(e,t=!1){return e=e.__v_raw,!t&&Te(Pt(e),0,we),Reflect.get(e,"size",e)}function et(e){e=Pt(e);const t=Pt(this);return Ye(t).has.call(t,e)||(t.add(e),Me(t,"add",e,e)),this}function tt(e,t){t=Pt(t);const n=Pt(this),{has:r,get:o}=Ye(n);let i=r.call(n,e);i||(e=Pt(e),i=r.call(n,e));const s=o.call(n,e);return n.set(e,t),i?ee(t,s)&&Me(n,"set",e,t):Me(n,"add",e,t),this}function nt(e){const t=Pt(this),{has:n,get:r}=Ye(t);let o=n.call(t,e);o||(e=Pt(e),o=n.call(t,e));r&&r.call(t,e);const i=t.delete(e);return o&&Me(t,"delete",e,void 0),i}function rt(){const e=Pt(this),t=0!==e.size,n=e.clear();return t&&Me(e,"clear",void 0,void 0),n}function ot(e,t){return function(n,r){const o=this,i=o.__v_raw,s=Pt(i),a=t?Je:e?Rt:Mt;return!e&&Te(s,0,we),i.forEach(((e,t)=>n.call(r,a(e),a(t),o)))}}function it(e,t,n){return function(...r){const o=this.__v_raw,i=Pt(o),s=R(i),a="entries"===e||e===Symbol.iterator&&s,c="keys"===e&&s,l=o[e](...r),u=n?Je:t?Rt:Mt;return!t&&Te(i,0,c?Se:we),{next(){const{value:e,done:t}=l.next();return t?{value:e,done:t}:{value:a?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function st(e){return function(...t){return"delete"!==e&&this}}function at(){const e={get(e){return Qe(this,e)},get size(){return Ze(this)},has:Xe,add:et,set:tt,delete:nt,clear:rt,forEach:ot(!1,!1)},t={get(e){return Qe(this,e,!1,!0)},get size(){return Ze(this)},has:Xe,add:et,set:tt,delete:nt,clear:rt,forEach:ot(!1,!0)},n={get(e){return Qe(this,e,!0)},get size(){return Ze(this,!0)},has(e){return Xe.call(this,e,!0)},add:st("add"),set:st("set"),delete:st("delete"),clear:st("clear"),forEach:ot(!0,!1)},r={get(e){return Qe(this,e,!0,!0)},get size(){return Ze(this,!0)},has(e){return Xe.call(this,e,!0)},add:st("add"),set:st("set"),delete:st("delete"),clear:st("clear"),forEach:ot(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((o=>{e[o]=it(o,!1,!1),n[o]=it(o,!0,!1),t[o]=it(o,!1,!0),r[o]=it(o,!0,!0)})),[e,n,t,r]}const[ct,lt,ut,ft]=at();function pt(e,t){const n=t?e?ft:ut:e?lt:ct;return(t,r,o)=>"__v_isReactive"===r?!e:"__v_isReadonly"===r?e:"__v_raw"===r?t:Reflect.get(N(n,r)&&r in t?n:t,r,o)}const dt={get:pt(!1,!1)},ht={get:pt(!1,!0)},vt={get:pt(!0,!1)},mt={get:pt(!0,!0)};const yt=new WeakMap,gt=new WeakMap,bt=new WeakMap,wt=new WeakMap;function St(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>H(e).slice(8,-1))(e))}function _t(e){return jt(e)?e:Ct(e,!1,We,dt,yt)}function xt(e){return Ct(e,!1,Ge,ht,gt)}function kt(e){return Ct(e,!0,qe,vt,bt)}function Et(e){return Ct(e,!0,Ke,mt,wt)}function Ct(e,t,n,r,o){if(!$(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const i=o.get(e);if(i)return i;const s=St(e);if(0===s)return e;const a=new Proxy(e,2===s?r:n);return o.set(e,a),a}function Ot(e){return jt(e)?Ot(e.__v_raw):!(!e||!e.__v_isReactive)}function jt(e){return!(!e||!e.__v_isReadonly)}function At(e){return!(!e||!e.__v_isShallow)}function Tt(e){return Ot(e)||jt(e)}function Pt(e){const t=e&&e.__v_raw;return t?Pt(t):e}function Nt(e){return ne(e,"__v_skip",!0),e}const Mt=e=>$(e)?_t(e):e,Rt=e=>$(e)?kt(e):e;function Lt(e){Pe()&&((e=Pt(e)).dep||(e.dep=pe()),Ne(e.dep))}function Ft(e,t){(e=Pt(e)).dep&&Re(e.dep)}function It(e){return Boolean(e&&!0===e.__v_isRef)}function Bt(e){return $t(e,!1)}function Vt(e){return $t(e,!0)}function $t(e,t){return It(e)?e:new Ut(e,t)}class Ut{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:Pt(e),this._value=t?e:Mt(e)}get value(){return Lt(this),this._value}set value(e){e=this.__v_isShallow?e:Pt(e),ee(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:Mt(e),Ft(this))}}function Dt(e){Ft(e)}function Ht(e){return It(e)?e.value:e}const zt={get:(e,t,n)=>Ht(Reflect.get(e,t,n)),set:(e,t,n,r)=>{const o=e[t];return It(o)&&!It(n)?(o.value=n,!0):Reflect.set(e,t,n,r)}};function Wt(e){return Ot(e)?e:new Proxy(e,zt)}class qt{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>Lt(this)),(()=>Ft(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function Gt(e){return new qt(e)}function Kt(e){const t=M(e)?new Array(e.length):{};for(const n in e)t[n]=Yt(e,n);return t}class Jt{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Yt(e,t,n){const r=e[t];return It(r)?r:new Jt(e,t,n)}class Qt{constructor(e,t,n,r){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new _e(e,(()=>{this._dirty||(this._dirty=!0,Ft(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!r,this.__v_isReadonly=n}get value(){const e=Pt(this);return Lt(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}Promise.resolve();const Xt=[];function Zt(e,...t){je();const n=Xt.length?Xt[Xt.length-1].component:null,r=n&&n.appContext.config.warnHandler,o=function(){let e=Xt[Xt.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const r=e.component&&e.component.parent;e=r&&r.vnode}return t}();if(r)nn(r,n,11,[e+t.join(""),n&&n.proxy,o.map((({vnode:e})=>`at <${Qi(n,e.type)}>`)).join("\n"),o]);else{const n=[`[Vue warn]: ${e}`,...t];o.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",r=!!e.component&&null==e.component.parent,o=` at <${Qi(e.component,e.type,r)}`,i=">"+n;return e.props?[o,...en(e.props),i]:[o+i]}(e))})),t}(o)),console.warn(...n)}Ae()}function en(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...tn(n,e[n]))})),n.length>3&&t.push(" ..."),t}function tn(e,t,n){return B(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:It(t)?(t=tn(e,Pt(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):I(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=Pt(t),n?t:[`${e}=`,t])}function nn(e,t,n,r){let o;try{o=r?e(...r):e()}catch(e){on(e,t,n)}return o}function rn(e,t,n,r){if(I(e)){const o=nn(e,t,n,r);return o&&U(o)&&o.catch((e=>{on(e,t,n)})),o}const o=[];for(let i=0;i<e.length;i++)o.push(rn(e[i],t,n,r));return o}function on(e,t,n,r=!0){t&&t.vnode;if(t){let r=t.parent;const o=t.proxy,i=n;for(;r;){const t=r.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,o,i))return;r=r.parent}const s=t.appContext.config.errorHandler;if(s)return void nn(s,null,10,[e,o,i])}!function(e,t,n,r=!0){console.error(e)}(e,0,0,r)}let sn=!1,an=!1;const cn=[];let ln=0;const un=[];let fn=null,pn=0;const dn=[];let hn=null,vn=0;const mn=Promise.resolve();let yn=null,gn=null;function bn(e){const t=yn||mn;return e?t.then(this?e.bind(this):e):t}function wn(e){cn.length&&cn.includes(e,sn&&e.allowRecurse?ln+1:ln)||e===gn||(null==e.id?cn.push(e):cn.splice(function(e){let t=ln+1,n=cn.length;for(;t<n;){const r=t+n>>>1;Cn(cn[r])<e?t=r+1:n=r}return t}(e.id),0,e),Sn())}function Sn(){sn||an||(an=!0,yn=mn.then(On))}function _n(e,t,n,r){M(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?r+1:r)||n.push(e),Sn()}function xn(e){_n(e,hn,dn,vn)}function kn(e,t=null){if(un.length){for(gn=t,fn=[...new Set(un)],un.length=0,pn=0;pn<fn.length;pn++)fn[pn]();fn=null,pn=0,gn=null,kn(e,t)}}function En(e){if(dn.length){const e=[...new Set(dn)];if(dn.length=0,hn)return void hn.push(...e);for(hn=e,hn.sort(((e,t)=>Cn(e)-Cn(t))),vn=0;vn<hn.length;vn++)hn[vn]();hn=null,vn=0}}const Cn=e=>null==e.id?1/0:e.id;function On(e){an=!1,sn=!0,kn(e),cn.sort(((e,t)=>Cn(e)-Cn(t)));try{for(ln=0;ln<cn.length;ln++){const e=cn[ln];e&&!1!==e.active&&nn(e,null,14)}}finally{ln=0,cn.length=0,En(),sn=!1,yn=null,(cn.length||un.length||dn.length)&&On(e)}}new Set;new Map;let jn,An=[],Tn=!1;function Pn(e,t){var n,r;if(jn=e,jn)jn.enabled=!0,An.forEach((({event:e,args:t})=>jn.emit(e,...t))),An=[];else if("undefined"!=typeof window&&window.HTMLElement&&!(null===(r=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===r?void 0:r.includes("jsdom"))){(t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{Pn(e,t)})),setTimeout((()=>{jn||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,Tn=!0,An=[])}),3e3)}else Tn=!0,An=[]}function Nn(e,t,...n){const r=e.vnode.props||_;let o=n;const i=t.startsWith("update:"),s=i&&t.slice(7);if(s&&s in r){const e=`${"modelValue"===s?"model":s}Modifiers`,{number:t,trim:i}=r[e]||_;i?o=n.map((e=>e.trim())):t&&(o=n.map(re))}let a;let c=r[a=Z(t)]||r[a=Z(J(t))];!c&&i&&(c=r[a=Z(Q(t))]),c&&rn(c,e,6,o);const l=r[a+"Once"];if(l){if(e.emitted){if(e.emitted[a])return}else e.emitted={};e.emitted[a]=!0,rn(l,e,6,o)}}function Mn(e,t,n=!1){const r=t.emitsCache,o=r.get(e);if(void 0!==o)return o;const i=e.emits;let s={},a=!1;if(!I(e)){const r=e=>{const n=Mn(e,t,!0);n&&(a=!0,A(s,n))};!n&&t.mixins.length&&t.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}return i||a?(M(i)?i.forEach((e=>s[e]=null)):A(s,i),r.set(e,s),s):(r.set(e,null),null)}function Rn(e,t){return!(!e||!O(t))&&(t=t.slice(2).replace(/Once$/,""),N(e,t[0].toLowerCase()+t.slice(1))||N(e,Q(t))||N(e,t))}let Ln=null,Fn=null;function In(e){const t=Ln;return Ln=e,Fn=e&&e.type.__scopeId||null,t}function Bn(e){Fn=e}function Vn(){Fn=null}const $n=e=>Un;function Un(e,t=Ln,n){if(!t)return e;if(e._n)return e;const r=(...n)=>{r._d&&Zo(-1);const o=In(t),i=e(...n);return In(o),r._d&&Zo(1),i};return r._n=!0,r._c=!0,r._d=!0,r}function Dn(e){const{type:t,vnode:n,proxy:r,withProxy:o,props:i,propsOptions:[s],slots:a,attrs:c,emit:l,render:u,renderCache:f,data:p,setupState:d,ctx:h,inheritAttrs:v}=e;let m,y;const g=In(e);try{if(4&n.shapeFlag){const e=o||r;m=yi(u.call(e,e,f,i,d,p,h)),y=c}else{const e=t;0,m=yi(e.length>1?e(i,{attrs:c,slots:a,emit:l}):e(i,null)),y=t.props?c:zn(c)}}catch(t){Go.length=0,on(t,e,1),m=ui(Wo)}let b=m;if(y&&!1!==v){const e=Object.keys(y),{shapeFlag:t}=b;e.length&&7&t&&(s&&e.some(j)&&(y=Wn(y,s)),b=di(b,y))}return n.dirs&&(b.dirs=b.dirs?b.dirs.concat(n.dirs):n.dirs),n.transition&&(b.transition=n.transition),m=b,In(g),m}function Hn(e){let t;for(let n=0;n<e.length;n++){const r=e[n];if(!ri(r))return;if(r.type!==Wo||"v-if"===r.children){if(t)return;t=r}}return t}const zn=e=>{let t;for(const n in e)("class"===n||"style"===n||O(n))&&((t||(t={}))[n]=e[n]);return t},Wn=(e,t)=>{const n={};for(const r in e)j(r)&&r.slice(9)in t||(n[r]=e[r]);return n};function qn(e,t,n){const r=Object.keys(t);if(r.length!==Object.keys(e).length)return!0;for(let o=0;o<r.length;o++){const i=r[o];if(t[i]!==e[i]&&!Rn(n,i))return!0}return!1}function Gn({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const Kn={name:"Suspense",__isSuspense:!0,process(e,t,n,r,o,i,s,a,c,l){null==e?function(e,t,n,r,o,i,s,a,c){const{p:l,o:{createElement:u}}=c,f=u("div"),p=e.suspense=Yn(e,o,r,t,f,n,i,s,a,c);l(null,p.pendingBranch=e.ssContent,f,null,r,p,i,s),p.deps>0?(Jn(e,"onPending"),Jn(e,"onFallback"),l(null,e.ssFallback,t,n,r,null,i,s),Zn(p,e.ssFallback)):p.resolve()}(t,n,r,o,i,s,a,c,l):function(e,t,n,r,o,i,s,a,{p:c,um:l,o:{createElement:u}}){const f=t.suspense=e.suspense;f.vnode=t,t.el=e.el;const p=t.ssContent,d=t.ssFallback,{activeBranch:h,pendingBranch:v,isInFallback:m,isHydrating:y}=f;if(v)f.pendingBranch=p,oi(p,v)?(c(v,p,f.hiddenContainer,null,o,f,i,s,a),f.deps<=0?f.resolve():m&&(c(h,d,n,r,o,null,i,s,a),Zn(f,d))):(f.pendingId++,y?(f.isHydrating=!1,f.activeBranch=v):l(v,o,f),f.deps=0,f.effects.length=0,f.hiddenContainer=u("div"),m?(c(null,p,f.hiddenContainer,null,o,f,i,s,a),f.deps<=0?f.resolve():(c(h,d,n,r,o,null,i,s,a),Zn(f,d))):h&&oi(p,h)?(c(h,p,n,r,o,f,i,s,a),f.resolve(!0)):(c(null,p,f.hiddenContainer,null,o,f,i,s,a),f.deps<=0&&f.resolve()));else if(h&&oi(p,h))c(h,p,n,r,o,f,i,s,a),Zn(f,p);else if(Jn(t,"onPending"),f.pendingBranch=p,f.pendingId++,c(null,p,f.hiddenContainer,null,o,f,i,s,a),f.deps<=0)f.resolve();else{const{timeout:e,pendingId:t}=f;e>0?setTimeout((()=>{f.pendingId===t&&f.fallback(d)}),e):0===e&&f.fallback(d)}}(e,t,n,r,o,s,a,c,l)},hydrate:function(e,t,n,r,o,i,s,a,c){const l=t.suspense=Yn(t,r,n,e.parentNode,document.createElement("div"),null,o,i,s,a,!0),u=c(e,l.pendingBranch=t.ssContent,n,l,i,s);0===l.deps&&l.resolve();return u},create:Yn,normalize:function(e){const{shapeFlag:t,children:n}=e,r=32&t;e.ssContent=Qn(r?n.default:n),e.ssFallback=r?Qn(n.fallback):ui(Wo)}};function Jn(e,t){const n=e.props&&e.props[t];I(n)&&n()}function Yn(e,t,n,r,o,i,s,a,c,l,u=!1){const{p:f,m:p,um:d,n:h,o:{parentNode:v,remove:m}}=l,y=re(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:n,isSVG:s,container:r,hiddenContainer:o,anchor:i,deps:0,pendingId:0,timeout:"number"==typeof y?y:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:n,pendingBranch:r,pendingId:o,effects:i,parentComponent:s,container:a}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=n&&r.transition&&"out-in"===r.transition.mode;e&&(n.transition.afterLeave=()=>{o===g.pendingId&&p(r,a,t,0)});let{anchor:t}=g;n&&(t=h(n),d(n,s,g,!0)),e||p(r,a,t,0)}Zn(g,r),g.pendingBranch=null,g.isInFallback=!1;let c=g.parent,l=!1;for(;c;){if(c.pendingBranch){c.effects.push(...i),l=!0;break}c=c.parent}l||xn(i),g.effects=[],Jn(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:r,container:o,isSVG:i}=g;Jn(t,"onFallback");const s=h(n),l=()=>{g.isInFallback&&(f(null,e,o,s,r,null,i,a,c),Zn(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=l),g.isInFallback=!0,d(n,r,null,!0),u||l()},move(e,t,n){g.activeBranch&&p(g.activeBranch,e,t,n),g.container=e},next:()=>g.activeBranch&&h(g.activeBranch),registerDep(e,t){const n=!!g.pendingBranch;n&&g.deps++;const r=e.vnode.el;e.asyncDep.catch((t=>{on(t,e,0)})).then((o=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:i}=e;Hi(e,o,!1),r&&(i.el=r);const a=!r&&e.subTree.el;t(e,i,v(r||e.subTree.el),r?null:h(e.subTree),g,s,c),a&&m(a),Gn(e,i.el),n&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&d(g.activeBranch,n,e,t),g.pendingBranch&&d(g.pendingBranch,n,e,t)}};return g}function Qn(e){let t;if(I(e)){const n=Xo&&e._c;n&&(e._d=!1,Jo()),e=e(),n&&(e._d=!0,t=Ko,Yo())}if(M(e)){const t=Hn(e);0,e=t}return e=yi(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Xn(e,t){t&&t.pendingBranch?M(e)?t.effects.push(...e):t.effects.push(e):xn(e)}function Zn(e,t){e.activeBranch=t;const{vnode:n,parentComponent:r}=e,o=n.el=t.el;r&&r.subTree===n&&(r.vnode.el=o,Gn(r,o))}function er(e,t){if(Ri){let n=Ri.provides;const r=Ri.parent&&Ri.parent.provides;r===n&&(n=Ri.provides=Object.create(r)),n[e]=t}else 0}function tr(e,t,n=!1){const r=Ri||Ln;if(r){const o=null==r.parent?r.vnode.appContext&&r.vnode.appContext.provides:r.parent.provides;if(o&&e in o)return o[e];if(arguments.length>1)return n&&I(t)?t.call(r.proxy):t}else 0}function nr(e,t){return ar(e,null,t)}function rr(e,t){return ar(e,null,{flush:"post"})}function or(e,t){return ar(e,null,{flush:"sync"})}const ir={};function sr(e,t,n){return ar(e,t,n)}function ar(e,t,{immediate:n,deep:r,flush:o,onTrack:i,onTrigger:s}=_){const a=Ri;let c,l,u=!1,f=!1;if(It(e)?(c=()=>e.value,u=At(e)):Ot(e)?(c=()=>e,r=!0):M(e)?(f=!0,u=e.some(Ot),c=()=>e.map((e=>It(e)?e.value:Ot(e)?ur(e):I(e)?nn(e,a,2):void 0))):c=I(e)?t?()=>nn(e,a,2):()=>{if(!a||!a.isUnmounted)return l&&l(),rn(e,a,3,[p])}:k,t&&r){const e=c;c=()=>ur(e())}let p=e=>{l=m.onStop=()=>{nn(e,a,4)}};if(Ui)return p=k,t?n&&rn(t,a,3,[c(),f?[]:void 0,p]):c(),k;let d=f?[]:ir;const h=()=>{if(m.active)if(t){const e=m.run();(r||u||(f?e.some(((e,t)=>ee(e,d[t]))):ee(e,d)))&&(l&&l(),rn(t,a,3,[e,d===ir?void 0:d,p]),d=e)}else m.run()};let v;h.allowRecurse=!!t,v="sync"===o?h:"post"===o?()=>Eo(h,a&&a.suspense):()=>{!a||a.isMounted?function(e){_n(e,fn,un,pn)}(h):h()};const m=new _e(c,v);return t?n?h():d=m.run():"post"===o?Eo(m.run.bind(m),a&&a.suspense):m.run(),()=>{m.stop(),a&&a.scope&&T(a.scope.effects,m)}}function cr(e,t,n){const r=this.proxy,o=B(e)?e.includes(".")?lr(r,e):()=>r[e]:e.bind(r,r);let i;I(t)?i=t:(i=t.handler,n=t);const s=Ri;Fi(this);const a=ar(o,i.bind(r),n);return s?Fi(s):Ii(),a}function lr(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function ur(e,t){if(!$(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),It(e))ur(e.value,t);else if(M(e))for(let n=0;n<e.length;n++)ur(e[n],t);else if(L(e)||R(e))e.forEach((e=>{ur(e,t)}));else if(z(e))for(const n in e)ur(e[n],t);return e}function fr(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Fr((()=>{e.isMounted=!0})),Vr((()=>{e.isUnmounting=!0})),e}const pr=[Function,Array],dr={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:pr,onEnter:pr,onAfterEnter:pr,onEnterCancelled:pr,onBeforeLeave:pr,onLeave:pr,onAfterLeave:pr,onLeaveCancelled:pr,onBeforeAppear:pr,onAppear:pr,onAfterAppear:pr,onAppearCancelled:pr},setup(e,{slots:t}){const n=Li(),r=fr();let o;return()=>{const i=t.default&&br(t.default(),!0);if(!i||!i.length)return;const s=Pt(e),{mode:a}=s;const c=i[0];if(r.isLeaving)return mr(c);const l=yr(c);if(!l)return mr(c);const u=vr(l,s,r,n);gr(l,u);const f=n.subTree,p=f&&yr(f);let d=!1;const{getTransitionKey:h}=l.type;if(h){const e=h();void 0===o?o=e:e!==o&&(o=e,d=!0)}if(p&&p.type!==Wo&&(!oi(l,p)||d)){const e=vr(p,s,r,n);if(gr(p,e),"out-in"===a)return r.isLeaving=!0,e.afterLeave=()=>{r.isLeaving=!1,n.update()},mr(c);"in-out"===a&&l.type!==Wo&&(e.delayLeave=(e,t,n)=>{hr(r,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=n})}return c}}};function hr(e,t){const{leavingVNodes:n}=e;let r=n.get(t.type);return r||(r=Object.create(null),n.set(t.type,r)),r}function vr(e,t,n,r){const{appear:o,mode:i,persisted:s=!1,onBeforeEnter:a,onEnter:c,onAfterEnter:l,onEnterCancelled:u,onBeforeLeave:f,onLeave:p,onAfterLeave:d,onLeaveCancelled:h,onBeforeAppear:v,onAppear:m,onAfterAppear:y,onAppearCancelled:g}=t,b=String(e.key),w=hr(n,e),S=(e,t)=>{e&&rn(e,r,9,t)},_={mode:i,persisted:s,beforeEnter(t){let r=a;if(!n.isMounted){if(!o)return;r=v||a}t._leaveCb&&t._leaveCb(!0);const i=w[b];i&&oi(e,i)&&i.el._leaveCb&&i.el._leaveCb(),S(r,[t])},enter(e){let t=c,r=l,i=u;if(!n.isMounted){if(!o)return;t=m||c,r=y||l,i=g||u}let s=!1;const a=e._enterCb=t=>{s||(s=!0,S(t?i:r,[e]),_.delayedLeave&&_.delayedLeave(),e._enterCb=void 0)};t?(t(e,a),t.length<=1&&a()):a()},leave(t,r){const o=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return r();S(f,[t]);let i=!1;const s=t._leaveCb=n=>{i||(i=!0,r(),S(n?h:d,[t]),t._leaveCb=void 0,w[o]===e&&delete w[o])};w[o]=e,p?(p(t,s),p.length<=1&&s()):s()},clone:e=>vr(e,t,n,r)};return _}function mr(e){if(kr(e))return(e=di(e)).children=null,e}function yr(e){return kr(e)?e.children?e.children[0]:void 0:e}function gr(e,t){6&e.shapeFlag&&e.component?gr(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function br(e,t=!1){let n=[],r=0;for(let o=0;o<e.length;o++){const i=e[o];i.type===Ho?(128&i.patchFlag&&r++,n=n.concat(br(i.children,t))):(t||i.type!==Wo)&&n.push(i)}if(r>1)for(let e=0;e<n.length;e++)n[e].patchFlag=-2;return n}function wr(e){return I(e)?{setup:e,name:e.name}:e}const Sr=e=>!!e.type.__asyncLoader;function _r(e){I(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:r,delay:o=200,timeout:i,suspensible:s=!0,onError:a}=e;let c,l=null,u=0;const f=()=>{let e;return l||(e=l=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),a)return new Promise(((t,n)=>{a(e,(()=>t((u++,l=null,f()))),(()=>n(e)),u+1)}));throw e})).then((t=>e!==l&&l?l:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),c=t,t))))};return wr({name:"AsyncComponentWrapper",__asyncLoader:f,get __asyncResolved(){return c},setup(){const e=Ri;if(c)return()=>xr(c,e);const t=t=>{l=null,on(t,e,13,!r)};if(s&&e.suspense||Ui)return f().then((t=>()=>xr(t,e))).catch((e=>(t(e),()=>r?ui(r,{error:e}):null)));const a=Bt(!1),u=Bt(),p=Bt(!!o);return o&&setTimeout((()=>{p.value=!1}),o),null!=i&&setTimeout((()=>{if(!a.value&&!u.value){const e=new Error(`Async component timed out after ${i}ms.`);t(e),u.value=e}}),i),f().then((()=>{a.value=!0,e.parent&&kr(e.parent.vnode)&&wn(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>a.value&&c?xr(c,e):u.value&&r?ui(r,{error:u.value}):n&&!p.value?ui(n):void 0}})}function xr(e,{vnode:{ref:t,props:n,children:r}}){const o=ui(e,n,r);return o.ref=t,o}const kr=e=>e.type.__isKeepAlive,Er={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=Li(),r=n.ctx;if(!r.renderer)return t.default;const o=new Map,i=new Set;let s=null;const a=n.suspense,{renderer:{p:c,m:l,um:u,o:{createElement:f}}}=r,p=f("div");function d(e){Pr(e),u(e,n,a,!0)}function h(e){o.forEach(((t,n)=>{const r=Yi(t.type);!r||e&&e(r)||v(n)}))}function v(e){const t=o.get(e);s&&t.type===s.type?s&&Pr(s):d(t),o.delete(e),i.delete(e)}r.activate=(e,t,n,r,o)=>{const i=e.component;l(e,t,n,0,a),c(i.vnode,e,t,n,i,a,r,e.slotScopeIds,o),Eo((()=>{i.isDeactivated=!1,i.a&&te(i.a);const t=e.props&&e.props.onVnodeMounted;t&&Si(t,i.parent,e)}),a)},r.deactivate=e=>{const t=e.component;l(e,p,null,1,a),Eo((()=>{t.da&&te(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&Si(n,t.parent,e),t.isDeactivated=!0}),a)},sr((()=>[e.include,e.exclude]),(([e,t])=>{e&&h((t=>Cr(e,t))),t&&h((e=>!Cr(t,e)))}),{flush:"post",deep:!0});let m=null;const y=()=>{null!=m&&o.set(m,Nr(n.subTree))};return Fr(y),Br(y),Vr((()=>{o.forEach((e=>{const{subTree:t,suspense:r}=n,o=Nr(t);if(e.type!==o.type)d(e);else{Pr(o);const e=o.component.da;e&&Eo(e,r)}}))})),()=>{if(m=null,!t.default)return null;const n=t.default(),r=n[0];if(n.length>1)return s=null,n;if(!(ri(r)&&(4&r.shapeFlag||128&r.shapeFlag)))return s=null,r;let a=Nr(r);const c=a.type,l=Yi(Sr(a)?a.type.__asyncResolved||{}:c),{include:u,exclude:f,max:p}=e;if(u&&(!l||!Cr(u,l))||f&&l&&Cr(f,l))return s=a,r;const d=null==a.key?c:a.key,h=o.get(d);return a.el&&(a=di(a),128&r.shapeFlag&&(r.ssContent=a)),m=d,h?(a.el=h.el,a.component=h.component,a.transition&&gr(a,a.transition),a.shapeFlag|=512,i.delete(d),i.add(d)):(i.add(d),p&&i.size>parseInt(p,10)&&v(i.values().next().value)),a.shapeFlag|=256,s=a,r}}};function Cr(e,t){return M(e)?e.some((e=>Cr(e,t))):B(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function Or(e,t){Ar(e,"a",t)}function jr(e,t){Ar(e,"da",t)}function Ar(e,t,n=Ri){const r=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(Mr(t,r,n),n){let e=n.parent;for(;e&&e.parent;)kr(e.parent.vnode)&&Tr(r,t,n,e),e=e.parent}}function Tr(e,t,n,r){const o=Mr(t,e,r,!0);$r((()=>{T(r[t],o)}),n)}function Pr(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function Nr(e){return 128&e.shapeFlag?e.ssContent:e}function Mr(e,t,n=Ri,r=!1){if(n){const o=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...r)=>{if(n.isUnmounted)return;je(),Fi(n);const o=rn(t,n,e,r);return Ii(),Ae(),o});return r?o.unshift(i):o.push(i),i}}const Rr=e=>(t,n=Ri)=>(!Ui||"sp"===e)&&Mr(e,t,n),Lr=Rr("bm"),Fr=Rr("m"),Ir=Rr("bu"),Br=Rr("u"),Vr=Rr("bum"),$r=Rr("um"),Ur=Rr("sp"),Dr=Rr("rtg"),Hr=Rr("rtc");function zr(e,t=Ri){Mr("ec",e,t)}let Wr=!0;function qr(e){const t=Jr(e),n=e.proxy,r=e.ctx;Wr=!1,t.beforeCreate&&Gr(t.beforeCreate,e,"bc");const{data:o,computed:i,methods:s,watch:a,provide:c,inject:l,created:u,beforeMount:f,mounted:p,beforeUpdate:d,updated:h,activated:v,deactivated:m,beforeDestroy:y,beforeUnmount:g,destroyed:b,unmounted:w,render:S,renderTracked:_,renderTriggered:x,errorCaptured:E,serverPrefetch:C,expose:O,inheritAttrs:j,components:A,directives:T,filters:P}=t;if(l&&function(e,t,n=k,r=!1){M(e)&&(e=Zr(e));for(const n in e){const o=e[n];let i;i=$(o)?"default"in o?tr(o.from||n,o.default,!0):tr(o.from||n):tr(o),It(i)&&r?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>i.value,set:e=>i.value=e}):t[n]=i}}(l,r,null,e.appContext.config.unwrapInjectedRef),s)for(const e in s){const t=s[e];I(t)&&(r[e]=t.bind(n))}if(o){0;const t=o.call(n,n);0,$(t)&&(e.data=_t(t))}if(Wr=!0,i)for(const e in i){const t=i[e],o=I(t)?t.bind(n,n):I(t.get)?t.get.bind(n,n):k;0;const s=!I(t)&&I(t.set)?t.set.bind(n):k,a=Zi({get:o,set:s});Object.defineProperty(r,e,{enumerable:!0,configurable:!0,get:()=>a.value,set:e=>a.value=e})}if(a)for(const e in a)Kr(a[e],r,n,e);if(c){const e=I(c)?c.call(n):c;Reflect.ownKeys(e).forEach((t=>{er(t,e[t])}))}function N(e,t){M(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(u&&Gr(u,e,"c"),N(Lr,f),N(Fr,p),N(Ir,d),N(Br,h),N(Or,v),N(jr,m),N(zr,E),N(Hr,_),N(Dr,x),N(Vr,g),N($r,w),N(Ur,C),M(O))if(O.length){const t=e.exposed||(e.exposed={});O.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});S&&e.render===k&&(e.render=S),null!=j&&(e.inheritAttrs=j),A&&(e.components=A),T&&(e.directives=T)}function Gr(e,t,n){rn(M(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Kr(e,t,n,r){const o=r.includes(".")?lr(n,r):()=>n[r];if(B(e)){const n=t[e];I(n)&&sr(o,n)}else if(I(e))sr(o,e.bind(n));else if($(e))if(M(e))e.forEach((e=>Kr(e,t,n,r)));else{const r=I(e.handler)?e.handler.bind(n):t[e.handler];I(r)&&sr(o,r,e)}else 0}function Jr(e){const t=e.type,{mixins:n,extends:r}=t,{mixins:o,optionsCache:i,config:{optionMergeStrategies:s}}=e.appContext,a=i.get(t);let c;return a?c=a:o.length||n||r?(c={},o.length&&o.forEach((e=>Yr(c,e,s,!0))),Yr(c,t,s)):c=t,i.set(t,c),c}function Yr(e,t,n,r=!1){const{mixins:o,extends:i}=t;i&&Yr(e,i,n,!0),o&&o.forEach((t=>Yr(e,t,n,!0)));for(const o in t)if(r&&"expose"===o);else{const r=Qr[o]||n&&n[o];e[o]=r?r(e[o],t[o]):t[o]}return e}const Qr={data:Xr,props:to,emits:to,methods:to,computed:to,beforeCreate:eo,created:eo,beforeMount:eo,mounted:eo,beforeUpdate:eo,updated:eo,beforeDestroy:eo,beforeUnmount:eo,destroyed:eo,unmounted:eo,activated:eo,deactivated:eo,errorCaptured:eo,serverPrefetch:eo,components:to,directives:to,watch:function(e,t){if(!e)return t;if(!t)return e;const n=A(Object.create(null),e);for(const r in t)n[r]=eo(e[r],t[r]);return n},provide:Xr,inject:function(e,t){return to(Zr(e),Zr(t))}};function Xr(e,t){return t?e?function(){return A(I(e)?e.call(this,this):e,I(t)?t.call(this,this):t)}:t:e}function Zr(e){if(M(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function eo(e,t){return e?[...new Set([].concat(e,t))]:t}function to(e,t){return e?A(A(Object.create(null),e),t):t}function no(e,t,n,r){const[o,i]=e.propsOptions;let s,a=!1;if(t)for(let c in t){if(q(c))continue;const l=t[c];let u;o&&N(o,u=J(c))?i&&i.includes(u)?(s||(s={}))[u]=l:n[u]=l:Rn(e.emitsOptions,c)||c in r&&l===r[c]||(r[c]=l,a=!0)}if(i){const t=Pt(n),r=s||_;for(let s=0;s<i.length;s++){const a=i[s];n[a]=ro(o,t,a,r[a],e,!N(r,a))}}return a}function ro(e,t,n,r,o,i){const s=e[n];if(null!=s){const e=N(s,"default");if(e&&void 0===r){const e=s.default;if(s.type!==Function&&I(e)){const{propsDefaults:i}=o;n in i?r=i[n]:(Fi(o),r=i[n]=e.call(null,t),Ii())}else r=e}s[0]&&(i&&!e?r=!1:!s[1]||""!==r&&r!==Q(n)||(r=!0))}return r}function oo(e,t,n=!1){const r=t.propsCache,o=r.get(e);if(o)return o;const i=e.props,s={},a=[];let c=!1;if(!I(e)){const r=e=>{c=!0;const[n,r]=oo(e,t,!0);A(s,n),r&&a.push(...r)};!n&&t.mixins.length&&t.mixins.forEach(r),e.extends&&r(e.extends),e.mixins&&e.mixins.forEach(r)}if(!i&&!c)return r.set(e,x),x;if(M(i))for(let e=0;e<i.length;e++){0;const t=J(i[e]);io(t)&&(s[t]=_)}else if(i){0;for(const e in i){const t=J(e);if(io(t)){const n=i[e],r=s[t]=M(n)||I(n)?{type:n}:n;if(r){const e=co(Boolean,r.type),n=co(String,r.type);r[0]=e>-1,r[1]=n<0||e<n,(e>-1||N(r,"default"))&&a.push(t)}}}}const l=[s,a];return r.set(e,l),l}function io(e){return"$"!==e[0]}function so(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function ao(e,t){return so(e)===so(t)}function co(e,t){return M(t)?t.findIndex((t=>ao(t,e))):I(t)&&ao(t,e)?0:-1}const lo=e=>"_"===e[0]||"$stable"===e,uo=e=>M(e)?e.map(yi):[yi(e)],fo=(e,t,n)=>{const r=Un(((...e)=>uo(t(...e))),n);return r._c=!1,r},po=(e,t,n)=>{const r=e._ctx;for(const n in e){if(lo(n))continue;const o=e[n];if(I(o))t[n]=fo(0,o,r);else if(null!=o){0;const e=uo(o);t[n]=()=>e}}},ho=(e,t)=>{const n=uo(t);e.slots.default=()=>n};function vo(e,t){if(null===Ln)return e;const n=Ln.proxy,r=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[o,i,s,a=_]=t[e];I(o)&&(o={mounted:o,updated:o}),o.deep&&ur(i),r.push({dir:o,instance:n,value:i,oldValue:void 0,arg:s,modifiers:a})}return e}function mo(e,t,n,r){const o=e.dirs,i=t&&t.dirs;for(let s=0;s<o.length;s++){const a=o[s];i&&(a.oldValue=i[s].value);let c=a.dir[r];c&&(je(),rn(c,n,8,[e.el,a,e,t]),Ae())}}function yo(){return{app:null,config:{isNativeTag:E,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let go=0;function bo(e,t){return function(n,r=null){null==r||$(r)||(r=null);const o=yo(),i=new Set;let s=!1;const a=o.app={_uid:go++,_component:n,_props:r,_container:null,_context:o,_instance:null,version:ms,get config(){return o.config},set config(e){0},use:(e,...t)=>(i.has(e)||(e&&I(e.install)?(i.add(e),e.install(a,...t)):I(e)&&(i.add(e),e(a,...t))),a),mixin:e=>(o.mixins.includes(e)||o.mixins.push(e),a),component:(e,t)=>t?(o.components[e]=t,a):o.components[e],directive:(e,t)=>t?(o.directives[e]=t,a):o.directives[e],mount(i,c,l){if(!s){const u=ui(n,r);return u.appContext=o,c&&t?t(u,i):e(u,i,l),s=!0,a._container=i,i.__vue_app__=a,Ki(u.component)||u.component.proxy}},unmount(){s&&(e(null,a._container),delete a._container.__vue_app__)},provide:(e,t)=>(o.provides[e]=t,a)};return a}}function wo(e,t,n,r,o=!1){if(M(e))return void e.forEach(((e,i)=>wo(e,t&&(M(t)?t[i]:t),n,r,o)));if(Sr(r)&&!o)return;const i=4&r.shapeFlag?Ki(r.component)||r.component.proxy:r.el,s=o?null:i,{i:a,r:c}=e;const l=t&&t.r,u=a.refs===_?a.refs={}:a.refs,f=a.setupState;if(null!=l&&l!==c&&(B(l)?(u[l]=null,N(f,l)&&(f[l]=null)):It(l)&&(l.value=null)),I(c))nn(c,a,12,[s,u]);else{const t=B(c),r=It(c);if(t||r){const r=()=>{if(e.f){const n=t?u[c]:c.value;o?M(n)&&T(n,i):M(n)?n.includes(i)||n.push(i):t?u[c]=[i]:(c.value=[i],e.k&&(u[e.k]=c.value))}else t?(u[c]=s,N(f,c)&&(f[c]=s)):It(c)&&(c.value=s,e.k&&(u[e.k]=s))};s?(r.id=-1,Eo(r,n)):r()}else 0}}let So=!1;const _o=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,xo=e=>8===e.nodeType;function ko(e){const{mt:t,p:n,o:{patchProp:r,nextSibling:o,parentNode:i,remove:s,insert:a,createComment:c}}=e,l=(n,r,s,a,c,v=!1)=>{const m=xo(n)&&"["===n.data,y=()=>d(n,r,s,a,c,m),{type:g,ref:b,shapeFlag:w}=r,S=n.nodeType;r.el=n;let _=null;switch(g){case zo:3!==S?_=y():(n.data!==r.children&&(So=!0,n.data=r.children),_=o(n));break;case Wo:_=8!==S||m?y():o(n);break;case qo:if(1===S){_=n;const e=!r.children.length;for(let t=0;t<r.staticCount;t++)e&&(r.children+=_.outerHTML),t===r.staticCount-1&&(r.anchor=_),_=o(_);return _}_=y();break;case Ho:_=m?p(n,r,s,a,c,v):y();break;default:if(1&w)_=1!==S||r.type.toLowerCase()!==n.tagName.toLowerCase()?y():u(n,r,s,a,c,v);else if(6&w){r.slotScopeIds=c;const e=i(n);if(t(r,e,null,s,a,_o(e),v),_=m?h(n):o(n),Sr(r)){let t;m?(t=ui(Ho),t.anchor=_?_.previousSibling:e.lastChild):t=3===n.nodeType?hi(""):ui("div"),t.el=n,r.component.subTree=t}}else 64&w?_=8!==S?y():r.type.hydrate(n,r,s,a,c,v,e,f):128&w&&(_=r.type.hydrate(n,r,s,a,_o(i(n)),c,v,e,l))}return null!=b&&wo(b,null,a,r),_},u=(e,t,n,o,i,a)=>{a=a||!!t.dynamicChildren;const{type:c,props:l,patchFlag:u,shapeFlag:p,dirs:d}=t,h="input"===c&&d||"option"===c;if(h||-1!==u){if(d&&mo(t,null,n,"created"),l)if(h||!a||48&u)for(const t in l)(h&&t.endsWith("value")||O(t)&&!q(t))&&r(e,t,null,l[t],!1,void 0,n);else l.onClick&&r(e,"onClick",null,l.onClick,!1,void 0,n);let c;if((c=l&&l.onVnodeBeforeMount)&&Si(c,n,t),d&&mo(t,null,n,"beforeMount"),((c=l&&l.onVnodeMounted)||d)&&Xn((()=>{c&&Si(c,n,t),d&&mo(t,null,n,"mounted")}),o),16&p&&(!l||!l.innerHTML&&!l.textContent)){let r=f(e.firstChild,t,e,n,o,i,a);for(;r;){So=!0;const e=r;r=r.nextSibling,s(e)}}else 8&p&&e.textContent!==t.children&&(So=!0,e.textContent=t.children)}return e.nextSibling},f=(e,t,r,o,i,s,a)=>{a=a||!!t.dynamicChildren;const c=t.children,u=c.length;for(let t=0;t<u;t++){const u=a?c[t]:c[t]=yi(c[t]);if(e)e=l(e,u,o,i,s,a);else{if(u.type===zo&&!u.children)continue;So=!0,n(null,u,r,null,o,i,_o(r),s)}}return e},p=(e,t,n,r,s,l)=>{const{slotScopeIds:u}=t;u&&(s=s?s.concat(u):u);const p=i(e),d=f(o(e),t,p,n,r,s,l);return d&&xo(d)&&"]"===d.data?o(t.anchor=d):(So=!0,a(t.anchor=c("]"),p,d),d)},d=(e,t,r,a,c,l)=>{if(So=!0,t.el=null,l){const t=h(e);for(;;){const n=o(e);if(!n||n===t)break;s(n)}}const u=o(e),f=i(e);return s(e),n(null,t,f,u,r,a,_o(f),c),u},h=e=>{let t=0;for(;e;)if((e=o(e))&&xo(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return o(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),void En();So=!1,l(t.firstChild,e,null,null,null),En(),So&&console.error("Hydration completed but contains mismatches.")},l]}const Eo=Xn;function Co(e){return jo(e)}function Oo(e){return jo(e,ko)}function jo(e,t){(oe||(oe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{})).__VUE__=!0;const{insert:r,remove:o,patchProp:i,createElement:s,createText:a,createComment:c,setText:l,setElementText:u,parentNode:f,nextSibling:p,setScopeId:d=k,cloneNode:h,insertStaticContent:v}=e,m=(e,t,n,r=null,o=null,i=null,s=!1,a=null,c=!!t.dynamicChildren)=>{if(e===t)return;e&&!oi(e,t)&&(r=Y(e),H(e,o,i,!0),e=null),-2===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:l,ref:u,shapeFlag:f}=t;switch(l){case zo:y(e,t,n,r);break;case Wo:g(e,t,n,r);break;case qo:null==e&&b(t,n,r,s);break;case Ho:M(e,t,n,r,o,i,s,a,c);break;default:1&f?S(e,t,n,r,o,i,s,a,c):6&f?R(e,t,n,r,o,i,s,a,c):(64&f||128&f)&&l.process(e,t,n,r,o,i,s,a,c,Z)}null!=u&&o&&wo(u,e&&e.ref,i,t||e,!t)},y=(e,t,n,o)=>{if(null==e)r(t.el=a(t.children),n,o);else{const n=t.el=e.el;t.children!==e.children&&l(n,t.children)}},g=(e,t,n,o)=>{null==e?r(t.el=c(t.children||""),n,o):t.el=e.el},b=(e,t,n,r)=>{[e.el,e.anchor]=v(e.children,t,n,r,e.el,e.anchor)},w=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=p(e),o(e),e=n;o(t)},S=(e,t,n,r,o,i,s,a,c)=>{s=s||"svg"===t.type,null==e?E(t,n,r,o,i,s,a,c):j(e,t,o,i,s,a,c)},E=(e,t,n,o,a,c,l,f)=>{let p,d;const{type:v,props:m,shapeFlag:y,transition:g,patchFlag:b,dirs:w}=e;if(e.el&&void 0!==h&&-1===b)p=e.el=h(e.el);else{if(p=e.el=s(e.type,c,m&&m.is,m),8&y?u(p,e.children):16&y&&O(e.children,p,null,o,a,c&&"foreignObject"!==v,l,f),w&&mo(e,null,o,"created"),m){for(const t in m)"value"===t||q(t)||i(p,t,null,m[t],c,e.children,o,a,K);"value"in m&&i(p,"value",null,m.value),(d=m.onVnodeBeforeMount)&&Si(d,o,e)}C(p,e,e.scopeId,l,o)}w&&mo(e,null,o,"beforeMount");const S=(!a||a&&!a.pendingBranch)&&g&&!g.persisted;S&&g.beforeEnter(p),r(p,t,n),((d=m&&m.onVnodeMounted)||S||w)&&Eo((()=>{d&&Si(d,o,e),S&&g.enter(p),w&&mo(e,null,o,"mounted")}),a)},C=(e,t,n,r,o)=>{if(n&&d(e,n),r)for(let t=0;t<r.length;t++)d(e,r[t]);if(o){if(t===o.subTree){const t=o.vnode;C(e,t,t.scopeId,t.slotScopeIds,o.parent)}}},O=(e,t,n,r,o,i,s,a,c=0)=>{for(let l=c;l<e.length;l++){const c=e[l]=a?gi(e[l]):yi(e[l]);m(null,c,t,n,r,o,i,s,a)}},j=(e,t,n,r,o,s,a)=>{const c=t.el=e.el;let{patchFlag:l,dynamicChildren:f,dirs:p}=t;l|=16&e.patchFlag;const d=e.props||_,h=t.props||_;let v;n&&Ao(n,!1),(v=h.onVnodeBeforeUpdate)&&Si(v,n,t,e),p&&mo(t,e,n,"beforeUpdate"),n&&Ao(n,!0);const m=o&&"foreignObject"!==t.type;if(f?T(e.dynamicChildren,f,c,n,r,m,s):a||V(e,t,c,null,n,r,m,s,!1),l>0){if(16&l)P(c,t,d,h,n,r,o);else if(2&l&&d.class!==h.class&&i(c,"class",null,h.class,o),4&l&&i(c,"style",d.style,h.style,o),8&l){const s=t.dynamicProps;for(let t=0;t<s.length;t++){const a=s[t],l=d[a],u=h[a];u===l&&"value"!==a||i(c,a,l,u,o,e.children,n,r,K)}}1&l&&e.children!==t.children&&u(c,t.children)}else a||null!=f||P(c,t,d,h,n,r,o);((v=h.onVnodeUpdated)||p)&&Eo((()=>{v&&Si(v,n,t,e),p&&mo(t,e,n,"updated")}),r)},T=(e,t,n,r,o,i,s)=>{for(let a=0;a<t.length;a++){const c=e[a],l=t[a],u=c.el&&(c.type===Ho||!oi(c,l)||70&c.shapeFlag)?f(c.el):n;m(c,l,u,null,r,o,i,s,!0)}},P=(e,t,n,r,o,s,a)=>{if(n!==r){for(const c in r){if(q(c))continue;const l=r[c],u=n[c];l!==u&&"value"!==c&&i(e,c,u,l,a,t.children,o,s,K)}if(n!==_)for(const c in n)q(c)||c in r||i(e,c,n[c],null,a,t.children,o,s,K);"value"in r&&i(e,"value",n.value,r.value)}},M=(e,t,n,o,i,s,c,l,u)=>{const f=t.el=e?e.el:a(""),p=t.anchor=e?e.anchor:a("");let{patchFlag:d,dynamicChildren:h,slotScopeIds:v}=t;v&&(l=l?l.concat(v):v),null==e?(r(f,n,o),r(p,n,o),O(t.children,n,p,i,s,c,l,u)):d>0&&64&d&&h&&e.dynamicChildren?(T(e.dynamicChildren,h,n,i,s,c,l),(null!=t.key||i&&t===i.subTree)&&To(e,t,!0)):V(e,t,n,p,i,s,c,l,u)},R=(e,t,n,r,o,i,s,a,c)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?o.ctx.activate(t,n,r,s,c):L(t,n,r,o,i,s,c):F(e,t,c)},L=(e,t,n,r,o,i,s)=>{const a=e.component=Mi(e,r,o);if(kr(e)&&(a.ctx.renderer=Z),Di(a),a.asyncDep){if(o&&o.registerDep(a,I),!e.el){const e=a.subTree=ui(Wo);g(null,e,t,n)}}else I(a,e,t,n,o,i,s)},F=(e,t,n)=>{const r=t.component=e.component;if(function(e,t,n){const{props:r,children:o,component:i}=e,{props:s,children:a,patchFlag:c}=t,l=i.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&c>=0))return!(!o&&!a||a&&a.$stable)||r!==s&&(r?!s||qn(r,s,l):!!s);if(1024&c)return!0;if(16&c)return r?qn(r,s,l):!!s;if(8&c){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(s[n]!==r[n]&&!Rn(l,n))return!0}}return!1}(e,t,n)){if(r.asyncDep&&!r.asyncResolved)return void B(r,t,n);r.next=t,function(e){const t=cn.indexOf(e);t>ln&&cn.splice(t,1)}(r.update),r.update()}else t.component=e.component,t.el=e.el,r.vnode=t},I=(e,t,n,r,o,i,s)=>{const a=e.effect=new _e((()=>{if(e.isMounted){let t,{next:n,bu:r,u:a,parent:c,vnode:l}=e,u=n;0,Ao(e,!1),n?(n.el=l.el,B(e,n,s)):n=l,r&&te(r),(t=n.props&&n.props.onVnodeBeforeUpdate)&&Si(t,c,n,l),Ao(e,!0);const p=Dn(e);0;const d=e.subTree;e.subTree=p,m(d,p,f(d.el),Y(d),e,o,i),n.el=p.el,null===u&&Gn(e,p.el),a&&Eo(a,o),(t=n.props&&n.props.onVnodeUpdated)&&Eo((()=>Si(t,c,n,l)),o)}else{let s;const{el:a,props:c}=t,{bm:l,m:u,parent:f}=e,p=Sr(t);if(Ao(e,!1),l&&te(l),!p&&(s=c&&c.onVnodeBeforeMount)&&Si(s,f,t),Ao(e,!0),a&&ne){const n=()=>{e.subTree=Dn(e),ne(a,e.subTree,e,o,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{0;const s=e.subTree=Dn(e);0,m(null,s,n,r,e,o,i),t.el=s.el}if(u&&Eo(u,o),!p&&(s=c&&c.onVnodeMounted)){const e=t;Eo((()=>Si(s,f,e)),o)}256&t.shapeFlag&&e.a&&Eo(e.a,o),e.isMounted=!0,t=n=r=null}}),(()=>wn(e.update)),e.scope),c=e.update=a.run.bind(a);c.id=e.uid,Ao(e,!0),c()},B=(e,t,n)=>{t.component=e;const r=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,r){const{props:o,attrs:i,vnode:{patchFlag:s}}=e,a=Pt(o),[c]=e.propsOptions;let l=!1;if(!(r||s>0)||16&s){let r;no(e,t,o,i)&&(l=!0);for(const i in a)t&&(N(t,i)||(r=Q(i))!==i&&N(t,r))||(c?!n||void 0===n[i]&&void 0===n[r]||(o[i]=ro(c,a,i,void 0,e,!0)):delete o[i]);if(i!==a)for(const e in i)t&&N(t,e)||(delete i[e],l=!0)}else if(8&s){const n=e.vnode.dynamicProps;for(let r=0;r<n.length;r++){let s=n[r];const u=t[s];if(c)if(N(i,s))u!==i[s]&&(i[s]=u,l=!0);else{const t=J(s);o[t]=ro(c,a,t,u,e,!1)}else u!==i[s]&&(i[s]=u,l=!0)}}l&&Me(e,"set","$attrs")}(e,t.props,r,n),((e,t,n)=>{const{vnode:r,slots:o}=e;let i=!0,s=_;if(32&r.shapeFlag){const e=t._;e?n&&1===e?i=!1:(A(o,t),n||1!==e||delete o._):(i=!t.$stable,po(t,o)),s=t}else t&&(ho(e,t),s={default:1});if(i)for(const e in o)lo(e)||e in s||delete o[e]})(e,t.children,n),je(),kn(void 0,e.update),Ae()},V=(e,t,n,r,o,i,s,a,c=!1)=>{const l=e&&e.children,f=e?e.shapeFlag:0,p=t.children,{patchFlag:d,shapeFlag:h}=t;if(d>0){if(128&d)return void U(l,p,n,r,o,i,s,a,c);if(256&d)return void $(l,p,n,r,o,i,s,a,c)}8&h?(16&f&&K(l,o,i),p!==l&&u(n,p)):16&f?16&h?U(l,p,n,r,o,i,s,a,c):K(l,o,i,!0):(8&f&&u(n,""),16&h&&O(p,n,r,o,i,s,a,c))},$=(e,t,n,r,o,i,s,a,c)=>{t=t||x;const l=(e=e||x).length,u=t.length,f=Math.min(l,u);let p;for(p=0;p<f;p++){const r=t[p]=c?gi(t[p]):yi(t[p]);m(e[p],r,n,null,o,i,s,a,c)}l>u?K(e,o,i,!0,!1,f):O(t,n,r,o,i,s,a,c,f)},U=(e,t,n,r,o,i,s,a,c)=>{let l=0;const u=t.length;let f=e.length-1,p=u-1;for(;l<=f&&l<=p;){const r=e[l],u=t[l]=c?gi(t[l]):yi(t[l]);if(!oi(r,u))break;m(r,u,n,null,o,i,s,a,c),l++}for(;l<=f&&l<=p;){const r=e[f],l=t[p]=c?gi(t[p]):yi(t[p]);if(!oi(r,l))break;m(r,l,n,null,o,i,s,a,c),f--,p--}if(l>f){if(l<=p){const e=p+1,f=e<u?t[e].el:r;for(;l<=p;)m(null,t[l]=c?gi(t[l]):yi(t[l]),n,f,o,i,s,a,c),l++}}else if(l>p)for(;l<=f;)H(e[l],o,i,!0),l++;else{const d=l,h=l,v=new Map;for(l=h;l<=p;l++){const e=t[l]=c?gi(t[l]):yi(t[l]);null!=e.key&&v.set(e.key,l)}let y,g=0;const b=p-h+1;let w=!1,S=0;const _=new Array(b);for(l=0;l<b;l++)_[l]=0;for(l=d;l<=f;l++){const r=e[l];if(g>=b){H(r,o,i,!0);continue}let u;if(null!=r.key)u=v.get(r.key);else for(y=h;y<=p;y++)if(0===_[y-h]&&oi(r,t[y])){u=y;break}void 0===u?H(r,o,i,!0):(_[u-h]=l+1,u>=S?S=u:w=!0,m(r,t[u],n,null,o,i,s,a,c),g++)}const k=w?function(e){const t=e.slice(),n=[0];let r,o,i,s,a;const c=e.length;for(r=0;r<c;r++){const c=e[r];if(0!==c){if(o=n[n.length-1],e[o]<c){t[r]=o,n.push(r);continue}for(i=0,s=n.length-1;i<s;)a=i+s>>1,e[n[a]]<c?i=a+1:s=a;c<e[n[i]]&&(i>0&&(t[r]=n[i-1]),n[i]=r)}}i=n.length,s=n[i-1];for(;i-- >0;)n[i]=s,s=t[s];return n}(_):x;for(y=k.length-1,l=b-1;l>=0;l--){const e=h+l,f=t[e],p=e+1<u?t[e+1].el:r;0===_[l]?m(null,f,n,p,o,i,s,a,c):w&&(y<0||l!==k[y]?D(f,n,p,2):y--)}}},D=(e,t,n,o,i=null)=>{const{el:s,type:a,transition:c,children:l,shapeFlag:u}=e;if(6&u)return void D(e.component.subTree,t,n,o);if(128&u)return void e.suspense.move(t,n,o);if(64&u)return void a.move(e,t,n,Z);if(a===Ho){r(s,t,n);for(let e=0;e<l.length;e++)D(l[e],t,n,o);return void r(e.anchor,t,n)}if(a===qo)return void(({el:e,anchor:t},n,o)=>{let i;for(;e&&e!==t;)i=p(e),r(e,n,o),e=i;r(t,n,o)})(e,t,n);if(2!==o&&1&u&&c)if(0===o)c.beforeEnter(s),r(s,t,n),Eo((()=>c.enter(s)),i);else{const{leave:e,delayLeave:o,afterLeave:i}=c,a=()=>r(s,t,n),l=()=>{e(s,(()=>{a(),i&&i()}))};o?o(s,a,l):l()}else r(s,t,n)},H=(e,t,n,r=!1,o=!1)=>{const{type:i,props:s,ref:a,children:c,dynamicChildren:l,shapeFlag:u,patchFlag:f,dirs:p}=e;if(null!=a&&wo(a,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const d=1&u&&p,h=!Sr(e);let v;if(h&&(v=s&&s.onVnodeBeforeUnmount)&&Si(v,t,e),6&u)G(e.component,n,r);else{if(128&u)return void e.suspense.unmount(n,r);d&&mo(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,o,Z,r):l&&(i!==Ho||f>0&&64&f)?K(l,t,n,!1,!0):(i===Ho&&384&f||!o&&16&u)&&K(c,t,n),r&&z(e)}(h&&(v=s&&s.onVnodeUnmounted)||d)&&Eo((()=>{v&&Si(v,t,e),d&&mo(e,null,t,"unmounted")}),n)},z=e=>{const{type:t,el:n,anchor:r,transition:i}=e;if(t===Ho)return void W(n,r);if(t===qo)return void w(e);const s=()=>{o(n),i&&!i.persisted&&i.afterLeave&&i.afterLeave()};if(1&e.shapeFlag&&i&&!i.persisted){const{leave:t,delayLeave:r}=i,o=()=>t(n,s);r?r(e.el,s,o):o()}else s()},W=(e,t)=>{let n;for(;e!==t;)n=p(e),o(e),e=n;o(t)},G=(e,t,n)=>{const{bum:r,scope:o,update:i,subTree:s,um:a}=e;r&&te(r),o.stop(),i&&(i.active=!1,H(s,e,t,n)),a&&Eo(a,t),Eo((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},K=(e,t,n,r=!1,o=!1,i=0)=>{for(let s=i;s<e.length;s++)H(e[s],t,n,r,o)},Y=e=>6&e.shapeFlag?Y(e.component.subTree):128&e.shapeFlag?e.suspense.next():p(e.anchor||e.el),X=(e,t,n)=>{null==e?t._vnode&&H(t._vnode,null,null,!0):m(t._vnode||null,e,t,null,null,null,n),En(),t._vnode=e},Z={p:m,um:H,m:D,r:z,mt:L,mc:O,pc:V,pbc:T,n:Y,o:e};let ee,ne;return t&&([ee,ne]=t(Z)),{render:X,hydrate:ee,createApp:bo(X,ee)}}function Ao({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function To(e,t,n=!1){const r=e.children,o=t.children;if(M(r)&&M(o))for(let e=0;e<r.length;e++){const t=r[e];let i=o[e];1&i.shapeFlag&&!i.dynamicChildren&&((i.patchFlag<=0||32===i.patchFlag)&&(i=o[e]=gi(o[e]),i.el=t.el),n||To(t,i))}}const Po=e=>e&&(e.disabled||""===e.disabled),No=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,Mo=(e,t)=>{const n=e&&e.to;if(B(n)){if(t){const e=t(n);return e}return null}return n};function Ro(e,t,n,{o:{insert:r},m:o},i=2){0===i&&r(e.targetAnchor,t,n);const{el:s,anchor:a,shapeFlag:c,children:l,props:u}=e,f=2===i;if(f&&r(s,t,n),(!f||Po(u))&&16&c)for(let e=0;e<l.length;e++)o(l[e],t,n,2);f&&r(a,t,n)}const Lo={__isTeleport:!0,process(e,t,n,r,o,i,s,a,c,l){const{mc:u,pc:f,pbc:p,o:{insert:d,querySelector:h,createText:v,createComment:m}}=l,y=Po(t.props);let{shapeFlag:g,children:b,dynamicChildren:w}=t;if(null==e){const e=t.el=v(""),l=t.anchor=v("");d(e,n,r),d(l,n,r);const f=t.target=Mo(t.props,h),p=t.targetAnchor=v("");f&&(d(p,f),s=s||No(f));const m=(e,t)=>{16&g&&u(b,e,t,o,i,s,a,c)};y?m(n,l):f&&m(f,p)}else{t.el=e.el;const r=t.anchor=e.anchor,u=t.target=e.target,d=t.targetAnchor=e.targetAnchor,v=Po(e.props),m=v?n:u,g=v?r:d;if(s=s||No(u),w?(p(e.dynamicChildren,w,m,o,i,s,a),To(e,t,!0)):c||f(e,t,m,g,o,i,s,a,!1),y)v||Ro(t,n,r,l,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=Mo(t.props,h);e&&Ro(t,e,null,l,0)}else v&&Ro(t,u,d,l,1)}},remove(e,t,n,r,{um:o,o:{remove:i}},s){const{shapeFlag:a,children:c,anchor:l,targetAnchor:u,target:f,props:p}=e;if(f&&i(u),(s||!Po(p))&&(i(l),16&a))for(let e=0;e<c.length;e++){const r=c[e];o(r,t,n,!0,!!r.dynamicChildren)}},move:Ro,hydrate:function(e,t,n,r,o,i,{o:{nextSibling:s,parentNode:a,querySelector:c}},l){const u=t.target=Mo(t.props,c);if(u){const c=u._lpa||u.firstChild;16&t.shapeFlag&&(Po(t.props)?(t.anchor=l(s(e),t,a(e),n,r,o,i),t.targetAnchor=c):(t.anchor=s(e),t.targetAnchor=l(c,t,u,n,r,o,i)),u._lpa=t.targetAnchor&&s(t.targetAnchor))}return t.anchor&&s(t.anchor)}},Fo="components";function Io(e,t){return Uo(Fo,e,!0,t)||e}const Bo=Symbol();function Vo(e){return B(e)?Uo(Fo,e,!1)||e:e||Bo}function $o(e){return Uo("directives",e)}function Uo(e,t,n=!0,r=!1){const o=Ln||Ri;if(o){const n=o.type;if(e===Fo){const e=Yi(n);if(e&&(e===t||e===J(t)||e===X(J(t))))return n}const i=Do(o[e]||n[e],t)||Do(o.appContext[e],t);return!i&&r?n:i}}function Do(e,t){return e&&(e[t]||e[J(t)]||e[X(J(t))])}const Ho=Symbol(void 0),zo=Symbol(void 0),Wo=Symbol(void 0),qo=Symbol(void 0),Go=[];let Ko=null;function Jo(e=!1){Go.push(Ko=e?null:[])}function Yo(){Go.pop(),Ko=Go[Go.length-1]||null}let Qo,Xo=1;function Zo(e){Xo+=e}function ei(e){return e.dynamicChildren=Xo>0?Ko||x:null,Yo(),Xo>0&&Ko&&Ko.push(e),e}function ti(e,t,n,r,o,i){return ei(li(e,t,n,r,o,i,!0))}function ni(e,t,n,r,o){return ei(ui(e,t,n,r,o,!0))}function ri(e){return!!e&&!0===e.__v_isVNode}function oi(e,t){return e.type===t.type&&e.key===t.key}function ii(e){Qo=e}const si="__vInternal",ai=({key:e})=>null!=e?e:null,ci=({ref:e,ref_key:t,ref_for:n})=>null!=e?B(e)||It(e)||I(e)?{i:Ln,r:e,k:t,f:!!n}:e:null;function li(e,t=null,n=null,r=0,o=null,i=(e===Ho?0:1),s=!1,a=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&ai(t),ref:t&&ci(t),scopeId:Fn,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:r,dynamicProps:o,dynamicChildren:null,appContext:null};return a?(bi(c,n),128&i&&e.normalize(c)):n&&(c.shapeFlag|=B(n)?8:16),Xo>0&&!s&&Ko&&(c.patchFlag>0||6&i)&&32!==c.patchFlag&&Ko.push(c),c}const ui=fi;function fi(e,t=null,n=null,r=0,o=null,i=!1){if(e&&e!==Bo||(e=Wo),ri(e)){const r=di(e,t,!0);return n&&bi(r,n),r}if(Xi(e)&&(e=e.__vccOpts),t){t=pi(t);let{class:e,style:n}=t;e&&!B(e)&&(t.class=d(e)),$(n)&&(Tt(n)&&!M(n)&&(n=A({},n)),t.style=l(n))}return li(e,t,n,r,o,B(e)?1:(e=>e.__isSuspense)(e)?128:(e=>e.__isTeleport)(e)?64:$(e)?4:I(e)?2:0,i,!0)}function pi(e){return e?Tt(e)||si in e?A({},e):e:null}function di(e,t,n=!1){const{props:r,ref:o,patchFlag:i,children:s}=e,a=t?wi(r||{},t):r;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:a,key:a&&ai(a),ref:t&&t.ref?n&&o?M(o)?o.concat(ci(t)):[o,ci(t)]:ci(t):o,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:s,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ho?-1===i?16:16|i:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&di(e.ssContent),ssFallback:e.ssFallback&&di(e.ssFallback),el:e.el,anchor:e.anchor}}function hi(e=" ",t=0){return ui(zo,null,e,t)}function vi(e,t){const n=ui(qo,null,e);return n.staticCount=t,n}function mi(e="",t=!1){return t?(Jo(),ni(Wo,null,e)):ui(Wo,null,e)}function yi(e){return null==e||"boolean"==typeof e?ui(Wo):M(e)?ui(Ho,null,e.slice()):"object"==typeof e?gi(e):ui(zo,null,String(e))}function gi(e){return null===e.el||e.memo?e:di(e)}function bi(e,t){let n=0;const{shapeFlag:r}=e;if(null==t)t=null;else if(M(t))n=16;else if("object"==typeof t){if(65&r){const n=t.default;return void(n&&(n._c&&(n._d=!1),bi(e,n()),n._c&&(n._d=!0)))}{n=32;const r=t._;r||si in t?3===r&&Ln&&(1===Ln.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=Ln}}else I(t)?(t={default:t,_ctx:Ln},n=32):(t=String(t),64&r?(n=16,t=[hi(t)]):n=8);e.children=t,e.shapeFlag|=n}function wi(...e){const t={};for(let n=0;n<e.length;n++){const r=e[n];for(const e in r)if("class"===e)t.class!==r.class&&(t.class=d([t.class,r.class]));else if("style"===e)t.style=l([t.style,r.style]);else if(O(e)){const n=t[e],o=r[e];!o||n===o||M(n)&&n.includes(o)||(t[e]=n?[].concat(n,o):o)}else""!==e&&(t[e]=r[e])}return t}function Si(e,t,n,r=null){rn(e,t,7,[n,r])}function _i(e,t,n,r){let o;const i=n&&n[r];if(M(e)||B(e)){o=new Array(e.length);for(let n=0,r=e.length;n<r;n++)o[n]=t(e[n],n,void 0,i&&i[n])}else if("number"==typeof e){0,o=new Array(e);for(let n=0;n<e;n++)o[n]=t(n+1,n,void 0,i&&i[n])}else if($(e))if(e[Symbol.iterator])o=Array.from(e,((e,n)=>t(e,n,void 0,i&&i[n])));else{const n=Object.keys(e);o=new Array(n.length);for(let r=0,s=n.length;r<s;r++){const s=n[r];o[r]=t(e[s],s,r,i&&i[r])}}else o=[];return n&&(n[r]=o),o}function xi(e,t){for(let n=0;n<t.length;n++){const r=t[n];if(M(r))for(let t=0;t<r.length;t++)e[r[t].name]=r[t].fn;else r&&(e[r.name]=r.fn)}return e}function ki(e,t,n={},r,o){if(Ln.isCE)return ui("slot","default"===t?null:{name:t},r&&r());let i=e[t];i&&i._c&&(i._d=!1),Jo();const s=i&&Ei(i(n)),a=ni(Ho,{key:n.key||`_${t}`},s||(r?r():[]),s&&1===e._?64:-2);return!o&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),i&&i._c&&(i._d=!0),a}function Ei(e){return e.some((e=>!ri(e)||e.type!==Wo&&!(e.type===Ho&&!Ei(e.children))))?e:null}function Ci(e){const t={};for(const n in e)t[Z(n)]=e[n];return t}const Oi=e=>e?Bi(e)?Ki(e)||e.proxy:Oi(e.parent):null,ji=A(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Oi(e.parent),$root:e=>Oi(e.root),$emit:e=>e.emit,$options:e=>Jr(e),$forceUpdate:e=>()=>wn(e.update),$nextTick:e=>bn.bind(e.proxy),$watch:e=>cr.bind(e)}),Ai={get({_:e},t){const{ctx:n,setupState:r,data:o,props:i,accessCache:s,type:a,appContext:c}=e;let l;if("$"!==t[0]){const a=s[t];if(void 0!==a)switch(a){case 1:return r[t];case 2:return o[t];case 4:return n[t];case 3:return i[t]}else{if(r!==_&&N(r,t))return s[t]=1,r[t];if(o!==_&&N(o,t))return s[t]=2,o[t];if((l=e.propsOptions[0])&&N(l,t))return s[t]=3,i[t];if(n!==_&&N(n,t))return s[t]=4,n[t];Wr&&(s[t]=0)}}const u=ji[t];let f,p;return u?("$attrs"===t&&Te(e,0,t),u(e)):(f=a.__cssModules)&&(f=f[t])?f:n!==_&&N(n,t)?(s[t]=4,n[t]):(p=c.config.globalProperties,N(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:r,setupState:o,ctx:i}=e;if(o!==_&&N(o,t))o[t]=n;else if(r!==_&&N(r,t))r[t]=n;else if(N(e.props,t))return!1;return("$"!==t[0]||!(t.slice(1)in e))&&(i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:r,appContext:o,propsOptions:i}},s){let a;return!!n[s]||e!==_&&N(e,s)||t!==_&&N(t,s)||(a=i[0])&&N(a,s)||N(r,s)||N(ji,s)||N(o.config.globalProperties,s)}};const Ti=A({},Ai,{get(e,t){if(t!==Symbol.unscopables)return Ai.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!i(t)});const Pi=yo();let Ni=0;function Mi(e,t,n){const r=e.type,o=(t?t.appContext:e.appContext)||Pi,i={uid:Ni++,vnode:e,type:r,parent:t,appContext:o,root:null,next:null,subTree:null,effect:null,update:null,scope:new ae(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(o.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:oo(r,o),emitsOptions:Mn(r,o),emit:null,emitted:null,propsDefaults:_,inheritAttrs:r.inheritAttrs,ctx:_,data:_,props:_,attrs:_,slots:_,refs:_,setupState:_,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=Nn.bind(null,i),e.ce&&e.ce(i),i}let Ri=null;const Li=()=>Ri||Ln,Fi=e=>{Ri=e,e.scope.on()},Ii=()=>{Ri&&Ri.scope.off(),Ri=null};function Bi(e){return 4&e.vnode.shapeFlag}let Vi,$i,Ui=!1;function Di(e,t=!1){Ui=t;const{props:n,children:r}=e.vnode,o=Bi(e);!function(e,t,n,r=!1){const o={},i={};ne(i,si,1),e.propsDefaults=Object.create(null),no(e,t,o,i);for(const t in e.propsOptions[0])t in o||(o[t]=void 0);n?e.props=r?o:xt(o):e.type.props?e.props=o:e.props=i,e.attrs=i}(e,n,o,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=Pt(t),ne(t,"_",n)):po(t,e.slots={})}else e.slots={},t&&ho(e,t);ne(e.slots,si,1)})(e,r);const i=o?function(e,t){const n=e.type;0;e.accessCache=Object.create(null),e.proxy=Nt(new Proxy(e.ctx,Ai)),!1;const{setup:r}=n;if(r){const n=e.setupContext=r.length>1?Gi(e):null;Fi(e),je();const o=nn(r,e,0,[e.props,n]);if(Ae(),Ii(),U(o)){if(o.then(Ii,Ii),t)return o.then((n=>{Hi(e,n,t)})).catch((t=>{on(t,e,0)}));e.asyncDep=o}else Hi(e,o,t)}else qi(e,t)}(e,t):void 0;return Ui=!1,i}function Hi(e,t,n){I(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:$(t)&&(e.setupState=Wt(t)),qi(e,n)}function zi(e){Vi=e,$i=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ti))}}const Wi=()=>!Vi;function qi(e,t,n){const r=e.type;if(!e.render){if(!t&&Vi&&!r.render){const t=r.template;if(t){0;const{isCustomElement:n,compilerOptions:o}=e.appContext.config,{delimiters:i,compilerOptions:s}=r,a=A(A({isCustomElement:n,delimiters:i},o),s);r.render=Vi(t,a)}}e.render=r.render||k,$i&&$i(e)}Fi(e),je(),qr(e),Ae(),Ii()}function Gi(e){const t=t=>{e.exposed=t||{}};let n;return{get attrs(){return n||(n=function(e){return new Proxy(e.attrs,{get:(t,n)=>(Te(e,0,"$attrs"),t[n])})}(e))},slots:e.slots,emit:e.emit,expose:t}}function Ki(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(Wt(Nt(e.exposed)),{get:(t,n)=>n in t?t[n]:n in ji?ji[n](e):void 0}))}const Ji=/(?:^|[-_])(\w)/g;function Yi(e){return I(e)&&e.displayName||e.name}function Qi(e,t,n=!1){let r=Yi(t);if(!r&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(r=e[1])}if(!r&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};r=n(e.components||e.parent.type.components)||n(e.appContext.components)}return r?r.replace(Ji,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}function Xi(e){return I(e)&&"__vccOpts"in e}const Zi=(e,t)=>function(e,t,n=!1){let r,o;const i=I(e);return i?(r=e,o=k):(r=e.get,o=e.set),new Qt(r,o,i||!o,n)}(e,0,Ui);function es(){return null}function ts(){return null}function ns(e){0}function rs(e,t){return null}function os(){return ss().slots}function is(){return ss().attrs}function ss(){const e=Li();return e.setupContext||(e.setupContext=Gi(e))}function as(e,t){const n=M(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const r=n[e];r?M(r)||I(r)?n[e]={type:r,default:t[e]}:r.default=t[e]:null===r&&(n[e]={default:t[e]})}return n}function cs(e,t){const n={};for(const r in e)t.includes(r)||Object.defineProperty(n,r,{enumerable:!0,get:()=>e[r]});return n}function ls(e){const t=Li();let n=e();return Ii(),U(n)&&(n=n.catch((e=>{throw Fi(t),e}))),[n,()=>Fi(t)]}function us(e,t,n){const r=arguments.length;return 2===r?$(t)&&!M(t)?ri(t)?ui(e,null,[t]):ui(e,t):ui(e,null,t):(r>3?n=Array.prototype.slice.call(arguments,2):3===r&&ri(n)&&(n=[n]),ui(e,t,n))}const fs=Symbol(""),ps=()=>{{const e=tr(fs);return e||Zt("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function ds(){return void 0}function hs(e,t,n,r){const o=n[r];if(o&&vs(o,e))return o;const i=t();return i.memo=e.slice(),n[r]=i}function vs(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return Xo>0&&Ko&&Ko.push(e),!0}const ms="3.2.29",ys={createComponentInstance:Mi,setupComponent:Di,renderComponentRoot:Dn,setCurrentRenderingInstance:In,isVNode:ri,normalizeVNode:yi},gs=null,bs=null,ws="undefined"!=typeof document?document:null,Ss=ws&&ws.createElement("template"),_s={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,r)=>{const o=t?ws.createElementNS("http://www.w3.org/2000/svg",e):ws.createElement(e,n?{is:n}:void 0);return"select"===e&&r&&null!=r.multiple&&o.setAttribute("multiple",r.multiple),o},createText:e=>ws.createTextNode(e),createComment:e=>ws.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>ws.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,r,o,i){const s=n?n.previousSibling:t.lastChild;if(o&&(o===i||o.nextSibling))for(;t.insertBefore(o.cloneNode(!0),n),o!==i&&(o=o.nextSibling););else{Ss.innerHTML=r?`<svg>${e}</svg>`:e;const o=Ss.content;if(r){const e=o.firstChild;for(;e.firstChild;)o.appendChild(e.firstChild);o.removeChild(e)}t.insertBefore(o,n)}return[s?s.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}};const xs=/\s*!important$/;function ks(e,t,n){if(M(n))n.forEach((n=>ks(e,t,n)));else if(t.startsWith("--"))e.setProperty(t,n);else{const r=function(e,t){const n=Cs[t];if(n)return n;let r=J(t);if("filter"!==r&&r in e)return Cs[t]=r;r=X(r);for(let n=0;n<Es.length;n++){const o=Es[n]+r;if(o in e)return Cs[t]=o}return t}(e,t);xs.test(n)?e.setProperty(Q(r),n.replace(xs,""),"important"):e[r]=n}}const Es=["Webkit","Moz","ms"],Cs={};const Os="http://www.w3.org/1999/xlink";let js=Date.now,As=!1;if("undefined"!=typeof window){js()>document.createEvent("Event").timeStamp&&(js=()=>performance.now());const e=navigator.userAgent.match(/firefox\/(\d+)/i);As=!!(e&&Number(e[1])<=53)}let Ts=0;const Ps=Promise.resolve(),Ns=()=>{Ts=0};function Ms(e,t,n,r){e.addEventListener(t,n,r)}function Rs(e,t,n,r,o=null){const i=e._vei||(e._vei={}),s=i[t];if(r&&s)s.value=r;else{const[n,a]=function(e){let t;if(Ls.test(e)){let n;for(t={};n=e.match(Ls);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[Q(e.slice(2)),t]}(t);if(r){const s=i[t]=function(e,t){const n=e=>{const r=e.timeStamp||js();(As||r>=n.attached-1)&&rn(function(e,t){if(M(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=(()=>Ts||(Ps.then(Ns),Ts=js()))(),n}(r,o);Ms(e,n,s,a)}else s&&(!function(e,t,n,r){e.removeEventListener(t,n,r)}(e,n,s,a),i[t]=void 0)}}const Ls=/(?:Once|Passive|Capture)$/;const Fs=/^on[a-z]/;function Is(e,t){const n=wr(e);class r extends $s{constructor(e){super(n,e,t)}}return r.def=n,r}const Bs=e=>Is(e,Ua),Vs="undefined"!=typeof HTMLElement?HTMLElement:class{};class $s extends Vs{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,bn((()=>{this._connected||($a(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,r=!M(t),o=t?r?Object.keys(t):t:[];let i;if(r)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=re(this._props[e]),(i||(i=Object.create(null)))[e]=!0)}this._numberProps=i;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of o.map(J))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=re(t)),this._setProp(J(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,r=!0){t!==this._props[e]&&(this._props[e]=t,r&&this._instance&&this._update(),n&&(!0===t?this.setAttribute(Q(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Q(e),t+""):t||this.removeAttribute(Q(e))))}_update(){$a(this._createVNode(),this.shadowRoot)}_createVNode(){const e=ui(this._def,A({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof $s){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function Us(e="$style"){{const t=Li();if(!t)return _;const n=t.type.__cssModules;if(!n)return _;const r=n[e];return r||_}}function Ds(e){const t=Li();if(!t)return;const n=()=>Hs(t.subTree,e(t.proxy));rr(n),Fr((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),$r((()=>e.disconnect()))}))}function Hs(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{Hs(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)zs(e.el,t);else if(e.type===Ho)e.children.forEach((e=>Hs(e,t)));else if(e.type===qo){let{el:n,anchor:r}=e;for(;n&&(zs(n,t),n!==r);)n=n.nextSibling}}function zs(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const Ws="transition",qs="animation",Gs=(e,{slots:t})=>us(dr,Xs(e),t);Gs.displayName="Transition";const Ks={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Js=Gs.props=A({},dr.props,Ks),Ys=(e,t=[])=>{M(e)?e.forEach((e=>e(...t))):e&&e(...t)},Qs=e=>!!e&&(M(e)?e.some((e=>e.length>1)):e.length>1);function Xs(e){const t={};for(const n in e)n in Ks||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:r,duration:o,enterFromClass:i=`${n}-enter-from`,enterActiveClass:s=`${n}-enter-active`,enterToClass:a=`${n}-enter-to`,appearFromClass:c=i,appearActiveClass:l=s,appearToClass:u=a,leaveFromClass:f=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:d=`${n}-leave-to`}=e,h=function(e){if(null==e)return null;if($(e))return[Zs(e.enter),Zs(e.leave)];{const t=Zs(e);return[t,t]}}(o),v=h&&h[0],m=h&&h[1],{onBeforeEnter:y,onEnter:g,onEnterCancelled:b,onLeave:w,onLeaveCancelled:S,onBeforeAppear:_=y,onAppear:x=g,onAppearCancelled:k=b}=t,E=(e,t,n)=>{ta(e,t?u:a),ta(e,t?l:s),n&&n()},C=(e,t)=>{ta(e,d),ta(e,p),t&&t()},O=e=>(t,n)=>{const o=e?x:g,s=()=>E(t,e,n);Ys(o,[t,s]),na((()=>{ta(t,e?c:i),ea(t,e?u:a),Qs(o)||oa(t,r,v,s)}))};return A(t,{onBeforeEnter(e){Ys(y,[e]),ea(e,i),ea(e,s)},onBeforeAppear(e){Ys(_,[e]),ea(e,c),ea(e,l)},onEnter:O(!1),onAppear:O(!0),onLeave(e,t){const n=()=>C(e,t);ea(e,f),ca(),ea(e,p),na((()=>{ta(e,f),ea(e,d),Qs(w)||oa(e,r,m,n)})),Ys(w,[e,n])},onEnterCancelled(e){E(e,!1),Ys(b,[e])},onAppearCancelled(e){E(e,!0),Ys(k,[e])},onLeaveCancelled(e){C(e),Ys(S,[e])}})}function Zs(e){return re(e)}function ea(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function ta(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function na(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let ra=0;function oa(e,t,n,r){const o=e._endId=++ra,i=()=>{o===e._endId&&r()};if(n)return setTimeout(i,n);const{type:s,timeout:a,propCount:c}=ia(e,t);if(!s)return r();const l=s+"end";let u=0;const f=()=>{e.removeEventListener(l,p),i()},p=t=>{t.target===e&&++u>=c&&f()};setTimeout((()=>{u<c&&f()}),a+1),e.addEventListener(l,p)}function ia(e,t){const n=window.getComputedStyle(e),r=e=>(n[e]||"").split(", "),o=r("transitionDelay"),i=r("transitionDuration"),s=sa(o,i),a=r("animationDelay"),c=r("animationDuration"),l=sa(a,c);let u=null,f=0,p=0;t===Ws?s>0&&(u=Ws,f=s,p=i.length):t===qs?l>0&&(u=qs,f=l,p=c.length):(f=Math.max(s,l),u=f>0?s>l?Ws:qs:null,p=u?u===Ws?i.length:c.length:0);return{type:u,timeout:f,propCount:p,hasTransform:u===Ws&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function sa(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>aa(t)+aa(e[n]))))}function aa(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function ca(){return document.body.offsetHeight}const la=new WeakMap,ua=new WeakMap,fa={name:"TransitionGroup",props:A({},Js,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=Li(),r=fr();let o,i;return Br((()=>{if(!o.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const r=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&r.classList.remove(e)))}));n.split(/\s+/).forEach((e=>e&&r.classList.add(e))),r.style.display="none";const o=1===t.nodeType?t:t.parentNode;o.appendChild(r);const{hasTransform:i}=ia(r);return o.removeChild(r),i}(o[0].el,n.vnode.el,t))return;o.forEach(pa),o.forEach(da);const r=o.filter(ha);ca(),r.forEach((e=>{const n=e.el,r=n.style;ea(n,t),r.transform=r.webkitTransform=r.transitionDuration="";const o=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",o),n._moveCb=null,ta(n,t))};n.addEventListener("transitionend",o)}))})),()=>{const s=Pt(e),a=Xs(s);let c=s.tag||Ho;o=i,i=t.default?br(t.default()):[];for(let e=0;e<i.length;e++){const t=i[e];null!=t.key&&gr(t,vr(t,a,r,n))}if(o)for(let e=0;e<o.length;e++){const t=o[e];gr(t,vr(t,a,r,n)),la.set(t,t.el.getBoundingClientRect())}return ui(c,null,i)}}};function pa(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function da(e){ua.set(e,e.el.getBoundingClientRect())}function ha(e){const t=la.get(e),n=ua.get(e),r=t.left-n.left,o=t.top-n.top;if(r||o){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${r}px,${o}px)`,t.transitionDuration="0s",e}}const va=e=>{const t=e.props["onUpdate:modelValue"];return M(t)?e=>te(t,e):t};function ma(e){e.target.composing=!0}function ya(e){const t=e.target;t.composing&&(t.composing=!1,function(e,t){const n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}(t,"input"))}const ga={created(e,{modifiers:{lazy:t,trim:n,number:r}},o){e._assign=va(o);const i=r||o.props&&"number"===o.props.type;Ms(e,t?"change":"input",(t=>{if(t.target.composing)return;let r=e.value;n?r=r.trim():i&&(r=re(r)),e._assign(r)})),n&&Ms(e,"change",(()=>{e.value=e.value.trim()})),t||(Ms(e,"compositionstart",ma),Ms(e,"compositionend",ya),Ms(e,"change",ya))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:r,number:o}},i){if(e._assign=va(i),e.composing)return;if(document.activeElement===e){if(n)return;if(r&&e.value.trim()===t)return;if((o||"number"===e.type)&&re(e.value)===t)return}const s=null==t?"":t;e.value!==s&&(e.value=s)}},ba={deep:!0,created(e,t,n){e._assign=va(n),Ms(e,"change",(()=>{const t=e._modelValue,n=ka(e),r=e.checked,o=e._assign;if(M(t)){const e=b(t,n),i=-1!==e;if(r&&!i)o(t.concat(n));else if(!r&&i){const n=[...t];n.splice(e,1),o(n)}}else if(L(t)){const e=new Set(t);r?e.add(n):e.delete(n),o(e)}else o(Ea(e,r))}))},mounted:wa,beforeUpdate(e,t,n){e._assign=va(n),wa(e,t,n)}};function wa(e,{value:t,oldValue:n},r){e._modelValue=t,M(t)?e.checked=b(t,r.props.value)>-1:L(t)?e.checked=t.has(r.props.value):t!==n&&(e.checked=g(t,Ea(e,!0)))}const Sa={created(e,{value:t},n){e.checked=g(t,n.props.value),e._assign=va(n),Ms(e,"change",(()=>{e._assign(ka(e))}))},beforeUpdate(e,{value:t,oldValue:n},r){e._assign=va(r),t!==n&&(e.checked=g(t,r.props.value))}},_a={deep:!0,created(e,{value:t,modifiers:{number:n}},r){const o=L(t);Ms(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?re(ka(e)):ka(e)));e._assign(e.multiple?o?new Set(t):t:t[0])})),e._assign=va(r)},mounted(e,{value:t}){xa(e,t)},beforeUpdate(e,t,n){e._assign=va(n)},updated(e,{value:t}){xa(e,t)}};function xa(e,t){const n=e.multiple;if(!n||M(t)||L(t)){for(let r=0,o=e.options.length;r<o;r++){const o=e.options[r],i=ka(o);if(n)M(t)?o.selected=b(t,i)>-1:o.selected=t.has(i);else if(g(ka(o),t))return void(e.selectedIndex!==r&&(e.selectedIndex=r))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}}function ka(e){return"_value"in e?e._value:e.value}function Ea(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const Ca={created(e,t,n){Oa(e,t,n,null,"created")},mounted(e,t,n){Oa(e,t,n,null,"mounted")},beforeUpdate(e,t,n,r){Oa(e,t,n,r,"beforeUpdate")},updated(e,t,n,r){Oa(e,t,n,r,"updated")}};function Oa(e,t,n,r,o){let i;switch(e.tagName){case"SELECT":i=_a;break;case"TEXTAREA":i=ga;break;default:switch(n.props&&n.props.type){case"checkbox":i=ba;break;case"radio":i=Sa;break;default:i=ga}}const s=i[o];s&&s(e,t,n,r)}const ja=["ctrl","shift","alt","meta"],Aa={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>ja.some((n=>e[`${n}Key`]&&!t.includes(n)))},Ta=(e,t)=>(n,...r)=>{for(let e=0;e<t.length;e++){const r=Aa[t[e]];if(r&&r(n,t))return}return e(n,...r)},Pa={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Na=(e,t)=>n=>{if(!("key"in n))return;const r=Q(n.key);return t.some((e=>e===r||Pa[e]===r))?e(n):void 0},Ma={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):Ra(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:r}){!t!=!n&&(r?t?(r.beforeEnter(e),Ra(e,!0),r.enter(e)):r.leave(e,(()=>{Ra(e,!1)})):Ra(e,t))},beforeUnmount(e,{value:t}){Ra(e,t)}};function Ra(e,t){e.style.display=t?e._vod:"none"}const La=A({patchProp:(e,t,n,r,o=!1,i,s,l,u)=>{"class"===t?function(e,t,n){const r=e._vtc;r&&(t=(t?[t,...r]:[...r]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,r,o):"style"===t?function(e,t,n){const r=e.style,o=B(n);if(n&&!o){for(const e in n)ks(r,e,n[e]);if(t&&!B(t))for(const e in t)null==n[e]&&ks(r,e,"")}else{const i=r.display;o?t!==n&&(r.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(r.display=i)}}(e,n,r):O(t)?j(t)||Rs(e,t,0,r,s):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,r){if(r)return"innerHTML"===t||"textContent"===t||!!(t in e&&Fs.test(t)&&I(n));if("spellcheck"===t||"draggable"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if(Fs.test(t)&&B(n))return!1;return t in e}(e,t,r,o))?function(e,t,n,r,o,i,s){if("innerHTML"===t||"textContent"===t)return r&&s(r,o,i),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const r=null==n?"":n;return e.value===r&&"OPTION"!==e.tagName||(e.value=r),void(null==n&&e.removeAttribute(t))}if(""===n||null==n){const r=typeof e[t];if("boolean"===r)return void(e[t]=c(n));if(null==n&&"string"===r)return e[t]="",void e.removeAttribute(t);if("number"===r){try{e[t]=0}catch(e){}return void e.removeAttribute(t)}}try{e[t]=n}catch(e){}}(e,t,r,i,s,l,u):("true-value"===t?e._trueValue=r:"false-value"===t&&(e._falseValue=r),function(e,t,n,r,o){if(r&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(Os,t.slice(6,t.length)):e.setAttributeNS(Os,t,n);else{const r=a(t);null==n||r&&!c(n)?e.removeAttribute(t):e.setAttribute(t,r?"":n)}}(e,t,r,o))}},_s);let Fa,Ia=!1;function Ba(){return Fa||(Fa=Co(La))}function Va(){return Fa=Ia?Fa:Oo(La),Ia=!0,Fa}const $a=(...e)=>{Ba().render(...e)},Ua=(...e)=>{Va().hydrate(...e)},Da=(...e)=>{const t=Ba().createApp(...e);const{mount:n}=t;return t.mount=e=>{const r=za(e);if(!r)return;const o=t._component;I(o)||o.render||o.template||(o.template=r.innerHTML),r.innerHTML="";const i=n(r,!1,r instanceof SVGElement);return r instanceof Element&&(r.removeAttribute("v-cloak"),r.setAttribute("data-v-app","")),i},t},Ha=(...e)=>{const t=Va().createApp(...e);const{mount:n}=t;return t.mount=e=>{const t=za(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function za(e){if(B(e)){return document.querySelector(e)}return e}let Wa=!1;const qa=()=>{Wa||(Wa=!0,ga.getSSRProps=({value:e})=>({value:e}),Sa.getSSRProps=({value:e},t)=>{if(t.props&&g(t.props.value,e))return{checked:!0}},ba.getSSRProps=({value:e},t)=>{if(M(e)){if(t.props&&b(e,t.props.value)>-1)return{checked:!0}}else if(L(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},Ma.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})};function Ga(e){throw e}function Ka(e){}function Ja(e,t,n,r){const o=new SyntaxError(String(e));return o.code=e,o.loc=t,o}const Ya=Symbol(""),Qa=Symbol(""),Xa=Symbol(""),Za=Symbol(""),ec=Symbol(""),tc=Symbol(""),nc=Symbol(""),rc=Symbol(""),oc=Symbol(""),ic=Symbol(""),sc=Symbol(""),ac=Symbol(""),cc=Symbol(""),lc=Symbol(""),uc=Symbol(""),fc=Symbol(""),pc=Symbol(""),dc=Symbol(""),hc=Symbol(""),vc=Symbol(""),mc=Symbol(""),yc=Symbol(""),gc=Symbol(""),bc=Symbol(""),wc=Symbol(""),Sc=Symbol(""),_c=Symbol(""),xc=Symbol(""),kc=Symbol(""),Ec=Symbol(""),Cc=Symbol(""),Oc=Symbol(""),jc=Symbol(""),Ac=Symbol(""),Tc=Symbol(""),Pc=Symbol(""),Nc=Symbol(""),Mc=Symbol(""),Rc=Symbol(""),Lc={[Ya]:"Fragment",[Qa]:"Teleport",[Xa]:"Suspense",[Za]:"KeepAlive",[ec]:"BaseTransition",[tc]:"openBlock",[nc]:"createBlock",[rc]:"createElementBlock",[oc]:"createVNode",[ic]:"createElementVNode",[sc]:"createCommentVNode",[ac]:"createTextVNode",[cc]:"createStaticVNode",[lc]:"resolveComponent",[uc]:"resolveDynamicComponent",[fc]:"resolveDirective",[pc]:"resolveFilter",[dc]:"withDirectives",[hc]:"renderList",[vc]:"renderSlot",[mc]:"createSlots",[yc]:"toDisplayString",[gc]:"mergeProps",[bc]:"normalizeClass",[wc]:"normalizeStyle",[Sc]:"normalizeProps",[_c]:"guardReactiveProps",[xc]:"toHandlers",[kc]:"camelize",[Ec]:"capitalize",[Cc]:"toHandlerKey",[Oc]:"setBlockTracking",[jc]:"pushScopeId",[Ac]:"popScopeId",[Tc]:"withCtx",[Pc]:"unref",[Nc]:"isRef",[Mc]:"withMemo",[Rc]:"isMemoSame"};const Fc={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function Ic(e,t,n,r,o,i,s,a=!1,c=!1,l=!1,u=Fc){return e&&(a?(e.helper(tc),e.helper(pl(e.inSSR,l))):e.helper(fl(e.inSSR,l)),s&&e.helper(dc)),{type:13,tag:t,props:n,children:r,patchFlag:o,dynamicProps:i,directives:s,isBlock:a,disableTracking:c,isComponent:l,loc:u}}function Bc(e,t=Fc){return{type:17,loc:t,elements:e}}function Vc(e,t=Fc){return{type:15,loc:t,properties:e}}function $c(e,t){return{type:16,loc:Fc,key:B(e)?Uc(e,!0):e,value:t}}function Uc(e,t=!1,n=Fc,r=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:r}}function Dc(e,t=Fc){return{type:8,loc:t,children:e}}function Hc(e,t=[],n=Fc){return{type:14,loc:n,callee:e,arguments:t}}function zc(e,t,n=!1,r=!1,o=Fc){return{type:18,params:e,returns:t,newline:n,isSlot:r,loc:o}}function Wc(e,t,n,r=!0){return{type:19,test:e,consequent:t,alternate:n,newline:r,loc:Fc}}const qc=e=>4===e.type&&e.isStatic,Gc=(e,t)=>e===t||e===Q(t);function Kc(e){return Gc(e,"Teleport")?Qa:Gc(e,"Suspense")?Xa:Gc(e,"KeepAlive")?Za:Gc(e,"BaseTransition")?ec:void 0}const Jc=/^\d|[^\$\w]/,Yc=e=>!Jc.test(e),Qc=/[A-Za-z_$\xA0-\uFFFF]/,Xc=/[\.\?\w$\xA0-\uFFFF]/,Zc=/\s+[.[]\s*|\s*[.[]\s+/g,el=e=>{e=e.trim().replace(Zc,(e=>e.trim()));let t=0,n=[],r=0,o=0,i=null;for(let s=0;s<e.length;s++){const a=e.charAt(s);switch(t){case 0:if("["===a)n.push(t),t=1,r++;else if("("===a)n.push(t),t=2,o++;else if(!(0===s?Qc:Xc).test(a))return!1;break;case 1:"'"===a||'"'===a||"`"===a?(n.push(t),t=3,i=a):"["===a?r++:"]"===a&&(--r||(t=n.pop()));break;case 2:if("'"===a||'"'===a||"`"===a)n.push(t),t=3,i=a;else if("("===a)o++;else if(")"===a){if(s===e.length-1)return!1;--o||(t=n.pop())}break;case 3:a===i&&(t=n.pop(),i=null)}}return!r&&!o};function tl(e,t,n){const r={source:e.source.slice(t,t+n),start:nl(e.start,e.source,t),end:e.end};return null!=n&&(r.end=nl(e.start,e.source,t+n)),r}function nl(e,t,n=t.length){return rl(A({},e),t,n)}function rl(e,t,n=t.length){let r=0,o=-1;for(let e=0;e<n;e++)10===t.charCodeAt(e)&&(r++,o=e);return e.offset+=n,e.line+=r,e.column=-1===o?e.column+n:n-o,e}function ol(e,t,n=!1){for(let r=0;r<e.props.length;r++){const o=e.props[r];if(7===o.type&&(n||o.exp)&&(B(t)?o.name===t:t.test(o.name)))return o}}function il(e,t,n=!1,r=!1){for(let o=0;o<e.props.length;o++){const i=e.props[o];if(6===i.type){if(n)continue;if(i.name===t&&(i.value||r))return i}else if("bind"===i.name&&(i.exp||r)&&sl(i.arg,t))return i}}function sl(e,t){return!(!e||!qc(e)||e.content!==t)}function al(e){return 5===e.type||2===e.type}function cl(e){return 7===e.type&&"slot"===e.name}function ll(e){return 1===e.type&&3===e.tagType}function ul(e){return 1===e.type&&2===e.tagType}function fl(e,t){return e||t?oc:ic}function pl(e,t){return e||t?nc:rc}const dl=new Set([Sc,_c]);function hl(e,t=[]){if(e&&!B(e)&&14===e.type){const n=e.callee;if(!B(n)&&dl.has(n))return hl(e.arguments[0],t.concat(e))}return[e,t]}function vl(e,t,n){let r,o,i=13===e.type?e.props:e.arguments[2],s=[];if(i&&!B(i)&&14===i.type){const e=hl(i);i=e[0],s=e[1],o=s[s.length-1]}if(null==i||B(i))r=Vc([t]);else if(14===i.type){const e=i.arguments[0];B(e)||15!==e.type?i.callee===xc?r=Hc(n.helper(gc),[Vc([t]),i]):i.arguments.unshift(Vc([t])):e.properties.unshift(t),!r&&(r=i)}else if(15===i.type){let e=!1;if(4===t.key.type){const n=t.key.content;e=i.properties.some((e=>4===e.key.type&&e.key.content===n))}e||i.properties.unshift(t),r=i}else r=Hc(n.helper(gc),[Vc([t]),i]),o&&o.callee===_c&&(o=s[s.length-2]);13===e.type?o?o.arguments[0]=r:e.props=r:o?o.arguments[0]=r:e.arguments[2]=r}function ml(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}function yl(e,{helper:t,removeHelper:n,inSSR:r}){e.isBlock||(e.isBlock=!0,n(fl(r,e.isComponent)),t(tc),t(pl(r,e.isComponent)))}function gl(e,t){const n=t.options?t.options.compatConfig:t.compatConfig,r=n&&n[e];return"MODE"===e?r||3:r}function bl(e,t){const n=gl("MODE",t),r=gl(e,t);return 3===n?!0===r:!1!==r}function wl(e,t,n,...r){return bl(e,t)}const Sl=/&(gt|lt|amp|apos|quot);/g,_l={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},xl={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:E,isPreTag:E,isCustomElement:E,decodeEntities:e=>e.replace(Sl,((e,t)=>_l[t])),onError:Ga,onWarn:Ka,comments:!1};function kl(e,t={}){const n=function(e,t){const n=A({},xl);let r;for(r in t)n[r]=void 0===t[r]?xl[r]:t[r];return{options:n,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:n.onWarn}}(e,t),r=Bl(n);return function(e,t=Fc){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(El(n,0,[]),Vl(n,r))}function El(e,t,n){const r=$l(n),o=r?r.ns:0,i=[];for(;!ql(e,t,n);){const s=e.source;let a;if(0===t||1===t)if(!e.inVPre&&Ul(s,e.options.delimiters[0]))a=Ll(e,t);else if(0===t&&"<"===s[0])if(1===s.length)Wl(e,5,1);else if("!"===s[1])Ul(s,"\x3c!--")?a=jl(e):Ul(s,"<!DOCTYPE")?a=Al(e):Ul(s,"<![CDATA[")?0!==o?a=Ol(e,n):(Wl(e,1),a=Al(e)):(Wl(e,11),a=Al(e));else if("/"===s[1])if(2===s.length)Wl(e,5,2);else{if(">"===s[2]){Wl(e,14,2),Dl(e,3);continue}if(/[a-z]/i.test(s[2])){Wl(e,23),Nl(e,1,r);continue}Wl(e,12,2),a=Al(e)}else/[a-z]/i.test(s[1])?(a=Tl(e,n),bl("COMPILER_NATIVE_TEMPLATE",e)&&a&&"template"===a.tag&&!a.props.some((e=>7===e.type&&Pl(e.name)))&&(a=a.children)):"?"===s[1]?(Wl(e,21,1),a=Al(e)):Wl(e,12,1);if(a||(a=Fl(e,t)),M(a))for(let e=0;e<a.length;e++)Cl(i,a[e]);else Cl(i,a)}let s=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let n=0;n<i.length;n++){const r=i[n];if(e.inPre||2!==r.type)3!==r.type||e.options.comments||(s=!0,i[n]=null);else if(/[^\t\r\n\f ]/.test(r.content))t&&(r.content=r.content.replace(/[\t\r\n\f ]+/g," "));else{const e=i[n-1],o=i[n+1];!e||!o||t&&(3===e.type||3===o.type||1===e.type&&1===o.type&&/[\r\n]/.test(r.content))?(s=!0,i[n]=null):r.content=" "}}if(e.inPre&&r&&e.options.isPreTag(r.tag)){const e=i[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return s?i.filter(Boolean):i}function Cl(e,t){if(2===t.type){const n=$l(e);if(n&&2===n.type&&n.loc.end.offset===t.loc.start.offset)return n.content+=t.content,n.loc.end=t.loc.end,void(n.loc.source+=t.loc.source)}e.push(t)}function Ol(e,t){Dl(e,9);const n=El(e,3,t);return 0===e.source.length?Wl(e,6):Dl(e,3),n}function jl(e){const t=Bl(e);let n;const r=/--(\!)?>/.exec(e.source);if(r){r.index<=3&&Wl(e,0),r[1]&&Wl(e,10),n=e.source.slice(4,r.index);const t=e.source.slice(0,r.index);let o=1,i=0;for(;-1!==(i=t.indexOf("\x3c!--",o));)Dl(e,i-o+1),i+4<t.length&&Wl(e,16),o=i+1;Dl(e,r.index+r[0].length-o+1)}else n=e.source.slice(4),Dl(e,e.source.length),Wl(e,7);return{type:3,content:n,loc:Vl(e,t)}}function Al(e){const t=Bl(e),n="?"===e.source[1]?1:2;let r;const o=e.source.indexOf(">");return-1===o?(r=e.source.slice(n),Dl(e,e.source.length)):(r=e.source.slice(n,o),Dl(e,o+1)),{type:3,content:r,loc:Vl(e,t)}}function Tl(e,t){const n=e.inPre,r=e.inVPre,o=$l(t),i=Nl(e,0,o),s=e.inPre&&!n,a=e.inVPre&&!r;if(i.isSelfClosing||e.options.isVoidTag(i.tag))return s&&(e.inPre=!1),a&&(e.inVPre=!1),i;t.push(i);const c=e.options.getTextMode(i,o),l=El(e,c,t);t.pop();{const t=i.props.find((e=>6===e.type&&"inline-template"===e.name));if(t&&wl("COMPILER_INLINE_TEMPLATE",e,t.loc)){const n=Vl(e,i.loc.end);t.value={type:2,content:n.source,loc:n}}}if(i.children=l,Gl(e.source,i.tag))Nl(e,1,o);else if(Wl(e,24,0,i.loc.start),0===e.source.length&&"script"===i.tag.toLowerCase()){const t=l[0];t&&Ul(t.loc.source,"\x3c!--")&&Wl(e,8)}return i.loc=Vl(e,i.loc.start),s&&(e.inPre=!1),a&&(e.inVPre=!1),i}const Pl=o("if,else,else-if,for,slot");function Nl(e,t,n){const r=Bl(e),o=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),i=o[1],s=e.options.getNamespace(i,n);Dl(e,o[0].length),Hl(e);const a=Bl(e),c=e.source;e.options.isPreTag(i)&&(e.inPre=!0);let l=Ml(e,t);0===t&&!e.inVPre&&l.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,A(e,a),e.source=c,l=Ml(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length?Wl(e,9):(u=Ul(e.source,"/>"),1===t&&u&&Wl(e,4),Dl(e,u?2:1)),1===t)return;let f=0;return e.inVPre||("slot"===i?f=2:"template"===i?l.some((e=>7===e.type&&Pl(e.name)))&&(f=3):function(e,t,n){const r=n.options;if(r.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||Kc(e)||r.isBuiltInComponent&&r.isBuiltInComponent(e)||r.isNativeTag&&!r.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const r=t[e];if(6===r.type){if("is"===r.name&&r.value){if(r.value.content.startsWith("vue:"))return!0;if(wl("COMPILER_IS_ON_ELEMENT",n,r.loc))return!0}}else{if("is"===r.name)return!0;if("bind"===r.name&&sl(r.arg,"is")&&wl("COMPILER_IS_ON_ELEMENT",n,r.loc))return!0}}}(i,l,e)&&(f=1)),{type:1,ns:s,tag:i,tagType:f,props:l,isSelfClosing:u,children:[],loc:Vl(e,r),codegenNode:void 0}}function Ml(e,t){const n=[],r=new Set;for(;e.source.length>0&&!Ul(e.source,">")&&!Ul(e.source,"/>");){if(Ul(e.source,"/")){Wl(e,22),Dl(e,1),Hl(e);continue}1===t&&Wl(e,3);const o=Rl(e,r);6===o.type&&o.value&&"class"===o.name&&(o.value.content=o.value.content.replace(/\s+/g," ").trim()),0===t&&n.push(o),/^[^\t\r\n\f />]/.test(e.source)&&Wl(e,15),Hl(e)}return n}function Rl(e,t){const n=Bl(e),r=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(r)&&Wl(e,2),t.add(r),"="===r[0]&&Wl(e,19);{const t=/["'<]/g;let n;for(;n=t.exec(r);)Wl(e,17,n.index)}let o;Dl(e,r.length),/^[\t\r\n\f ]*=/.test(e.source)&&(Hl(e),Dl(e,1),Hl(e),o=function(e){const t=Bl(e);let n;const r=e.source[0],o='"'===r||"'"===r;if(o){Dl(e,1);const t=e.source.indexOf(r);-1===t?n=Il(e,e.source.length,4):(n=Il(e,t,4),Dl(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const r=/["'<=`]/g;let o;for(;o=r.exec(t[0]);)Wl(e,18,o.index);n=Il(e,t[0].length,4)}return{content:n,isQuoted:o,loc:Vl(e,t)}}(e),o||Wl(e,13));const i=Vl(e,n);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(r)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(r);let s,a=Ul(r,"."),c=t[1]||(a||Ul(r,":")?"bind":Ul(r,"@")?"on":"slot");if(t[2]){const o="slot"===c,i=r.lastIndexOf(t[2]),a=Vl(e,zl(e,n,i),zl(e,n,i+t[2].length+(o&&t[3]||"").length));let l=t[2],u=!0;l.startsWith("[")?(u=!1,l.endsWith("]")?l=l.slice(1,l.length-1):(Wl(e,27),l=l.slice(1))):o&&(l+=t[3]||""),s={type:4,content:l,isStatic:u,constType:u?3:0,loc:a}}if(o&&o.isQuoted){const e=o.loc;e.start.offset++,e.start.column++,e.end=nl(e.start,o.content),e.source=e.source.slice(1,-1)}const l=t[3]?t[3].slice(1).split("."):[];return a&&l.push("prop"),"bind"===c&&s&&l.includes("sync")&&wl("COMPILER_V_BIND_SYNC",e,0,s.loc.source)&&(c="model",l.splice(l.indexOf("sync"),1)),{type:7,name:c,exp:o&&{type:4,content:o.content,isStatic:!1,constType:0,loc:o.loc},arg:s,modifiers:l,loc:i}}return!e.inVPre&&Ul(r,"v-")&&Wl(e,26),{type:6,name:r,value:o&&{type:2,content:o.content,loc:o.loc},loc:i}}function Ll(e,t){const[n,r]=e.options.delimiters,o=e.source.indexOf(r,n.length);if(-1===o)return void Wl(e,25);const i=Bl(e);Dl(e,n.length);const s=Bl(e),a=Bl(e),c=o-n.length,l=e.source.slice(0,c),u=Il(e,c,t),f=u.trim(),p=u.indexOf(f);p>0&&rl(s,l,p);return rl(a,l,c-(u.length-f.length-p)),Dl(e,r.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:f,loc:Vl(e,s,a)},loc:Vl(e,i)}}function Fl(e,t){const n=3===t?["]]>"]:["<",e.options.delimiters[0]];let r=e.source.length;for(let t=0;t<n.length;t++){const o=e.source.indexOf(n[t],1);-1!==o&&r>o&&(r=o)}const o=Bl(e);return{type:2,content:Il(e,r,t),loc:Vl(e,o)}}function Il(e,t,n){const r=e.source.slice(0,t);return Dl(e,t),2!==n&&3!==n&&r.includes("&")?e.options.decodeEntities(r,4===n):r}function Bl(e){const{column:t,line:n,offset:r}=e;return{column:t,line:n,offset:r}}function Vl(e,t,n){return{start:t,end:n=n||Bl(e),source:e.originalSource.slice(t.offset,n.offset)}}function $l(e){return e[e.length-1]}function Ul(e,t){return e.startsWith(t)}function Dl(e,t){const{source:n}=e;rl(e,n,t),e.source=n.slice(t)}function Hl(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&Dl(e,t[0].length)}function zl(e,t,n){return nl(t,e.originalSource.slice(t.offset,n),n)}function Wl(e,t,n,r=Bl(e)){n&&(r.offset+=n,r.column+=n),e.options.onError(Ja(t,{start:r,end:r,source:""}))}function ql(e,t,n){const r=e.source;switch(t){case 0:if(Ul(r,"</"))for(let e=n.length-1;e>=0;--e)if(Gl(r,n[e].tag))return!0;break;case 1:case 2:{const e=$l(n);if(e&&Gl(r,e.tag))return!0;break}case 3:if(Ul(r,"]]>"))return!0}return!r}function Gl(e,t){return Ul(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function Kl(e,t){Yl(e,t,Jl(e,e.children[0]))}function Jl(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!ul(t)}function Yl(e,t,n=!1){const{children:r}=e,o=r.length;let i=0;for(let e=0;e<r.length;e++){const o=r[e];if(1===o.type&&0===o.tagType){const e=n?0:Ql(o,t);if(e>0){if(e>=2){o.codegenNode.patchFlag="-1",o.codegenNode=t.hoist(o.codegenNode),i++;continue}}else{const e=o.codegenNode;if(13===e.type){const n=nu(e);if((!n||512===n||1===n)&&eu(o,t)>=2){const n=tu(o);n&&(e.props=t.hoist(n))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===o.type&&Ql(o.content,t)>=2&&(o.codegenNode=t.hoist(o.codegenNode),i++);if(1===o.type){const e=1===o.tagType;e&&t.scopes.vSlot++,Yl(o,t),e&&t.scopes.vSlot--}else if(11===o.type)Yl(o,t,1===o.children.length);else if(9===o.type)for(let e=0;e<o.branches.length;e++)Yl(o.branches[e],t,1===o.branches[e].children.length)}i&&t.transformHoist&&t.transformHoist(r,t,e),i&&i===o&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&M(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(Bc(e.codegenNode.children)))}function Ql(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const r=n.get(e);if(void 0!==r)return r;const o=e.codegenNode;if(13!==o.type)return 0;if(o.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(nu(o))return n.set(e,0),0;{let r=3;const i=eu(e,t);if(0===i)return n.set(e,0),0;i<r&&(r=i);for(let o=0;o<e.children.length;o++){const i=Ql(e.children[o],t);if(0===i)return n.set(e,0),0;i<r&&(r=i)}if(r>1)for(let o=0;o<e.props.length;o++){const i=e.props[o];if(7===i.type&&"bind"===i.name&&i.exp){const o=Ql(i.exp,t);if(0===o)return n.set(e,0),0;o<r&&(r=o)}}return o.isBlock&&(t.removeHelper(tc),t.removeHelper(pl(t.inSSR,o.isComponent)),o.isBlock=!1,t.helper(fl(t.inSSR,o.isComponent))),n.set(e,r),r}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return Ql(e.content,t);case 4:return e.constType;case 8:let i=3;for(let n=0;n<e.children.length;n++){const r=e.children[n];if(B(r)||V(r))continue;const o=Ql(r,t);if(0===o)return 0;o<i&&(i=o)}return i}}const Xl=new Set([bc,wc,Sc,_c]);function Zl(e,t){if(14===e.type&&!B(e.callee)&&Xl.has(e.callee)){const n=e.arguments[0];if(4===n.type)return Ql(n,t);if(14===n.type)return Zl(n,t)}return 0}function eu(e,t){let n=3;const r=tu(e);if(r&&15===r.type){const{properties:e}=r;for(let r=0;r<e.length;r++){const{key:o,value:i}=e[r],s=Ql(o,t);if(0===s)return s;let a;if(s<n&&(n=s),a=4===i.type?Ql(i,t):14===i.type?Zl(i,t):0,0===a)return a;a<n&&(n=a)}}return n}function tu(e){const t=e.codegenNode;if(13===t.type)return t.props}function nu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function ru(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:r=!1,cacheHandlers:o=!1,nodeTransforms:i=[],directiveTransforms:s={},transformHoist:a=null,isBuiltInComponent:c=k,isCustomElement:l=k,expressionPlugins:u=[],scopeId:f=null,slotted:p=!0,ssr:d=!1,inSSR:h=!1,ssrCssVars:v="",bindingMetadata:m=_,inline:y=!1,isTS:g=!1,onError:b=Ga,onWarn:w=Ka,compatConfig:S}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),E={selfName:x&&X(J(x[1])),prefixIdentifiers:n,hoistStatic:r,cacheHandlers:o,nodeTransforms:i,directiveTransforms:s,transformHoist:a,isBuiltInComponent:c,isCustomElement:l,expressionPlugins:u,scopeId:f,slotted:p,ssr:d,inSSR:h,ssrCssVars:v,bindingMetadata:m,inline:y,isTS:g,onError:b,onWarn:w,compatConfig:S,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=E.helpers.get(e)||0;return E.helpers.set(e,t+1),e},removeHelper(e){const t=E.helpers.get(e);if(t){const n=t-1;n?E.helpers.set(e,n):E.helpers.delete(e)}},helperString:e=>`_${Lc[E.helper(e)]}`,replaceNode(e){E.parent.children[E.childIndex]=E.currentNode=e},removeNode(e){const t=E.parent.children,n=e?t.indexOf(e):E.currentNode?E.childIndex:-1;e&&e!==E.currentNode?E.childIndex>n&&(E.childIndex--,E.onNodeRemoved()):(E.currentNode=null,E.onNodeRemoved()),E.parent.children.splice(n,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){B(e)&&(e=Uc(e)),E.hoists.push(e);const t=Uc(`_hoisted_${E.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,n=!1){return{type:20,index:e,value:t,isVNode:n,loc:Fc}}(E.cached++,e,t)};return E.filters=new Set,E}function ou(e,t){const n=ru(e,t);iu(e,n),t.hoistStatic&&Kl(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:r}=e;if(1===r.length){const n=r[0];if(Jl(e,n)&&n.codegenNode){const r=n.codegenNode;13===r.type&&yl(r,t),e.codegenNode=r}else e.codegenNode=n}else if(r.length>1){let r=64;0,e.codegenNode=Ic(t,n(Ya),void 0,e.children,r+"",void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=[...n.helpers.keys()],e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached,e.filters=[...n.filters]}function iu(e,t){t.currentNode=e;const{nodeTransforms:n}=t,r=[];for(let o=0;o<n.length;o++){const i=n[o](e,t);if(i&&(M(i)?r.push(...i):r.push(i)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(sc);break;case 5:t.ssr||t.helper(yc);break;case 9:for(let n=0;n<e.branches.length;n++)iu(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const r=()=>{n--};for(;n<e.children.length;n++){const o=e.children[n];B(o)||(t.parent=e,t.childIndex=n,t.onNodeRemoved=r,iu(o,t))}}(e,t)}t.currentNode=e;let o=r.length;for(;o--;)r[o]()}function su(e,t){const n=B(e)?t=>t===e:t=>e.test(t);return(e,r)=>{if(1===e.type){const{props:o}=e;if(3===e.tagType&&o.some(cl))return;const i=[];for(let s=0;s<o.length;s++){const a=o[s];if(7===a.type&&n(a.name)){o.splice(s,1),s--;const n=t(e,a,r);n&&i.push(n)}}return i}}}const au="/*#__PURE__*/";function cu(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:r=!1,filename:o="template.vue.html",scopeId:i=null,optimizeImports:s=!1,runtimeGlobalName:a="Vue",runtimeModuleName:c="vue",ssrRuntimeModuleName:l="vue/server-renderer",ssr:u=!1,isTS:f=!1,inSSR:p=!1}){const d={mode:t,prefixIdentifiers:n,sourceMap:r,filename:o,scopeId:i,optimizeImports:s,runtimeGlobalName:a,runtimeModuleName:c,ssrRuntimeModuleName:l,ssr:u,isTS:f,inSSR:p,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Lc[e]}`,push(e,t){d.code+=e},indent(){h(++d.indentLevel)},deindent(e=!1){e?--d.indentLevel:h(--d.indentLevel)},newline(){h(d.indentLevel)}};function h(e){d.push("\n"+"  ".repeat(e))}return d}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:r,push:o,prefixIdentifiers:i,indent:s,deindent:a,newline:c,scopeId:l,ssr:u}=n,f=e.helpers.length>0,p=!i&&"module"!==r;!function(e,t){const{ssr:n,prefixIdentifiers:r,push:o,newline:i,runtimeModuleName:s,runtimeGlobalName:a,ssrRuntimeModuleName:c}=t,l=a,u=e=>`${Lc[e]}: _${Lc[e]}`;if(e.helpers.length>0&&(o(`const _Vue = ${l}\n`),e.hoists.length)){o(`const { ${[oc,ic,sc,ac,cc].filter((t=>e.helpers.includes(t))).map(u).join(", ")} } = _Vue\n`)}(function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:r,helper:o,scopeId:i,mode:s}=t;r();for(let o=0;o<e.length;o++){const i=e[o];i&&(n(`const _hoisted_${o+1} = `),pu(i,t),r())}t.pure=!1})(e.hoists,t),i(),o("return ")}(e,n);if(o(`function ${u?"ssrRender":"render"}(${(u?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),s(),p&&(o("with (_ctx) {"),s(),f&&(o(`const { ${e.helpers.map((e=>`${Lc[e]}: _${Lc[e]}`)).join(", ")} } = _Vue`),o("\n"),c())),e.components.length&&(lu(e.components,"component",n),(e.directives.length||e.temps>0)&&c()),e.directives.length&&(lu(e.directives,"directive",n),e.temps>0&&c()),e.filters&&e.filters.length&&(c(),lu(e.filters,"filter",n),c()),e.temps>0){o("let ");for(let t=0;t<e.temps;t++)o(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(o("\n"),c()),u||o("return "),e.codegenNode?pu(e.codegenNode,n):o("null"),p&&(a(),o("}")),a(),o("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}function lu(e,t,{helper:n,push:r,newline:o,isTS:i}){const s=n("filter"===t?pc:"component"===t?lc:fc);for(let n=0;n<e.length;n++){let a=e[n];const c=a.endsWith("__self");c&&(a=a.slice(0,-6)),r(`const ${ml(a,t)} = ${s}(${JSON.stringify(a)}${c?", true":""})${i?"!":""}`),n<e.length-1&&o()}}function uu(e,t){const n=e.length>3||!1;t.push("["),n&&t.indent(),fu(e,t,n),n&&t.deindent(),t.push("]")}function fu(e,t,n=!1,r=!0){const{push:o,newline:i}=t;for(let s=0;s<e.length;s++){const a=e[s];B(a)?o(a):M(a)?uu(a,t):pu(a,t),s<e.length-1&&(n?(r&&o(","),i()):r&&o(", "))}}function pu(e,t){if(B(e))t.push(e);else if(V(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:pu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:du(e,t);break;case 5:!function(e,t){const{push:n,helper:r,pure:o}=t;o&&n(au);n(`${r(yc)}(`),pu(e.content,t),n(")")}(e,t);break;case 8:hu(e,t);break;case 3:!function(e,t){const{push:n,helper:r,pure:o}=t;o&&n(au);n(`${r(sc)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:r,pure:o}=t,{tag:i,props:s,children:a,patchFlag:c,dynamicProps:l,directives:u,isBlock:f,disableTracking:p,isComponent:d}=e;u&&n(r(dc)+"(");f&&n(`(${r(tc)}(${p?"true":""}), `);o&&n(au);const h=f?pl(t.inSSR,d):fl(t.inSSR,d);n(r(h)+"(",e),fu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([i,s,a,c,l]),t),n(")"),f&&n(")");u&&(n(", "),pu(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:r,pure:o}=t,i=B(e.callee)?e.callee:r(e.callee);o&&n(au);n(i+"(",e),fu(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:r,deindent:o,newline:i}=t,{properties:s}=e;if(!s.length)return void n("{}",e);const a=s.length>1||!1;n(a?"{":"{ "),a&&r();for(let e=0;e<s.length;e++){const{key:r,value:o}=s[e];vu(r,t),n(": "),pu(o,t),e<s.length-1&&(n(","),i())}a&&o(),n(a?"}":" }")}(e,t);break;case 17:!function(e,t){uu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:r,deindent:o}=t,{params:i,returns:s,body:a,newline:c,isSlot:l}=e;l&&n(`_${Lc[Tc]}(`);n("(",e),M(i)?fu(i,t):i&&pu(i,t);n(") => "),(c||a)&&(n("{"),r());s?(c&&n("return "),M(s)?uu(s,t):pu(s,t)):a&&pu(a,t);(c||a)&&(o(),n("}"));l&&(e.isNonScopedSlot&&n(", undefined, true"),n(")"))}(e,t);break;case 19:!function(e,t){const{test:n,consequent:r,alternate:o,newline:i}=e,{push:s,indent:a,deindent:c,newline:l}=t;if(4===n.type){const e=!Yc(n.content);e&&s("("),du(n,t),e&&s(")")}else s("("),pu(n,t),s(")");i&&a(),t.indentLevel++,i||s(" "),s("? "),pu(r,t),t.indentLevel--,i&&l(),i||s(" "),s(": ");const u=19===o.type;u||t.indentLevel++;pu(o,t),u||t.indentLevel--;i&&c(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:r,indent:o,deindent:i,newline:s}=t;n(`_cache[${e.index}] || (`),e.isVNode&&(o(),n(`${r(Oc)}(-1),`),s());n(`_cache[${e.index}] = `),pu(e.value,t),e.isVNode&&(n(","),s(),n(`${r(Oc)}(1),`),s(),n(`_cache[${e.index}]`),i());n(")")}(e,t);break;case 21:fu(e.body,t,!0,!1)}}function du(e,t){const{content:n,isStatic:r}=e;t.push(r?JSON.stringify(n):n,e)}function hu(e,t){for(let n=0;n<e.children.length;n++){const r=e.children[n];B(r)?t.push(r):pu(r,t)}}function vu(e,t){const{push:n}=t;if(8===e.type)n("["),hu(e,t),n("]");else if(e.isStatic){n(Yc(e.content)?e.content:JSON.stringify(e.content),e)}else n(`[${e.content}]`,e)}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments,typeof,void".split(",").join("\\b|\\b")+"\\b");const mu=su(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,r){if(!("else"===t.name||t.exp&&t.exp.content.trim())){const r=t.exp?t.exp.loc:e.loc;n.onError(Ja(28,t.loc)),t.exp=Uc("true",!1,r)}0;if("if"===t.name){const o=yu(e,t),i={type:9,loc:e.loc,branches:[o]};if(n.replaceNode(i),r)return r(i,o,!0)}else{const o=n.parent.children;let i=o.indexOf(e);for(;i-- >=-1;){const s=o[i];if(!s||2!==s.type||s.content.trim().length){if(s&&9===s.type){"else-if"===t.name&&void 0===s.branches[s.branches.length-1].condition&&n.onError(Ja(30,e.loc)),n.removeNode();const o=yu(e,t);0,s.branches.push(o);const i=r&&r(s,o,!1);iu(o,n),i&&i(),n.currentNode=null}else n.onError(Ja(30,e.loc));break}n.removeNode(s)}}}(e,t,n,((e,t,r)=>{const o=n.parent.children;let i=o.indexOf(e),s=0;for(;i-- >=0;){const e=o[i];e&&9===e.type&&(s+=e.branches.length)}return()=>{if(r)e.codegenNode=gu(t,s,n);else{const r=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);r.alternate=gu(t,s+e.branches.length-1,n)}}}))));function yu(e,t){return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:3!==e.tagType||ol(e,"for")?[e]:e.children,userKey:il(e,"key")}}function gu(e,t,n){return e.condition?Wc(e.condition,bu(e,t,n),Hc(n.helper(sc),['""',"true"])):bu(e,t,n)}function bu(e,t,n){const{helper:r}=n,o=$c("key",Uc(`${t}`,!1,Fc,2)),{children:i}=e,s=i[0];if(1!==i.length||1!==s.type){if(1===i.length&&11===s.type){const e=s.codegenNode;return vl(e,o,n),e}{let t=64;return Ic(n,r(Ya),Vc([o]),i,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=s.codegenNode,t=14===(a=e).type&&a.callee===Mc?a.arguments[1].returns:a;return 13===t.type&&yl(t,n),vl(t,o,n),e}var a}const wu=su("for",((e,t,n)=>{const{helper:r,removeHelper:o}=n;return function(e,t,n,r){if(!t.exp)return void n.onError(Ja(31,t.loc));const o=ku(t.exp,n);if(!o)return void n.onError(Ja(32,t.loc));const{addIdentifiers:i,removeIdentifiers:s,scopes:a}=n,{source:c,value:l,key:u,index:f}=o,p={type:11,loc:t.loc,source:c,valueAlias:l,keyAlias:u,objectIndexAlias:f,parseResult:o,children:ll(e)?e.children:[e]};n.replaceNode(p),a.vFor++;const d=r&&r(p);return()=>{a.vFor--,d&&d()}}(e,t,n,(t=>{const i=Hc(r(hc),[t.source]),s=ll(e),a=ol(e,"memo"),c=il(e,"key"),l=c&&(6===c.type?Uc(c.value.content,!0):c.exp),u=c?$c("key",l):null,f=4===t.source.type&&t.source.constType>0,p=f?64:c?128:256;return t.codegenNode=Ic(n,r(Ya),void 0,i,p+"",void 0,void 0,!0,!f,!1,e.loc),()=>{let c;const{children:p}=t;const d=1!==p.length||1!==p[0].type,h=ul(e)?e:s&&1===e.children.length&&ul(e.children[0])?e.children[0]:null;if(h?(c=h.codegenNode,s&&u&&vl(c,u,n)):d?c=Ic(n,r(Ya),u?Vc([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(c=p[0].codegenNode,s&&u&&vl(c,u,n),c.isBlock!==!f&&(c.isBlock?(o(tc),o(pl(n.inSSR,c.isComponent))):o(fl(n.inSSR,c.isComponent))),c.isBlock=!f,c.isBlock?(r(tc),r(pl(n.inSSR,c.isComponent))):r(fl(n.inSSR,c.isComponent))),a){const e=zc(Cu(t.parseResult,[Uc("_cached")]));e.body={type:21,body:[Dc(["const _memo = (",a.exp,")"]),Dc(["if (_cached",...l?[" && _cached.key === ",l]:[],` && ${n.helperString(Rc)}(_cached, _memo)) return _cached`]),Dc(["const _item = ",c]),Uc("_item.memo = _memo"),Uc("return _item")],loc:Fc},i.arguments.push(e,Uc("_cache"),Uc(String(n.cached++)))}else i.arguments.push(zc(Cu(t.parseResult),c,!0))}}))}));const Su=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,_u=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,xu=/^\(|\)$/g;function ku(e,t){const n=e.loc,r=e.content,o=r.match(Su);if(!o)return;const[,i,s]=o,a={source:Eu(n,s.trim(),r.indexOf(s,i.length)),value:void 0,key:void 0,index:void 0};let c=i.trim().replace(xu,"").trim();const l=i.indexOf(c),u=c.match(_u);if(u){c=c.replace(_u,"").trim();const e=u[1].trim();let t;if(e&&(t=r.indexOf(e,l+c.length),a.key=Eu(n,e,t)),u[2]){const o=u[2].trim();o&&(a.index=Eu(n,o,r.indexOf(o,a.key?t+e.length:l+c.length)))}}return c&&(a.value=Eu(n,c,l)),a}function Eu(e,t,n){return Uc(t,!1,tl(e,n,t.length))}function Cu({value:e,key:t,index:n},r=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||Uc("_".repeat(t+1),!1)))}([e,t,n,...r])}const Ou=Uc("undefined",!1),ju=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){const n=ol(e,"slot");if(n)return n.exp,t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Au=(e,t,n)=>zc(e,t,!1,!0,t.length?t[0].loc:n);function Tu(e,t,n=Au){t.helper(Tc);const{children:r,loc:o}=e,i=[],s=[];let a=t.scopes.vSlot>0||t.scopes.vFor>0;const c=ol(e,"slot",!0);if(c){const{arg:e,exp:t}=c;e&&!qc(e)&&(a=!0),i.push($c(e||Uc("default",!0),n(t,r,o)))}let l=!1,u=!1;const f=[],p=new Set;for(let e=0;e<r.length;e++){const o=r[e];let d;if(!ll(o)||!(d=ol(o,"slot",!0))){3!==o.type&&f.push(o);continue}if(c){t.onError(Ja(37,d.loc));break}l=!0;const{children:h,loc:v}=o,{arg:m=Uc("default",!0),exp:y,loc:g}=d;let b;qc(m)?b=m?m.content:"default":a=!0;const w=n(y,h,v);let S,_,x;if(S=ol(o,"if"))a=!0,s.push(Wc(S.exp,Pu(m,w),Ou));else if(_=ol(o,/^else(-if)?$/,!0)){let n,o=e;for(;o--&&(n=r[o],3===n.type););if(n&&ll(n)&&ol(n,"if")){r.splice(e,1),e--;let t=s[s.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=_.exp?Wc(_.exp,Pu(m,w),Ou):Pu(m,w)}else t.onError(Ja(30,_.loc))}else if(x=ol(o,"for")){a=!0;const e=x.parseResult||ku(x.exp);e?s.push(Hc(t.helper(hc),[e.source,zc(Cu(e),Pu(m,w),!0)])):t.onError(Ja(32,x.loc))}else{if(b){if(p.has(b)){t.onError(Ja(38,g));continue}p.add(b),"default"===b&&(u=!0)}i.push($c(m,w))}}if(!c){const e=(e,r)=>{const i=n(e,r,o);return t.compatConfig&&(i.isNonScopedSlot=!0),$c("default",i)};l?f.length&&f.some((e=>Mu(e)))&&(u?t.onError(Ja(39,f[0].loc)):i.push(e(void 0,f))):i.push(e(void 0,r))}const d=a?2:Nu(e.children)?3:1;let h=Vc(i.concat($c("_",Uc(d+"",!1))),o);return s.length&&(h=Hc(t.helper(mc),[h,Bc(s)])),{slots:h,hasDynamicSlots:a}}function Pu(e,t){return Vc([$c("name",e),$c("fn",t)])}function Nu(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||Nu(n.children))return!0;break;case 9:if(Nu(n.branches))return!0;break;case 10:case 11:if(Nu(n.children))return!0}}return!1}function Mu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Mu(e.content))}const Ru=new WeakMap,Lu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:r}=e,o=1===e.tagType;let i=o?function(e,t,n=!1){let{tag:r}=e;const o=Vu(r),i=il(e,"is");if(i)if(o||bl("COMPILER_IS_ON_ELEMENT",t)){const e=6===i.type?i.value&&Uc(i.value.content,!0):i.exp;if(e)return Hc(t.helper(uc),[e])}else 6===i.type&&i.value.content.startsWith("vue:")&&(r=i.value.content.slice(4));const s=!o&&ol(e,"is");if(s&&s.exp)return Hc(t.helper(uc),[s.exp]);const a=Kc(r)||t.isBuiltInComponent(r);if(a)return n||t.helper(a),a;return t.helper(lc),t.components.add(r),ml(r,"component")}(e,t):`"${n}"`;let s,a,c,l,u,f,p=0,d=$(i)&&i.callee===uc||i===Qa||i===Xa||!o&&("svg"===n||"foreignObject"===n);if(r.length>0){const n=Fu(e,t);s=n.props,p=n.patchFlag,u=n.dynamicPropNames;const r=n.directives;f=r&&r.length?Bc(r.map((e=>function(e,t){const n=[],r=Ru.get(e);r?n.push(t.helperString(r)):(t.helper(fc),t.directives.add(e.name),n.push(ml(e.name,"directive")));const{loc:o}=e;e.exp&&n.push(e.exp);e.arg&&(e.exp||n.push("void 0"),n.push(e.arg));if(Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=Uc("true",!1,o);n.push(Vc(e.modifiers.map((e=>$c(e,t))),o))}return Bc(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(d=!0)}if(e.children.length>0){i===Za&&(d=!0,p|=1024);if(o&&i!==Qa&&i!==Za){const{slots:n,hasDynamicSlots:r}=Tu(e,t);a=n,r&&(p|=1024)}else if(1===e.children.length&&i!==Qa){const n=e.children[0],r=n.type,o=5===r||8===r;o&&0===Ql(n,t)&&(p|=1),a=o||2===r?n:e.children}else a=e.children}0!==p&&(c=String(p),u&&u.length&&(l=function(e){let t="[";for(let n=0,r=e.length;n<r;n++)t+=JSON.stringify(e[n]),n<r-1&&(t+=", ");return t+"]"}(u))),e.codegenNode=Ic(t,i,s,a,c,l,f,!!d,!1,o,e.loc)};function Fu(e,t,n=e.props,r=!1){const{tag:o,loc:i,children:s}=e,a=1===e.tagType;let c=[];const l=[],u=[],f=s.length>0;let p=!1,d=0,h=!1,v=!1,m=!1,y=!1,g=!1,b=!1;const w=[],S=({key:e,value:n})=>{if(qc(e)){const r=e.content,o=O(r);if(a||!o||"onclick"===r.toLowerCase()||"onUpdate:modelValue"===r||q(r)||(y=!0),o&&q(r)&&(b=!0),20===n.type||(4===n.type||8===n.type)&&Ql(n,t)>0)return;"ref"===r?h=!0:"class"===r?v=!0:"style"===r?m=!0:"key"===r||w.includes(r)||w.push(r),!a||"class"!==r&&"style"!==r||w.includes(r)||w.push(r)}else g=!0};for(let s=0;s<n.length;s++){const d=n[s];if(6===d.type){const{loc:e,name:n,value:r}=d;let i=!0;if("ref"===n&&(h=!0,t.scopes.vFor>0&&c.push($c(Uc("ref_for",!0),Uc("true")))),"is"===n&&(Vu(o)||r&&r.content.startsWith("vue:")||bl("COMPILER_IS_ON_ELEMENT",t)))continue;c.push($c(Uc(n,!0,tl(e,0,n.length)),Uc(r?r.content:"",i,r?r.loc:e)))}else{const{name:n,arg:s,exp:h,loc:v}=d,m="bind"===n,y="on"===n;if("slot"===n){a||t.onError(Ja(40,v));continue}if("once"===n||"memo"===n)continue;if("is"===n||m&&sl(s,"is")&&(Vu(o)||bl("COMPILER_IS_ON_ELEMENT",t)))continue;if(y&&r)continue;if((m&&sl(s,"key")||y&&f&&sl(s,"vue:before-update"))&&(p=!0),m&&sl(s,"ref")&&t.scopes.vFor>0&&c.push($c(Uc("ref_for",!0),Uc("true"))),!s&&(m||y)){if(g=!0,h)if(c.length&&(l.push(Vc(Iu(c),i)),c=[]),m){if(bl("COMPILER_V_BIND_OBJECT_ORDER",t)){l.unshift(h);continue}l.push(h)}else l.push({type:14,loc:v,callee:t.helper(xc),arguments:[h]});else t.onError(Ja(m?34:35,v));continue}const b=t.directiveTransforms[n];if(b){const{props:n,needRuntime:o}=b(d,e,t);!r&&n.forEach(S),c.push(...n),o&&(u.push(d),V(o)&&Ru.set(d,o))}else u.push(d),f&&(p=!0)}}let _;if(l.length?(c.length&&l.push(Vc(Iu(c),i)),_=l.length>1?Hc(t.helper(gc),l,i):l[0]):c.length&&(_=Vc(Iu(c),i)),g?d|=16:(v&&!a&&(d|=2),m&&!a&&(d|=4),w.length&&(d|=8),y&&(d|=32)),p||0!==d&&32!==d||!(h||b||u.length>0)||(d|=512),!t.inSSR&&_)switch(_.type){case 15:let e=-1,n=-1,r=!1;for(let t=0;t<_.properties.length;t++){const o=_.properties[t].key;qc(o)?"class"===o.content?e=t:"style"===o.content&&(n=t):o.isHandlerKey||(r=!0)}const o=_.properties[e],i=_.properties[n];r?_=Hc(t.helper(Sc),[_]):(o&&!qc(o.value)&&(o.value=Hc(t.helper(bc),[o.value])),!i||qc(i.value)||!m&&17!==i.value.type||(i.value=Hc(t.helper(wc),[i.value])));break;case 14:break;default:_=Hc(t.helper(Sc),[Hc(t.helper(_c),[_])])}return{props:_,directives:u,patchFlag:d,dynamicPropNames:w,shouldUseBlock:p}}function Iu(e){const t=new Map,n=[];for(let r=0;r<e.length;r++){const o=e[r];if(8===o.key.type||!o.key.isStatic){n.push(o);continue}const i=o.key.content,s=t.get(i);s?("style"===i||"class"===i||O(i))&&Bu(s,o):(t.set(i,o),n.push(o))}return n}function Bu(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=Bc([e.value,t.value],e.loc)}function Vu(e){return"component"===e||"Component"===e}const $u=/-(\w)/g,Uu=(e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))})((e=>e.replace($u,((e,t)=>t?t.toUpperCase():"")))),Du=(e,t)=>{if(ul(e)){const{children:n,loc:r}=e,{slotName:o,slotProps:i}=function(e,t){let n,r='"default"';const o=[];for(let t=0;t<e.props.length;t++){const n=e.props[t];6===n.type?n.value&&("name"===n.name?r=JSON.stringify(n.value.content):(n.name=Uu(n.name),o.push(n))):"bind"===n.name&&sl(n.arg,"name")?n.exp&&(r=n.exp):("bind"===n.name&&n.arg&&qc(n.arg)&&(n.arg.content=Uu(n.arg.content)),o.push(n))}if(o.length>0){const{props:r,directives:i}=Fu(e,t,o);n=r,i.length&&t.onError(Ja(36,i[0].loc))}return{slotName:r,slotProps:n}}(e,t),s=[t.prefixIdentifiers?"_ctx.$slots":"$slots",o,"{}","undefined","true"];let a=2;i&&(s[2]=i,a=3),n.length&&(s[3]=zc([],n,!1,!1,r),a=4),t.scopeId&&!t.slotted&&(a=5),s.splice(a),e.codegenNode=Hc(t.helper(vc),s,r)}};const Hu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,zu=(e,t,n,r)=>{const{loc:o,modifiers:i,arg:s}=e;let a;if(e.exp||i.length||n.onError(Ja(35,o)),4===s.type)if(s.isStatic){let e=s.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),a=Uc(Z(J(e)),!0,s.loc)}else a=Dc([`${n.helperString(Cc)}(`,s,")"]);else a=s,a.children.unshift(`${n.helperString(Cc)}(`),a.children.push(")");let c=e.exp;c&&!c.content.trim()&&(c=void 0);let l=n.cacheHandlers&&!c&&!n.inVOnce;if(c){const e=el(c.content),t=!(e||Hu.test(c.content)),n=c.content.includes(";");0,(t||l&&e)&&(c=Dc([`${t?"$event":"(...args)"} => ${n?"{":"("}`,c,n?"}":")"]))}let u={props:[$c(a,c||Uc("() => {}",!1,o))]};return r&&(u=r(u)),l&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Wu=(e,t,n)=>{const{exp:r,modifiers:o,loc:i}=e,s=e.arg;return 4!==s.type?(s.children.unshift("("),s.children.push(') || ""')):s.isStatic||(s.content=`${s.content} || ""`),o.includes("camel")&&(4===s.type?s.isStatic?s.content=J(s.content):s.content=`${n.helperString(kc)}(${s.content})`:(s.children.unshift(`${n.helperString(kc)}(`),s.children.push(")"))),n.inSSR||(o.includes("prop")&&qu(s,"."),o.includes("attr")&&qu(s,"^")),!r||4===r.type&&!r.content.trim()?(n.onError(Ja(34,i)),{props:[$c(s,Uc("",!0,i))]}):{props:[$c(s,r)]}},qu=(e,t)=>{4===e.type?e.isStatic?e.content=t+e.content:e.content=`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},Gu=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let r,o=!1;for(let e=0;e<n.length;e++){const t=n[e];if(al(t)){o=!0;for(let o=e+1;o<n.length;o++){const i=n[o];if(!al(i)){r=void 0;break}r||(r=n[e]={type:8,loc:t.loc,children:[t]}),r.children.push(" + ",i),n.splice(o,1),o--}}}if(o&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name]))||"template"===e.tag)))for(let e=0;e<n.length;e++){const r=n[e];if(al(r)||8===r.type){const o=[];2===r.type&&" "===r.content||o.push(r),t.ssr||0!==Ql(r,t)||o.push("1"),n[e]={type:12,content:r,loc:r.loc,codegenNode:Hc(t.helper(ac),o)}}}}},Ku=new WeakSet,Ju=(e,t)=>{if(1===e.type&&ol(e,"once",!0)){if(Ku.has(e)||t.inVOnce)return;return Ku.add(e),t.inVOnce=!0,t.helper(Oc),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},Yu=(e,t,n)=>{const{exp:r,arg:o}=e;if(!r)return n.onError(Ja(41,e.loc)),Qu();const i=r.loc.source,s=4===r.type?r.content:i;n.bindingMetadata[i];if(!s.trim()||!el(s))return n.onError(Ja(42,r.loc)),Qu();const a=o||Uc("modelValue",!0),c=o?qc(o)?`onUpdate:${o.content}`:Dc(['"onUpdate:" + ',o]):"onUpdate:modelValue";let l;l=Dc([`${n.isTS?"($event: any)":"$event"} => ((`,r,") = $event)"]);const u=[$c(a,e.exp),$c(c,l)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(Yc(e)?e:JSON.stringify(e))+": true")).join(", "),n=o?qc(o)?`${o.content}Modifiers`:Dc([o,' + "Modifiers"']):"modelModifiers";u.push($c(n,Uc(`{ ${t} }`,!1,e.loc,2)))}return Qu(u)};function Qu(e=[]){return{props:e}}const Xu=/[\w).+\-_$\]]/,Zu=(e,t)=>{bl("COMPILER_FILTER",t)&&(5===e.type&&ef(e.content,t),1===e.type&&e.props.forEach((e=>{7===e.type&&"for"!==e.name&&e.exp&&ef(e.exp,t)})))};function ef(e,t){if(4===e.type)tf(e,t);else for(let n=0;n<e.children.length;n++){const r=e.children[n];"object"==typeof r&&(4===r.type?tf(r,t):8===r.type?ef(e,t):5===r.type&&ef(r.content,t))}}function tf(e,t){const n=e.content;let r,o,i,s,a=!1,c=!1,l=!1,u=!1,f=0,p=0,d=0,h=0,v=[];for(i=0;i<n.length;i++)if(o=r,r=n.charCodeAt(i),a)39===r&&92!==o&&(a=!1);else if(c)34===r&&92!==o&&(c=!1);else if(l)96===r&&92!==o&&(l=!1);else if(u)47===r&&92!==o&&(u=!1);else if(124!==r||124===n.charCodeAt(i+1)||124===n.charCodeAt(i-1)||f||p||d){switch(r){case 34:c=!0;break;case 39:a=!0;break;case 96:l=!0;break;case 40:d++;break;case 41:d--;break;case 91:p++;break;case 93:p--;break;case 123:f++;break;case 125:f--}if(47===r){let e,t=i-1;for(;t>=0&&(e=n.charAt(t)," "===e);t--);e&&Xu.test(e)||(u=!0)}}else void 0===s?(h=i+1,s=n.slice(0,i).trim()):m();function m(){v.push(n.slice(h,i).trim()),h=i+1}if(void 0===s?s=n.slice(0,i).trim():0!==h&&m(),v.length){for(i=0;i<v.length;i++)s=nf(s,v[i],t);e.content=s}}function nf(e,t,n){n.helper(pc);const r=t.indexOf("(");if(r<0)return n.filters.add(t),`${ml(t,"filter")}(${e})`;{const o=t.slice(0,r),i=t.slice(r+1);return n.filters.add(o),`${ml(o,"filter")}(${e}${")"!==i?","+i:i}`}}const rf=new WeakSet,of=(e,t)=>{if(1===e.type){const n=ol(e,"memo");if(!n||rf.has(e))return;return rf.add(e),()=>{const r=e.codegenNode||t.currentNode.codegenNode;r&&13===r.type&&(1!==e.tagType&&yl(r,t),e.codegenNode=Hc(t.helper(Mc),[n.exp,zc(void 0,r),"_cache",String(t.cached++)]))}}};function sf(e,t={}){const n=t.onError||Ga,r="module"===t.mode;!0===t.prefixIdentifiers?n(Ja(46)):r&&n(Ja(47));t.cacheHandlers&&n(Ja(48)),t.scopeId&&!r&&n(Ja(49));const o=B(e)?kl(e,t):e,[i,s]=[[Ju,mu,of,wu,Zu,Du,Lu,ju,Gu],{on:zu,bind:Wu,model:Yu}];return ou(o,A({},t,{prefixIdentifiers:false,nodeTransforms:[...i,...t.nodeTransforms||[]],directiveTransforms:A({},s,t.directiveTransforms||{})})),cu(o,A({},t,{prefixIdentifiers:false}))}const af=Symbol(""),cf=Symbol(""),lf=Symbol(""),uf=Symbol(""),ff=Symbol(""),pf=Symbol(""),df=Symbol(""),hf=Symbol(""),vf=Symbol(""),mf=Symbol("");var yf;let gf;yf={[af]:"vModelRadio",[cf]:"vModelCheckbox",[lf]:"vModelText",[uf]:"vModelSelect",[ff]:"vModelDynamic",[pf]:"withModifiers",[df]:"withKeys",[hf]:"vShow",[vf]:"Transition",[mf]:"TransitionGroup"},Object.getOwnPropertySymbols(yf).forEach((e=>{Lc[e]=yf[e]}));const bf=o("style,iframe,script,noscript",!0),wf={isVoidTag:y,isNativeTag:e=>v(e)||m(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return gf||(gf=document.createElement("div")),t?(gf.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,gf.children[0].getAttribute("foo")):(gf.innerHTML=e,gf.textContent)},isBuiltInComponent:e=>Gc(e,"Transition")?vf:Gc(e,"TransitionGroup")?mf:void 0,getNamespace(e,t){let n=t?t.ns:0;if(t&&2===n)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(n=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(n=0);else t&&1===n&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(n=0));if(0===n){if("svg"===e)return 1;if("math"===e)return 2}return n},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(bf(e))return 2}return 0}},Sf=(e,t)=>{const n=p(e);return Uc(JSON.stringify(n),!1,t,3)};function _f(e,t){return Ja(e,t)}const xf=o("passive,once,capture"),kf=o("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Ef=o("left,right"),Cf=o("onkeyup,onkeydown,onkeypress",!0),Of=(e,t)=>qc(e)&&"onclick"===e.content.toLowerCase()?Uc(t,!0):4!==e.type?Dc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e;const jf=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||(t.onError(_f(60,e.loc)),t.removeNode())},Af=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:Uc("style",!0,t.loc),exp:Sf(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Tf={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:r,loc:o}=e;return r||n.onError(_f(50,o)),t.children.length&&(n.onError(_f(51,o)),t.children.length=0),{props:[$c(Uc("innerHTML",!0,o),r||Uc("",!0))]}},text:(e,t,n)=>{const{exp:r,loc:o}=e;return r||n.onError(_f(52,o)),t.children.length&&(n.onError(_f(53,o)),t.children.length=0),{props:[$c(Uc("textContent",!0),r?Hc(n.helperString(yc),[r],o):Uc("",!0))]}},model:(e,t,n)=>{const r=Yu(e,t,n);if(!r.props.length||1===t.tagType)return r;e.arg&&n.onError(_f(55,e.arg.loc));const{tag:o}=t,i=n.isCustomElement(o);if("input"===o||"textarea"===o||"select"===o||i){let s=lf,a=!1;if("input"===o||i){const r=il(t,"type");if(r){if(7===r.type)s=ff;else if(r.value)switch(r.value.content){case"radio":s=af;break;case"checkbox":s=cf;break;case"file":a=!0,n.onError(_f(56,e.loc))}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(s=ff)}else"select"===o&&(s=uf);a||(r.needRuntime=n.helper(s))}else n.onError(_f(54,e.loc));return r.props=r.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),r},on:(e,t,n)=>zu(e,0,n,(t=>{const{modifiers:r}=e;if(!r.length)return t;let{key:o,value:i}=t.props[0];const{keyModifiers:s,nonKeyModifiers:a,eventOptionModifiers:c}=((e,t,n,r)=>{const o=[],i=[],s=[];for(let r=0;r<t.length;r++){const a=t[r];"native"===a&&wl("COMPILER_V_ON_NATIVE",n)||xf(a)?s.push(a):Ef(a)?qc(e)?Cf(e.content)?o.push(a):i.push(a):(o.push(a),i.push(a)):kf(a)?i.push(a):o.push(a)}return{keyModifiers:o,nonKeyModifiers:i,eventOptionModifiers:s}})(o,r,n,e.loc);if(a.includes("right")&&(o=Of(o,"onContextmenu")),a.includes("middle")&&(o=Of(o,"onMouseup")),a.length&&(i=Hc(n.helper(pf),[i,JSON.stringify(a)])),!s.length||qc(o)&&!Cf(o.content)||(i=Hc(n.helper(df),[i,JSON.stringify(s)])),c.length){const e=c.map(X).join("");o=qc(o)?Uc(`${o.content}${e}`,!0):Dc(["(",o,`) + "${e}"`])}return{props:[$c(o,i)]}})),show:(e,t,n)=>{const{exp:r,loc:o}=e;return r||n.onError(_f(58,o)),{props:[],needRuntime:n.helper(hf)}}};const Pf=Object.create(null);function Nf(e,t){if(!B(e)){if(!e.nodeType)return k;e=e.innerHTML}const n=e,o=Pf[n];if(o)return o;if("#"===e[0]){const t=document.querySelector(e);0,e=t?t.innerHTML:""}const{code:i}=function(e,t={}){return sf(e,A({},wf,t,{nodeTransforms:[jf,...Af,...t.nodeTransforms||[]],directiveTransforms:A({},Tf,t.directiveTransforms||{}),transformHoist:null}))}(e,A({hoistStatic:!0,onError:void 0,onWarn:k},t));const s=new Function("Vue",i)(r);return s._rc=!0,Pf[n]=s}zi(Nf)},7751:(e,t,n)=>{"use strict";n.d(t,{fh6:()=>o,KNL:()=>i,Que:()=>s,nQG:()=>a,PYG:()=>c,eWv:()=>l,v4q:()=>u,XCv:()=>f,zTD:()=>p,wZP:()=>d,ciH:()=>h,SI8:()=>v,vdY:()=>m,XHJ:()=>y,uSF:()=>g,vxs:()=>b,oyc:()=>w,b0D:()=>S});var r=n(821);function o(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{d:"M12 14l9-5-9-5-9 5 9 5z"}),(0,r.createVNode)("path",{d:"M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"}),(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"})])}function i(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"})])}function s(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"})])}function a(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 13l4 4L19 7"})])}function c(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M19 13l-7 7-7-7m14-8l-7 7-7-7"})])}function l(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M5 11l7-7 7 7M5 19l7-7 7 7"})])}function u(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M19 9l-7 7-7-7"})])}function f(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M9 5l7 7-7 7"})])}function p(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"})])}function d(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"})])}function h(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"})])}function v(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"})])}function m(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"})])}function y(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"})])}function g(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"})])}function b(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"})])}function w(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"})])}function S(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M6 18L18 6M6 6l12 12"})])}},3724:(e,t,n)=>{"use strict";n.d(t,{v4q:()=>o,R0g:()=>i,Oqj:()=>s,W1M:()=>a,TV4:()=>c,mcG:()=>l,tBG:()=>u,b0D:()=>f});var r=n(821);function o(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"fill-rule":"evenodd",d:"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z","clip-rule":"evenodd"})])}function i(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"fill-rule":"evenodd",d:"M3 3a1 1 0 00-1 1v12a1 1 0 102 0V4a1 1 0 00-1-1zm10.293 9.293a1 1 0 001.414 1.414l3-3a1 1 0 000-1.414l-3-3a1 1 0 10-1.414 1.414L14.586 9H7a1 1 0 100 2h7.586l-1.293 1.293z","clip-rule":"evenodd"})])}function s(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"fill-rule":"evenodd",d:"M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z","clip-rule":"evenodd"})])}function a(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"fill-rule":"evenodd",d:"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z","clip-rule":"evenodd"})])}function c(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{d:"M3 3a1 1 0 000 2h11a1 1 0 100-2H3zM3 7a1 1 0 000 2h5a1 1 0 000-2H3zM3 11a1 1 0 100 2h4a1 1 0 100-2H3zM13 16a1 1 0 102 0v-5.586l1.293 1.293a1 1 0 001.414-1.414l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 101.414 1.414L13 10.414V16z"})])}function l(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{d:"M3 3a1 1 0 000 2h11a1 1 0 100-2H3zM3 7a1 1 0 000 2h7a1 1 0 100-2H3zM3 11a1 1 0 100 2h4a1 1 0 100-2H3zM15 8a1 1 0 10-2 0v5.586l-1.293-1.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L15 13.586V8z"})])}function u(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"fill-rule":"evenodd",d:"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z","clip-rule":"evenodd"})])}function f(e,t){return(0,r.openBlock)(),(0,r.createBlock)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true"},[(0,r.createVNode)("path",{"fill-rule":"evenodd",d:"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z","clip-rule":"evenodd"})])}},8593:e=>{"use strict";e.exports=JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SixTQUFTLEVBQU9nOUQsRUFBTWdsQyxHQUNuQyxPQUFRLGtCQUFjLGlCQUFhLE1BQU8sQ0FDeENDLE1BQU8sNkJBQ1BFLFFBQVMsWUFDVEQsS0FBTSxlQUNOLGNBQWUsUUFDZCxFQUNELGlCQUFhLE9BQVEsQ0FDbkIsWUFBYSxVQUNibGlHLEVBQUcscU1BQ0gsWUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvdnVlL2Rpc3QvX3ZpcnR1YWwvX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvdnVlL2Rpc3QvY29tcG9uZW50cy9kZXNjcmlwdGlvbi9kZXNjcmlwdGlvbi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3Z1ZS9kaXN0L2hvb2tzL3VzZS13aW5kb3ctZXZlbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC9pbnRlcm5hbC9kb20tY29udGFpbmVycy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3Z1ZS9kaXN0L3V0aWxzL2ZvY3VzLW1hbmFnZW1lbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC9ob29rcy91c2UtaW5lcnQtb3RoZXJzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvdnVlL2Rpc3QvaW50ZXJuYWwvc3RhY2stY29udGV4dC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3Z1ZS9kaXN0L2ludGVybmFsL3BvcnRhbC1mb3JjZS1yb290LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvdnVlL2Rpc3QvY29tcG9uZW50cy9wb3J0YWwvcG9ydGFsLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvdnVlL2Rpc3QvY29tcG9uZW50cy9kaWFsb2cvZGlhbG9nLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvdnVlL2Rpc3QvaG9va3MvdXNlLWZvY3VzLXRyYXAuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC9ob29rcy91c2UtcmVzb2x2ZS1idXR0b24tdHlwZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3Z1ZS9kaXN0L2NvbXBvbmVudHMvbGFiZWwvbGFiZWwuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC9jb21wb25lbnRzL3N3aXRjaC9zd2l0Y2guZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC9jb21wb25lbnRzL3RyYW5zaXRpb25zL3V0aWxzL3RyYW5zaXRpb24uZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC91dGlscy9kaXNwb3NhYmxlcy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3Z1ZS9kaXN0L3V0aWxzL29uY2UuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC9jb21wb25lbnRzL3RyYW5zaXRpb25zL3RyYW5zaXRpb24uZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC9ob29rcy91c2UtaWQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC9pbnRlcm5hbC9vcGVuLWNsb3NlZC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZWFkbGVzc3VpL3Z1ZS9kaXN0L2tleWJvYXJkLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvdnVlL2Rpc3QvdXRpbHMvZG9tLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlYWRsZXNzdWkvdnVlL2Rpc3QvdXRpbHMvbWF0Y2guZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVhZGxlc3N1aS92dWUvZGlzdC91dGlscy9yZW5kZXIuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaW5lcnRpYWpzL2luZXJ0aWEtdnVlMy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaW5lcnRpYWpzL2luZXJ0aWEvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGluZXJ0aWFqcy9wcm9ncmVzcy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2NhbGxCb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2Nqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2V0LWludHJpbnNpYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL3NoYW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guY2xvbmVkZWVwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbnByb2dyZXNzL25wcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWluc3BlY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL2Zvcm1hdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXMvbGliL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9xcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1lbWl0dGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWVtaXR0ZXIvaW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B2dWUvc2hhcmVkL2Rpc3Qvc2hhcmVkLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3JlYWN0aXZpdHkvZGlzdC9yZWFjdGl2aXR5LmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL3J1bnRpbWUtY29yZS9kaXN0L3J1bnRpbWUtY29yZS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHZ1ZS9ydW50aW1lLWRvbS9kaXN0L3J1bnRpbWUtZG9tLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL2NvbXBpbGVyLWNvcmUvZGlzdC9jb21waWxlci1jb3JlLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdnVlL2NvbXBpbGVyLWRvbS9kaXN0L2NvbXBpbGVyLWRvbS5lc20tYnVuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLmVzbS1idW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVyb2ljb25zL3Z1ZS9vdXRsaW5lL2VzbS9BY2FkZW1pY0NhcEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL291dGxpbmUvZXNtL0Jvb2tPcGVuSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlcm9pY29ucy92dWUvb3V0bGluZS9lc20vQ2FsZW5kYXJJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVyb2ljb25zL3Z1ZS9vdXRsaW5lL2VzbS9DaGVja0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL291dGxpbmUvZXNtL0NoZXZyb25Eb3VibGVEb3duSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlcm9pY29ucy92dWUvb3V0bGluZS9lc20vQ2hldnJvbkRvdWJsZVVwSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlcm9pY29ucy92dWUvb3V0bGluZS9lc20vQ2hldnJvbkRvd25JY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVyb2ljb25zL3Z1ZS9vdXRsaW5lL2VzbS9DaGV2cm9uUmlnaHRJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVyb2ljb25zL3Z1ZS9vdXRsaW5lL2VzbS9DbGlwYm9hcmRMaXN0SWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlcm9pY29ucy92dWUvb3V0bGluZS9lc20vQ29sbGVjdGlvbkljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL291dGxpbmUvZXNtL0NyZWRpdENhcmRJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVyb2ljb25zL3Z1ZS9vdXRsaW5lL2VzbS9FeGNsYW1hdGlvbkljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL291dGxpbmUvZXNtL1BlbmNpbEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL291dGxpbmUvZXNtL1RyYXNoSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlcm9pY29ucy92dWUvb3V0bGluZS9lc20vVXNlckFkZEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL291dGxpbmUvZXNtL1VzZXJHcm91cEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL291dGxpbmUvZXNtL1VzZXJzSWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlcm9pY29ucy92dWUvb3V0bGluZS9lc20vWEljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL3NvbGlkL2VzbS9DaGV2cm9uRG93bkljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL3NvbGlkL2VzbS9Mb2dvdXRJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVyb2ljb25zL3Z1ZS9zb2xpZC9lc20vTWVudUljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL3NvbGlkL2VzbS9TZWFyY2hJY29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AaGVyb2ljb25zL3Z1ZS9zb2xpZC9lc20vU29ydEFzY2VuZGluZ0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL3NvbGlkL2VzbS9Tb3J0RGVzY2VuZGluZ0ljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BoZXJvaWNvbnMvdnVlL3NvbGlkL2VzbS9Vc2VySWNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGhlcm9pY29ucy92dWUvc29saWQvZXNtL1hJY29uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobywgYWxsb3dBcnJheUxpa2UpIHtcbiAgdmFyIGl0O1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaWYgKGl0KSBvID0gaXQ7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZG9uZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IG9baSsrXVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cblxuICBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xuICByZXR1cm4gaXQubmV4dC5iaW5kKGl0KTtcbn1cblxuZXhwb3J0IHsgX2FycmF5TGlrZVRvQXJyYXkgYXMgYXJyYXlMaWtlVG9BcnJheSwgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSBhcyBjcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UsIF9leHRlbmRzIGFzIGV4dGVuZHMsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGFzIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UsIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBhcyB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy5qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuZHMgYXMgX2V4dGVuZHMgfSBmcm9tICcuLi8uLi9fdmlydHVhbC9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLmpzJztcbmltcG9ydCB7IGNvbXB1dGVkLCByZWYsIHByb3ZpZGUsIGRlZmluZUNvbXBvbmVudCwgdW5yZWYsIG9uTW91bnRlZCwgb25Vbm1vdW50ZWQsIGluamVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICcuLi8uLi91dGlscy9yZW5kZXIuZXNtLmpzJztcbmltcG9ydCB7IHVzZUlkIH0gZnJvbSAnLi4vLi4vaG9va3MvdXNlLWlkLmVzbS5qcyc7XG5cbnZhciBEZXNjcmlwdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovU3ltYm9sKCdEZXNjcmlwdGlvbkNvbnRleHQnKTtcblxuZnVuY3Rpb24gdXNlRGVzY3JpcHRpb25Db250ZXh0KCkge1xuICB2YXIgY29udGV4dCA9IGluamVjdChEZXNjcmlwdGlvbkNvbnRleHQsIG51bGwpO1xuXG4gIGlmIChjb250ZXh0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHBhcmVudCcpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIHVzZURlc2NyaXB0aW9ucyhfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRzbG90ID0gX3JlZi5zbG90LFxuICAgICAgc2xvdCA9IF9yZWYkc2xvdCA9PT0gdm9pZCAwID8gcmVmKHt9KSA6IF9yZWYkc2xvdCxcbiAgICAgIF9yZWYkbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG5hbWUgPSBfcmVmJG5hbWUgPT09IHZvaWQgMCA/ICdEZXNjcmlwdGlvbicgOiBfcmVmJG5hbWUsXG4gICAgICBfcmVmJHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIHByb3BzID0gX3JlZiRwcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJHByb3BzO1xuXG4gIHZhciBkZXNjcmlwdGlvbklkcyA9IHJlZihbXSk7XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXIodmFsdWUpIHtcbiAgICBkZXNjcmlwdGlvbklkcy52YWx1ZS5wdXNoKHZhbHVlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlkeCA9IGRlc2NyaXB0aW9uSWRzLnZhbHVlLmluZGV4T2YodmFsdWUpO1xuICAgICAgaWYgKGlkeCA9PT0gLTEpIHJldHVybjtcbiAgICAgIGRlc2NyaXB0aW9uSWRzLnZhbHVlLnNwbGljZShpZHgsIDEpO1xuICAgIH07XG4gIH1cblxuICBwcm92aWRlKERlc2NyaXB0aW9uQ29udGV4dCwge1xuICAgIHJlZ2lzdGVyOiByZWdpc3RlcixcbiAgICBzbG90OiBzbG90LFxuICAgIG5hbWU6IG5hbWUsXG4gICAgcHJvcHM6IHByb3BzXG4gIH0pOyAvLyBUaGUgYWN0dWFsIGlkJ3MgYXMgc3RyaW5nIG9yIHVuZGVmaW5lZC5cblxuICByZXR1cm4gY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkZXNjcmlwdGlvbklkcy52YWx1ZS5sZW5ndGggPiAwID8gZGVzY3JpcHRpb25JZHMudmFsdWUuam9pbignICcpIDogdW5kZWZpbmVkO1xuICB9KTtcbn0gLy8gLS0tXG5cbnZhciBEZXNjcmlwdGlvbiA9IC8qI19fUFVSRV9fKi9kZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnRGVzY3JpcHRpb24nLFxuICBwcm9wczoge1xuICAgIGFzOiB7XG4gICAgICB0eXBlOiBbT2JqZWN0LCBTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICdwJ1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIkMSgpIHtcbiAgICB2YXIgX3RoaXMkY29udGV4dCA9IHRoaXMuY29udGV4dCxcbiAgICAgICAgX3RoaXMkY29udGV4dCRuYW1lID0gX3RoaXMkY29udGV4dC5uYW1lLFxuICAgICAgICBuYW1lID0gX3RoaXMkY29udGV4dCRuYW1lID09PSB2b2lkIDAgPyAnRGVzY3JpcHRpb24nIDogX3RoaXMkY29udGV4dCRuYW1lLFxuICAgICAgICBfdGhpcyRjb250ZXh0JHNsb3QgPSBfdGhpcyRjb250ZXh0LnNsb3QsXG4gICAgICAgIHNsb3QgPSBfdGhpcyRjb250ZXh0JHNsb3QgPT09IHZvaWQgMCA/IHJlZih7fSkgOiBfdGhpcyRjb250ZXh0JHNsb3QsXG4gICAgICAgIF90aGlzJGNvbnRleHQkcHJvcHMgPSBfdGhpcyRjb250ZXh0LnByb3BzLFxuICAgICAgICBwcm9wcyA9IF90aGlzJGNvbnRleHQkcHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkY29udGV4dCRwcm9wcztcbiAgICB2YXIgcGFzc1Rocm91Z2hQcm9wcyA9IHRoaXMuJHByb3BzO1xuXG4gICAgdmFyIHByb3BzV2VDb250cm9sID0gX2V4dGVuZHMoe30sIE9iamVjdC5lbnRyaWVzKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgX3JlZjIpIHtcbiAgICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgICAgdmFyIGtleSA9IF9yZWYyWzBdLFxuICAgICAgICAgIHZhbHVlID0gX3JlZjJbMV07XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltrZXldID0gdW5yZWYodmFsdWUpLCBfT2JqZWN0JGFzc2lnbikpO1xuICAgIH0sIHt9KSwge1xuICAgICAgaWQ6IHRoaXMuaWRcbiAgICB9KTtcblxuICAgIHJldHVybiByZW5kZXIoe1xuICAgICAgcHJvcHM6IF9leHRlbmRzKHt9LCBwYXNzVGhyb3VnaFByb3BzLCBwcm9wc1dlQ29udHJvbCksXG4gICAgICBzbG90OiBzbG90LnZhbHVlLFxuICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzLFxuICAgICAgc2xvdHM6IHRoaXMuJHNsb3RzLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0pO1xuICB9LFxuICBzZXR1cDogZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgdmFyIGNvbnRleHQgPSB1c2VEZXNjcmlwdGlvbkNvbnRleHQoKTtcbiAgICB2YXIgaWQgPSBcImhlYWRsZXNzdWktZGVzY3JpcHRpb24tXCIgKyB1c2VJZCgpO1xuICAgIG9uTW91bnRlZChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gb25Vbm1vdW50ZWQoY29udGV4dC5yZWdpc3RlcihpZCkpO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogaWQsXG4gICAgICBjb250ZXh0OiBjb250ZXh0XG4gICAgfTtcbiAgfVxufSk7XG5cbmV4cG9ydCB7IERlc2NyaXB0aW9uLCB1c2VEZXNjcmlwdGlvbnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlc2NyaXB0aW9uLmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcblxuZnVuY3Rpb24gdXNlV2luZG93RXZlbnQodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gIHdhdGNoRWZmZWN0KGZ1bmN0aW9uIChvbkludmFsaWRhdGUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgb25JbnZhbGlkYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IHVzZVdpbmRvd0V2ZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2Utd2luZG93LWV2ZW50LmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IGNyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSBhcyBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIH0gZnJvbSAnLi4vX3ZpcnR1YWwvX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy5qcyc7XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKGNvbnRhaW5lcnMsIGVsZW1lbnQpIHtcbiAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShjb250YWluZXJzKSwgX3N0ZXA7ICEoX3N0ZXAgPSBfaXRlcmF0b3IoKSkuZG9uZTspIHtcbiAgICB2YXIgY29udGFpbmVyID0gX3N0ZXAudmFsdWU7XG4gICAgaWYgKGNvbnRhaW5lci5jb250YWlucyhlbGVtZW50KSkgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCB7IGNvbnRhaW5zIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb20tY29udGFpbmVycy5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBtYXRjaCB9IGZyb20gJy4vbWF0Y2guZXNtLmpzJztcblxuLy8gIC0gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzMwNzUzODcwXG5cbnZhciBmb2N1c2FibGVTZWxlY3RvciA9IC8qI19fUFVSRV9fKi9bJ1tjb250ZW50RWRpdGFibGU9dHJ1ZV0nLCAnW3RhYmluZGV4XScsICdhW2hyZWZdJywgJ2FyZWFbaHJlZl0nLCAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKScsICdpZnJhbWUnLCAnaW5wdXQ6bm90KFtkaXNhYmxlZF0pJywgJ3NlbGVjdDpub3QoW2Rpc2FibGVkXSknLCAndGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pJ10ubWFwKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCcgPyAvLyBUT0RPOiBSZW1vdmUgdGhpcyBvbmNlIEpTRE9NIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBhbiBlbGVtZW50IHRoYXQgaXNcbi8vIFwiaGlkZGVuXCIgY2FuIGJlIHRoZSBkb2N1bWVudC5hY3RpdmVFbGVtZW50LCBiZWNhdXNlIHRoaXMgaXMgbm90IHBvc3NpYmxlXG4vLyBpbiByZWFsIGJyb3dzZXJzLlxuLy8gVE9ETzogUmVtb3ZlIHRoaXMgb25jZSBKU0RPTSBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgYW4gZWxlbWVudCB0aGF0IGlzXG5mdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yICsgXCI6bm90KFt0YWJpbmRleD0nLTEnXSk6bm90KFtzdHlsZSo9J2Rpc3BsYXk6IG5vbmUnXSlcIjtcbn0gOiBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yICsgXCI6bm90KFt0YWJpbmRleD0nLTEnXSlcIjtcbn0pLmpvaW4oJywnKTtcbnZhciBGb2N1cztcblxuKGZ1bmN0aW9uIChGb2N1cykge1xuICAvKiogRm9jdXMgdGhlIGZpcnN0IG5vbi1kaXNhYmxlZCBlbGVtZW50ICovXG4gIEZvY3VzW0ZvY3VzW1wiRmlyc3RcIl0gPSAxXSA9IFwiRmlyc3RcIjtcbiAgLyoqIEZvY3VzIHRoZSBwcmV2aW91cyBub24tZGlzYWJsZWQgZWxlbWVudCAqL1xuXG4gIEZvY3VzW0ZvY3VzW1wiUHJldmlvdXNcIl0gPSAyXSA9IFwiUHJldmlvdXNcIjtcbiAgLyoqIEZvY3VzIHRoZSBuZXh0IG5vbi1kaXNhYmxlZCBlbGVtZW50ICovXG5cbiAgRm9jdXNbRm9jdXNbXCJOZXh0XCJdID0gNF0gPSBcIk5leHRcIjtcbiAgLyoqIEZvY3VzIHRoZSBsYXN0IG5vbi1kaXNhYmxlZCBlbGVtZW50ICovXG5cbiAgRm9jdXNbRm9jdXNbXCJMYXN0XCJdID0gOF0gPSBcIkxhc3RcIjtcbiAgLyoqIFdyYXAgdGFiIGFyb3VuZCAqL1xuXG4gIEZvY3VzW0ZvY3VzW1wiV3JhcEFyb3VuZFwiXSA9IDE2XSA9IFwiV3JhcEFyb3VuZFwiO1xuICAvKiogUHJldmVudCBzY3JvbGxpbmcgdGhlIGZvY3VzYWJsZSBlbGVtZW50cyBpbnRvIHZpZXcgKi9cblxuICBGb2N1c1tGb2N1c1tcIk5vU2Nyb2xsXCJdID0gMzJdID0gXCJOb1Njcm9sbFwiO1xufSkoRm9jdXMgfHwgKEZvY3VzID0ge30pKTtcblxudmFyIEZvY3VzUmVzdWx0O1xuXG4oZnVuY3Rpb24gKEZvY3VzUmVzdWx0KSB7XG4gIEZvY3VzUmVzdWx0W0ZvY3VzUmVzdWx0W1wiRXJyb3JcIl0gPSAwXSA9IFwiRXJyb3JcIjtcbiAgRm9jdXNSZXN1bHRbRm9jdXNSZXN1bHRbXCJPdmVyZmxvd1wiXSA9IDFdID0gXCJPdmVyZmxvd1wiO1xuICBGb2N1c1Jlc3VsdFtGb2N1c1Jlc3VsdFtcIlN1Y2Nlc3NcIl0gPSAyXSA9IFwiU3VjY2Vzc1wiO1xuICBGb2N1c1Jlc3VsdFtGb2N1c1Jlc3VsdFtcIlVuZGVyZmxvd1wiXSA9IDNdID0gXCJVbmRlcmZsb3dcIjtcbn0pKEZvY3VzUmVzdWx0IHx8IChGb2N1c1Jlc3VsdCA9IHt9KSk7XG5cbnZhciBEaXJlY3Rpb247XG5cbihmdW5jdGlvbiAoRGlyZWN0aW9uKSB7XG4gIERpcmVjdGlvbltEaXJlY3Rpb25bXCJQcmV2aW91c1wiXSA9IC0xXSA9IFwiUHJldmlvdXNcIjtcbiAgRGlyZWN0aW9uW0RpcmVjdGlvbltcIk5leHRcIl0gPSAxXSA9IFwiTmV4dFwiO1xufSkoRGlyZWN0aW9uIHx8IChEaXJlY3Rpb24gPSB7fSkpO1xuXG5mdW5jdGlvbiBnZXRGb2N1c2FibGVFbGVtZW50cyhjb250YWluZXIpIHtcbiAgaWYgKGNvbnRhaW5lciA9PT0gdm9pZCAwKSB7XG4gICAgY29udGFpbmVyID0gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIGlmIChjb250YWluZXIgPT0gbnVsbCkgcmV0dXJuIFtdO1xuICByZXR1cm4gQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChmb2N1c2FibGVTZWxlY3RvcikpO1xufVxudmFyIEZvY3VzYWJsZU1vZGU7XG5cbihmdW5jdGlvbiAoRm9jdXNhYmxlTW9kZSkge1xuICAvKiogVGhlIGVsZW1lbnQgaXRzZWxmIG11c3QgYmUgZm9jdXNhYmxlLiAqL1xuICBGb2N1c2FibGVNb2RlW0ZvY3VzYWJsZU1vZGVbXCJTdHJpY3RcIl0gPSAwXSA9IFwiU3RyaWN0XCI7XG4gIC8qKiBUaGUgZWxlbWVudCBzaG91bGQgYmUgaW5zaWRlIG9mIGEgZm9jdXNhYmxlIGVsZW1lbnQuICovXG5cbiAgRm9jdXNhYmxlTW9kZVtGb2N1c2FibGVNb2RlW1wiTG9vc2VcIl0gPSAxXSA9IFwiTG9vc2VcIjtcbn0pKEZvY3VzYWJsZU1vZGUgfHwgKEZvY3VzYWJsZU1vZGUgPSB7fSkpO1xuXG5mdW5jdGlvbiBpc0ZvY3VzYWJsZUVsZW1lbnQoZWxlbWVudCwgbW9kZSkge1xuICB2YXIgX21hdGNoO1xuXG4gIGlmIChtb2RlID09PSB2b2lkIDApIHtcbiAgICBtb2RlID0gRm9jdXNhYmxlTW9kZS5TdHJpY3Q7XG4gIH1cblxuICBpZiAoZWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gbWF0Y2gobW9kZSwgKF9tYXRjaCA9IHt9LCBfbWF0Y2hbRm9jdXNhYmxlTW9kZS5TdHJpY3RdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbGVtZW50Lm1hdGNoZXMoZm9jdXNhYmxlU2VsZWN0b3IpO1xuICB9LCBfbWF0Y2hbRm9jdXNhYmxlTW9kZS5Mb29zZV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5leHQgPSBlbGVtZW50O1xuXG4gICAgd2hpbGUgKG5leHQgIT09IG51bGwpIHtcbiAgICAgIGlmIChuZXh0Lm1hdGNoZXMoZm9jdXNhYmxlU2VsZWN0b3IpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIG5leHQgPSBuZXh0LnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LCBfbWF0Y2gpKTtcbn1cbmZ1bmN0aW9uIGZvY3VzRWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQgPT0gbnVsbCA/IHZvaWQgMCA6IGVsZW1lbnQuZm9jdXMoe1xuICAgIHByZXZlbnRTY3JvbGw6IHRydWVcbiAgfSk7XG59XG5mdW5jdGlvbiBmb2N1c0luKGNvbnRhaW5lciwgZm9jdXMpIHtcbiAgdmFyIGVsZW1lbnRzID0gQXJyYXkuaXNBcnJheShjb250YWluZXIpID8gY29udGFpbmVyLnNsaWNlKCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBwb3NpdGlvbiA9IGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik7XG4gICAgaWYgKHBvc2l0aW9uICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcpIHJldHVybiAtMTtcbiAgICBpZiAocG9zaXRpb24gJiBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX1BSRUNFRElORykgcmV0dXJuIDE7XG4gICAgcmV0dXJuIDA7XG4gIH0pIDogZ2V0Rm9jdXNhYmxlRWxlbWVudHMoY29udGFpbmVyKTtcbiAgdmFyIGFjdGl2ZSA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cbiAgdmFyIGRpcmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZm9jdXMgJiAoRm9jdXMuRmlyc3QgfCBGb2N1cy5OZXh0KSkgcmV0dXJuIERpcmVjdGlvbi5OZXh0O1xuICAgIGlmIChmb2N1cyAmIChGb2N1cy5QcmV2aW91cyB8IEZvY3VzLkxhc3QpKSByZXR1cm4gRGlyZWN0aW9uLlByZXZpb3VzO1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBGb2N1cy5GaXJzdCwgRm9jdXMuUHJldmlvdXMsIEZvY3VzLk5leHQgb3IgRm9jdXMuTGFzdCcpO1xuICB9KCk7XG5cbiAgdmFyIHN0YXJ0SW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGZvY3VzICYgRm9jdXMuRmlyc3QpIHJldHVybiAwO1xuICAgIGlmIChmb2N1cyAmIEZvY3VzLlByZXZpb3VzKSByZXR1cm4gTWF0aC5tYXgoMCwgZWxlbWVudHMuaW5kZXhPZihhY3RpdmUpKSAtIDE7XG4gICAgaWYgKGZvY3VzICYgRm9jdXMuTmV4dCkgcmV0dXJuIE1hdGgubWF4KDAsIGVsZW1lbnRzLmluZGV4T2YoYWN0aXZlKSkgKyAxO1xuICAgIGlmIChmb2N1cyAmIEZvY3VzLkxhc3QpIHJldHVybiBlbGVtZW50cy5sZW5ndGggLSAxO1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBGb2N1cy5GaXJzdCwgRm9jdXMuUHJldmlvdXMsIEZvY3VzLk5leHQgb3IgRm9jdXMuTGFzdCcpO1xuICB9KCk7XG5cbiAgdmFyIGZvY3VzT3B0aW9ucyA9IGZvY3VzICYgRm9jdXMuTm9TY3JvbGwgPyB7XG4gICAgcHJldmVudFNjcm9sbDogdHJ1ZVxuICB9IDoge307XG4gIHZhciBvZmZzZXQgPSAwO1xuICB2YXIgdG90YWwgPSBlbGVtZW50cy5sZW5ndGg7XG4gIHZhciBuZXh0ID0gdW5kZWZpbmVkO1xuXG4gIGRvIHtcbiAgICB2YXIgX25leHQ7XG5cbiAgICAvLyBHdWFyZCBhZ2FpbnN0IGluZmluaXRlIGxvb3BzXG4gICAgaWYgKG9mZnNldCA+PSB0b3RhbCB8fCBvZmZzZXQgKyB0b3RhbCA8PSAwKSByZXR1cm4gRm9jdXNSZXN1bHQuRXJyb3I7XG4gICAgdmFyIG5leHRJZHggPSBzdGFydEluZGV4ICsgb2Zmc2V0O1xuXG4gICAgaWYgKGZvY3VzICYgRm9jdXMuV3JhcEFyb3VuZCkge1xuICAgICAgbmV4dElkeCA9IChuZXh0SWR4ICsgdG90YWwpICUgdG90YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuZXh0SWR4IDwgMCkgcmV0dXJuIEZvY3VzUmVzdWx0LlVuZGVyZmxvdztcbiAgICAgIGlmIChuZXh0SWR4ID49IHRvdGFsKSByZXR1cm4gRm9jdXNSZXN1bHQuT3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgbmV4dCA9IGVsZW1lbnRzW25leHRJZHhdOyAvLyBUcnkgdGhlIGZvY3VzIHRoZSBuZXh0IGVsZW1lbnQsIG1pZ2h0IG5vdCB3b3JrIGlmIGl0IGlzIFwiaGlkZGVuXCIgdG8gdGhlIHVzZXIuXG5cbiAgICAoX25leHQgPSBuZXh0KSA9PSBudWxsID8gdm9pZCAwIDogX25leHQuZm9jdXMoZm9jdXNPcHRpb25zKTsgLy8gVHJ5IHRoZSBuZXh0IG9uZSBpbiBsaW5lXG5cbiAgICBvZmZzZXQgKz0gZGlyZWN0aW9uO1xuICB9IHdoaWxlIChuZXh0ICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50KTsgLy8gVGhpcyBpcyBhIGxpdHRsZSB3ZWlyZCwgYnV0IGxldCBtZSB0cnkgYW5kIGV4cGxhaW46IFRoZXJlIGFyZSBhIGZldyBzY2VuYXJpbydzXG4gIC8vIGluIGNocm9tZSBmb3IgZXhhbXBsZSB3aGVyZSBhIGZvY3VzZWQgYDxhPmAgdGFnIGRvZXMgbm90IGdldCB0aGUgZGVmYXVsdCBmb2N1c1xuICAvLyBzdHlsZXMgYW5kIHNvbWV0aW1lcyB0aGV5IGRvLiBUaGlzIGhpZ2hseSBkZXBlbmRzIG9uIHdoZXRoZXIgeW91IHN0YXJ0ZWQgYnlcbiAgLy8gY2xpY2tpbmcgb3IgYnkgdXNpbmcgeW91ciBrZXlib2FyZC4gV2hlbiB5b3UgcHJvZ3JhbW1hdGljYWxseSBhZGQgZm9jdXMgYGFuY2hvci5mb2N1cygpYFxuICAvLyB0aGVuIHRoZSBhY3RpdmUgZWxlbWVudCAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgaXMgdGhpcyBhbmNob3IsIHdoaWNoIGlzIGV4cGVjdGVkLlxuICAvLyBIb3dldmVyIGluIHRoYXQgY2FzZSB0aGUgZGVmYXVsdCBmb2N1cyBzdHlsZXMgYXJlIG5vdCBhcHBsaWVkICp1bmxlc3MqIHlvdVxuICAvLyBhbHNvIGFkZCB0aGlzIHRhYmluZGV4LlxuXG5cbiAgaWYgKCFuZXh0Lmhhc0F0dHJpYnV0ZSgndGFiaW5kZXgnKSkgbmV4dC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgcmV0dXJuIEZvY3VzUmVzdWx0LlN1Y2Nlc3M7XG59XG5cbmV4cG9ydCB7IEZvY3VzLCBGb2N1c1Jlc3VsdCwgRm9jdXNhYmxlTW9kZSwgZm9jdXNFbGVtZW50LCBmb2N1c0luLCBnZXRGb2N1c2FibGVFbGVtZW50cywgaXNGb2N1c2FibGVFbGVtZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb2N1cy1tYW5hZ2VtZW50LmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IGNyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSBhcyBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIH0gZnJvbSAnLi4vX3ZpcnR1YWwvX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy5qcyc7XG5pbXBvcnQgeyByZWYsIHdhdGNoRWZmZWN0IH0gZnJvbSAndnVlJztcblxudmFyIENISUxEUkVOX1NFTEVDVE9SID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyA/ICdbZGF0YS12LWFwcD1cIlwiXSA+IConIDogJ2JvZHkgPiAqJztcbnZhciBpbnRlcmFjdGFibGVzID0gLyojX19QVVJFX18qL25ldyBTZXQoKTtcbnZhciBvcmlnaW5hbHMgPSAvKiNfX1BVUkVfXyovbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBpbmVydChlbGVtZW50KSB7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7IC8vIEB0cy1leHBlY3QtZXJyb3IgYGluZXJ0YCBkb2VzIG5vdCBleGlzdCBvbiBIVE1MRWxlbWVudCAoeWV0ISlcblxuICBlbGVtZW50LmluZXJ0ID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVzdG9yZShlbGVtZW50KSB7XG4gIHZhciBvcmlnaW5hbCA9IG9yaWdpbmFscy5nZXQoZWxlbWVudCk7XG4gIGlmICghb3JpZ2luYWwpIHJldHVybjtcbiAgaWYgKG9yaWdpbmFsWydhcmlhLWhpZGRlbiddID09PSBudWxsKSBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtlbHNlIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIG9yaWdpbmFsWydhcmlhLWhpZGRlbiddKTsgLy8gQHRzLWV4cGVjdC1lcnJvciBgaW5lcnRgIGRvZXMgbm90IGV4aXN0IG9uIEhUTUxFbGVtZW50ICh5ZXQhKVxuXG4gIGVsZW1lbnQuaW5lcnQgPSBvcmlnaW5hbC5pbmVydDtcbn1cblxuZnVuY3Rpb24gdXNlSW5lcnRPdGhlcnMoY29udGFpbmVyLCBlbmFibGVkKSB7XG4gIGlmIChlbmFibGVkID09PSB2b2lkIDApIHtcbiAgICBlbmFibGVkID0gcmVmKHRydWUpO1xuICB9XG5cbiAgd2F0Y2hFZmZlY3QoZnVuY3Rpb24gKG9uSW52YWxpZGF0ZSkge1xuICAgIGlmICghZW5hYmxlZC52YWx1ZSkgcmV0dXJuO1xuICAgIGlmICghY29udGFpbmVyLnZhbHVlKSByZXR1cm47XG4gICAgdmFyIGVsZW1lbnQgPSBjb250YWluZXIudmFsdWU7IC8vIE1hcmsgbXlzZWxmIGFzIGFuIGludGVyYWN0YWJsZSBlbGVtZW50XG5cbiAgICBpbnRlcmFjdGFibGVzLmFkZChlbGVtZW50KTsgLy8gUmVzdG9yZSBlbGVtZW50cyB0aGF0IG5vdyBjb250YWluIGFuIGludGVyYWN0YWJsZSBjaGlsZFxuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvcmlnaW5hbHMua2V5cygpKSwgX3N0ZXA7ICEoX3N0ZXAgPSBfaXRlcmF0b3IoKSkuZG9uZTspIHtcbiAgICAgIHZhciBvcmlnaW5hbCA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICBpZiAob3JpZ2luYWwuY29udGFpbnMoZWxlbWVudCkpIHtcbiAgICAgICAgcmVzdG9yZShvcmlnaW5hbCk7XG4gICAgICAgIG9yaWdpbmFsc1tcImRlbGV0ZVwiXShvcmlnaW5hbCk7XG4gICAgICB9XG4gICAgfSAvLyBDb2xsZWN0IGRpcmVjdCBjaGlsZHJlbiBvZiB0aGUgYm9keVxuXG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKENISUxEUkVOX1NFTEVDVE9SKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHJldHVybjsgLy8gU2tpcCBub24tSFRNTEVsZW1lbnRzXG4gICAgICAvLyBTa2lwIHRoZSBpbnRlcmFjdGFibGVzLCBhbmQgdGhlIHBhcmVudHMgb2YgdGhlIGludGVyYWN0YWJsZXNcblxuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UoaW50ZXJhY3RhYmxlcyksIF9zdGVwMjsgIShfc3RlcDIgPSBfaXRlcmF0b3IyKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBpbnRlcmFjdGFibGUgPSBfc3RlcDIudmFsdWU7XG4gICAgICAgIGlmIChjaGlsZC5jb250YWlucyhpbnRlcmFjdGFibGUpKSByZXR1cm47XG4gICAgICB9IC8vIEtlZXAgdHJhY2sgb2YgdGhlIGVsZW1lbnRzXG5cblxuICAgICAgaWYgKGludGVyYWN0YWJsZXMuc2l6ZSA9PT0gMSkge1xuICAgICAgICBvcmlnaW5hbHMuc2V0KGNoaWxkLCB7XG4gICAgICAgICAgJ2FyaWEtaGlkZGVuJzogY2hpbGQuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpLFxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGluZXJ0YCBkb2VzIG5vdCBleGlzdCBvbiBIVE1MRWxlbWVudCAoeWV0ISlcbiAgICAgICAgICBpbmVydDogY2hpbGQuaW5lcnRcbiAgICAgICAgfSk7IC8vIE11dGF0ZSB0aGUgZWxlbWVudFxuXG4gICAgICAgIGluZXJ0KGNoaWxkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbkludmFsaWRhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gSW5lcnQgaXMgZGlzYWJsZWQgb24gdGhlIGN1cnJlbnQgZWxlbWVudFxuICAgICAgaW50ZXJhY3RhYmxlc1tcImRlbGV0ZVwiXShlbGVtZW50KTsgLy8gV2Ugc3RpbGwgaGF2ZSBpbnRlcmFjdGFibGUgZWxlbWVudHMsIHRoZXJlZm9yZSB0aGlzIG9uZSBhbmQgaXRzIHBhcmVudFxuICAgICAgLy8gd2lsbCBiZWNvbWUgaW5lcnQgYXMgd2VsbC5cblxuICAgICAgaWYgKGludGVyYWN0YWJsZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgLy8gQ29sbGVjdCBkaXJlY3QgY2hpbGRyZW4gb2YgdGhlIGJvZHlcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChDSElMRFJFTl9TRUxFQ1RPUikuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuOyAvLyBTa2lwIG5vbi1IVE1MRWxlbWVudHNcbiAgICAgICAgICAvLyBTa2lwIGFscmVhZHkgaW5lcnQgcGFyZW50c1xuXG4gICAgICAgICAgaWYgKG9yaWdpbmFscy5oYXMoY2hpbGQpKSByZXR1cm47IC8vIFNraXAgdGhlIGludGVyYWN0YWJsZXMsIGFuZCB0aGUgcGFyZW50cyBvZiB0aGUgaW50ZXJhY3RhYmxlc1xuXG4gICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UoaW50ZXJhY3RhYmxlcyksIF9zdGVwMzsgIShfc3RlcDMgPSBfaXRlcmF0b3IzKCkpLmRvbmU7KSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3RhYmxlID0gX3N0ZXAzLnZhbHVlO1xuICAgICAgICAgICAgaWYgKGNoaWxkLmNvbnRhaW5zKGludGVyYWN0YWJsZSkpIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcmlnaW5hbHMuc2V0KGNoaWxkLCB7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiBjaGlsZC5nZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyksXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBpbmVydGAgZG9lcyBub3QgZXhpc3Qgb24gSFRNTEVsZW1lbnQgKHlldCEpXG4gICAgICAgICAgICBpbmVydDogY2hpbGQuaW5lcnRcbiAgICAgICAgICB9KTsgLy8gTXV0YXRlIHRoZSBlbGVtZW50XG5cbiAgICAgICAgICBpbmVydChjaGlsZCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uob3JpZ2luYWxzLmtleXMoKSksIF9zdGVwNDsgIShfc3RlcDQgPSBfaXRlcmF0b3I0KCkpLmRvbmU7KSB7XG4gICAgICAgICAgdmFyIF9lbGVtZW50ID0gX3N0ZXA0LnZhbHVlO1xuICAgICAgICAgIC8vIFJlc3RvcmVcbiAgICAgICAgICByZXN0b3JlKF9lbGVtZW50KTsgLy8gQ2xlYW51cFxuXG4gICAgICAgICAgb3JpZ2luYWxzW1wiZGVsZXRlXCJdKF9lbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IHsgdXNlSW5lcnRPdGhlcnMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZS1pbmVydC1vdGhlcnMuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgaW5qZWN0LCB3YXRjaEVmZmVjdCwgcHJvdmlkZSB9IGZyb20gJ3Z1ZSc7XG5cbnZhciBTdGFja0NvbnRleHQgPSAvKiNfX1BVUkVfXyovU3ltYm9sKCdTdGFja0NvbnRleHQnKTtcbnZhciBTdGFja01lc3NhZ2U7XG5cbihmdW5jdGlvbiAoU3RhY2tNZXNzYWdlKSB7XG4gIFN0YWNrTWVzc2FnZVtTdGFja01lc3NhZ2VbXCJBZGRFbGVtZW50XCJdID0gMF0gPSBcIkFkZEVsZW1lbnRcIjtcbiAgU3RhY2tNZXNzYWdlW1N0YWNrTWVzc2FnZVtcIlJlbW92ZUVsZW1lbnRcIl0gPSAxXSA9IFwiUmVtb3ZlRWxlbWVudFwiO1xufSkoU3RhY2tNZXNzYWdlIHx8IChTdGFja01lc3NhZ2UgPSB7fSkpO1xuXG5mdW5jdGlvbiB1c2VTdGFja0NvbnRleHQoKSB7XG4gIHJldHVybiBpbmplY3QoU3RhY2tDb250ZXh0LCBmdW5jdGlvbiAoKSB7fSk7XG59XG5mdW5jdGlvbiB1c2VFbGVtZW5TdGFjayhlbGVtZW50KSB7XG4gIHZhciBub3RpZnkgPSB1c2VTdGFja0NvbnRleHQoKTtcbiAgd2F0Y2hFZmZlY3QoZnVuY3Rpb24gKG9uSW52YWxpZGF0ZSkge1xuICAgIHZhciBkb21FbGVtZW50ID0gZWxlbWVudCA9PSBudWxsID8gdm9pZCAwIDogZWxlbWVudC52YWx1ZTtcbiAgICBpZiAoIWRvbUVsZW1lbnQpIHJldHVybjtcbiAgICBub3RpZnkoU3RhY2tNZXNzYWdlLkFkZEVsZW1lbnQsIGRvbUVsZW1lbnQpO1xuICAgIG9uSW52YWxpZGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm90aWZ5KFN0YWNrTWVzc2FnZS5SZW1vdmVFbGVtZW50LCBkb21FbGVtZW50KTtcbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiB1c2VTdGFja1Byb3ZpZGVyKG9uVXBkYXRlKSB7XG4gIHZhciBwYXJlbnRVcGRhdGUgPSB1c2VTdGFja0NvbnRleHQoKTtcblxuICBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIC8vIE5vdGlmeSBvdXIgbGF5ZXJcbiAgICBvblVwZGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb25VcGRhdGUuYXBwbHkodm9pZCAwLCBhcmdzKTsgLy8gTm90aWZ5IHRoZSBwYXJlbnRcblxuICAgIHBhcmVudFVwZGF0ZS5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICB9XG5cbiAgcHJvdmlkZShTdGFja0NvbnRleHQsIG5vdGlmeSk7XG59XG5cbmV4cG9ydCB7IFN0YWNrTWVzc2FnZSwgdXNlRWxlbWVuU3RhY2ssIHVzZVN0YWNrQ29udGV4dCwgdXNlU3RhY2tQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhY2stY29udGV4dC5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGFzIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIH0gZnJvbSAnLi4vX3ZpcnR1YWwvX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy5qcyc7XG5pbXBvcnQgeyBpbmplY3QsIGRlZmluZUNvbXBvbmVudCwgcHJvdmlkZSB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICcuLi91dGlscy9yZW5kZXIuZXNtLmpzJztcblxudmFyIEZvcmNlUG9ydGFsUm9vdENvbnRleHQgPSAvKiNfX1BVUkVfXyovU3ltYm9sKCdGb3JjZVBvcnRhbFJvb3RDb250ZXh0Jyk7XG5mdW5jdGlvbiB1c2VQb3J0YWxSb290KCkge1xuICByZXR1cm4gaW5qZWN0KEZvcmNlUG9ydGFsUm9vdENvbnRleHQsIGZhbHNlKTtcbn1cbnZhciBGb3JjZVBvcnRhbFJvb3QgPSAvKiNfX1BVUkVfXyovZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ0ZvcmNlUG9ydGFsUm9vdCcsXG4gIHByb3BzOiB7XG4gICAgYXM6IHtcbiAgICAgIHR5cGU6IFtPYmplY3QsIFN0cmluZ10sXG4gICAgICBcImRlZmF1bHRcIjogJ3RlbXBsYXRlJ1xuICAgIH0sXG4gICAgZm9yY2U6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICB9XG4gIH0sXG4gIHNldHVwOiBmdW5jdGlvbiBzZXR1cChwcm9wcywgX3JlZikge1xuICAgIHZhciBzbG90cyA9IF9yZWYuc2xvdHMsXG4gICAgICAgIGF0dHJzID0gX3JlZi5hdHRycztcbiAgICBwcm92aWRlKEZvcmNlUG9ydGFsUm9vdENvbnRleHQsIHByb3BzLmZvcmNlKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhc3NUaHJvdWdoUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wiZm9yY2VcIl0pO1xuXG4gICAgICByZXR1cm4gcmVuZGVyKHtcbiAgICAgICAgcHJvcHM6IHBhc3NUaHJvdWdoUHJvcHMsXG4gICAgICAgIHNsb3Q6IHt9LFxuICAgICAgICBzbG90czogc2xvdHMsXG4gICAgICAgIGF0dHJzOiBhdHRycyxcbiAgICAgICAgbmFtZTogJ0ZvcmNlUG9ydGFsUm9vdCdcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBGb3JjZVBvcnRhbFJvb3QsIHVzZVBvcnRhbFJvb3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcnRhbC1mb3JjZS1yb290LmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuZHMgYXMgX2V4dGVuZHMsIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgYXMgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgfSBmcm9tICcuLi8uLi9fdmlydHVhbC9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLmpzJztcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaW5qZWN0LCByZWYsIHdhdGNoRWZmZWN0LCBvblVubW91bnRlZCwgaCwgVGVsZXBvcnQsIHJlYWN0aXZlLCBwcm92aWRlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJy4uLy4uL3V0aWxzL3JlbmRlci5lc20uanMnO1xuaW1wb3J0IHsgdXNlRWxlbWVuU3RhY2ssIHVzZVN0YWNrUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9zdGFjay1jb250ZXh0LmVzbS5qcyc7XG5pbXBvcnQgeyB1c2VQb3J0YWxSb290IH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvcG9ydGFsLWZvcmNlLXJvb3QuZXNtLmpzJztcblxuZnVuY3Rpb24gZ2V0UG9ydGFsUm9vdCgpIHtcbiAgdmFyIGV4aXN0aW5nUm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFkbGVzc3VpLXBvcnRhbC1yb290Jyk7XG4gIGlmIChleGlzdGluZ1Jvb3QpIHJldHVybiBleGlzdGluZ1Jvb3Q7XG4gIHZhciByb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHJvb3Quc2V0QXR0cmlidXRlKCdpZCcsICdoZWFkbGVzc3VpLXBvcnRhbC1yb290Jyk7XG4gIHJldHVybiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJvb3QpO1xufVxuXG52YXIgUG9ydGFsID0gLyojX19QVVJFX18qL2RlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdQb3J0YWwnLFxuICBwcm9wczoge1xuICAgIGFzOiB7XG4gICAgICB0eXBlOiBbT2JqZWN0LCBTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICdkaXYnXG4gICAgfVxuICB9LFxuICBzZXR1cDogZnVuY3Rpb24gc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgc2xvdHMgPSBfcmVmLnNsb3RzLFxuICAgICAgICBhdHRycyA9IF9yZWYuYXR0cnM7XG4gICAgdmFyIGZvcmNlUG9ydGFsUm9vdCA9IHVzZVBvcnRhbFJvb3QoKTtcbiAgICB2YXIgZ3JvdXBDb250ZXh0ID0gaW5qZWN0KFBvcnRhbEdyb3VwQ29udGV4dCwgbnVsbCk7XG4gICAgdmFyIG15VGFyZ2V0ID0gcmVmKGZvcmNlUG9ydGFsUm9vdCA9PT0gdHJ1ZSA/IGdldFBvcnRhbFJvb3QoKSA6IGdyb3VwQ29udGV4dCA9PT0gbnVsbCA/IGdldFBvcnRhbFJvb3QoKSA6IGdyb3VwQ29udGV4dC5yZXNvbHZlVGFyZ2V0KCkpO1xuICAgIHdhdGNoRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChmb3JjZVBvcnRhbFJvb3QpIHJldHVybjtcbiAgICAgIGlmIChncm91cENvbnRleHQgPT09IG51bGwpIHJldHVybjtcbiAgICAgIG15VGFyZ2V0LnZhbHVlID0gZ3JvdXBDb250ZXh0LnJlc29sdmVUYXJnZXQoKTtcbiAgICB9KTtcbiAgICB2YXIgZWxlbWVudCA9IHJlZihudWxsKTtcbiAgICB1c2VFbGVtZW5TdGFjayhlbGVtZW50KTtcbiAgICBvblVubW91bnRlZChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdoZWFkbGVzc3VpLXBvcnRhbC1yb290Jyk7XG4gICAgICBpZiAoIXJvb3QpIHJldHVybjtcbiAgICAgIGlmIChteVRhcmdldC52YWx1ZSAhPT0gcm9vdCkgcmV0dXJuO1xuXG4gICAgICBpZiAobXlUYXJnZXQudmFsdWUuY2hpbGRyZW4ubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgdmFyIF9teVRhcmdldCR2YWx1ZSRwYXJlbjtcblxuICAgICAgICAoX215VGFyZ2V0JHZhbHVlJHBhcmVuID0gbXlUYXJnZXQudmFsdWUucGFyZW50RWxlbWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9teVRhcmdldCR2YWx1ZSRwYXJlbi5yZW1vdmVDaGlsZChteVRhcmdldC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdXNlU3RhY2tQcm92aWRlcigpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobXlUYXJnZXQudmFsdWUgPT09IG51bGwpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHByb3BzV2VDb250cm9sID0ge1xuICAgICAgICByZWY6IGVsZW1lbnRcbiAgICAgIH07XG4gICAgICByZXR1cm4gaCggLy8gQHRzLWV4cGVjdC1lcnJvciBDaGlsZHJlbiBjYW4gYmUgYW4gb2JqZWN0LCBidXQgVHlwZVNjcmlwdCBpcyBub3QgaGFwcHlcbiAgICAgIC8vIHdpdGggaXQuIE9uY2UgdGhpcyBpcyBmaXhlZCB1cHN0cmVhbSB3ZSBjYW4gcmVtb3ZlIHRoaXMgYXNzZXJ0aW9uLlxuICAgICAgVGVsZXBvcnQsIHtcbiAgICAgICAgdG86IG15VGFyZ2V0LnZhbHVlXG4gICAgICB9LCByZW5kZXIoe1xuICAgICAgICBwcm9wczogX2V4dGVuZHMoe30sIHByb3BzLCBwcm9wc1dlQ29udHJvbCksXG4gICAgICAgIHNsb3Q6IHt9LFxuICAgICAgICBhdHRyczogYXR0cnMsXG4gICAgICAgIHNsb3RzOiBzbG90cyxcbiAgICAgICAgbmFtZTogJ1BvcnRhbCdcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG59KTsgLy8gLS0tXG5cbnZhciBQb3J0YWxHcm91cENvbnRleHQgPSAvKiNfX1BVUkVfXyovU3ltYm9sKCdQb3J0YWxHcm91cENvbnRleHQnKTtcbnZhciBQb3J0YWxHcm91cCA9IC8qI19fUFVSRV9fKi9kZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnUG9ydGFsR3JvdXAnLFxuICBwcm9wczoge1xuICAgIGFzOiB7XG4gICAgICB0eXBlOiBbT2JqZWN0LCBTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICd0ZW1wbGF0ZSdcbiAgICB9LFxuICAgIHRhcmdldDoge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgXCJkZWZhdWx0XCI6IG51bGxcbiAgICB9XG4gIH0sXG4gIHNldHVwOiBmdW5jdGlvbiBzZXR1cChwcm9wcywgX3JlZjIpIHtcbiAgICB2YXIgYXR0cnMgPSBfcmVmMi5hdHRycyxcbiAgICAgICAgc2xvdHMgPSBfcmVmMi5zbG90cztcbiAgICB2YXIgYXBpID0gcmVhY3RpdmUoe1xuICAgICAgcmVzb2x2ZVRhcmdldDogZnVuY3Rpb24gcmVzb2x2ZVRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnRhcmdldDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBwcm92aWRlKFBvcnRhbEdyb3VwQ29udGV4dCwgYXBpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhc3NUaHJvdWdoUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1widGFyZ2V0XCJdKTtcblxuICAgICAgcmV0dXJuIHJlbmRlcih7XG4gICAgICAgIHByb3BzOiBwYXNzVGhyb3VnaFByb3BzLFxuICAgICAgICBzbG90OiB7fSxcbiAgICAgICAgYXR0cnM6IGF0dHJzLFxuICAgICAgICBzbG90czogc2xvdHMsXG4gICAgICAgIG5hbWU6ICdQb3J0YWxHcm91cCdcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cbn0pO1xuXG5leHBvcnQgeyBQb3J0YWwsIFBvcnRhbEdyb3VwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3J0YWwuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5kcyBhcyBfZXh0ZW5kcywgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBhcyBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSwgY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIGFzIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UgfSBmcm9tICcuLi8uLi9fdmlydHVhbC9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLmpzJztcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgcmVmLCBjb21wdXRlZCwgb25VcGRhdGVkLCBwcm92aWRlLCB3YXRjaEVmZmVjdCwgb25Nb3VudGVkLCBvblVubW91bnRlZCwgaW5qZWN0LCBuZXh0VGljayB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBtYXRjaCB9IGZyb20gJy4uLy4uL3V0aWxzL21hdGNoLmVzbS5qcyc7XG5pbXBvcnQgeyByZW5kZXIsIEZlYXR1cmVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVuZGVyLmVzbS5qcyc7XG5pbXBvcnQgeyBLZXlzIH0gZnJvbSAnLi4vLi4va2V5Ym9hcmQuZXNtLmpzJztcbmltcG9ydCB7IHVzZUlkIH0gZnJvbSAnLi4vLi4vaG9va3MvdXNlLWlkLmVzbS5qcyc7XG5pbXBvcnQgeyB1c2VXaW5kb3dFdmVudCB9IGZyb20gJy4uLy4uL2hvb2tzL3VzZS13aW5kb3ctZXZlbnQuZXNtLmpzJztcbmltcG9ydCB7IGNvbnRhaW5zIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvZG9tLWNvbnRhaW5lcnMuZXNtLmpzJztcbmltcG9ydCB7IHVzZUZvY3VzVHJhcCB9IGZyb20gJy4uLy4uL2hvb2tzL3VzZS1mb2N1cy10cmFwLmVzbS5qcyc7XG5pbXBvcnQgeyB1c2VJbmVydE90aGVycyB9IGZyb20gJy4uLy4uL2hvb2tzL3VzZS1pbmVydC1vdGhlcnMuZXNtLmpzJztcbmltcG9ydCB7IHVzZVN0YWNrUHJvdmlkZXIsIFN0YWNrTWVzc2FnZSB9IGZyb20gJy4uLy4uL2ludGVybmFsL3N0YWNrLWNvbnRleHQuZXNtLmpzJztcbmltcG9ydCB7IEZvcmNlUG9ydGFsUm9vdCB9IGZyb20gJy4uLy4uL2ludGVybmFsL3BvcnRhbC1mb3JjZS1yb290LmVzbS5qcyc7XG5pbXBvcnQgeyBQb3J0YWwsIFBvcnRhbEdyb3VwIH0gZnJvbSAnLi4vcG9ydGFsL3BvcnRhbC5lc20uanMnO1xuaW1wb3J0IHsgdXNlRGVzY3JpcHRpb25zLCBEZXNjcmlwdGlvbiB9IGZyb20gJy4uL2Rlc2NyaXB0aW9uL2Rlc2NyaXB0aW9uLmVzbS5qcyc7XG5pbXBvcnQgeyBkb20gfSBmcm9tICcuLi8uLi91dGlscy9kb20uZXNtLmpzJztcbmltcG9ydCB7IHVzZU9wZW5DbG9zZWQsIFN0YXRlIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvb3Blbi1jbG9zZWQuZXNtLmpzJztcblxudmFyIERpYWxvZ1N0YXRlcztcblxuKGZ1bmN0aW9uIChEaWFsb2dTdGF0ZXMpIHtcbiAgRGlhbG9nU3RhdGVzW0RpYWxvZ1N0YXRlc1tcIk9wZW5cIl0gPSAwXSA9IFwiT3BlblwiO1xuICBEaWFsb2dTdGF0ZXNbRGlhbG9nU3RhdGVzW1wiQ2xvc2VkXCJdID0gMV0gPSBcIkNsb3NlZFwiO1xufSkoRGlhbG9nU3RhdGVzIHx8IChEaWFsb2dTdGF0ZXMgPSB7fSkpO1xuXG52YXIgRGlhbG9nQ29udGV4dCA9IC8qI19fUFVSRV9fKi9TeW1ib2woJ0RpYWxvZ0NvbnRleHQnKTtcblxuZnVuY3Rpb24gdXNlRGlhbG9nQ29udGV4dChjb21wb25lbnQpIHtcbiAgdmFyIGNvbnRleHQgPSBpbmplY3QoRGlhbG9nQ29udGV4dCwgbnVsbCk7XG5cbiAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFwiPFwiICsgY29tcG9uZW50ICsgXCIgLz4gaXMgbWlzc2luZyBhIHBhcmVudCA8RGlhbG9nIC8+IGNvbXBvbmVudC5cIik7XG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIHVzZURpYWxvZ0NvbnRleHQpO1xuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0O1xufSAvLyAtLS1cblxuXG52YXIgTWlzc2luZyA9ICdEQzhGODkyRC0yRUJELTQ0N0MtQTRDOC1BMDMwNTg0MzZGRjQnO1xudmFyIERpYWxvZyA9IC8qI19fUFVSRV9fKi9kZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnRGlhbG9nJyxcbiAgaW5oZXJpdEF0dHJzOiBmYWxzZSxcbiAgcHJvcHM6IHtcbiAgICBhczoge1xuICAgICAgdHlwZTogW09iamVjdCwgU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnZGl2J1xuICAgIH0sXG4gICAgXCJzdGF0aWNcIjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgIH0sXG4gICAgdW5tb3VudDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIFwiZGVmYXVsdFwiOiB0cnVlXG4gICAgfSxcbiAgICBvcGVuOiB7XG4gICAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiBNaXNzaW5nXG4gICAgfSxcbiAgICBpbml0aWFsRm9jdXM6IHtcbiAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgIFwiZGVmYXVsdFwiOiBudWxsXG4gICAgfVxuICB9LFxuICBlbWl0czoge1xuICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZShfY2xvc2UpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIkMSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHByb3BzV2VDb250cm9sID0gX2V4dGVuZHMoe30sIHRoaXMuJGF0dHJzLCB7XG4gICAgICByZWY6ICdlbCcsXG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgIHJvbGU6ICdkaWFsb2cnLFxuICAgICAgJ2FyaWEtbW9kYWwnOiB0aGlzLmRpYWxvZ1N0YXRlID09PSBEaWFsb2dTdGF0ZXMuT3BlbiA/IHRydWUgOiB1bmRlZmluZWQsXG4gICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogdGhpcy50aXRsZUlkLFxuICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiB0aGlzLmRlc2NyaWJlZGJ5LFxuICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja1xuICAgIH0pO1xuXG4gICAgdmFyIF90aGlzJCRwcm9wcyA9IHRoaXMuJHByb3BzLFxuICAgICAgICBwYXNzVGhyb3VnaFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkJHByb3BzLCBbXCJvcGVuXCIsIFwiaW5pdGlhbEZvY3VzXCJdKTtcblxuICAgIHZhciBzbG90ID0ge1xuICAgICAgb3BlbjogdGhpcy5kaWFsb2dTdGF0ZSA9PT0gRGlhbG9nU3RhdGVzLk9wZW5cbiAgICB9O1xuICAgIHJldHVybiBoKEZvcmNlUG9ydGFsUm9vdCwge1xuICAgICAgZm9yY2U6IHRydWVcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaChQb3J0YWwsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGgoUG9ydGFsR3JvdXAsIHtcbiAgICAgICAgICB0YXJnZXQ6IF90aGlzLmRpYWxvZ1JlZlxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGgoRm9yY2VQb3J0YWxSb290LCB7XG4gICAgICAgICAgICBmb3JjZTogZmFsc2VcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyKHtcbiAgICAgICAgICAgICAgcHJvcHM6IF9leHRlbmRzKHt9LCBwYXNzVGhyb3VnaFByb3BzLCBwcm9wc1dlQ29udHJvbCksXG4gICAgICAgICAgICAgIHNsb3Q6IHNsb3QsXG4gICAgICAgICAgICAgIGF0dHJzOiBfdGhpcy4kYXR0cnMsXG4gICAgICAgICAgICAgIHNsb3RzOiBfdGhpcy4kc2xvdHMsXG4gICAgICAgICAgICAgIHZpc2libGU6IF90aGlzLnZpc2libGUsXG4gICAgICAgICAgICAgIGZlYXR1cmVzOiBGZWF0dXJlcy5SZW5kZXJTdHJhdGVneSB8IEZlYXR1cmVzLlN0YXRpYyxcbiAgICAgICAgICAgICAgbmFtZTogJ0RpYWxvZydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBzZXR1cDogZnVuY3Rpb24gc2V0dXAocHJvcHMsIF9yZWYpIHtcbiAgICB2YXIgZW1pdCA9IF9yZWYuZW1pdDtcbiAgICB2YXIgY29udGFpbmVycyA9IHJlZihuZXcgU2V0KCkpO1xuICAgIHZhciB1c2VzT3BlbkNsb3NlZFN0YXRlID0gdXNlT3BlbkNsb3NlZCgpO1xuICAgIHZhciBvcGVuID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb3BzLm9wZW4gPT09IE1pc3NpbmcgJiYgdXNlc09wZW5DbG9zZWRTdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgX21hdGNoO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgYG9wZW5gIHByb3AgYmFzZWQgb24gdGhlIG9wZW4gY2xvc2VkIHN0YXRlXG4gICAgICAgIHJldHVybiBtYXRjaCh1c2VzT3BlbkNsb3NlZFN0YXRlLnZhbHVlLCAoX21hdGNoID0ge30sIF9tYXRjaFtTdGF0ZS5PcGVuXSA9IHRydWUsIF9tYXRjaFtTdGF0ZS5DbG9zZWRdID0gZmFsc2UsIF9tYXRjaCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcHMub3BlbjtcbiAgICB9KTsgLy8gVmFsaWRhdGlvbnNcblxuICAgIHZhciBoYXNPcGVuID0gcHJvcHMub3BlbiAhPT0gTWlzc2luZyB8fCB1c2VzT3BlbkNsb3NlZFN0YXRlICE9PSBudWxsO1xuXG4gICAgaWYgKCFoYXNPcGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgZm9yZ290IHRvIHByb3ZpZGUgYW4gYG9wZW5gIHByb3AgdG8gdGhlIGBEaWFsb2dgLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9wZW4udmFsdWUgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IHByb3ZpZGVkIGFuIGBvcGVuYCBwcm9wIHRvIHRoZSBgRGlhbG9nYCwgYnV0IHRoZSB2YWx1ZSBpcyBub3QgYSBib29sZWFuLiBSZWNlaXZlZDogXCIgKyAob3Blbi52YWx1ZSA9PT0gTWlzc2luZyA/IHVuZGVmaW5lZCA6IHByb3BzLm9wZW4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGlhbG9nU3RhdGUgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcHJvcHMub3BlbiA/IERpYWxvZ1N0YXRlcy5PcGVuIDogRGlhbG9nU3RhdGVzLkNsb3NlZDtcbiAgICB9KTtcbiAgICB2YXIgdmlzaWJsZSA9IGNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh1c2VzT3BlbkNsb3NlZFN0YXRlICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB1c2VzT3BlbkNsb3NlZFN0YXRlLnZhbHVlID09PSBTdGF0ZS5PcGVuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGlhbG9nU3RhdGUudmFsdWUgPT09IERpYWxvZ1N0YXRlcy5PcGVuO1xuICAgIH0pO1xuICAgIHZhciBpbnRlcm5hbERpYWxvZ1JlZiA9IHJlZihudWxsKTtcbiAgICB2YXIgZW5hYmxlZCA9IHJlZihkaWFsb2dTdGF0ZS52YWx1ZSA9PT0gRGlhbG9nU3RhdGVzLk9wZW4pO1xuICAgIG9uVXBkYXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICBlbmFibGVkLnZhbHVlID0gZGlhbG9nU3RhdGUudmFsdWUgPT09IERpYWxvZ1N0YXRlcy5PcGVuO1xuICAgIH0pO1xuICAgIHZhciBpZCA9IFwiaGVhZGxlc3N1aS1kaWFsb2ctXCIgKyB1c2VJZCgpO1xuICAgIHZhciBmb2N1c1RyYXBPcHRpb25zID0gY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdGlhbEZvY3VzOiBwcm9wcy5pbml0aWFsRm9jdXNcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdXNlRm9jdXNUcmFwKGNvbnRhaW5lcnMsIGVuYWJsZWQsIGZvY3VzVHJhcE9wdGlvbnMpO1xuICAgIHVzZUluZXJ0T3RoZXJzKGludGVybmFsRGlhbG9nUmVmLCBlbmFibGVkKTtcbiAgICB1c2VTdGFja1Byb3ZpZGVyKGZ1bmN0aW9uIChtZXNzYWdlLCBlbGVtZW50KSB7XG4gICAgICB2YXIgX21hdGNoMjtcblxuICAgICAgcmV0dXJuIG1hdGNoKG1lc3NhZ2UsIChfbWF0Y2gyID0ge30sIF9tYXRjaDJbU3RhY2tNZXNzYWdlLkFkZEVsZW1lbnRdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250YWluZXJzLnZhbHVlLmFkZChlbGVtZW50KTtcbiAgICAgIH0sIF9tYXRjaDJbU3RhY2tNZXNzYWdlLlJlbW92ZUVsZW1lbnRdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb250YWluZXJzLnZhbHVlW1wiZGVsZXRlXCJdKGVsZW1lbnQpO1xuICAgICAgfSwgX21hdGNoMikpO1xuICAgIH0pO1xuICAgIHZhciBkZXNjcmliZWRieSA9IHVzZURlc2NyaXB0aW9ucyh7XG4gICAgICBuYW1lOiAnRGlhbG9nRGVzY3JpcHRpb24nLFxuICAgICAgc2xvdDogY29tcHV0ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG9wZW46IG9wZW4udmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgfSk7XG4gICAgdmFyIHRpdGxlSWQgPSByZWYobnVsbCk7XG4gICAgdmFyIGFwaSA9IHtcbiAgICAgIHRpdGxlSWQ6IHRpdGxlSWQsXG4gICAgICBkaWFsb2dTdGF0ZTogZGlhbG9nU3RhdGUsXG4gICAgICBzZXRUaXRsZUlkOiBmdW5jdGlvbiBzZXRUaXRsZUlkKGlkKSB7XG4gICAgICAgIGlmICh0aXRsZUlkLnZhbHVlID09PSBpZCkgcmV0dXJuO1xuICAgICAgICB0aXRsZUlkLnZhbHVlID0gaWQ7XG4gICAgICB9LFxuICAgICAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgICAgICBlbWl0KCdjbG9zZScsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHByb3ZpZGUoRGlhbG9nQ29udGV4dCwgYXBpKTsgLy8gSGFuZGxlIG91dHNpZGUgY2xpY2tcblxuICAgIHVzZVdpbmRvd0V2ZW50KCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICBpZiAoZGlhbG9nU3RhdGUudmFsdWUgIT09IERpYWxvZ1N0YXRlcy5PcGVuKSByZXR1cm47XG4gICAgICBpZiAoY29udGFpbmVycy52YWx1ZS5zaXplICE9PSAxKSByZXR1cm47XG4gICAgICBpZiAoY29udGFpbnMoY29udGFpbmVycy52YWx1ZSwgdGFyZ2V0KSkgcmV0dXJuO1xuICAgICAgYXBpLmNsb3NlKCk7XG4gICAgICBuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQgPT0gbnVsbCA/IHZvaWQgMCA6IHRhcmdldC5mb2N1cygpO1xuICAgICAgfSk7XG4gICAgfSk7IC8vIEhhbmRsZSBgRXNjYXBlYCB0byBjbG9zZVxuXG4gICAgdXNlV2luZG93RXZlbnQoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5rZXkgIT09IEtleXMuRXNjYXBlKSByZXR1cm47XG4gICAgICBpZiAoZGlhbG9nU3RhdGUudmFsdWUgIT09IERpYWxvZ1N0YXRlcy5PcGVuKSByZXR1cm47XG4gICAgICBpZiAoY29udGFpbmVycy52YWx1ZS5zaXplID4gMSkgcmV0dXJuOyAvLyAxIGlzIG15c2VsZiwgb3RoZXJ3aXNlIG90aGVyIGVsZW1lbnRzIGluIHRoZSBTdGFja1xuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBhcGkuY2xvc2UoKTtcbiAgICB9KTsgLy8gU2Nyb2xsIGxvY2tcblxuICAgIHdhdGNoRWZmZWN0KGZ1bmN0aW9uIChvbkludmFsaWRhdGUpIHtcbiAgICAgIGlmIChkaWFsb2dTdGF0ZS52YWx1ZSAhPT0gRGlhbG9nU3RhdGVzLk9wZW4pIHJldHVybjtcbiAgICAgIHZhciBvdmVyZmxvdyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdztcbiAgICAgIHZhciBwYWRkaW5nUmlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0O1xuICAgICAgdmFyIHNjcm9sbGJhcldpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBzY3JvbGxiYXJXaWR0aCArIFwicHhcIjtcbiAgICAgIG9uSW52YWxpZGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gcGFkZGluZ1JpZ2h0O1xuICAgICAgfSk7XG4gICAgfSk7IC8vIFRyaWdnZXIgY2xvc2Ugd2hlbiB0aGUgRm9jdXNUcmFwIGdldHMgaGlkZGVuXG5cbiAgICB3YXRjaEVmZmVjdChmdW5jdGlvbiAob25JbnZhbGlkYXRlKSB7XG4gICAgICBpZiAoZGlhbG9nU3RhdGUudmFsdWUgIT09IERpYWxvZ1N0YXRlcy5PcGVuKSByZXR1cm47XG4gICAgICB2YXIgY29udGFpbmVyID0gZG9tKGludGVybmFsRGlhbG9nUmVmKTtcbiAgICAgIGlmICghY29udGFpbmVyKSByZXR1cm47XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShlbnRyaWVzKSwgX3N0ZXA7ICEoX3N0ZXAgPSBfaXRlcmF0b3IoKSkuZG9uZTspIHtcbiAgICAgICAgICB2YXIgZW50cnkgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgIGlmIChlbnRyeS5ib3VuZGluZ0NsaWVudFJlY3QueCA9PT0gMCAmJiBlbnRyeS5ib3VuZGluZ0NsaWVudFJlY3QueSA9PT0gMCAmJiBlbnRyeS5ib3VuZGluZ0NsaWVudFJlY3Qud2lkdGggPT09IDAgJiYgZW50cnkuYm91bmRpbmdDbGllbnRSZWN0LmhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgYXBpLmNsb3NlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyKTtcbiAgICAgIG9uSW52YWxpZGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZWw6IGludGVybmFsRGlhbG9nUmVmLFxuICAgICAgZGlhbG9nUmVmOiBpbnRlcm5hbERpYWxvZ1JlZixcbiAgICAgIGNvbnRhaW5lcnM6IGNvbnRhaW5lcnMsXG4gICAgICBkaWFsb2dTdGF0ZTogZGlhbG9nU3RhdGUsXG4gICAgICB0aXRsZUlkOiB0aXRsZUlkLFxuICAgICAgZGVzY3JpYmVkYnk6IGRlc2NyaWJlZGJ5LFxuICAgICAgdmlzaWJsZTogdmlzaWJsZSxcbiAgICAgIG9wZW46IG9wZW4sXG4gICAgICBoYW5kbGVDbGljazogZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7IC8vIC0tLVxuXG52YXIgRGlhbG9nT3ZlcmxheSA9IC8qI19fUFVSRV9fKi9kZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnRGlhbG9nT3ZlcmxheScsXG4gIHByb3BzOiB7XG4gICAgYXM6IHtcbiAgICAgIHR5cGU6IFtPYmplY3QsIFN0cmluZ10sXG4gICAgICBcImRlZmF1bHRcIjogJ2RpdidcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyJDEoKSB7XG4gICAgdmFyIGFwaSA9IHVzZURpYWxvZ0NvbnRleHQoJ0RpYWxvZ092ZXJsYXknKTtcbiAgICB2YXIgcHJvcHNXZUNvbnRyb2wgPSB7XG4gICAgICByZWY6ICdlbCcsXG4gICAgICBpZDogdGhpcy5pZCxcbiAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrXG4gICAgfTtcbiAgICB2YXIgcGFzc1Rocm91Z2hQcm9wcyA9IHRoaXMuJHByb3BzO1xuICAgIHJldHVybiByZW5kZXIoe1xuICAgICAgcHJvcHM6IF9leHRlbmRzKHt9LCBwYXNzVGhyb3VnaFByb3BzLCBwcm9wc1dlQ29udHJvbCksXG4gICAgICBzbG90OiB7XG4gICAgICAgIG9wZW46IGFwaS5kaWFsb2dTdGF0ZS52YWx1ZSA9PT0gRGlhbG9nU3RhdGVzLk9wZW5cbiAgICAgIH0sXG4gICAgICBhdHRyczogdGhpcy4kYXR0cnMsXG4gICAgICBzbG90czogdGhpcy4kc2xvdHMsXG4gICAgICBuYW1lOiAnRGlhbG9nT3ZlcmxheSdcbiAgICB9KTtcbiAgfSxcbiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKCkge1xuICAgIHZhciBhcGkgPSB1c2VEaWFsb2dDb250ZXh0KCdEaWFsb2dPdmVybGF5Jyk7XG4gICAgdmFyIGlkID0gXCJoZWFkbGVzc3VpLWRpYWxvZy1vdmVybGF5LVwiICsgdXNlSWQoKTtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHJldHVybjtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGFwaS5jbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn0pOyAvLyAtLS1cblxudmFyIERpYWxvZ1RpdGxlID0gLyojX19QVVJFX18qL2RlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdEaWFsb2dUaXRsZScsXG4gIHByb3BzOiB7XG4gICAgYXM6IHtcbiAgICAgIHR5cGU6IFtPYmplY3QsIFN0cmluZ10sXG4gICAgICBcImRlZmF1bHRcIjogJ2gyJ1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIkMSgpIHtcbiAgICB2YXIgYXBpID0gdXNlRGlhbG9nQ29udGV4dCgnRGlhbG9nVGl0bGUnKTtcbiAgICB2YXIgcHJvcHNXZUNvbnRyb2wgPSB7XG4gICAgICBpZDogdGhpcy5pZFxuICAgIH07XG4gICAgdmFyIHBhc3NUaHJvdWdoUHJvcHMgPSB0aGlzLiRwcm9wcztcbiAgICByZXR1cm4gcmVuZGVyKHtcbiAgICAgIHByb3BzOiBfZXh0ZW5kcyh7fSwgcGFzc1Rocm91Z2hQcm9wcywgcHJvcHNXZUNvbnRyb2wpLFxuICAgICAgc2xvdDoge1xuICAgICAgICBvcGVuOiBhcGkuZGlhbG9nU3RhdGUudmFsdWUgPT09IERpYWxvZ1N0YXRlcy5PcGVuXG4gICAgICB9LFxuICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzLFxuICAgICAgc2xvdHM6IHRoaXMuJHNsb3RzLFxuICAgICAgbmFtZTogJ0RpYWxvZ1RpdGxlJ1xuICAgIH0pO1xuICB9LFxuICBzZXR1cDogZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgdmFyIGFwaSA9IHVzZURpYWxvZ0NvbnRleHQoJ0RpYWxvZ1RpdGxlJyk7XG4gICAgdmFyIGlkID0gXCJoZWFkbGVzc3VpLWRpYWxvZy10aXRsZS1cIiArIHVzZUlkKCk7XG4gICAgb25Nb3VudGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5zZXRUaXRsZUlkKGlkKTtcbiAgICAgIG9uVW5tb3VudGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFwaS5zZXRUaXRsZUlkKG51bGwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBpZFxuICAgIH07XG4gIH1cbn0pOyAvLyAtLS1cblxudmFyIERpYWxvZ0Rlc2NyaXB0aW9uID0gRGVzY3JpcHRpb247XG5cbmV4cG9ydCB7IERpYWxvZywgRGlhbG9nRGVzY3JpcHRpb24sIERpYWxvZ092ZXJsYXksIERpYWxvZ1RpdGxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaWFsb2cuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIGFzIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UgfSBmcm9tICcuLi9fdmlydHVhbC9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLmpzJztcbmltcG9ydCB7IHJlZiwgd2F0Y2hFZmZlY3QsIG9uVXBkYXRlZCwgb25Vbm1vdW50ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgS2V5cyB9IGZyb20gJy4uL2tleWJvYXJkLmVzbS5qcyc7XG5pbXBvcnQgeyBmb2N1c0luLCBGb2N1cywgRm9jdXNSZXN1bHQsIGZvY3VzRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL2ZvY3VzLW1hbmFnZW1lbnQuZXNtLmpzJztcbmltcG9ydCB7IHVzZVdpbmRvd0V2ZW50IH0gZnJvbSAnLi91c2Utd2luZG93LWV2ZW50LmVzbS5qcyc7XG5pbXBvcnQgeyBjb250YWlucyB9IGZyb20gJy4uL2ludGVybmFsL2RvbS1jb250YWluZXJzLmVzbS5qcyc7XG5cbmZ1bmN0aW9uIHVzZUZvY3VzVHJhcChjb250YWluZXJzLCBlbmFibGVkLCBvcHRpb25zKSB7XG4gIGlmIChlbmFibGVkID09PSB2b2lkIDApIHtcbiAgICBlbmFibGVkID0gcmVmKHRydWUpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSByZWYoe30pO1xuICB9XG5cbiAgdmFyIHJlc3RvcmVFbGVtZW50ID0gcmVmKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA6IG51bGwpO1xuICB2YXIgcHJldmlvdXNBY3RpdmVFbGVtZW50ID0gcmVmKG51bGwpO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZvY3VzKCkge1xuICAgIGlmICghZW5hYmxlZC52YWx1ZSkgcmV0dXJuO1xuICAgIGlmIChjb250YWluZXJzLnZhbHVlLnNpemUgIT09IDEpIHJldHVybjtcbiAgICB2YXIgaW5pdGlhbEZvY3VzID0gb3B0aW9ucy52YWx1ZS5pbml0aWFsRm9jdXM7XG4gICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gICAgaWYgKGluaXRpYWxGb2N1cykge1xuICAgICAgaWYgKGluaXRpYWxGb2N1cyA9PT0gYWN0aXZlRWxlbWVudCkge1xuICAgICAgICByZXR1cm47IC8vIEluaXRpYWwgZm9jdXMgcmVmIGlzIGFscmVhZHkgdGhlIGFjdGl2ZSBlbGVtZW50XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250YWlucyhjb250YWluZXJzLnZhbHVlLCBhY3RpdmVFbGVtZW50KSkge1xuICAgICAgcmV0dXJuOyAvLyBBbHJlYWR5IGZvY3VzZWQgd2l0aGluIERpYWxvZ1xuICAgIH1cblxuICAgIHJlc3RvcmVFbGVtZW50LnZhbHVlID0gYWN0aXZlRWxlbWVudDsgLy8gVHJ5IHRvIGZvY3VzIHRoZSBpbml0aWFsRm9jdXMgcmVmXG5cbiAgICBpZiAoaW5pdGlhbEZvY3VzKSB7XG4gICAgICBmb2N1c0VsZW1lbnQoaW5pdGlhbEZvY3VzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvdWxkRm9jdXMgPSBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShjb250YWluZXJzLnZhbHVlKSwgX3N0ZXA7ICEoX3N0ZXAgPSBfaXRlcmF0b3IoKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IF9zdGVwLnZhbHVlO1xuICAgICAgICB2YXIgcmVzdWx0ID0gZm9jdXNJbihjb250YWluZXIsIEZvY3VzLkZpcnN0KTtcblxuICAgICAgICBpZiAocmVzdWx0ID09PSBGb2N1c1Jlc3VsdC5TdWNjZXNzKSB7XG4gICAgICAgICAgY291bGRGb2N1cyA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFjb3VsZEZvY3VzKSBjb25zb2xlLndhcm4oJ1RoZXJlIGFyZSBubyBmb2N1c2FibGUgZWxlbWVudHMgaW5zaWRlIHRoZSA8Rm9jdXNUcmFwIC8+Jyk7XG4gICAgfVxuXG4gICAgcHJldmlvdXNBY3RpdmVFbGVtZW50LnZhbHVlID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgfSAvLyBSZXN0b3JlIHdoZW4gYGVuYWJsZWRgIGJlY29tZXMgZmFsc2VcblxuXG4gIGZ1bmN0aW9uIHJlc3RvcmUoKSB7XG4gICAgZm9jdXNFbGVtZW50KHJlc3RvcmVFbGVtZW50LnZhbHVlKTtcbiAgICByZXN0b3JlRWxlbWVudC52YWx1ZSA9IG51bGw7XG4gICAgcHJldmlvdXNBY3RpdmVFbGVtZW50LnZhbHVlID0gbnVsbDtcbiAgfSAvLyBIYW5kbGUgaW5pdGlhbCBmb2N1c1xuXG5cbiAgd2F0Y2hFZmZlY3QoaGFuZGxlRm9jdXMpO1xuICBvblVwZGF0ZWQoZnVuY3Rpb24gKCkge1xuICAgIGVuYWJsZWQudmFsdWUgPyBoYW5kbGVGb2N1cygpIDogcmVzdG9yZSgpO1xuICB9KTtcbiAgb25Vbm1vdW50ZWQocmVzdG9yZSk7IC8vIEhhbmRsZSBUYWIgJiBTaGlmdCtUYWIga2V5Ym9hcmQgZXZlbnRzXG5cbiAgdXNlV2luZG93RXZlbnQoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoIWVuYWJsZWQudmFsdWUpIHJldHVybjtcbiAgICBpZiAoZXZlbnQua2V5ICE9PSBLZXlzLlRhYikgcmV0dXJuO1xuICAgIGlmICghZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgcmV0dXJuO1xuICAgIGlmIChjb250YWluZXJzLnZhbHVlLnNpemUgIT09IDEpIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UoY29udGFpbmVycy52YWx1ZSksIF9zdGVwMjsgIShfc3RlcDIgPSBfaXRlcmF0b3IyKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgZWxlbWVudCA9IF9zdGVwMi52YWx1ZTtcbiAgICAgIHZhciByZXN1bHQgPSBmb2N1c0luKGVsZW1lbnQsIChldmVudC5zaGlmdEtleSA/IEZvY3VzLlByZXZpb3VzIDogRm9jdXMuTmV4dCkgfCBGb2N1cy5XcmFwQXJvdW5kKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gRm9jdXNSZXN1bHQuU3VjY2Vzcykge1xuICAgICAgICBwcmV2aW91c0FjdGl2ZUVsZW1lbnQudmFsdWUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBQcmV2ZW50IHByb2dyYW1tYXRpY2FsbHkgZXNjYXBpbmdcblxuICB1c2VXaW5kb3dFdmVudCgnZm9jdXMnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoIWVuYWJsZWQudmFsdWUpIHJldHVybjtcbiAgICBpZiAoY29udGFpbmVycy52YWx1ZS5zaXplICE9PSAxKSByZXR1cm47XG4gICAgdmFyIHByZXZpb3VzID0gcHJldmlvdXNBY3RpdmVFbGVtZW50LnZhbHVlO1xuICAgIGlmICghcHJldmlvdXMpIHJldHVybjtcbiAgICB2YXIgdG9FbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuXG4gICAgaWYgKHRvRWxlbWVudCAmJiB0b0VsZW1lbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgaWYgKCFjb250YWlucyhjb250YWluZXJzLnZhbHVlLCB0b0VsZW1lbnQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBmb2N1c0VsZW1lbnQocHJldmlvdXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJldmlvdXNBY3RpdmVFbGVtZW50LnZhbHVlID0gdG9FbGVtZW50O1xuICAgICAgICBmb2N1c0VsZW1lbnQodG9FbGVtZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9jdXNFbGVtZW50KHByZXZpb3VzQWN0aXZlRWxlbWVudC52YWx1ZSk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cblxuZXhwb3J0IHsgdXNlRm9jdXNUcmFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtZm9jdXMtdHJhcC5lc20uanMubWFwXG4iLCJpbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgd2F0Y2hFZmZlY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZG9tIH0gZnJvbSAnLi4vdXRpbHMvZG9tLmVzbS5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVUeXBlKHR5cGUsIGFzKSB7XG4gIGlmICh0eXBlKSByZXR1cm4gdHlwZTtcbiAgdmFyIHRhZyA9IGFzICE9IG51bGwgPyBhcyA6ICdidXR0b24nO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiYgdGFnLnRvTG93ZXJDYXNlKCkgPT09ICdidXR0b24nKSByZXR1cm4gJ2J1dHRvbic7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHVzZVJlc29sdmVCdXR0b25UeXBlKGRhdGEsIHJlZkVsZW1lbnQpIHtcbiAgdmFyIHR5cGUgPSByZWYocmVzb2x2ZVR5cGUoZGF0YS52YWx1ZS50eXBlLCBkYXRhLnZhbHVlLmFzKSk7XG4gIG9uTW91bnRlZChmdW5jdGlvbiAoKSB7XG4gICAgdHlwZS52YWx1ZSA9IHJlc29sdmVUeXBlKGRhdGEudmFsdWUudHlwZSwgZGF0YS52YWx1ZS5hcyk7XG4gIH0pO1xuICB3YXRjaEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9kb207XG5cbiAgICBpZiAodHlwZS52YWx1ZSkgcmV0dXJuO1xuICAgIGlmICghZG9tKHJlZkVsZW1lbnQpKSByZXR1cm47XG5cbiAgICBpZiAoZG9tKHJlZkVsZW1lbnQpIGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnQgJiYgISgoX2RvbSA9IGRvbShyZWZFbGVtZW50KSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kb20uaGFzQXR0cmlidXRlKCd0eXBlJykpKSB7XG4gICAgICB0eXBlLnZhbHVlID0gJ2J1dHRvbic7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCB7IHVzZVJlc29sdmVCdXR0b25UeXBlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtcmVzb2x2ZS1idXR0b24tdHlwZS5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGFzIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLCBleHRlbmRzIGFzIF9leHRlbmRzIH0gZnJvbSAnLi4vLi4vX3ZpcnR1YWwvX3JvbGx1cFBsdWdpbkJhYmVsSGVscGVycy5qcyc7XG5pbXBvcnQgeyBjb21wdXRlZCwgcmVmLCBwcm92aWRlLCBkZWZpbmVDb21wb25lbnQsIHVucmVmLCBvbk1vdW50ZWQsIG9uVW5tb3VudGVkLCBpbmplY3QgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVuZGVyLmVzbS5qcyc7XG5pbXBvcnQgeyB1c2VJZCB9IGZyb20gJy4uLy4uL2hvb2tzL3VzZS1pZC5lc20uanMnO1xuXG52YXIgTGFiZWxDb250ZXh0ID0gLyojX19QVVJFX18qL1N5bWJvbCgnTGFiZWxDb250ZXh0Jyk7XG5cbmZ1bmN0aW9uIHVzZUxhYmVsQ29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHQgPSBpbmplY3QoTGFiZWxDb250ZXh0LCBudWxsKTtcblxuICBpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1lvdSB1c2VkIGEgPExhYmVsIC8+IGNvbXBvbmVudCwgYnV0IGl0IGlzIG5vdCBpbnNpZGUgYSBwYXJlbnQuJyk7XG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnIsIHVzZUxhYmVsQ29udGV4dCk7XG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIHVzZUxhYmVscyhfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRzbG90ID0gX3JlZi5zbG90LFxuICAgICAgc2xvdCA9IF9yZWYkc2xvdCA9PT0gdm9pZCAwID8ge30gOiBfcmVmJHNsb3QsXG4gICAgICBfcmVmJG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBuYW1lID0gX3JlZiRuYW1lID09PSB2b2lkIDAgPyAnTGFiZWwnIDogX3JlZiRuYW1lLFxuICAgICAgX3JlZiRwcm9wcyA9IF9yZWYucHJvcHMsXG4gICAgICBwcm9wcyA9IF9yZWYkcHJvcHMgPT09IHZvaWQgMCA/IHt9IDogX3JlZiRwcm9wcztcblxuICB2YXIgbGFiZWxJZHMgPSByZWYoW10pO1xuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKHZhbHVlKSB7XG4gICAgbGFiZWxJZHMudmFsdWUucHVzaCh2YWx1ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZHggPSBsYWJlbElkcy52YWx1ZS5pbmRleE9mKHZhbHVlKTtcbiAgICAgIGlmIChpZHggPT09IC0xKSByZXR1cm47XG4gICAgICBsYWJlbElkcy52YWx1ZS5zcGxpY2UoaWR4LCAxKTtcbiAgICB9O1xuICB9XG5cbiAgcHJvdmlkZShMYWJlbENvbnRleHQsIHtcbiAgICByZWdpc3RlcjogcmVnaXN0ZXIsXG4gICAgc2xvdDogc2xvdCxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHByb3BzOiBwcm9wc1xuICB9KTsgLy8gVGhlIGFjdHVhbCBpZCdzIGFzIHN0cmluZyBvciB1bmRlZmluZWQuXG5cbiAgcmV0dXJuIGNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbGFiZWxJZHMudmFsdWUubGVuZ3RoID4gMCA/IGxhYmVsSWRzLnZhbHVlLmpvaW4oJyAnKSA6IHVuZGVmaW5lZDtcbiAgfSk7XG59IC8vIC0tLVxuXG52YXIgTGFiZWwgPSAvKiNfX1BVUkVfXyovZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ0xhYmVsJyxcbiAgcHJvcHM6IHtcbiAgICBhczoge1xuICAgICAgdHlwZTogW09iamVjdCwgU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnbGFiZWwnXG4gICAgfSxcbiAgICBwYXNzaXZlOiB7XG4gICAgICB0eXBlOiBbQm9vbGVhbl0sXG4gICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyJDEoKSB7XG4gICAgdmFyIF90aGlzJGNvbnRleHQgPSB0aGlzLmNvbnRleHQsXG4gICAgICAgIF90aGlzJGNvbnRleHQkbmFtZSA9IF90aGlzJGNvbnRleHQubmFtZSxcbiAgICAgICAgbmFtZSA9IF90aGlzJGNvbnRleHQkbmFtZSA9PT0gdm9pZCAwID8gJ0xhYmVsJyA6IF90aGlzJGNvbnRleHQkbmFtZSxcbiAgICAgICAgX3RoaXMkY29udGV4dCRzbG90ID0gX3RoaXMkY29udGV4dC5zbG90LFxuICAgICAgICBzbG90ID0gX3RoaXMkY29udGV4dCRzbG90ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJGNvbnRleHQkc2xvdCxcbiAgICAgICAgX3RoaXMkY29udGV4dCRwcm9wcyA9IF90aGlzJGNvbnRleHQucHJvcHMsXG4gICAgICAgIHByb3BzID0gX3RoaXMkY29udGV4dCRwcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRjb250ZXh0JHByb3BzO1xuXG4gICAgdmFyIF90aGlzJCRwcm9wcyA9IHRoaXMuJHByb3BzLFxuICAgICAgICBwYXNzaXZlID0gX3RoaXMkJHByb3BzLnBhc3NpdmUsXG4gICAgICAgIHBhc3NUaHJvdWdoUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyQkcHJvcHMsIFtcInBhc3NpdmVcIl0pO1xuXG4gICAgdmFyIHByb3BzV2VDb250cm9sID0gX2V4dGVuZHMoe30sIE9iamVjdC5lbnRyaWVzKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgX3JlZjIpIHtcbiAgICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgICAgdmFyIGtleSA9IF9yZWYyWzBdLFxuICAgICAgICAgIHZhbHVlID0gX3JlZjJbMV07XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY2MsIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltrZXldID0gdW5yZWYodmFsdWUpLCBfT2JqZWN0JGFzc2lnbikpO1xuICAgIH0sIHt9KSwge1xuICAgICAgaWQ6IHRoaXMuaWRcbiAgICB9KTtcblxuICAgIHZhciBhbGxQcm9wcyA9IF9leHRlbmRzKHt9LCBwYXNzVGhyb3VnaFByb3BzLCBwcm9wc1dlQ29udHJvbCk7IC8vIEB0cy1leHBlY3QtZXJyb3IgcHJvcHMgYXJlIGR5bmFtaWMgdmlhIGNvbnRleHQsIHNvbWUgY29tcG9uZW50cyB3aWxsXG4gICAgLy8gICAgICAgICAgICAgICAgICBwcm92aWRlIGFuIG9uQ2xpY2sgdGhlbiB3ZSBjYW4gZGVsZXRlIGl0LlxuXG5cbiAgICBpZiAocGFzc2l2ZSkgZGVsZXRlIGFsbFByb3BzWydvbkNsaWNrJ107XG4gICAgcmV0dXJuIHJlbmRlcih7XG4gICAgICBwcm9wczogYWxsUHJvcHMsXG4gICAgICBzbG90OiBzbG90LFxuICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzLFxuICAgICAgc2xvdHM6IHRoaXMuJHNsb3RzLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0pO1xuICB9LFxuICBzZXR1cDogZnVuY3Rpb24gc2V0dXAoKSB7XG4gICAgdmFyIGNvbnRleHQgPSB1c2VMYWJlbENvbnRleHQoKTtcbiAgICB2YXIgaWQgPSBcImhlYWRsZXNzdWktbGFiZWwtXCIgKyB1c2VJZCgpO1xuICAgIG9uTW91bnRlZChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gb25Vbm1vdW50ZWQoY29udGV4dC5yZWdpc3RlcihpZCkpO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBpZDogaWQsXG4gICAgICBjb250ZXh0OiBjb250ZXh0XG4gICAgfTtcbiAgfVxufSk7XG5cbmV4cG9ydCB7IExhYmVsLCB1c2VMYWJlbHMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhYmVsLmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IGV4dGVuZHMgYXMgX2V4dGVuZHMgfSBmcm9tICcuLi8uLi9fdmlydHVhbC9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLmpzJztcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgcmVmLCBwcm92aWRlLCBpbmplY3QsIGNvbXB1dGVkIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHJlbmRlciB9IGZyb20gJy4uLy4uL3V0aWxzL3JlbmRlci5lc20uanMnO1xuaW1wb3J0IHsgS2V5cyB9IGZyb20gJy4uLy4uL2tleWJvYXJkLmVzbS5qcyc7XG5pbXBvcnQgeyB1c2VJZCB9IGZyb20gJy4uLy4uL2hvb2tzL3VzZS1pZC5lc20uanMnO1xuaW1wb3J0IHsgdXNlRGVzY3JpcHRpb25zLCBEZXNjcmlwdGlvbiB9IGZyb20gJy4uL2Rlc2NyaXB0aW9uL2Rlc2NyaXB0aW9uLmVzbS5qcyc7XG5pbXBvcnQgeyB1c2VSZXNvbHZlQnV0dG9uVHlwZSB9IGZyb20gJy4uLy4uL2hvb2tzL3VzZS1yZXNvbHZlLWJ1dHRvbi10eXBlLmVzbS5qcyc7XG5pbXBvcnQgeyB1c2VMYWJlbHMsIExhYmVsIH0gZnJvbSAnLi4vbGFiZWwvbGFiZWwuZXNtLmpzJztcblxudmFyIEdyb3VwQ29udGV4dCA9IC8qI19fUFVSRV9fKi9TeW1ib2woJ0dyb3VwQ29udGV4dCcpOyAvLyAtLS1cblxudmFyIFN3aXRjaEdyb3VwID0gLyojX19QVVJFX18qL2RlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdTd2l0Y2hHcm91cCcsXG4gIHByb3BzOiB7XG4gICAgYXM6IHtcbiAgICAgIHR5cGU6IFtPYmplY3QsIFN0cmluZ10sXG4gICAgICBcImRlZmF1bHRcIjogJ3RlbXBsYXRlJ1xuICAgIH1cbiAgfSxcbiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKHByb3BzLCBfcmVmKSB7XG4gICAgdmFyIHNsb3RzID0gX3JlZi5zbG90cyxcbiAgICAgICAgYXR0cnMgPSBfcmVmLmF0dHJzO1xuICAgIHZhciBzd2l0Y2hSZWYgPSByZWYobnVsbCk7XG4gICAgdmFyIGxhYmVsbGVkYnkgPSB1c2VMYWJlbHMoe1xuICAgICAgbmFtZTogJ1N3aXRjaExhYmVsJyxcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soKSB7XG4gICAgICAgICAgaWYgKCFzd2l0Y2hSZWYudmFsdWUpIHJldHVybjtcbiAgICAgICAgICBzd2l0Y2hSZWYudmFsdWUuY2xpY2soKTtcbiAgICAgICAgICBzd2l0Y2hSZWYudmFsdWUuZm9jdXMoe1xuICAgICAgICAgICAgcHJldmVudFNjcm9sbDogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIGRlc2NyaWJlZGJ5ID0gdXNlRGVzY3JpcHRpb25zKHtcbiAgICAgIG5hbWU6ICdTd2l0Y2hEZXNjcmlwdGlvbidcbiAgICB9KTtcbiAgICB2YXIgYXBpID0ge1xuICAgICAgc3dpdGNoUmVmOiBzd2l0Y2hSZWYsXG4gICAgICBsYWJlbGxlZGJ5OiBsYWJlbGxlZGJ5LFxuICAgICAgZGVzY3JpYmVkYnk6IGRlc2NyaWJlZGJ5XG4gICAgfTtcbiAgICBwcm92aWRlKEdyb3VwQ29udGV4dCwgYXBpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlbmRlcih7XG4gICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgc2xvdDoge30sXG4gICAgICAgIHNsb3RzOiBzbG90cyxcbiAgICAgICAgYXR0cnM6IGF0dHJzLFxuICAgICAgICBuYW1lOiAnU3dpdGNoR3JvdXAnXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG59KTsgLy8gLS0tXG5cbnZhciBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ1N3aXRjaCcsXG4gIGVtaXRzOiB7XG4gICAgJ3VwZGF0ZTptb2RlbFZhbHVlJzogZnVuY3Rpb24gdXBkYXRlTW9kZWxWYWx1ZShfdmFsdWUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBhczoge1xuICAgICAgdHlwZTogW09iamVjdCwgU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnYnV0dG9uJ1xuICAgIH0sXG4gICAgbW9kZWxWYWx1ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIkMSgpIHtcbiAgICB2YXIgc2xvdCA9IHtcbiAgICAgIGNoZWNrZWQ6IHRoaXMuJHByb3BzLm1vZGVsVmFsdWVcbiAgICB9O1xuICAgIHZhciBwcm9wc1dlQ29udHJvbCA9IHtcbiAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgcmVmOiAnZWwnLFxuICAgICAgcm9sZTogJ3N3aXRjaCcsXG4gICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICB0YWJJbmRleDogMCxcbiAgICAgICdhcmlhLWNoZWNrZWQnOiB0aGlzLiRwcm9wcy5tb2RlbFZhbHVlLFxuICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IHRoaXMubGFiZWxsZWRieSxcbiAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogdGhpcy5kZXNjcmliZWRieSxcbiAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssXG4gICAgICBvbktleXVwOiB0aGlzLmhhbmRsZUtleVVwLFxuICAgICAgb25LZXlwcmVzczogdGhpcy5oYW5kbGVLZXlQcmVzc1xuICAgIH07XG4gICAgcmV0dXJuIHJlbmRlcih7XG4gICAgICBwcm9wczogX2V4dGVuZHMoe30sIHRoaXMuJHByb3BzLCBwcm9wc1dlQ29udHJvbCksXG4gICAgICBzbG90OiBzbG90LFxuICAgICAgYXR0cnM6IHRoaXMuJGF0dHJzLFxuICAgICAgc2xvdHM6IHRoaXMuJHNsb3RzLFxuICAgICAgbmFtZTogJ1N3aXRjaCdcbiAgICB9KTtcbiAgfSxcbiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKHByb3BzLCBfcmVmMikge1xuICAgIHZhciBlbWl0ID0gX3JlZjIuZW1pdCxcbiAgICAgICAgYXR0cnMgPSBfcmVmMi5hdHRycztcbiAgICB2YXIgYXBpID0gaW5qZWN0KEdyb3VwQ29udGV4dCwgbnVsbCk7XG4gICAgdmFyIGlkID0gXCJoZWFkbGVzc3VpLXN3aXRjaC1cIiArIHVzZUlkKCk7XG5cbiAgICBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICBlbWl0KCd1cGRhdGU6bW9kZWxWYWx1ZScsICFwcm9wcy5tb2RlbFZhbHVlKTtcbiAgICB9XG5cbiAgICB2YXIgaW50ZXJuYWxTd2l0Y2hSZWYgPSByZWYobnVsbCk7XG4gICAgdmFyIHN3aXRjaFJlZiA9IGFwaSA9PT0gbnVsbCA/IGludGVybmFsU3dpdGNoUmVmIDogYXBpLnN3aXRjaFJlZjtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IGlkLFxuICAgICAgZWw6IHN3aXRjaFJlZixcbiAgICAgIHR5cGU6IHVzZVJlc29sdmVCdXR0b25UeXBlKGNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBhczogcHJvcHMuYXMsXG4gICAgICAgICAgdHlwZTogYXR0cnMudHlwZVxuICAgICAgICB9O1xuICAgICAgfSksIHN3aXRjaFJlZiksXG4gICAgICBsYWJlbGxlZGJ5OiBhcGkgPT0gbnVsbCA/IHZvaWQgMCA6IGFwaS5sYWJlbGxlZGJ5LFxuICAgICAgZGVzY3JpYmVkYnk6IGFwaSA9PSBudWxsID8gdm9pZCAwIDogYXBpLmRlc2NyaWJlZGJ5LFxuICAgICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRvZ2dsZSgpO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZUtleVVwOiBmdW5jdGlvbiBoYW5kbGVLZXlVcChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQua2V5ICE9PSBLZXlzLlRhYikgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gS2V5cy5TcGFjZSkgdG9nZ2xlKCk7XG4gICAgICB9LFxuICAgICAgLy8gVGhpcyBpcyBuZWVkZWQgc28gdGhhdCB3ZSBjYW4gXCJjYW5jZWxcIiB0aGUgY2xpY2sgZXZlbnQgd2hlbiB3ZSB1c2UgdGhlIGBFbnRlcmAga2V5IG9uIGEgYnV0dG9uLlxuICAgICAgaGFuZGxlS2V5UHJlc3M6IGZ1bmN0aW9uIGhhbmRsZUtleVByZXNzKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7IC8vIC0tLVxuXG52YXIgU3dpdGNoTGFiZWwgPSBMYWJlbDtcbnZhciBTd2l0Y2hEZXNjcmlwdGlvbiA9IERlc2NyaXB0aW9uO1xuXG5leHBvcnQgeyBTd2l0Y2gsIFN3aXRjaERlc2NyaXB0aW9uLCBTd2l0Y2hHcm91cCwgU3dpdGNoTGFiZWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN3aXRjaC5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBvbmNlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvb25jZS5lc20uanMnO1xuaW1wb3J0IHsgZGlzcG9zYWJsZXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy9kaXNwb3NhYmxlcy5lc20uanMnO1xuXG5mdW5jdGlvbiBhZGRDbGFzc2VzKG5vZGUpIHtcbiAgdmFyIF9ub2RlJGNsYXNzTGlzdDtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NlcyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3Nlc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBub2RlICYmIGNsYXNzZXMubGVuZ3RoID4gMCAmJiAoX25vZGUkY2xhc3NMaXN0ID0gbm9kZS5jbGFzc0xpc3QpLmFkZC5hcHBseShfbm9kZSRjbGFzc0xpc3QsIGNsYXNzZXMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzKG5vZGUpIHtcbiAgdmFyIF9ub2RlJGNsYXNzTGlzdDI7XG5cbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBjbGFzc2VzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBjbGFzc2VzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICB9XG5cbiAgbm9kZSAmJiBjbGFzc2VzLmxlbmd0aCA+IDAgJiYgKF9ub2RlJGNsYXNzTGlzdDIgPSBub2RlLmNsYXNzTGlzdCkucmVtb3ZlLmFwcGx5KF9ub2RlJGNsYXNzTGlzdDIsIGNsYXNzZXMpO1xufVxuXG52YXIgUmVhc29uO1xuXG4oZnVuY3Rpb24gKFJlYXNvbikge1xuICBSZWFzb25bXCJGaW5pc2hlZFwiXSA9IFwiZmluaXNoZWRcIjtcbiAgUmVhc29uW1wiQ2FuY2VsbGVkXCJdID0gXCJjYW5jZWxsZWRcIjtcbn0pKFJlYXNvbiB8fCAoUmVhc29uID0ge30pKTtcblxuZnVuY3Rpb24gd2FpdEZvclRyYW5zaXRpb24obm9kZSwgZG9uZSkge1xuICB2YXIgZCA9IGRpc3Bvc2FibGVzKCk7XG4gIGlmICghbm9kZSkgcmV0dXJuIGQuZGlzcG9zZTsgLy8gU2FmYXJpIHJldHVybnMgYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiB2YWx1ZXMsIHNvIGxldCdzIHNvcnQgdGhlbSBhbmQgdGFrZSB0aGUgaGlnaGVzdCB2YWx1ZS5cblxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX2dldENvbXB1dGVkU3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgdHJhbnNpdGlvbkRlbGF5ID0gX2dldENvbXB1dGVkU3R5bGUudHJhbnNpdGlvbkRlbGF5O1xuXG4gIHZhciBfbWFwID0gW3RyYW5zaXRpb25EdXJhdGlvbiwgdHJhbnNpdGlvbkRlbGF5XS5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdmFyIF92YWx1ZSRzcGxpdCRmaWx0ZXIkbSA9IHZhbHVlLnNwbGl0KCcsJykgLy8gUmVtb3ZlIGZhbHNleXMgd2UgY2FuJ3Qgd29yayB3aXRoXG4gICAgLmZpbHRlcihCb29sZWFuKSAvLyBWYWx1ZXMgYXJlIHJldHVybmVkIGFzIGAwLjNzYCBvciBgNzVtc2BcbiAgICAubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gdi5pbmNsdWRlcygnbXMnKSA/IHBhcnNlRmxvYXQodikgOiBwYXJzZUZsb2F0KHYpICogMTAwMDtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCB6KSB7XG4gICAgICByZXR1cm4geiAtIGE7XG4gICAgfSksXG4gICAgICAgIF92YWx1ZSRzcGxpdCRmaWx0ZXIkbTIgPSBfdmFsdWUkc3BsaXQkZmlsdGVyJG1bMF0sXG4gICAgICAgIHJlc29sdmVkVmFsdWUgPSBfdmFsdWUkc3BsaXQkZmlsdGVyJG0yID09PSB2b2lkIDAgPyAwIDogX3ZhbHVlJHNwbGl0JGZpbHRlciRtMjtcblxuICAgIHJldHVybiByZXNvbHZlZFZhbHVlO1xuICB9KSxcbiAgICAgIGR1cmF0aW9uTXMgPSBfbWFwWzBdLFxuICAgICAgZGVsYXlzTXMgPSBfbWFwWzFdOyAvLyBXYWl0aW5nIGZvciB0aGUgdHJhbnNpdGlvbiB0byBlbmQuIFdlIGNvdWxkIHVzZSB0aGUgYHRyYW5zaXRpb25lbmRgIGV2ZW50LCBob3dldmVyIHdoZW4gbm9cbiAgLy8gYWN0dWFsIHRyYW5zaXRpb24vZHVyYXRpb24gaXMgZGVmaW5lZCB0aGVuIHRoZSBgdHJhbnNpdGlvbmVuZGAgZXZlbnQgaXMgbm90IGZpcmVkLlxuICAvL1xuICAvLyBUT0RPOiBEb3duc2lkZSBpcywgd2hlbiB5b3Ugc2xvdyBkb3duIHRyYW5zaXRpb25zIHZpYSBkZXZ0b29scyB0aGlzIHRpbWVvdXQgaXMgc3RpbGwgdXNpbmcgdGhlXG4gIC8vIGZ1bGwgMTAwJSBzcGVlZCBpbnN0ZWFkIG9mIHRoZSAyNSUgb3IgMTAlLlxuXG5cbiAgaWYgKGR1cmF0aW9uTXMgIT09IDApIHtcbiAgICBkLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGRvbmUoUmVhc29uLkZpbmlzaGVkKTtcbiAgICB9LCBkdXJhdGlvbk1zICsgZGVsYXlzTXMpO1xuICB9IGVsc2Uge1xuICAgIC8vIE5vIHRyYW5zaXRpb24gaXMgaGFwcGVuaW5nLCBzbyB3ZSBzaG91bGQgY2xlYW51cCBhbHJlYWR5LiBPdGhlcndpc2Ugd2UgaGF2ZSB0byB3YWl0IHVudGlsIHdlXG4gICAgLy8gZ2V0IGRpc3Bvc2VkLlxuICAgIGRvbmUoUmVhc29uLkZpbmlzaGVkKTtcbiAgfSAvLyBJZiB3ZSBnZXQgZGlzcG9zZWQgYmVmb3JlIHRoZSB0aW1lb3V0IHJ1bnMgd2Ugc2hvdWxkIGNsZWFudXAgYW55d2F5XG5cblxuICBkLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRvbmUoUmVhc29uLkNhbmNlbGxlZCk7XG4gIH0pO1xuICByZXR1cm4gZC5kaXNwb3NlO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKG5vZGUsIGJhc2UsIGZyb20sIHRvLCBlbnRlcmVkLCBkb25lKSB7XG4gIHZhciBkID0gZGlzcG9zYWJsZXMoKTtcblxuICB2YXIgX2RvbmUgPSBkb25lICE9PSB1bmRlZmluZWQgPyBvbmNlKGRvbmUpIDogZnVuY3Rpb24gKCkge307XG5cbiAgcmVtb3ZlQ2xhc3Nlcy5hcHBseSh2b2lkIDAsIFtub2RlXS5jb25jYXQoZW50ZXJlZCkpO1xuICBhZGRDbGFzc2VzLmFwcGx5KHZvaWQgMCwgW25vZGVdLmNvbmNhdChiYXNlLCBmcm9tKSk7XG4gIGQubmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICByZW1vdmVDbGFzc2VzLmFwcGx5KHZvaWQgMCwgW25vZGVdLmNvbmNhdChmcm9tKSk7XG4gICAgYWRkQ2xhc3Nlcy5hcHBseSh2b2lkIDAsIFtub2RlXS5jb25jYXQodG8pKTtcbiAgICBkLmFkZCh3YWl0Rm9yVHJhbnNpdGlvbihub2RlLCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICByZW1vdmVDbGFzc2VzLmFwcGx5KHZvaWQgMCwgW25vZGVdLmNvbmNhdCh0bywgYmFzZSkpO1xuICAgICAgYWRkQ2xhc3Nlcy5hcHBseSh2b2lkIDAsIFtub2RlXS5jb25jYXQoZW50ZXJlZCkpO1xuICAgICAgcmV0dXJuIF9kb25lKHJlYXNvbik7XG4gICAgfSkpO1xuICB9KTsgLy8gT25jZSB3ZSBnZXQgZGlzcG9zZWQsIHdlIHNob3VsZCBlbnN1cmUgdGhhdCB3ZSBjbGVhbnVwIGFmdGVyIG91cnNlbHZlcy4gSW4gY2FzZSBvZiBhbiB1bm1vdW50LFxuICAvLyB0aGUgbm9kZSBpdHNlbGYgd2lsbCBiZSBudWxsaWZpZWQgYW5kIHdpbGwgYmUgYSBuby1vcC4gSW4gY2FzZSBvZiBhIGZ1bGwgdHJhbnNpdGlvbiB0aGUgY2xhc3Nlc1xuICAvLyBhcmUgYWxyZWFkeSByZW1vdmVkIHdoaWNoIGlzIGFsc28gYSBuby1vcC4gSG93ZXZlciBpZiB5b3UgZ28gZnJvbSBlbnRlciAtPiBsZWF2ZSBtaWQtdHJhbnNpdGlvblxuICAvLyB0aGVuIHdlIGhhdmUgc29tZSBsZWZ0b3ZlcnMgdGhhdCBzaG91bGQgYmUgY2xlYW5lZC5cblxuICBkLmFkZChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHJlbW92ZUNsYXNzZXMuYXBwbHkodm9pZCAwLCBbbm9kZV0uY29uY2F0KGJhc2UsIGZyb20sIHRvLCBlbnRlcmVkKSk7XG4gIH0pOyAvLyBXaGVuIHdlIGdldCBkaXNwb3NlZCBlYXJseSwgdGhhbiB3ZSBzaG91bGQgYWxzbyBjYWxsIHRoZSBkb25lIG1ldGhvZCBidXQgc3dpdGNoIHRoZSByZWFzb24uXG5cbiAgZC5hZGQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZG9uZShSZWFzb24uQ2FuY2VsbGVkKTtcbiAgfSk7XG4gIHJldHVybiBkLmRpc3Bvc2U7XG59XG5cbmV4cG9ydCB7IFJlYXNvbiwgdHJhbnNpdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNpdGlvbi5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBjcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UgYXMgX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSB9IGZyb20gJy4uL192aXJ0dWFsL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMuanMnO1xuXG5mdW5jdGlvbiBkaXNwb3NhYmxlcygpIHtcbiAgdmFyIGRpc3Bvc2FibGVzID0gW107XG4gIHZhciBhcGkgPSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lOiBmdW5jdGlvbiAoX3JlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkge1xuICAgICAgICByZXR1cm4gX3JlcXVlc3RBbmltYXRpb25GcmFtZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lLnRvU3RyaW5nKCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgIH0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICBhcGkuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gICAgICB9KTtcbiAgICB9KSxcbiAgICBuZXh0RnJhbWU6IGZ1bmN0aW9uIG5leHRGcmFtZSgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBhcGkucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYXBpLnJlcXVlc3RBbmltYXRpb25GcmFtZS5hcHBseShhcGksIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoX3NldFRpbWVvdXQpIHtcbiAgICAgIGZ1bmN0aW9uIHNldFRpbWVvdXQoKSB7XG4gICAgICAgIHJldHVybiBfc2V0VGltZW91dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICBzZXRUaW1lb3V0LnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3NldFRpbWVvdXQudG9TdHJpbmcoKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0O1xuICAgIH0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRpbWVyID0gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICBhcGkuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9KTtcbiAgICB9KSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZChjYikge1xuICAgICAgZGlzcG9zYWJsZXMucHVzaChjYik7XG4gICAgfSxcbiAgICBkaXNwb3NlOiBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShkaXNwb3NhYmxlcy5zcGxpY2UoMCkpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgICAgICB2YXIgZGlzcG9zZSA9IF9zdGVwLnZhbHVlO1xuICAgICAgICBkaXNwb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICByZXR1cm4gYXBpO1xufVxuXG5leHBvcnQgeyBkaXNwb3NhYmxlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzcG9zYWJsZXMuZXNtLmpzLm1hcFxuIiwiZnVuY3Rpb24gb25jZShjYikge1xuICB2YXIgc3RhdGUgPSB7XG4gICAgY2FsbGVkOiBmYWxzZVxuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzdGF0ZS5jYWxsZWQpIHJldHVybjtcbiAgICBzdGF0ZS5jYWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiBjYi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmV4cG9ydCB7IG9uY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uY2UuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgZXh0ZW5kcyBhcyBfZXh0ZW5kcywgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBhcyBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSB9IGZyb20gJy4uLy4uL192aXJ0dWFsL19yb2xsdXBQbHVnaW5CYWJlbEhlbHBlcnMuanMnO1xuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50LCBoLCBpbmplY3QsIHJlZiwgY29tcHV0ZWQsIG9uTW91bnRlZCwgb25Vbm1vdW50ZWQsIHdhdGNoRWZmZWN0LCB3YXRjaCwgcHJvdmlkZSB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBtYXRjaCB9IGZyb20gJy4uLy4uL3V0aWxzL21hdGNoLmVzbS5qcyc7XG5pbXBvcnQgeyByZW5kZXIsIFJlbmRlclN0cmF0ZWd5LCBGZWF0dXJlcyB9IGZyb20gJy4uLy4uL3V0aWxzL3JlbmRlci5lc20uanMnO1xuaW1wb3J0IHsgdXNlSWQgfSBmcm9tICcuLi8uLi9ob29rcy91c2UtaWQuZXNtLmpzJztcbmltcG9ydCB7IGRvbSB9IGZyb20gJy4uLy4uL3V0aWxzL2RvbS5lc20uanMnO1xuaW1wb3J0IHsgaGFzT3BlbkNsb3NlZCwgdXNlT3BlbkNsb3NlZFByb3ZpZGVyLCBTdGF0ZSwgdXNlT3BlbkNsb3NlZCB9IGZyb20gJy4uLy4uL2ludGVybmFsL29wZW4tY2xvc2VkLmVzbS5qcyc7XG5pbXBvcnQgeyB0cmFuc2l0aW9uLCBSZWFzb24gfSBmcm9tICcuL3V0aWxzL3RyYW5zaXRpb24uZXNtLmpzJztcblxuZnVuY3Rpb24gc3BsaXRDbGFzc2VzKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuXG4gIHJldHVybiBjbGFzc2VzLnNwbGl0KCcgJykuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lLnRyaW0oKS5sZW5ndGggPiAxO1xuICB9KTtcbn1cblxudmFyIFRyYW5zaXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1N5bWJvbCgnVHJhbnNpdGlvbkNvbnRleHQnKTtcbnZhciBUcmVlU3RhdGVzO1xuXG4oZnVuY3Rpb24gKFRyZWVTdGF0ZXMpIHtcbiAgVHJlZVN0YXRlc1tcIlZpc2libGVcIl0gPSBcInZpc2libGVcIjtcbiAgVHJlZVN0YXRlc1tcIkhpZGRlblwiXSA9IFwiaGlkZGVuXCI7XG59KShUcmVlU3RhdGVzIHx8IChUcmVlU3RhdGVzID0ge30pKTtcblxuZnVuY3Rpb24gaGFzVHJhbnNpdGlvbkNvbnRleHQoKSB7XG4gIHJldHVybiBpbmplY3QoVHJhbnNpdGlvbkNvbnRleHQsIG51bGwpICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiB1c2VUcmFuc2l0aW9uQ29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHQgPSBpbmplY3QoVHJhbnNpdGlvbkNvbnRleHQsIG51bGwpO1xuXG4gIGlmIChjb250ZXh0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBIDxUcmFuc2l0aW9uQ2hpbGQgLz4gaXMgdXNlZCBidXQgaXQgaXMgbWlzc2luZyBhIHBhcmVudCA8VHJhbnNpdGlvblJvb3QgLz4uJyk7XG4gIH1cblxuICByZXR1cm4gY29udGV4dDtcbn1cblxuZnVuY3Rpb24gdXNlUGFyZW50TmVzdGluZygpIHtcbiAgdmFyIGNvbnRleHQgPSBpbmplY3QoTmVzdGluZ0NvbnRleHQsIG51bGwpO1xuXG4gIGlmIChjb250ZXh0ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBIDxUcmFuc2l0aW9uQ2hpbGQgLz4gaXMgdXNlZCBidXQgaXQgaXMgbWlzc2luZyBhIHBhcmVudCA8VHJhbnNpdGlvblJvb3QgLz4uJyk7XG4gIH1cblxuICByZXR1cm4gY29udGV4dDtcbn1cblxudmFyIE5lc3RpbmdDb250ZXh0ID0gLyojX19QVVJFX18qL1N5bWJvbCgnTmVzdGluZ0NvbnRleHQnKTtcblxuZnVuY3Rpb24gaGFzQ2hpbGRyZW4oYmFnKSB7XG4gIGlmICgnY2hpbGRyZW4nIGluIGJhZykgcmV0dXJuIGhhc0NoaWxkcmVuKGJhZy5jaGlsZHJlbik7XG4gIHJldHVybiBiYWcudmFsdWUuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgICByZXR1cm4gc3RhdGUgPT09IFRyZWVTdGF0ZXMuVmlzaWJsZTtcbiAgfSkubGVuZ3RoID4gMDtcbn1cblxuZnVuY3Rpb24gdXNlTmVzdGluZyhkb25lKSB7XG4gIHZhciB0cmFuc2l0aW9uYWJsZUNoaWxkcmVuID0gcmVmKFtdKTtcbiAgdmFyIG1vdW50ZWQgPSByZWYoZmFsc2UpO1xuICBvbk1vdW50ZWQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtb3VudGVkLnZhbHVlID0gdHJ1ZTtcbiAgfSk7XG4gIG9uVW5tb3VudGVkKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW91bnRlZC52YWx1ZSA9IGZhbHNlO1xuICB9KTtcblxuICBmdW5jdGlvbiB1bnJlZ2lzdGVyKGNoaWxkSWQsIHN0cmF0ZWd5KSB7XG4gICAgdmFyIF9tYXRjaDtcblxuICAgIGlmIChzdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHJhdGVneSA9IFJlbmRlclN0cmF0ZWd5LkhpZGRlbjtcbiAgICB9XG5cbiAgICB2YXIgaWR4ID0gdHJhbnNpdGlvbmFibGVDaGlsZHJlbi52YWx1ZS5maW5kSW5kZXgoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICB2YXIgaWQgPSBfcmVmMi5pZDtcbiAgICAgIHJldHVybiBpZCA9PT0gY2hpbGRJZDtcbiAgICB9KTtcbiAgICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuO1xuICAgIG1hdGNoKHN0cmF0ZWd5LCAoX21hdGNoID0ge30sIF9tYXRjaFtSZW5kZXJTdHJhdGVneS5Vbm1vdW50XSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyYW5zaXRpb25hYmxlQ2hpbGRyZW4udmFsdWUuc3BsaWNlKGlkeCwgMSk7XG4gICAgfSwgX21hdGNoW1JlbmRlclN0cmF0ZWd5LkhpZGRlbl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0cmFuc2l0aW9uYWJsZUNoaWxkcmVuLnZhbHVlW2lkeF0uc3RhdGUgPSBUcmVlU3RhdGVzLkhpZGRlbjtcbiAgICB9LCBfbWF0Y2gpKTtcblxuICAgIGlmICghaGFzQ2hpbGRyZW4odHJhbnNpdGlvbmFibGVDaGlsZHJlbikgJiYgbW91bnRlZC52YWx1ZSkge1xuICAgICAgZG9uZSA9PSBudWxsID8gdm9pZCAwIDogZG9uZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyKGNoaWxkSWQpIHtcbiAgICB2YXIgY2hpbGQgPSB0cmFuc2l0aW9uYWJsZUNoaWxkcmVuLnZhbHVlLmZpbmQoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgaWQgPSBfcmVmMy5pZDtcbiAgICAgIHJldHVybiBpZCA9PT0gY2hpbGRJZDtcbiAgICB9KTtcblxuICAgIGlmICghY2hpbGQpIHtcbiAgICAgIHRyYW5zaXRpb25hYmxlQ2hpbGRyZW4udmFsdWUucHVzaCh7XG4gICAgICAgIGlkOiBjaGlsZElkLFxuICAgICAgICBzdGF0ZTogVHJlZVN0YXRlcy5WaXNpYmxlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnN0YXRlICE9PSBUcmVlU3RhdGVzLlZpc2libGUpIHtcbiAgICAgIGNoaWxkLnN0YXRlID0gVHJlZVN0YXRlcy5WaXNpYmxlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdW5yZWdpc3RlcihjaGlsZElkLCBSZW5kZXJTdHJhdGVneS5Vbm1vdW50KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogdHJhbnNpdGlvbmFibGVDaGlsZHJlbixcbiAgICByZWdpc3RlcjogcmVnaXN0ZXIsXG4gICAgdW5yZWdpc3RlcjogdW5yZWdpc3RlclxuICB9O1xufSAvLyAtLS1cblxuXG52YXIgVHJhbnNpdGlvbkNoaWxkUmVuZGVyRmVhdHVyZXMgPSBGZWF0dXJlcy5SZW5kZXJTdHJhdGVneTtcbnZhciBUcmFuc2l0aW9uQ2hpbGQgPSAvKiNfX1BVUkVfXyovZGVmaW5lQ29tcG9uZW50KHtcbiAgcHJvcHM6IHtcbiAgICBhczoge1xuICAgICAgdHlwZTogW09iamVjdCwgU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnZGl2J1xuICAgIH0sXG4gICAgc2hvdzoge1xuICAgICAgdHlwZTogW0Jvb2xlYW5dLFxuICAgICAgXCJkZWZhdWx0XCI6IG51bGxcbiAgICB9LFxuICAgIHVubW91bnQ6IHtcbiAgICAgIHR5cGU6IFtCb29sZWFuXSxcbiAgICAgIFwiZGVmYXVsdFwiOiB0cnVlXG4gICAgfSxcbiAgICBhcHBlYXI6IHtcbiAgICAgIHR5cGU6IFtCb29sZWFuXSxcbiAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgIH0sXG4gICAgZW50ZXI6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICcnXG4gICAgfSxcbiAgICBlbnRlckZyb206IHtcbiAgICAgIHR5cGU6IFtTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICcnXG4gICAgfSxcbiAgICBlbnRlclRvOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnJ1xuICAgIH0sXG4gICAgZW50ZXJlZDoge1xuICAgICAgdHlwZTogW1N0cmluZ10sXG4gICAgICBcImRlZmF1bHRcIjogJydcbiAgICB9LFxuICAgIGxlYXZlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnJ1xuICAgIH0sXG4gICAgbGVhdmVGcm9tOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnJ1xuICAgIH0sXG4gICAgbGVhdmVUbzoge1xuICAgICAgdHlwZTogW1N0cmluZ10sXG4gICAgICBcImRlZmF1bHRcIjogJydcbiAgICB9XG4gIH0sXG4gIGVtaXRzOiB7XG4gICAgYmVmb3JlRW50ZXI6IGZ1bmN0aW9uIGJlZm9yZUVudGVyKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBhZnRlckVudGVyOiBmdW5jdGlvbiBhZnRlckVudGVyKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBiZWZvcmVMZWF2ZTogZnVuY3Rpb24gYmVmb3JlTGVhdmUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGFmdGVyTGVhdmU6IGZ1bmN0aW9uIGFmdGVyTGVhdmUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyJDEoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLnJlbmRlckFzUm9vdCkge1xuICAgICAgcmV0dXJuIGgoVHJhbnNpdGlvblJvb3QsIF9leHRlbmRzKHt9LCB0aGlzLiRwcm9wcywge1xuICAgICAgICBvbkJlZm9yZUVudGVyOiBmdW5jdGlvbiBvbkJlZm9yZUVudGVyKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy4kZW1pdCgnYmVmb3JlRW50ZXInKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25BZnRlckVudGVyOiBmdW5jdGlvbiBvbkFmdGVyRW50ZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLiRlbWl0KCdhZnRlckVudGVyJyk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQmVmb3JlTGVhdmU6IGZ1bmN0aW9uIG9uQmVmb3JlTGVhdmUoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLiRlbWl0KCdiZWZvcmVMZWF2ZScpO1xuICAgICAgICB9LFxuICAgICAgICBvbkFmdGVyTGVhdmU6IGZ1bmN0aW9uIG9uQWZ0ZXJMZWF2ZSgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuJGVtaXQoJ2FmdGVyTGVhdmUnKTtcbiAgICAgICAgfVxuICAgICAgfSksIHRoaXMuJHNsb3RzKTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkJHByb3BzID0gdGhpcy4kcHJvcHMsXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyQkcHJvcHMsIFtcImFwcGVhclwiLCBcInNob3dcIiwgXCJlbnRlclwiLCBcImVudGVyRnJvbVwiLCBcImVudGVyVG9cIiwgXCJlbnRlcmVkXCIsIFwibGVhdmVcIiwgXCJsZWF2ZUZyb21cIiwgXCJsZWF2ZVRvXCJdKTtcblxuICAgIHZhciBwcm9wc1dlQ29udHJvbCA9IHtcbiAgICAgIHJlZjogJ2VsJ1xuICAgIH07XG4gICAgdmFyIHBhc3N0aHJvdWdoUHJvcHMgPSByZXN0O1xuICAgIHJldHVybiByZW5kZXIoe1xuICAgICAgcHJvcHM6IF9leHRlbmRzKHt9LCBwYXNzdGhyb3VnaFByb3BzLCBwcm9wc1dlQ29udHJvbCksXG4gICAgICBzbG90OiB7fSxcbiAgICAgIHNsb3RzOiB0aGlzLiRzbG90cyxcbiAgICAgIGF0dHJzOiB0aGlzLiRhdHRycyxcbiAgICAgIGZlYXR1cmVzOiBUcmFuc2l0aW9uQ2hpbGRSZW5kZXJGZWF0dXJlcyxcbiAgICAgIHZpc2libGU6IHRoaXMuc3RhdGUgPT09IFRyZWVTdGF0ZXMuVmlzaWJsZSxcbiAgICAgIG5hbWU6ICdUcmFuc2l0aW9uQ2hpbGQnXG4gICAgfSk7XG4gIH0sXG4gIHNldHVwOiBmdW5jdGlvbiBzZXR1cChwcm9wcywgX3JlZjQpIHtcbiAgICB2YXIgZW1pdCA9IF9yZWY0LmVtaXQ7XG5cbiAgICBpZiAoIWhhc1RyYW5zaXRpb25Db250ZXh0KCkgJiYgaGFzT3BlbkNsb3NlZCgpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXJBc1Jvb3Q6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW5lciA9IHJlZihudWxsKTtcbiAgICB2YXIgc3RhdGUgPSByZWYoVHJlZVN0YXRlcy5WaXNpYmxlKTtcbiAgICB2YXIgc3RyYXRlZ3kgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcHJvcHMudW5tb3VudCA/IFJlbmRlclN0cmF0ZWd5LlVubW91bnQgOiBSZW5kZXJTdHJhdGVneS5IaWRkZW47XG4gICAgfSk7XG5cbiAgICB2YXIgX3VzZVRyYW5zaXRpb25Db250ZXh0ID0gdXNlVHJhbnNpdGlvbkNvbnRleHQoKSxcbiAgICAgICAgc2hvdyA9IF91c2VUcmFuc2l0aW9uQ29udGV4dC5zaG93LFxuICAgICAgICBhcHBlYXIgPSBfdXNlVHJhbnNpdGlvbkNvbnRleHQuYXBwZWFyO1xuXG4gICAgdmFyIF91c2VQYXJlbnROZXN0aW5nID0gdXNlUGFyZW50TmVzdGluZygpLFxuICAgICAgICByZWdpc3RlciA9IF91c2VQYXJlbnROZXN0aW5nLnJlZ2lzdGVyLFxuICAgICAgICB1bnJlZ2lzdGVyID0gX3VzZVBhcmVudE5lc3RpbmcudW5yZWdpc3RlcjtcblxuICAgIHZhciBpbml0aWFsID0ge1xuICAgICAgdmFsdWU6IHRydWVcbiAgICB9O1xuICAgIHZhciBpZCA9IHVzZUlkKCk7XG4gICAgdmFyIGlzVHJhbnNpdGlvbmluZyA9IHtcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH07XG4gICAgdmFyIG5lc3RpbmcgPSB1c2VOZXN0aW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFdoZW4gYWxsIGNoaWxkcmVuIGhhdmUgYmVlbiB1bm1vdW50ZWQgd2UgY2FuIG9ubHkgaGlkZSBvdXJzZWx2ZXMgaWYgYW5kIG9ubHkgaWYgd2UgYXJlIG5vdFxuICAgICAgLy8gdHJhbnNpdGlvbmluZyBvdXJzZWx2ZXMuIE90aGVyd2lzZSB3ZSB3b3VsZCB1bm1vdW50IGJlZm9yZSB0aGUgdHJhbnNpdGlvbnMgYXJlIGZpbmlzaGVkLlxuICAgICAgaWYgKCFpc1RyYW5zaXRpb25pbmcudmFsdWUpIHtcbiAgICAgICAgc3RhdGUudmFsdWUgPSBUcmVlU3RhdGVzLkhpZGRlbjtcbiAgICAgICAgdW5yZWdpc3RlcihpZCk7XG4gICAgICAgIGVtaXQoJ2FmdGVyTGVhdmUnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvbk1vdW50ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHVucmVnaXN0ZXIgPSByZWdpc3RlcihpZCk7XG4gICAgICBvblVubW91bnRlZCh1bnJlZ2lzdGVyKTtcbiAgICB9KTtcbiAgICB3YXRjaEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX21hdGNoMjtcblxuICAgICAgLy8gSWYgd2UgYXJlIGluIGFub3RoZXIgbW9kZSB0aGFuIHRoZSBIaWRkZW4gbW9kZSB0aGVuIGlnbm9yZVxuICAgICAgaWYgKHN0cmF0ZWd5LnZhbHVlICE9PSBSZW5kZXJTdHJhdGVneS5IaWRkZW4pIHJldHVybjtcbiAgICAgIGlmICghaWQpIHJldHVybjsgLy8gTWFrZSBzdXJlIHRoYXQgd2UgYXJlIHZpc2libGVcblxuICAgICAgaWYgKHNob3cgJiYgc3RhdGUudmFsdWUgIT09IFRyZWVTdGF0ZXMuVmlzaWJsZSkge1xuICAgICAgICBzdGF0ZS52YWx1ZSA9IFRyZWVTdGF0ZXMuVmlzaWJsZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtYXRjaChzdGF0ZS52YWx1ZSwgKF9tYXRjaDIgPSB7fSwgX21hdGNoMltUcmVlU3RhdGVzLkhpZGRlbl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB1bnJlZ2lzdGVyKGlkKTtcbiAgICAgIH0sIF9tYXRjaDJbVHJlZVN0YXRlcy5WaXNpYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyKGlkKTtcbiAgICAgIH0sIF9tYXRjaDIpKTtcbiAgICB9KTtcbiAgICB2YXIgZW50ZXJDbGFzc2VzID0gc3BsaXRDbGFzc2VzKHByb3BzLmVudGVyKTtcbiAgICB2YXIgZW50ZXJGcm9tQ2xhc3NlcyA9IHNwbGl0Q2xhc3Nlcyhwcm9wcy5lbnRlckZyb20pO1xuICAgIHZhciBlbnRlclRvQ2xhc3NlcyA9IHNwbGl0Q2xhc3Nlcyhwcm9wcy5lbnRlclRvKTtcbiAgICB2YXIgZW50ZXJlZENsYXNzZXMgPSBzcGxpdENsYXNzZXMocHJvcHMuZW50ZXJlZCk7XG4gICAgdmFyIGxlYXZlQ2xhc3NlcyA9IHNwbGl0Q2xhc3Nlcyhwcm9wcy5sZWF2ZSk7XG4gICAgdmFyIGxlYXZlRnJvbUNsYXNzZXMgPSBzcGxpdENsYXNzZXMocHJvcHMubGVhdmVGcm9tKTtcbiAgICB2YXIgbGVhdmVUb0NsYXNzZXMgPSBzcGxpdENsYXNzZXMocHJvcHMubGVhdmVUbyk7XG4gICAgb25Nb3VudGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhdGNoRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHN0YXRlLnZhbHVlID09PSBUcmVlU3RhdGVzLlZpc2libGUpIHtcbiAgICAgICAgICB2YXIgZG9tRWxlbWVudCA9IGRvbShjb250YWluZXIpOyAvLyBXaGVuIHlvdSByZXR1cm4gYG51bGxgIGZyb20gYSBjb21wb25lbnQsIHRoZSBhY3R1YWwgRE9NIHJlZmVyZW5jZSB3aWxsXG4gICAgICAgICAgLy8gYmUgYW4gZW1wdHkgY29tbWVudC4uLiBUaGlzIG1lYW5zIHRoYXQgd2UgY2FuIG5ldmVyIGNoZWNrIGZvciB0aGUgRE9NXG4gICAgICAgICAgLy8gbm9kZSB0byBiZSBgbnVsbGAuIFNvIGluc3RlYWQgd2UgY2hlY2sgZm9yIGFuIGVtcHR5IGNvbW1lbnQuXG5cbiAgICAgICAgICB2YXIgaXNFbXB0eURPTU5vZGUgPSBkb21FbGVtZW50IGluc3RhbmNlb2YgQ29tbWVudCAmJiBkb21FbGVtZW50LmRhdGEgPT09ICcnO1xuXG4gICAgICAgICAgaWYgKGlzRW1wdHlET01Ob2RlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RpZCB5b3UgZm9yZ2V0IHRvIHBhc3N0aHJvdWdoIHRoZSBgcmVmYCB0byB0aGUgYWN0dWFsIERPTSBub2RlPycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBleGVjdXRlVHJhbnNpdGlvbihvbkludmFsaWRhdGUpIHtcbiAgICAgIC8vIFNraXBwaW5nIGluaXRpYWwgdHJhbnNpdGlvblxuICAgICAgdmFyIHNraXAgPSBpbml0aWFsLnZhbHVlICYmICFhcHBlYXIudmFsdWU7XG4gICAgICB2YXIgbm9kZSA9IGRvbShjb250YWluZXIpO1xuICAgICAgaWYgKCFub2RlIHx8ICEobm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkgcmV0dXJuO1xuICAgICAgaWYgKHNraXApIHJldHVybjtcbiAgICAgIGlzVHJhbnNpdGlvbmluZy52YWx1ZSA9IHRydWU7XG4gICAgICBpZiAoc2hvdy52YWx1ZSkgZW1pdCgnYmVmb3JlRW50ZXInKTtcbiAgICAgIGlmICghc2hvdy52YWx1ZSkgZW1pdCgnYmVmb3JlTGVhdmUnKTtcbiAgICAgIG9uSW52YWxpZGF0ZShzaG93LnZhbHVlID8gdHJhbnNpdGlvbihub2RlLCBlbnRlckNsYXNzZXMsIGVudGVyRnJvbUNsYXNzZXMsIGVudGVyVG9DbGFzc2VzLCBlbnRlcmVkQ2xhc3NlcywgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICBpc1RyYW5zaXRpb25pbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHJlYXNvbiA9PT0gUmVhc29uLkZpbmlzaGVkKSBlbWl0KCdhZnRlckVudGVyJyk7XG4gICAgICB9KSA6IHRyYW5zaXRpb24obm9kZSwgbGVhdmVDbGFzc2VzLCBsZWF2ZUZyb21DbGFzc2VzLCBsZWF2ZVRvQ2xhc3NlcywgZW50ZXJlZENsYXNzZXMsIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nLnZhbHVlID0gZmFsc2U7XG4gICAgICAgIGlmIChyZWFzb24gIT09IFJlYXNvbi5GaW5pc2hlZCkgcmV0dXJuOyAvLyBXaGVuIHdlIGRvbid0IGhhdmUgY2hpbGRyZW4gYW55bW9yZSB3ZSBjYW4gc2FmZWx5IHVucmVnaXN0ZXIgZnJvbSB0aGUgcGFyZW50IGFuZCBoaWRlXG4gICAgICAgIC8vIG91cnNlbHZlcy5cblxuICAgICAgICBpZiAoIWhhc0NoaWxkcmVuKG5lc3RpbmcpKSB7XG4gICAgICAgICAgc3RhdGUudmFsdWUgPSBUcmVlU3RhdGVzLkhpZGRlbjtcbiAgICAgICAgICB1bnJlZ2lzdGVyKGlkKTtcbiAgICAgICAgICBlbWl0KCdhZnRlckxlYXZlJyk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvbk1vdW50ZWQoZnVuY3Rpb24gKCkge1xuICAgICAgd2F0Y2goW3Nob3csIGFwcGVhcl0sIGZ1bmN0aW9uIChfb2xkVmFsdWVzLCBfbmV3VmFsdWVzLCBvbkludmFsaWRhdGUpIHtcbiAgICAgICAgZXhlY3V0ZVRyYW5zaXRpb24ob25JbnZhbGlkYXRlKTtcbiAgICAgICAgaW5pdGlhbC52YWx1ZSA9IGZhbHNlO1xuICAgICAgfSwge1xuICAgICAgICBpbW1lZGlhdGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHByb3ZpZGUoTmVzdGluZ0NvbnRleHQsIG5lc3RpbmcpO1xuICAgIHVzZU9wZW5DbG9zZWRQcm92aWRlcihjb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX21hdGNoMztcblxuICAgICAgcmV0dXJuIG1hdGNoKHN0YXRlLnZhbHVlLCAoX21hdGNoMyA9IHt9LCBfbWF0Y2gzW1RyZWVTdGF0ZXMuVmlzaWJsZV0gPSBTdGF0ZS5PcGVuLCBfbWF0Y2gzW1RyZWVTdGF0ZXMuSGlkZGVuXSA9IFN0YXRlLkNsb3NlZCwgX21hdGNoMykpO1xuICAgIH0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgZWw6IGNvbnRhaW5lcixcbiAgICAgIHJlbmRlckFzUm9vdDogZmFsc2UsXG4gICAgICBzdGF0ZTogc3RhdGVcbiAgICB9O1xuICB9XG59KTsgLy8gLS0tXG5cbnZhciBUcmFuc2l0aW9uUm9vdCA9IC8qI19fUFVSRV9fKi9kZWZpbmVDb21wb25lbnQoe1xuICBpbmhlcml0QXR0cnM6IGZhbHNlLFxuICBwcm9wczoge1xuICAgIGFzOiB7XG4gICAgICB0eXBlOiBbT2JqZWN0LCBTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICdkaXYnXG4gICAgfSxcbiAgICBzaG93OiB7XG4gICAgICB0eXBlOiBbQm9vbGVhbl0sXG4gICAgICBcImRlZmF1bHRcIjogbnVsbFxuICAgIH0sXG4gICAgdW5tb3VudDoge1xuICAgICAgdHlwZTogW0Jvb2xlYW5dLFxuICAgICAgXCJkZWZhdWx0XCI6IHRydWVcbiAgICB9LFxuICAgIGFwcGVhcjoge1xuICAgICAgdHlwZTogW0Jvb2xlYW5dLFxuICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgfSxcbiAgICBlbnRlcjoge1xuICAgICAgdHlwZTogW1N0cmluZ10sXG4gICAgICBcImRlZmF1bHRcIjogJydcbiAgICB9LFxuICAgIGVudGVyRnJvbToge1xuICAgICAgdHlwZTogW1N0cmluZ10sXG4gICAgICBcImRlZmF1bHRcIjogJydcbiAgICB9LFxuICAgIGVudGVyVG86IHtcbiAgICAgIHR5cGU6IFtTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICcnXG4gICAgfSxcbiAgICBlbnRlcmVkOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnJ1xuICAgIH0sXG4gICAgbGVhdmU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICcnXG4gICAgfSxcbiAgICBsZWF2ZUZyb206IHtcbiAgICAgIHR5cGU6IFtTdHJpbmddLFxuICAgICAgXCJkZWZhdWx0XCI6ICcnXG4gICAgfSxcbiAgICBsZWF2ZVRvOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nXSxcbiAgICAgIFwiZGVmYXVsdFwiOiAnJ1xuICAgIH1cbiAgfSxcbiAgZW1pdHM6IHtcbiAgICBiZWZvcmVFbnRlcjogZnVuY3Rpb24gYmVmb3JlRW50ZXIoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGFmdGVyRW50ZXI6IGZ1bmN0aW9uIGFmdGVyRW50ZXIoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGJlZm9yZUxlYXZlOiBmdW5jdGlvbiBiZWZvcmVMZWF2ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgYWZ0ZXJMZWF2ZTogZnVuY3Rpb24gYWZ0ZXJMZWF2ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIkMSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyQkcHJvcHMyID0gdGhpcy4kcHJvcHMsXG4gICAgICAgIHVubW91bnQgPSBfdGhpcyQkcHJvcHMyLnVubW91bnQsXG4gICAgICAgIHBhc3NUaHJvdWdoUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyQkcHJvcHMyLCBbXCJzaG93XCIsIFwiYXBwZWFyXCIsIFwidW5tb3VudFwiXSk7XG5cbiAgICB2YXIgc2hhcmVkUHJvcHMgPSB7XG4gICAgICB1bm1vdW50OiB1bm1vdW50XG4gICAgfTtcbiAgICByZXR1cm4gcmVuZGVyKHtcbiAgICAgIHByb3BzOiBfZXh0ZW5kcyh7fSwgc2hhcmVkUHJvcHMsIHtcbiAgICAgICAgYXM6ICd0ZW1wbGF0ZSdcbiAgICAgIH0pLFxuICAgICAgc2xvdDoge30sXG4gICAgICBzbG90czogX2V4dGVuZHMoe30sIHRoaXMuJHNsb3RzLCB7XG4gICAgICAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgICByZXR1cm4gW2goVHJhbnNpdGlvbkNoaWxkLCBfZXh0ZW5kcyh7XG4gICAgICAgICAgICBvbkJlZm9yZUVudGVyOiBmdW5jdGlvbiBvbkJlZm9yZUVudGVyKCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLiRlbWl0KCdiZWZvcmVFbnRlcicpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQWZ0ZXJFbnRlcjogZnVuY3Rpb24gb25BZnRlckVudGVyKCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLiRlbWl0KCdhZnRlckVudGVyJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25CZWZvcmVMZWF2ZTogZnVuY3Rpb24gb25CZWZvcmVMZWF2ZSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi4kZW1pdCgnYmVmb3JlTGVhdmUnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkFmdGVyTGVhdmU6IGZ1bmN0aW9uIG9uQWZ0ZXJMZWF2ZSgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi4kZW1pdCgnYWZ0ZXJMZWF2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIF90aGlzMi4kYXR0cnMsIHNoYXJlZFByb3BzLCBwYXNzVGhyb3VnaFByb3BzKSwgX3RoaXMyLiRzbG90c1tcImRlZmF1bHRcIl0pXTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBhdHRyczoge30sXG4gICAgICBmZWF0dXJlczogVHJhbnNpdGlvbkNoaWxkUmVuZGVyRmVhdHVyZXMsXG4gICAgICB2aXNpYmxlOiB0aGlzLnN0YXRlID09PSBUcmVlU3RhdGVzLlZpc2libGUsXG4gICAgICBuYW1lOiAnVHJhbnNpdGlvbidcbiAgICB9KTtcbiAgfSxcbiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKHByb3BzKSB7XG4gICAgdmFyIHVzZXNPcGVuQ2xvc2VkU3RhdGUgPSB1c2VPcGVuQ2xvc2VkKCk7XG4gICAgdmFyIHNob3cgPSBjb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvcHMuc2hvdyA9PT0gbnVsbCAmJiB1c2VzT3BlbkNsb3NlZFN0YXRlICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBfbWF0Y2g0O1xuXG4gICAgICAgIHJldHVybiBtYXRjaCh1c2VzT3BlbkNsb3NlZFN0YXRlLnZhbHVlLCAoX21hdGNoNCA9IHt9LCBfbWF0Y2g0W1N0YXRlLk9wZW5dID0gdHJ1ZSwgX21hdGNoNFtTdGF0ZS5DbG9zZWRdID0gZmFsc2UsIF9tYXRjaDQpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3BzLnNob3c7XG4gICAgfSk7XG4gICAgd2F0Y2hFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFbdHJ1ZSwgZmFsc2VdLmluY2x1ZGVzKHNob3cudmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQSA8VHJhbnNpdGlvbiAvPiBpcyB1c2VkIGJ1dCBpdCBpcyBtaXNzaW5nIGEgYDpzaG93PVwidHJ1ZSB8IGZhbHNlXCJgIHByb3AuJyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdmFyIHN0YXRlID0gcmVmKHNob3cudmFsdWUgPyBUcmVlU3RhdGVzLlZpc2libGUgOiBUcmVlU3RhdGVzLkhpZGRlbik7XG4gICAgdmFyIG5lc3RpbmdCYWcgPSB1c2VOZXN0aW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0YXRlLnZhbHVlID0gVHJlZVN0YXRlcy5IaWRkZW47XG4gICAgfSk7XG4gICAgdmFyIGluaXRpYWwgPSB7XG4gICAgICB2YWx1ZTogdHJ1ZVxuICAgIH07XG4gICAgdmFyIHRyYW5zaXRpb25CYWcgPSB7XG4gICAgICBzaG93OiBzaG93LFxuICAgICAgYXBwZWFyOiBjb21wdXRlZChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5hcHBlYXIgfHwgIWluaXRpYWwudmFsdWU7XG4gICAgICB9KVxuICAgIH07XG4gICAgb25Nb3VudGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhdGNoRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5pdGlhbC52YWx1ZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzaG93LnZhbHVlKSB7XG4gICAgICAgICAgc3RhdGUudmFsdWUgPSBUcmVlU3RhdGVzLlZpc2libGU7XG4gICAgICAgIH0gZWxzZSBpZiAoIWhhc0NoaWxkcmVuKG5lc3RpbmdCYWcpKSB7XG4gICAgICAgICAgc3RhdGUudmFsdWUgPSBUcmVlU3RhdGVzLkhpZGRlbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcHJvdmlkZShOZXN0aW5nQ29udGV4dCwgbmVzdGluZ0JhZyk7XG4gICAgcHJvdmlkZShUcmFuc2l0aW9uQ29udGV4dCwgdHJhbnNpdGlvbkJhZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNob3c6IHNob3dcbiAgICB9O1xuICB9XG59KTtcblxuZXhwb3J0IHsgVHJhbnNpdGlvbkNoaWxkLCBUcmFuc2l0aW9uUm9vdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNpdGlvbi5lc20uanMubWFwXG4iLCJ2YXIgaWQgPSAwO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUlkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxuZnVuY3Rpb24gdXNlSWQoKSB7XG4gIHJldHVybiBnZW5lcmF0ZUlkKCk7XG59XG5cbmV4cG9ydCB7IHVzZUlkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2UtaWQuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgaW5qZWN0LCBwcm92aWRlIH0gZnJvbSAndnVlJztcblxudmFyIENvbnRleHQgPSAvKiNfX1BVUkVfXyovU3ltYm9sKCdDb250ZXh0Jyk7XG52YXIgU3RhdGU7XG5cbihmdW5jdGlvbiAoU3RhdGUpIHtcbiAgU3RhdGVbU3RhdGVbXCJPcGVuXCJdID0gMF0gPSBcIk9wZW5cIjtcbiAgU3RhdGVbU3RhdGVbXCJDbG9zZWRcIl0gPSAxXSA9IFwiQ2xvc2VkXCI7XG59KShTdGF0ZSB8fCAoU3RhdGUgPSB7fSkpO1xuXG5mdW5jdGlvbiBoYXNPcGVuQ2xvc2VkKCkge1xuICByZXR1cm4gdXNlT3BlbkNsb3NlZCgpICE9PSBudWxsO1xufVxuZnVuY3Rpb24gdXNlT3BlbkNsb3NlZCgpIHtcbiAgcmV0dXJuIGluamVjdChDb250ZXh0LCBudWxsKTtcbn1cbmZ1bmN0aW9uIHVzZU9wZW5DbG9zZWRQcm92aWRlcih2YWx1ZSkge1xuICBwcm92aWRlKENvbnRleHQsIHZhbHVlKTtcbn1cblxuZXhwb3J0IHsgU3RhdGUsIGhhc09wZW5DbG9zZWQsIHVzZU9wZW5DbG9zZWQsIHVzZU9wZW5DbG9zZWRQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3Blbi1jbG9zZWQuZXNtLmpzLm1hcFxuIiwiLy8gVE9ETzogVGhpcyBtdXN0IGFscmVhZHkgZXhpc3Qgc29tZXdoZXJlLCByaWdodD8g8J+klFxuLy8gUmVmOiBodHRwczovL3d3dy53My5vcmcvVFIvdWlldmVudHMta2V5LyNuYW1lZC1rZXktYXR0cmlidXRlLXZhbHVlc1xudmFyIEtleXM7XG5cbihmdW5jdGlvbiAoS2V5cykge1xuICBLZXlzW1wiU3BhY2VcIl0gPSBcIiBcIjtcbiAgS2V5c1tcIkVudGVyXCJdID0gXCJFbnRlclwiO1xuICBLZXlzW1wiRXNjYXBlXCJdID0gXCJFc2NhcGVcIjtcbiAgS2V5c1tcIkJhY2tzcGFjZVwiXSA9IFwiQmFja3NwYWNlXCI7XG4gIEtleXNbXCJBcnJvd0xlZnRcIl0gPSBcIkFycm93TGVmdFwiO1xuICBLZXlzW1wiQXJyb3dVcFwiXSA9IFwiQXJyb3dVcFwiO1xuICBLZXlzW1wiQXJyb3dSaWdodFwiXSA9IFwiQXJyb3dSaWdodFwiO1xuICBLZXlzW1wiQXJyb3dEb3duXCJdID0gXCJBcnJvd0Rvd25cIjtcbiAgS2V5c1tcIkhvbWVcIl0gPSBcIkhvbWVcIjtcbiAgS2V5c1tcIkVuZFwiXSA9IFwiRW5kXCI7XG4gIEtleXNbXCJQYWdlVXBcIl0gPSBcIlBhZ2VVcFwiO1xuICBLZXlzW1wiUGFnZURvd25cIl0gPSBcIlBhZ2VEb3duXCI7XG4gIEtleXNbXCJUYWJcIl0gPSBcIlRhYlwiO1xufSkoS2V5cyB8fCAoS2V5cyA9IHt9KSk7XG5cbmV4cG9ydCB7IEtleXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtleWJvYXJkLmVzbS5qcy5tYXBcbiIsImZ1bmN0aW9uIGRvbShyZWYpIHtcbiAgdmFyIF9yZWYkdmFsdWUkJGVsO1xuXG4gIGlmIChyZWYgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIGlmIChyZWYudmFsdWUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gIHJldHVybiAoX3JlZiR2YWx1ZSQkZWwgPSByZWYudmFsdWUuJGVsKSAhPSBudWxsID8gX3JlZiR2YWx1ZSQkZWwgOiByZWYudmFsdWU7XG59XG5cbmV4cG9ydCB7IGRvbSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tLmVzbS5qcy5tYXBcbiIsImZ1bmN0aW9uIG1hdGNoKHZhbHVlLCBsb29rdXApIHtcbiAgaWYgKHZhbHVlIGluIGxvb2t1cCkge1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IGxvb2t1cFt2YWx1ZV07XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMiA/IF9sZW4gLSAyIDogMCksIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZW9mIHJldHVyblZhbHVlID09PSAnZnVuY3Rpb24nID8gcmV0dXJuVmFsdWUuYXBwbHkodm9pZCAwLCBhcmdzKSA6IHJldHVyblZhbHVlO1xuICB9XG5cbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKFwiVHJpZWQgdG8gaGFuZGxlIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGJ1dCB0aGVyZSBpcyBubyBoYW5kbGVyIGRlZmluZWQuIE9ubHkgZGVmaW5lZCBoYW5kbGVycyBhcmU6IFwiICsgT2JqZWN0LmtleXMobG9va3VwKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBcIlxcXCJcIiArIGtleSArIFwiXFxcIlwiO1xuICB9KS5qb2luKCcsICcpICsgXCIuXCIpO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVycm9yLCBtYXRjaCk7XG4gIHRocm93IGVycm9yO1xufVxuXG5leHBvcnQgeyBtYXRjaCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0Y2guZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBhcyBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSwgZXh0ZW5kcyBhcyBfZXh0ZW5kcywgY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIGFzIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UgfSBmcm9tICcuLi9fdmlydHVhbC9fcm9sbHVwUGx1Z2luQmFiZWxIZWxwZXJzLmpzJztcbmltcG9ydCB7IGNsb25lVk5vZGUsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgbWF0Y2ggfSBmcm9tICcuL21hdGNoLmVzbS5qcyc7XG5cbnZhciBGZWF0dXJlcztcblxuKGZ1bmN0aW9uIChGZWF0dXJlcykge1xuICAvKiogTm8gZmVhdHVyZXMgYXQgYWxsICovXG4gIEZlYXR1cmVzW0ZlYXR1cmVzW1wiTm9uZVwiXSA9IDBdID0gXCJOb25lXCI7XG4gIC8qKlxyXG4gICAqIFdoZW4gdXNlZCwgdGhpcyB3aWxsIGFsbG93IHVzIHRvIHVzZSBvbmUgb2YgdGhlIHJlbmRlciBzdHJhdGVnaWVzLlxyXG4gICAqXHJcbiAgICogKipUaGUgcmVuZGVyIHN0cmF0ZWdpZXMgYXJlOioqXHJcbiAgICogICAgLSAqKlVubW91bnQqKiAgIF8oV2lsbCB1bm1vdW50IHRoZSBjb21wb25lbnQuKV9cclxuICAgKiAgICAtICoqSGlkZGVuKiogICAgXyhXaWxsIGhpZGUgdGhlIGNvbXBvbmVudCB1c2luZyB0aGUgW2hpZGRlbl0gYXR0cmlidXRlLilfXHJcbiAgICovXG5cbiAgRmVhdHVyZXNbRmVhdHVyZXNbXCJSZW5kZXJTdHJhdGVneVwiXSA9IDFdID0gXCJSZW5kZXJTdHJhdGVneVwiO1xuICAvKipcclxuICAgKiBXaGVuIHVzZWQsIHRoaXMgd2lsbCBhbGxvdyB0aGUgdXNlciBvZiBvdXIgY29tcG9uZW50IHRvIGJlIGluIGNvbnRyb2wuIFRoaXMgY2FuIGJlIHVzZWQgd2hlblxyXG4gICAqIHlvdSB3YW50IHRvIHRyYW5zaXRpb24gYmFzZWQgb24gc29tZSBzdGF0ZS5cclxuICAgKi9cblxuICBGZWF0dXJlc1tGZWF0dXJlc1tcIlN0YXRpY1wiXSA9IDJdID0gXCJTdGF0aWNcIjtcbn0pKEZlYXR1cmVzIHx8IChGZWF0dXJlcyA9IHt9KSk7XG5cbnZhciBSZW5kZXJTdHJhdGVneTtcblxuKGZ1bmN0aW9uIChSZW5kZXJTdHJhdGVneSkge1xuICBSZW5kZXJTdHJhdGVneVtSZW5kZXJTdHJhdGVneVtcIlVubW91bnRcIl0gPSAwXSA9IFwiVW5tb3VudFwiO1xuICBSZW5kZXJTdHJhdGVneVtSZW5kZXJTdHJhdGVneVtcIkhpZGRlblwiXSA9IDFdID0gXCJIaWRkZW5cIjtcbn0pKFJlbmRlclN0cmF0ZWd5IHx8IChSZW5kZXJTdHJhdGVneSA9IHt9KSk7XG5cbmZ1bmN0aW9uIHJlbmRlcihfcmVmKSB7XG4gIHZhciBfcmVmJHZpc2libGUgPSBfcmVmLnZpc2libGUsXG4gICAgICB2aXNpYmxlID0gX3JlZiR2aXNpYmxlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR2aXNpYmxlLFxuICAgICAgX3JlZiRmZWF0dXJlcyA9IF9yZWYuZmVhdHVyZXMsXG4gICAgICBmZWF0dXJlcyA9IF9yZWYkZmVhdHVyZXMgPT09IHZvaWQgMCA/IEZlYXR1cmVzLk5vbmUgOiBfcmVmJGZlYXR1cmVzLFxuICAgICAgbWFpbiA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcInZpc2libGVcIiwgXCJmZWF0dXJlc1wiXSk7XG5cbiAgLy8gVmlzaWJsZSBhbHdheXMgcmVuZGVyXG4gIGlmICh2aXNpYmxlKSByZXR1cm4gX3JlbmRlcihtYWluKTtcblxuICBpZiAoZmVhdHVyZXMgJiBGZWF0dXJlcy5TdGF0aWMpIHtcbiAgICAvLyBXaGVuIHRoZSBgc3RhdGljYCBwcm9wIGlzIHBhc3NlZCBhcyBgdHJ1ZWAsIHRoZW4gdGhlIHVzZXIgaXMgaW4gY29udHJvbCwgdGh1cyB3ZSBkb24ndCBjYXJlIGFib3V0IGFueXRoaW5nIGVsc2VcbiAgICBpZiAobWFpbi5wcm9wc1tcInN0YXRpY1wiXSkgcmV0dXJuIF9yZW5kZXIobWFpbik7XG4gIH1cblxuICBpZiAoZmVhdHVyZXMgJiBGZWF0dXJlcy5SZW5kZXJTdHJhdGVneSkge1xuICAgIHZhciBfbWFpbiRwcm9wcyR1bm1vdW50LCBfbWF0Y2g7XG5cbiAgICB2YXIgc3RyYXRlZ3kgPSAoKF9tYWluJHByb3BzJHVubW91bnQgPSBtYWluLnByb3BzLnVubW91bnQpICE9IG51bGwgPyBfbWFpbiRwcm9wcyR1bm1vdW50IDogdHJ1ZSkgPyBSZW5kZXJTdHJhdGVneS5Vbm1vdW50IDogUmVuZGVyU3RyYXRlZ3kuSGlkZGVuO1xuICAgIHJldHVybiBtYXRjaChzdHJhdGVneSwgKF9tYXRjaCA9IHt9LCBfbWF0Y2hbUmVuZGVyU3RyYXRlZ3kuVW5tb3VudF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LCBfbWF0Y2hbUmVuZGVyU3RyYXRlZ3kuSGlkZGVuXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfcmVuZGVyKF9leHRlbmRzKHt9LCBtYWluLCB7XG4gICAgICAgIHByb3BzOiBfZXh0ZW5kcyh7fSwgbWFpbi5wcm9wcywge1xuICAgICAgICAgIGhpZGRlbjogdHJ1ZSxcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSkpO1xuICAgIH0sIF9tYXRjaCkpO1xuICB9IC8vIE5vIGZlYXR1cmVzIGVuYWJsZWQsIGp1c3QgcmVuZGVyXG5cblxuICByZXR1cm4gX3JlbmRlcihtYWluKTtcbn1cblxuZnVuY3Rpb24gX3JlbmRlcihfcmVmMikge1xuICB2YXIgcHJvcHMgPSBfcmVmMi5wcm9wcyxcbiAgICAgIGF0dHJzID0gX3JlZjIuYXR0cnMsXG4gICAgICBzbG90cyA9IF9yZWYyLnNsb3RzLFxuICAgICAgc2xvdCA9IF9yZWYyLnNsb3QsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcblxuICB2YXIgX29taXQgPSBvbWl0KHByb3BzLCBbJ3VubW91bnQnLCAnc3RhdGljJ10pLFxuICAgICAgYXMgPSBfb21pdC5hcyxcbiAgICAgIHBhc3NUaHJvdWdoUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfb21pdCwgW1wiYXNcIl0pO1xuXG4gIHZhciBjaGlsZHJlbiA9IHNsb3RzW1wiZGVmYXVsdFwiXSA9PSBudWxsID8gdm9pZCAwIDogc2xvdHNbXCJkZWZhdWx0XCJdKHNsb3QpO1xuXG4gIGlmIChhcyA9PT0gJ3RlbXBsYXRlJykge1xuICAgIGlmIChPYmplY3Qua2V5cyhwYXNzVGhyb3VnaFByb3BzKS5sZW5ndGggPiAwIHx8IE9iamVjdC5rZXlzKGF0dHJzKS5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgX3JlZjMgPSBjaGlsZHJlbiAhPSBudWxsID8gY2hpbGRyZW4gOiBbXSxcbiAgICAgICAgICBmaXJzdENoaWxkID0gX3JlZjNbMF0sXG4gICAgICAgICAgb3RoZXIgPSBfcmVmMy5zbGljZSgxKTtcblxuICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudChmaXJzdENoaWxkKSB8fCBvdGhlci5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ1Bhc3NpbmcgcHJvcHMgb24gXCJ0ZW1wbGF0ZVwiIScsICcnLCBcIlRoZSBjdXJyZW50IGNvbXBvbmVudCA8XCIgKyBuYW1lICsgXCIgLz4gaXMgcmVuZGVyaW5nIGEgXFxcInRlbXBsYXRlXFxcIi5cIiwgXCJIb3dldmVyIHdlIG5lZWQgdG8gcGFzc3Rocm91Z2ggdGhlIGZvbGxvd2luZyBwcm9wczpcIiwgT2JqZWN0LmtleXMocGFzc1Rocm91Z2hQcm9wcykuY29uY2F0KE9iamVjdC5rZXlzKGF0dHJzKSkubWFwKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgICAgcmV0dXJuIFwiICAtIFwiICsgbGluZTtcbiAgICAgICAgfSkuam9pbignXFxuJyksICcnLCAnWW91IGNhbiBhcHBseSBhIGZldyBzb2x1dGlvbnM6JywgWydBZGQgYW4gYGFzPVwiLi4uXCJgIHByb3AsIHRvIGVuc3VyZSB0aGF0IHdlIHJlbmRlciBhbiBhY3R1YWwgZWxlbWVudCBpbnN0ZWFkIG9mIGEgXCJ0ZW1wbGF0ZVwiLicsICdSZW5kZXIgYSBzaW5nbGUgZWxlbWVudCBhcyB0aGUgY2hpbGQgc28gdGhhdCB3ZSBjYW4gZm9yd2FyZCB0aGUgcHJvcHMgb250byB0aGF0IGVsZW1lbnQuJ10ubWFwKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgICAgcmV0dXJuIFwiICAtIFwiICsgbGluZTtcbiAgICAgICAgfSkuam9pbignXFxuJyldLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lVk5vZGUoZmlyc3RDaGlsZCwgcGFzc1Rocm91Z2hQcm9wcyk7XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuWzBdO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiBoKGFzLCBwYXNzVGhyb3VnaFByb3BzLCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIG9taXQob2JqZWN0LCBrZXlzVG9PbWl0KSB7XG4gIGlmIChrZXlzVG9PbWl0ID09PSB2b2lkIDApIHtcbiAgICBrZXlzVG9PbWl0ID0gW107XG4gIH1cblxuICB2YXIgY2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBvYmplY3QpO1xuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uoa2V5c1RvT21pdCksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgdmFyIGtleSA9IF9zdGVwLnZhbHVlO1xuICAgIGlmIChrZXkgaW4gY2xvbmUpIGRlbGV0ZSBjbG9uZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsb25lO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChpbnB1dCkge1xuICBpZiAoaW5wdXQgPT0gbnVsbCkgcmV0dXJuIGZhbHNlOyAvLyBObyBjaGlsZHJlblxuXG4gIGlmICh0eXBlb2YgaW5wdXQudHlwZSA9PT0gJ3N0cmluZycpIHJldHVybiB0cnVlOyAvLyAnZGl2JywgJ3NwYW4nLCAuLi5cblxuICBpZiAodHlwZW9mIGlucHV0LnR5cGUgPT09ICdvYmplY3QnKSByZXR1cm4gdHJ1ZTsgLy8gT3RoZXIgY29tcG9uZW50c1xuXG4gIGlmICh0eXBlb2YgaW5wdXQudHlwZSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRydWU7IC8vIEJ1aWx0LWlucyBsaWtlIFRyYW5zaXRpb25cblxuICByZXR1cm4gZmFsc2U7IC8vIENvbW1lbnRzLCBzdHJpbmdzLCAuLi5cbn1cblxuZXhwb3J0IHsgRmVhdHVyZXMsIFJlbmRlclN0cmF0ZWd5LCBvbWl0LCByZW5kZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbmRlci5lc20uanMubWFwXG4iLCJmdW5jdGlvbiBlKGUpe3JldHVybiBlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJkZWZhdWx0XCJpbiBlP2UuZGVmYXVsdDplfXZhciByPWUocmVxdWlyZShcImxvZGFzaC5pc2VxdWFsXCIpKSx0PXJlcXVpcmUoXCJ2dWVcIiksbj1lKHJlcXVpcmUoXCJsb2Rhc2guY2xvbmVkZWVwXCIpKSxvPXJlcXVpcmUoXCJAaW5lcnRpYWpzL2luZXJ0aWFcIik7ZnVuY3Rpb24gaSgpe3JldHVybihpPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3ZhciB0PWFyZ3VtZW50c1tyXTtmb3IodmFyIG4gaW4gdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxuKSYmKGVbbl09dFtuXSl9cmV0dXJuIGV9KS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZnVuY3Rpb24gYSgpe3ZhciBlPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxhPVwic3RyaW5nXCI9PXR5cGVvZiBlWzBdP2VbMF06bnVsbCx1PShcInN0cmluZ1wiPT10eXBlb2YgZVswXT9lWzFdOmVbMF0pfHx7fSxzPWE/by5JbmVydGlhLnJlc3RvcmUoYSk6bnVsbCxjPW4odSksbD1udWxsLHA9bnVsbCxmPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxkPXQucmVhY3RpdmUoaSh7fSxzP3MuZGF0YTp1LHtpc0RpcnR5OiExLGVycm9yczpzP3MuZXJyb3JzOnt9LGhhc0Vycm9yczohMSxwcm9jZXNzaW5nOiExLHByb2dyZXNzOm51bGwsd2FzU3VjY2Vzc2Z1bDohMSxyZWNlbnRseVN1Y2Nlc3NmdWw6ITEsZGF0YTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIE9iamVjdC5rZXlzKHUpLnJlZHVjZShmdW5jdGlvbihyLHQpe3JldHVybiByW3RdPWVbdF0scn0se30pfSx0cmFuc2Zvcm06ZnVuY3Rpb24oZSl7cmV0dXJuIGY9ZSx0aGlzfSxkZWZhdWx0czpmdW5jdGlvbihlLHIpe3ZhciB0O3JldHVybiBjPXZvaWQgMD09PWU/dGhpcy5kYXRhKCk6T2JqZWN0LmFzc2lnbih7fSxuKGMpLHI/KCh0PXt9KVtlXT1yLHQpOmUpLHRoaXN9LHJlc2V0OmZ1bmN0aW9uKCl7dmFyIGU9W10uc2xpY2UuY2FsbChhcmd1bWVudHMpLHI9bihjKTtyZXR1cm4gT2JqZWN0LmFzc2lnbih0aGlzLDA9PT1lLmxlbmd0aD9yOk9iamVjdC5rZXlzKHIpLmZpbHRlcihmdW5jdGlvbihyKXtyZXR1cm4gZS5pbmNsdWRlcyhyKX0pLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlW3RdPXJbdF0sZX0se30pKSx0aGlzfSxzZXRFcnJvcjpmdW5jdGlvbihlLHIpe3ZhciB0O3JldHVybiBPYmplY3QuYXNzaWduKHRoaXMuZXJyb3JzLHI/KCh0PXt9KVtlXT1yLHQpOmUpLHRoaXMuaGFzRXJyb3JzPU9iamVjdC5rZXlzKHRoaXMuZXJyb3JzKS5sZW5ndGg+MCx0aGlzfSxjbGVhckVycm9yczpmdW5jdGlvbigpe3ZhciBlPXRoaXMscj1bXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7cmV0dXJuIHRoaXMuZXJyb3JzPU9iamVjdC5rZXlzKHRoaXMuZXJyb3JzKS5yZWR1Y2UoZnVuY3Rpb24odCxuKXt2YXIgbztyZXR1cm4gaSh7fSx0LHIubGVuZ3RoPjAmJiFyLmluY2x1ZGVzKG4pPygobz17fSlbbl09ZS5lcnJvcnNbbl0sbyk6e30pfSx7fSksdGhpcy5oYXNFcnJvcnM9T2JqZWN0LmtleXModGhpcy5lcnJvcnMpLmxlbmd0aD4wLHRoaXN9LHN1Ym1pdDpmdW5jdGlvbihlLHIsdCl7dmFyIGE9dGhpcyx1PXRoaXM7dm9pZCAwPT09dCYmKHQ9e30pO3ZhciBzPWYodGhpcy5kYXRhKCkpLGQ9aSh7fSx0LHtvbkNhbmNlbFRva2VuOmZ1bmN0aW9uKGUpe2lmKGw9ZSx0Lm9uQ2FuY2VsVG9rZW4pcmV0dXJuIHQub25DYW5jZWxUb2tlbihlKX0sb25CZWZvcmU6ZnVuY3Rpb24oZSl7aWYodS53YXNTdWNjZXNzZnVsPSExLHUucmVjZW50bHlTdWNjZXNzZnVsPSExLGNsZWFyVGltZW91dChwKSx0Lm9uQmVmb3JlKXJldHVybiB0Lm9uQmVmb3JlKGUpfSxvblN0YXJ0OmZ1bmN0aW9uKGUpe2lmKHUucHJvY2Vzc2luZz0hMCx0Lm9uU3RhcnQpcmV0dXJuIHQub25TdGFydChlKX0sb25Qcm9ncmVzczpmdW5jdGlvbihlKXtpZih1LnByb2dyZXNzPWUsdC5vblByb2dyZXNzKXJldHVybiB0Lm9uUHJvZ3Jlc3MoZSl9LG9uU3VjY2VzczpmdW5jdGlvbihlKXt0cnl7dmFyIHI9ZnVuY3Rpb24oZSl7cmV0dXJuIGM9bihhLmRhdGEoKSksYS5pc0RpcnR5PSExLGV9O3JldHVybiBhLnByb2Nlc3Npbmc9ITEsYS5wcm9ncmVzcz1udWxsLGEuY2xlYXJFcnJvcnMoKSxhLndhc1N1Y2Nlc3NmdWw9ITAsYS5yZWNlbnRseVN1Y2Nlc3NmdWw9ITAscD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGEucmVjZW50bHlTdWNjZXNzZnVsPSExfSwyZTMpLFByb21pc2UucmVzb2x2ZSh0Lm9uU3VjY2Vzcz9Qcm9taXNlLnJlc29sdmUodC5vblN1Y2Nlc3MoZSkpLnRoZW4ocik6cihudWxsKSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX0sb25FcnJvcjpmdW5jdGlvbihlKXtpZih1LnByb2Nlc3Npbmc9ITEsdS5wcm9ncmVzcz1udWxsLHUuY2xlYXJFcnJvcnMoKS5zZXRFcnJvcihlKSx0Lm9uRXJyb3IpcmV0dXJuIHQub25FcnJvcihlKX0sb25DYW5jZWw6ZnVuY3Rpb24oKXtpZih1LnByb2Nlc3Npbmc9ITEsdS5wcm9ncmVzcz1udWxsLHQub25DYW5jZWwpcmV0dXJuIHQub25DYW5jZWwoKX0sb25GaW5pc2g6ZnVuY3Rpb24oKXtpZih1LnByb2Nlc3Npbmc9ITEsdS5wcm9ncmVzcz1udWxsLGw9bnVsbCx0Lm9uRmluaXNoKXJldHVybiB0Lm9uRmluaXNoKCl9fSk7XCJkZWxldGVcIj09PWU/by5JbmVydGlhLmRlbGV0ZShyLGkoe30sZCx7ZGF0YTpzfSkpOm8uSW5lcnRpYVtlXShyLHMsZCl9LGdldDpmdW5jdGlvbihlLHIpe3RoaXMuc3VibWl0KFwiZ2V0XCIsZSxyKX0scG9zdDpmdW5jdGlvbihlLHIpe3RoaXMuc3VibWl0KFwicG9zdFwiLGUscil9LHB1dDpmdW5jdGlvbihlLHIpe3RoaXMuc3VibWl0KFwicHV0XCIsZSxyKX0scGF0Y2g6ZnVuY3Rpb24oZSxyKXt0aGlzLnN1Ym1pdChcInBhdGNoXCIsZSxyKX0sZGVsZXRlOmZ1bmN0aW9uKGUscil7dGhpcy5zdWJtaXQoXCJkZWxldGVcIixlLHIpfSxjYW5jZWw6ZnVuY3Rpb24oKXtsJiZsLmNhbmNlbCgpfSxfX3JlbWVtYmVyYWJsZTpudWxsPT09YSxfX3JlbWVtYmVyOmZ1bmN0aW9uKCl7cmV0dXJue2RhdGE6dGhpcy5kYXRhKCksZXJyb3JzOnRoaXMuZXJyb3JzfX0sX19yZXN0b3JlOmZ1bmN0aW9uKGUpe09iamVjdC5hc3NpZ24odGhpcyxlLmRhdGEpLHRoaXMuc2V0RXJyb3IoZS5lcnJvcnMpfX0pKTtyZXR1cm4gdC53YXRjaChkLGZ1bmN0aW9uKGUpe2QuaXNEaXJ0eT0hcihkLmRhdGEoKSxjKSxhJiZvLkluZXJ0aWEucmVtZW1iZXIobihlLl9fcmVtZW1iZXIoKSksYSl9LHtpbW1lZGlhdGU6ITAsZGVlcDohMH0pLGR9dmFyIHU9e2NyZWF0ZWQ6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKHRoaXMuJG9wdGlvbnMucmVtZW1iZXIpe0FycmF5LmlzQXJyYXkodGhpcy4kb3B0aW9ucy5yZW1lbWJlcikmJih0aGlzLiRvcHRpb25zLnJlbWVtYmVyPXtkYXRhOnRoaXMuJG9wdGlvbnMucmVtZW1iZXJ9KSxcInN0cmluZ1wiPT10eXBlb2YgdGhpcy4kb3B0aW9ucy5yZW1lbWJlciYmKHRoaXMuJG9wdGlvbnMucmVtZW1iZXI9e2RhdGE6W3RoaXMuJG9wdGlvbnMucmVtZW1iZXJdfSksXCJzdHJpbmdcIj09dHlwZW9mIHRoaXMuJG9wdGlvbnMucmVtZW1iZXIuZGF0YSYmKHRoaXMuJG9wdGlvbnMucmVtZW1iZXI9e2RhdGE6W3RoaXMuJG9wdGlvbnMucmVtZW1iZXIuZGF0YV19KTt2YXIgcj10aGlzLiRvcHRpb25zLnJlbWVtYmVyLmtleSBpbnN0YW5jZW9mIEZ1bmN0aW9uP3RoaXMuJG9wdGlvbnMucmVtZW1iZXIua2V5LmNhbGwodGhpcyk6dGhpcy4kb3B0aW9ucy5yZW1lbWJlci5rZXksdD1vLkluZXJ0aWEucmVzdG9yZShyKSxhPXRoaXMuJG9wdGlvbnMucmVtZW1iZXIuZGF0YS5maWx0ZXIoZnVuY3Rpb24ocil7cmV0dXJuIShudWxsIT09ZVtyXSYmXCJvYmplY3RcIj09dHlwZW9mIGVbcl0mJiExPT09ZVtyXS5fX3JlbWVtYmVyYWJsZSl9KSx1PWZ1bmN0aW9uKHIpe3JldHVybiBudWxsIT09ZVtyXSYmXCJvYmplY3RcIj09dHlwZW9mIGVbcl0mJlwiZnVuY3Rpb25cIj09dHlwZW9mIGVbcl0uX19yZW1lbWJlciYmXCJmdW5jdGlvblwiPT10eXBlb2YgZVtyXS5fX3Jlc3RvcmV9O2EuZm9yRWFjaChmdW5jdGlvbihzKXt2b2lkIDAhPT1lW3NdJiZ2b2lkIDAhPT10JiZ2b2lkIDAhPT10W3NdJiYodShzKT9lW3NdLl9fcmVzdG9yZSh0W3NdKTplW3NdPXRbc10pLGUuJHdhdGNoKHMsZnVuY3Rpb24oKXtvLkluZXJ0aWEucmVtZW1iZXIoYS5yZWR1Y2UoZnVuY3Rpb24ocix0KXt2YXIgbztyZXR1cm4gaSh7fSxyLCgobz17fSlbdF09bih1KHQpP2VbdF0uX19yZW1lbWJlcigpOmVbdF0pLG8pKX0se30pLHIpfSx7aW1tZWRpYXRlOiEwLGRlZXA6ITB9KX0pfX19LHM9dC5yZWYobnVsbCksYz10LnJlZih7fSksbD10LnJlZihudWxsKSxwPW51bGwsZj17bmFtZTpcIkluZXJ0aWFcIixwcm9wczp7aW5pdGlhbFBhZ2U6e3R5cGU6T2JqZWN0LHJlcXVpcmVkOiEwfSxpbml0aWFsQ29tcG9uZW50Ont0eXBlOk9iamVjdCxyZXF1aXJlZDohMX0scmVzb2x2ZUNvbXBvbmVudDp7dHlwZTpGdW5jdGlvbixyZXF1aXJlZDohMX0sdGl0bGVDYWxsYmFjazp7dHlwZTpGdW5jdGlvbixyZXF1aXJlZDohMSxkZWZhdWx0OmZ1bmN0aW9uKGUpe3JldHVybiBlfX0sb25IZWFkVXBkYXRlOnt0eXBlOkZ1bmN0aW9uLHJlcXVpcmVkOiExLGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXt9fX19LHNldHVwOmZ1bmN0aW9uKGUpe3ZhciByPWUuaW5pdGlhbFBhZ2Usbj1lLmluaXRpYWxDb21wb25lbnQsYT1lLnJlc29sdmVDb21wb25lbnQsdT1lLnRpdGxlQ2FsbGJhY2ssZj1lLm9uSGVhZFVwZGF0ZTtzLnZhbHVlPW4/dC5tYXJrUmF3KG4pOm51bGwsYy52YWx1ZT1yLGwudmFsdWU9bnVsbDt2YXIgZD1cInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93O3JldHVybiBwPW8uY3JlYXRlSGVhZE1hbmFnZXIoZCx1LGYpLGR8fG8uSW5lcnRpYS5pbml0KHtpbml0aWFsUGFnZTpyLHJlc29sdmVDb21wb25lbnQ6YSxzd2FwQ29tcG9uZW50OmZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gcy52YWx1ZT10Lm1hcmtSYXcoZS5jb21wb25lbnQpLGMudmFsdWU9ZS5wYWdlLGwudmFsdWU9ZS5wcmVzZXJ2ZVN0YXRlP2wudmFsdWU6RGF0ZS5ub3coKSxQcm9taXNlLnJlc29sdmUoKX1jYXRjaChlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fX0pLGZ1bmN0aW9uKCl7aWYocy52YWx1ZSl7cy52YWx1ZS5pbmhlcml0QXR0cnM9ISFzLnZhbHVlLmluaGVyaXRBdHRyczt2YXIgZT10Lmgocy52YWx1ZSxpKHt9LGMudmFsdWUucHJvcHMse2tleTpsLnZhbHVlfSkpO3JldHVybiBzLnZhbHVlLmxheW91dD9cImZ1bmN0aW9uXCI9PXR5cGVvZiBzLnZhbHVlLmxheW91dD9zLnZhbHVlLmxheW91dCh0LmgsZSk6KEFycmF5LmlzQXJyYXkocy52YWx1ZS5sYXlvdXQpP3MudmFsdWUubGF5b3V0OltzLnZhbHVlLmxheW91dF0pLmNvbmNhdChlKS5yZXZlcnNlKCkucmVkdWNlKGZ1bmN0aW9uKGUscil7cmV0dXJuIHIuaW5oZXJpdEF0dHJzPSEhci5pbmhlcml0QXR0cnMsdC5oKHIsaSh7fSxjLnZhbHVlLnByb3BzKSxmdW5jdGlvbigpe3JldHVybiBlfSl9KTplfX19fSxkPXtpbnN0YWxsOmZ1bmN0aW9uKGUpe28uSW5lcnRpYS5mb3JtPWEsT2JqZWN0LmRlZmluZVByb3BlcnR5KGUuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsXCIkaW5lcnRpYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gby5JbmVydGlhfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzLFwiJHBhZ2VcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGMudmFsdWV9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsXCIkaGVhZE1hbmFnZXJcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9fSksZS5taXhpbih1KX19LGg9e3Byb3BzOnt0aXRsZTp7dHlwZTpTdHJpbmcscmVxdWlyZWQ6ITF9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3Byb3ZpZGVyOnRoaXMuJGhlYWRNYW5hZ2VyLmNyZWF0ZVByb3ZpZGVyKCl9fSxiZWZvcmVVbm1vdW50OmZ1bmN0aW9uKCl7dGhpcy5wcm92aWRlci5kaXNjb25uZWN0KCl9LG1ldGhvZHM6e2lzVW5hcnlUYWc6ZnVuY3Rpb24oZSl7cmV0dXJuW1wiYXJlYVwiLFwiYmFzZVwiLFwiYnJcIixcImNvbFwiLFwiZW1iZWRcIixcImhyXCIsXCJpbWdcIixcImlucHV0XCIsXCJrZXlnZW5cIixcImxpbmtcIixcIm1ldGFcIixcInBhcmFtXCIsXCJzb3VyY2VcIixcInRyYWNrXCIsXCJ3YnJcIl0uaW5kZXhPZihlLnR5cGUpPi0xfSxyZW5kZXJUYWdTdGFydDpmdW5jdGlvbihlKXtlLnByb3BzPWUucHJvcHN8fHt9LGUucHJvcHMuaW5lcnRpYT12b2lkIDAhPT1lLnByb3BzW1wiaGVhZC1rZXlcIl0/ZS5wcm9wc1tcImhlYWQta2V5XCJdOlwiXCI7dmFyIHI9T2JqZWN0LmtleXMoZS5wcm9wcykucmVkdWNlKGZ1bmN0aW9uKHIsdCl7dmFyIG49ZS5wcm9wc1t0XTtyZXR1cm5bXCJrZXlcIixcImhlYWQta2V5XCJdLmluY2x1ZGVzKHQpP3I6XCJcIj09PW4/citcIiBcIit0OnIrXCIgXCIrdCsnPVwiJytuKydcIid9LFwiXCIpO3JldHVyblwiPFwiK2UudHlwZStyK1wiPlwifSxyZW5kZXJUYWdDaGlsZHJlbjpmdW5jdGlvbihlKXt2YXIgcj10aGlzO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLmNoaWxkcmVuP2UuY2hpbGRyZW46ZS5jaGlsZHJlbi5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZStyLnJlbmRlclRhZyh0KX0sXCJcIil9LHJlbmRlclRhZzpmdW5jdGlvbihlKXtpZihcIlN5bWJvbChUZXh0KVwiPT09ZS50eXBlLnRvU3RyaW5nKCkpcmV0dXJuIGUuY2hpbGRyZW47aWYoXCJTeW1ib2woKVwiPT09ZS50eXBlLnRvU3RyaW5nKCkpcmV0dXJuXCJcIjtpZihcIlN5bWJvbChDb21tZW50KVwiPT09ZS50eXBlLnRvU3RyaW5nKCkpcmV0dXJuXCJcIjt2YXIgcj10aGlzLnJlbmRlclRhZ1N0YXJ0KGUpO3JldHVybiBlLmNoaWxkcmVuJiYocis9dGhpcy5yZW5kZXJUYWdDaGlsZHJlbihlKSksdGhpcy5pc1VuYXJ5VGFnKGUpfHwocis9XCI8L1wiK2UudHlwZStcIj5cIikscn0sYWRkVGl0bGVFbGVtZW50OmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnRpdGxlJiYhZS5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLnN0YXJ0c1dpdGgoXCI8dGl0bGVcIil9KSYmZS5wdXNoKFwiPHRpdGxlIGluZXJ0aWE+XCIrdGhpcy50aXRsZStcIjwvdGl0bGU+XCIpLGV9LHJlbmRlck5vZGVzOmZ1bmN0aW9uKGUpe3ZhciByPXRoaXM7cmV0dXJuIHRoaXMuYWRkVGl0bGVFbGVtZW50KGUuZmxhdE1hcChmdW5jdGlvbihlKXtyZXR1cm5cIlN5bWJvbChGcmFnbWVudClcIj09PWUudHlwZS50b1N0cmluZygpP2UuY2hpbGRyZW46ZX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gci5yZW5kZXJUYWcoZSl9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGV9KSl9fSxyZW5kZXI6ZnVuY3Rpb24oKXt0aGlzLnByb3ZpZGVyLnVwZGF0ZSh0aGlzLnJlbmRlck5vZGVzKHRoaXMuJHNsb3RzLmRlZmF1bHQ/dGhpcy4kc2xvdHMuZGVmYXVsdCgpOltdKSl9fSxtPXtuYW1lOlwiSW5lcnRpYUxpbmtcIixwcm9wczp7YXM6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJhXCJ9LGRhdGE6e3R5cGU6T2JqZWN0LGRlZmF1bHQ6ZnVuY3Rpb24oKXtyZXR1cm57fX19LGhyZWY6e3R5cGU6U3RyaW5nfSxtZXRob2Q6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJnZXRcIn0scmVwbGFjZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LHByZXNlcnZlU2Nyb2xsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0scHJlc2VydmVTdGF0ZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6bnVsbH0sb25seTp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuW119fSxoZWFkZXJzOnt0eXBlOk9iamVjdCxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJue319fSxxdWVyeVN0cmluZ0FycmF5Rm9ybWF0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiYnJhY2tldHNcIn19LHNldHVwOmZ1bmN0aW9uKGUscil7dmFyIG49ci5zbG90cyxhPXIuYXR0cnM7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciByPWUuYXMudG9Mb3dlckNhc2UoKSx1PWUubWV0aG9kLnRvTG93ZXJDYXNlKCkscz1vLm1lcmdlRGF0YUludG9RdWVyeVN0cmluZyh1LGUuaHJlZnx8XCJcIixlLmRhdGEsZS5xdWVyeVN0cmluZ0FycmF5Rm9ybWF0KSxjPXNbMF0sbD1zWzFdO3JldHVyblwiYVwiPT09ciYmXCJnZXRcIiE9PXUmJmNvbnNvbGUud2FybignQ3JlYXRpbmcgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIDxhPiBsaW5rcyBpcyBkaXNjb3VyYWdlZCBhcyBpdCBjYXVzZXMgXCJPcGVuIExpbmsgaW4gTmV3IFRhYi9XaW5kb3dcIiBhY2Nlc3NpYmlsaXR5IGlzc3Vlcy5cXG5cXG5QbGVhc2Ugc3BlY2lmeSBhIG1vcmUgYXBwcm9wcmlhdGUgZWxlbWVudCB1c2luZyB0aGUgXCJhc1wiIGF0dHJpYnV0ZS4gRm9yIGV4YW1wbGU6XFxuXFxuPExpbmsgaHJlZj1cIicrYysnXCIgbWV0aG9kPVwiJyt1KydcIiBhcz1cImJ1dHRvblwiPi4uLjwvTGluaz4nKSx0LmgoZS5hcyxpKHt9LGEsXCJhXCI9PT1yP3tocmVmOmN9Ont9LHtvbkNsaWNrOmZ1bmN0aW9uKHIpe3ZhciB0O28uc2hvdWxkSW50ZXJjZXB0KHIpJiYoci5wcmV2ZW50RGVmYXVsdCgpLG8uSW5lcnRpYS52aXNpdChjLHtkYXRhOmwsbWV0aG9kOnUscmVwbGFjZTplLnJlcGxhY2UscHJlc2VydmVTY3JvbGw6ZS5wcmVzZXJ2ZVNjcm9sbCxwcmVzZXJ2ZVN0YXRlOm51bGwhPSh0PWUucHJlc2VydmVTdGF0ZSk/dDpcImdldFwiIT09dSxvbmx5OmUub25seSxoZWFkZXJzOmUuaGVhZGVycyxvbkNhbmNlbFRva2VuOmEub25DYW5jZWxUb2tlbnx8ZnVuY3Rpb24oKXtyZXR1cm57fX0sb25CZWZvcmU6YS5vbkJlZm9yZXx8ZnVuY3Rpb24oKXtyZXR1cm57fX0sb25TdGFydDphLm9uU3RhcnR8fGZ1bmN0aW9uKCl7cmV0dXJue319LG9uUHJvZ3Jlc3M6YS5vblByb2dyZXNzfHxmdW5jdGlvbigpe3JldHVybnt9fSxvbkZpbmlzaDphLm9uRmluaXNofHxmdW5jdGlvbigpe3JldHVybnt9fSxvbkNhbmNlbDphLm9uQ2FuY2VsfHxmdW5jdGlvbigpe3JldHVybnt9fSxvblN1Y2Nlc3M6YS5vblN1Y2Nlc3N8fGZ1bmN0aW9uKCl7cmV0dXJue319LG9uRXJyb3I6YS5vbkVycm9yfHxmdW5jdGlvbigpe3JldHVybnt9fX0pKX19KSxuKX19fTtleHBvcnRzLkFwcD1mLGV4cG9ydHMuSGVhZD1oLGV4cG9ydHMuSW5lcnRpYUFwcD1mLGV4cG9ydHMuSW5lcnRpYUhlYWQ9aCxleHBvcnRzLkluZXJ0aWFMaW5rPW0sZXhwb3J0cy5MaW5rPW0sZXhwb3J0cy5hcHA9ZixleHBvcnRzLmNyZWF0ZUluZXJ0aWFBcHA9ZnVuY3Rpb24oZSl7dHJ5e3ZhciByLG4sbyxpLGEsdSxzO249dm9pZCAwPT09KHI9ZS5pZCk/XCJhcHBcIjpyLG89ZS5yZXNvbHZlLGk9ZS5zZXR1cCxhPWUudGl0bGUsdT1lLnBhZ2Uscz1lLnJlbmRlcjt2YXIgYz1cInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93LGw9Yz9udWxsOmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG4pLHA9dXx8SlNPTi5wYXJzZShsLmRhdGFzZXQucGFnZSksaD1mdW5jdGlvbihlKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG8oZSkpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuZGVmYXVsdHx8ZX0pfSxtPVtdO3JldHVybiBQcm9taXNlLnJlc29sdmUoaChwLmNvbXBvbmVudCkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gaSh7ZWw6bCxhcHA6ZixBcHA6Zixwcm9wczp7aW5pdGlhbFBhZ2U6cCxpbml0aWFsQ29tcG9uZW50OmUscmVzb2x2ZUNvbXBvbmVudDpoLHRpdGxlQ2FsbGJhY2s6YSxvbkhlYWRVcGRhdGU6Yz9mdW5jdGlvbihlKXtyZXR1cm4gbT1lfTpudWxsfSxwbHVnaW46ZH0pfSkpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoYylyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHModC5jcmVhdGVTU1JBcHAoe3JlbmRlcjpmdW5jdGlvbigpe3JldHVybiB0LmgoXCJkaXZcIix7aWQ6bixcImRhdGEtcGFnZVwiOkpTT04uc3RyaW5naWZ5KHApLGlubmVySFRNTDpzKGUpfSl9fSkpKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybntoZWFkOm0sYm9keTplfX0pfSgpfSl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfX0sZXhwb3J0cy5saW5rPW0sZXhwb3J0cy5wbHVnaW49ZCxleHBvcnRzLnVzZUZvcm09YSxleHBvcnRzLnVzZVBhZ2U9ZnVuY3Rpb24oKXtyZXR1cm57cHJvcHM6dC5jb21wdXRlZChmdW5jdGlvbigpe3JldHVybiBjLnZhbHVlLnByb3BzfSksdXJsOnQuY29tcHV0ZWQoZnVuY3Rpb24oKXtyZXR1cm4gYy52YWx1ZS51cmx9KSxjb21wb25lbnQ6dC5jb21wdXRlZChmdW5jdGlvbigpe3JldHVybiBjLnZhbHVlLmNvbXBvbmVudH0pLHZlcnNpb246dC5jb21wdXRlZChmdW5jdGlvbigpe3JldHVybiBjLnZhbHVlLnZlcnNpb259KX19LGV4cG9ydHMudXNlUmVtZW1iZXI9ZnVuY3Rpb24oZSxyKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJiExPT09ZS5fX3JlbWVtYmVyYWJsZSlyZXR1cm4gZTt2YXIgaT1vLkluZXJ0aWEucmVzdG9yZShyKSxhPXQuaXNSZWFjdGl2ZShlKT90LnJlYWN0aXZlOnQucmVmLHU9XCJmdW5jdGlvblwiPT10eXBlb2YgZS5fX3JlbWVtYmVyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLl9fcmVzdG9yZSxzPXZvaWQgMD09PWk/ZTphKHU/ZS5fX3Jlc3RvcmUoaSk6aSk7cmV0dXJuIHQud2F0Y2gocyxmdW5jdGlvbih0KXtvLkluZXJ0aWEucmVtZW1iZXIobih1P2UuX19yZW1lbWJlcigpOnQpLHIpfSx7aW1tZWRpYXRlOiEwLGRlZXA6ITB9KSxzfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiZnVuY3Rpb24gZShlKXtyZXR1cm4gZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwiZGVmYXVsdFwiaW4gZT9lLmRlZmF1bHQ6ZX12YXIgdD1lKHJlcXVpcmUoXCJheGlvc1wiKSksbj1yZXF1aXJlKFwicXNcIiksaT1lKHJlcXVpcmUoXCJkZWVwbWVyZ2VcIikpO2Z1bmN0aW9uIHIoKXtyZXR1cm4ocj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciBpIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4saSkmJihlW2ldPW5baV0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBvLHM9e21vZGFsOm51bGwsbGlzdGVuZXI6bnVsbCxzaG93OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7XCJvYmplY3RcIj09dHlwZW9mIGUmJihlPVwiQWxsIEluZXJ0aWEgcmVxdWVzdHMgbXVzdCByZWNlaXZlIGEgdmFsaWQgSW5lcnRpYSByZXNwb25zZSwgaG93ZXZlciBhIHBsYWluIEpTT04gcmVzcG9uc2Ugd2FzIHJlY2VpdmVkLjxocj5cIitKU09OLnN0cmluZ2lmeShlKSk7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImh0bWxcIik7bi5pbm5lckhUTUw9ZSxuLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGUuc2V0QXR0cmlidXRlKFwidGFyZ2V0XCIsXCJfdG9wXCIpfSksdGhpcy5tb2RhbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMubW9kYWwuc3R5bGUucG9zaXRpb249XCJmaXhlZFwiLHRoaXMubW9kYWwuc3R5bGUud2lkdGg9XCIxMDB2d1wiLHRoaXMubW9kYWwuc3R5bGUuaGVpZ2h0PVwiMTAwdmhcIix0aGlzLm1vZGFsLnN0eWxlLnBhZGRpbmc9XCI1MHB4XCIsdGhpcy5tb2RhbC5zdHlsZS5ib3hTaXppbmc9XCJib3JkZXItYm94XCIsdGhpcy5tb2RhbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9XCJyZ2JhKDAsIDAsIDAsIC42KVwiLHRoaXMubW9kYWwuc3R5bGUuekluZGV4PTJlNSx0aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHQuaGlkZSgpfSk7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtpZihpLnN0eWxlLmJhY2tncm91bmRDb2xvcj1cIndoaXRlXCIsaS5zdHlsZS5ib3JkZXJSYWRpdXM9XCI1cHhcIixpLnN0eWxlLndpZHRoPVwiMTAwJVwiLGkuc3R5bGUuaGVpZ2h0PVwiMTAwJVwiLHRoaXMubW9kYWwuYXBwZW5kQ2hpbGQoaSksZG9jdW1lbnQuYm9keS5wcmVwZW5kKHRoaXMubW9kYWwpLGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIiwhaS5jb250ZW50V2luZG93KXRocm93IG5ldyBFcnJvcihcImlmcmFtZSBub3QgeWV0IHJlYWR5LlwiKTtpLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQub3BlbigpLGkuY29udGVudFdpbmRvdy5kb2N1bWVudC53cml0ZShuLm91dGVySFRNTCksaS5jb250ZW50V2luZG93LmRvY3VtZW50LmNsb3NlKCksdGhpcy5saXN0ZW5lcj10aGlzLmhpZGVPbkVzY2FwZS5iaW5kKHRoaXMpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdGhpcy5saXN0ZW5lcil9LGhpZGU6ZnVuY3Rpb24oKXt0aGlzLm1vZGFsLm91dGVySFRNTD1cIlwiLHRoaXMubW9kYWw9bnVsbCxkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PVwidmlzaWJsZVwiLGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsdGhpcy5saXN0ZW5lcil9LGhpZGVPbkVzY2FwZTpmdW5jdGlvbihlKXsyNz09PWUua2V5Q29kZSYmdGhpcy5oaWRlKCl9fTtmdW5jdGlvbiBhKGUsdCl7dmFyIG47cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGk9YXJndW1lbnRzLHI9dGhpcztjbGVhclRpbWVvdXQobiksbj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkocixbXS5zbGljZS5jYWxsKGkpKX0sdCl9fWZ1bmN0aW9uIGMoZSx0LG4pe2Zvcih2YXIgaSBpbiB2b2lkIDA9PT10JiYodD1uZXcgRm9ybURhdGEpLHZvaWQgMD09PW4mJihuPW51bGwpLGU9ZXx8e30pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsaSkmJmQodCxsKG4saSksZVtpXSk7cmV0dXJuIHR9ZnVuY3Rpb24gbChlLHQpe3JldHVybiBlP2UrXCJbXCIrdCtcIl1cIjp0fWZ1bmN0aW9uIGQoZSx0LG4pe3JldHVybiBBcnJheS5pc0FycmF5KG4pP0FycmF5LmZyb20obi5rZXlzKCkpLmZvckVhY2goZnVuY3Rpb24oaSl7cmV0dXJuIGQoZSxsKHQsaS50b1N0cmluZygpKSxuW2ldKX0pOm4gaW5zdGFuY2VvZiBEYXRlP2UuYXBwZW5kKHQsbi50b0lTT1N0cmluZygpKTpuIGluc3RhbmNlb2YgRmlsZT9lLmFwcGVuZCh0LG4sbi5uYW1lKTpuIGluc3RhbmNlb2YgQmxvYj9lLmFwcGVuZCh0LG4pOlwiYm9vbGVhblwiPT10eXBlb2Ygbj9lLmFwcGVuZCh0LG4/XCIxXCI6XCIwXCIpOlwic3RyaW5nXCI9PXR5cGVvZiBuP2UuYXBwZW5kKHQsbik6XCJudW1iZXJcIj09dHlwZW9mIG4/ZS5hcHBlbmQodCxcIlwiK24pOm51bGw9PW4/ZS5hcHBlbmQodCxcIlwiKTp2b2lkIGMobixlLHQpfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIG5ldyBVUkwoZS50b1N0cmluZygpLHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpKX1mdW5jdGlvbiBoKGUsdCxyLG8pe3ZvaWQgMD09PW8mJihvPVwiYnJhY2tldHNcIik7dmFyIHM9L15odHRwcz86XFwvXFwvLy50ZXN0KHQudG9TdHJpbmcoKSksYT1zfHx0LnRvU3RyaW5nKCkuc3RhcnRzV2l0aChcIi9cIiksYz0hYSYmIXQudG9TdHJpbmcoKS5zdGFydHNXaXRoKFwiI1wiKSYmIXQudG9TdHJpbmcoKS5zdGFydHNXaXRoKFwiP1wiKSxsPXQudG9TdHJpbmcoKS5pbmNsdWRlcyhcIj9cIil8fGU9PT1leHBvcnRzLk1ldGhvZC5HRVQmJk9iamVjdC5rZXlzKHIpLmxlbmd0aCxkPXQudG9TdHJpbmcoKS5pbmNsdWRlcyhcIiNcIiksdT1uZXcgVVJMKHQudG9TdHJpbmcoKSxcImh0dHA6Ly9sb2NhbGhvc3RcIik7cmV0dXJuIGU9PT1leHBvcnRzLk1ldGhvZC5HRVQmJk9iamVjdC5rZXlzKHIpLmxlbmd0aCYmKHUuc2VhcmNoPW4uc3RyaW5naWZ5KGkobi5wYXJzZSh1LnNlYXJjaCx7aWdub3JlUXVlcnlQcmVmaXg6ITB9KSxyKSx7ZW5jb2RlVmFsdWVzT25seTohMCxhcnJheUZvcm1hdDpvfSkscj17fSksW1tzP3UucHJvdG9jb2wrXCIvL1wiK3UuaG9zdDpcIlwiLGE/dS5wYXRobmFtZTpcIlwiLGM/dS5wYXRobmFtZS5zdWJzdHJpbmcoMSk6XCJcIixsP3Uuc2VhcmNoOlwiXCIsZD91Lmhhc2g6XCJcIl0uam9pbihcIlwiKSxyXX1mdW5jdGlvbiBwKGUpe3JldHVybihlPW5ldyBVUkwoZS5ocmVmKSkuaGFzaD1cIlwiLGV9ZnVuY3Rpb24gZihlLHQpe3JldHVybiBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImluZXJ0aWE6XCIrZSx0KSl9KG89ZXhwb3J0cy5NZXRob2R8fChleHBvcnRzLk1ldGhvZD17fSkpLkdFVD1cImdldFwiLG8uUE9TVD1cInBvc3RcIixvLlBVVD1cInB1dFwiLG8uUEFUQ0g9XCJwYXRjaFwiLG8uREVMRVRFPVwiZGVsZXRlXCI7dmFyIHY9ZnVuY3Rpb24oZSl7cmV0dXJuIGYoXCJmaW5pc2hcIix7ZGV0YWlsOnt2aXNpdDplfX0pfSxtPWZ1bmN0aW9uKGUpe3JldHVybiBmKFwibmF2aWdhdGVcIix7ZGV0YWlsOntwYWdlOmV9fSl9LGc9XCJ1bmRlZmluZWRcIj09dHlwZW9mIHdpbmRvdyx3PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3RoaXMudmlzaXRJZD1udWxsfXZhciBuPWUucHJvdG90eXBlO3JldHVybiBuLmluaXQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXNvbHZlQ29tcG9uZW50LG49ZS5zd2FwQ29tcG9uZW50O3RoaXMucGFnZT1lLmluaXRpYWxQYWdlLHRoaXMucmVzb2x2ZUNvbXBvbmVudD10LHRoaXMuc3dhcENvbXBvbmVudD1uLHRoaXMuaXNCYWNrRm9yd2FyZFZpc2l0KCk/dGhpcy5oYW5kbGVCYWNrRm9yd2FyZFZpc2l0KHRoaXMucGFnZSk6dGhpcy5pc0xvY2F0aW9uVmlzaXQoKT90aGlzLmhhbmRsZUxvY2F0aW9uVmlzaXQodGhpcy5wYWdlKTp0aGlzLmhhbmRsZUluaXRpYWxQYWdlVmlzaXQodGhpcy5wYWdlKSx0aGlzLnNldHVwRXZlbnRMaXN0ZW5lcnMoKX0sbi5oYW5kbGVJbml0aWFsUGFnZVZpc2l0PWZ1bmN0aW9uKGUpe3RoaXMucGFnZS51cmwrPXdpbmRvdy5sb2NhdGlvbi5oYXNoLHRoaXMuc2V0UGFnZShlLHtwcmVzZXJ2ZVN0YXRlOiEwfSkudGhlbihmdW5jdGlvbigpe3JldHVybiBtKGUpfSl9LG4uc2V0dXBFdmVudExpc3RlbmVycz1mdW5jdGlvbigpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIix0aGlzLmhhbmRsZVBvcHN0YXRlRXZlbnQuYmluZCh0aGlzKSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLGEodGhpcy5oYW5kbGVTY3JvbGxFdmVudC5iaW5kKHRoaXMpLDEwMCksITApfSxuLnNjcm9sbFJlZ2lvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltzY3JvbGwtcmVnaW9uXVwiKX0sbi5oYW5kbGVTY3JvbGxFdmVudD1mdW5jdGlvbihlKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRhcmdldC5oYXNBdHRyaWJ1dGUmJmUudGFyZ2V0Lmhhc0F0dHJpYnV0ZShcInNjcm9sbC1yZWdpb25cIikmJnRoaXMuc2F2ZVNjcm9sbFBvc2l0aW9ucygpfSxuLnNhdmVTY3JvbGxQb3NpdGlvbnM9ZnVuY3Rpb24oKXt0aGlzLnJlcGxhY2VTdGF0ZShyKHt9LHRoaXMucGFnZSx7c2Nyb2xsUmVnaW9uczpBcnJheS5mcm9tKHRoaXMuc2Nyb2xsUmVnaW9ucygpKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJue3RvcDplLnNjcm9sbFRvcCxsZWZ0OmUuc2Nyb2xsTGVmdH19KX0pKX0sbi5yZXNldFNjcm9sbFBvc2l0aW9ucz1mdW5jdGlvbigpe3ZhciBlO2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A9MCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdD0wLHRoaXMuc2Nyb2xsUmVnaW9ucygpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zY3JvbGxUb3A9MCxlLnNjcm9sbExlZnQ9MH0pLHRoaXMuc2F2ZVNjcm9sbFBvc2l0aW9ucygpLHdpbmRvdy5sb2NhdGlvbi5oYXNoJiYobnVsbD09KGU9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQod2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSkpKXx8ZS5zY3JvbGxJbnRvVmlldygpKX0sbi5yZXN0b3JlU2Nyb2xsUG9zaXRpb25zPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLnBhZ2Uuc2Nyb2xsUmVnaW9ucyYmdGhpcy5zY3JvbGxSZWdpb25zKCkuZm9yRWFjaChmdW5jdGlvbih0LG4pe3ZhciBpPWUucGFnZS5zY3JvbGxSZWdpb25zW25dO2kmJih0LnNjcm9sbFRvcD1pLnRvcCx0LnNjcm9sbExlZnQ9aS5sZWZ0KX0pfSxuLmlzQmFja0ZvcndhcmRWaXNpdD1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSYmd2luZG93LnBlcmZvcm1hbmNlJiZ3aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZShcIm5hdmlnYXRpb25cIikubGVuZ3RoPjAmJlwiYmFja19mb3J3YXJkXCI9PT13aW5kb3cucGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5VHlwZShcIm5hdmlnYXRpb25cIilbMF0udHlwZX0sbi5oYW5kbGVCYWNrRm9yd2FyZFZpc2l0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7d2luZG93Lmhpc3Rvcnkuc3RhdGUudmVyc2lvbj1lLnZlcnNpb24sdGhpcy5zZXRQYWdlKHdpbmRvdy5oaXN0b3J5LnN0YXRlLHtwcmVzZXJ2ZVNjcm9sbDohMCxwcmVzZXJ2ZVN0YXRlOiEwfSkudGhlbihmdW5jdGlvbigpe3QucmVzdG9yZVNjcm9sbFBvc2l0aW9ucygpLG0oZSl9KX0sbi5sb2NhdGlvblZpc2l0PWZ1bmN0aW9uKGUsdCl7dHJ5e3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiaW5lcnRpYUxvY2F0aW9uVmlzaXRcIixKU09OLnN0cmluZ2lmeSh7cHJlc2VydmVTY3JvbGw6dH0pKSx3aW5kb3cubG9jYXRpb24uaHJlZj1lLmhyZWYscCh3aW5kb3cubG9jYXRpb24pLmhyZWY9PT1wKGUpLmhyZWYmJndpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKX1jYXRjaChlKXtyZXR1cm4hMX19LG4uaXNMb2NhdGlvblZpc2l0PWZ1bmN0aW9uKCl7dHJ5e3JldHVybiBudWxsIT09d2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJpbmVydGlhTG9jYXRpb25WaXNpdFwiKX1jYXRjaChlKXtyZXR1cm4hMX19LG4uaGFuZGxlTG9jYXRpb25WaXNpdD1mdW5jdGlvbihlKXt2YXIgdCxuLGkscixvPXRoaXMscz1KU09OLnBhcnNlKHdpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiaW5lcnRpYUxvY2F0aW9uVmlzaXRcIil8fFwiXCIpO3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwiaW5lcnRpYUxvY2F0aW9uVmlzaXRcIiksZS51cmwrPXdpbmRvdy5sb2NhdGlvbi5oYXNoLGUucmVtZW1iZXJlZFN0YXRlPW51bGwhPSh0PW51bGw9PShuPXdpbmRvdy5oaXN0b3J5LnN0YXRlKT92b2lkIDA6bi5yZW1lbWJlcmVkU3RhdGUpP3Q6e30sZS5zY3JvbGxSZWdpb25zPW51bGwhPShpPW51bGw9PShyPXdpbmRvdy5oaXN0b3J5LnN0YXRlKT92b2lkIDA6ci5zY3JvbGxSZWdpb25zKT9pOltdLHRoaXMuc2V0UGFnZShlLHtwcmVzZXJ2ZVNjcm9sbDpzLnByZXNlcnZlU2Nyb2xsLHByZXNlcnZlU3RhdGU6ITB9KS50aGVuKGZ1bmN0aW9uKCl7cy5wcmVzZXJ2ZVNjcm9sbCYmby5yZXN0b3JlU2Nyb2xsUG9zaXRpb25zKCksbShlKX0pfSxuLmlzTG9jYXRpb25WaXNpdFJlc3BvbnNlPWZ1bmN0aW9uKGUpe3JldHVybiBlJiY0MDk9PT1lLnN0YXR1cyYmZS5oZWFkZXJzW1wieC1pbmVydGlhLWxvY2F0aW9uXCJdfSxuLmlzSW5lcnRpYVJlc3BvbnNlPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP3ZvaWQgMDplLmhlYWRlcnNbXCJ4LWluZXJ0aWFcIl19LG4uY3JlYXRlVmlzaXRJZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZpc2l0SWQ9e30sdGhpcy52aXNpdElkfSxuLmNhbmNlbFZpc2l0PWZ1bmN0aW9uKGUsdCl7dmFyIG49dC5jYW5jZWxsZWQsaT12b2lkIDAhPT1uJiZuLHI9dC5pbnRlcnJ1cHRlZCxvPXZvaWQgMCE9PXImJnI7IWV8fGUuY29tcGxldGVkfHxlLmNhbmNlbGxlZHx8ZS5pbnRlcnJ1cHRlZHx8KGUuY2FuY2VsVG9rZW4uY2FuY2VsKCksZS5vbkNhbmNlbCgpLGUuY29tcGxldGVkPSExLGUuY2FuY2VsbGVkPWksZS5pbnRlcnJ1cHRlZD1vLHYoZSksZS5vbkZpbmlzaChlKSl9LG4uZmluaXNoVmlzaXQ9ZnVuY3Rpb24oZSl7ZS5jYW5jZWxsZWR8fGUuaW50ZXJydXB0ZWR8fChlLmNvbXBsZXRlZD0hMCxlLmNhbmNlbGxlZD0hMSxlLmludGVycnVwdGVkPSExLHYoZSksZS5vbkZpbmlzaChlKSl9LG4ucmVzb2x2ZVByZXNlcnZlT3B0aW9uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZT9lKHQpOlwiZXJyb3JzXCI9PT1lP09iamVjdC5rZXlzKHQucHJvcHMuZXJyb3JzfHx7fSkubGVuZ3RoPjA6ZX0sbi52aXNpdD1mdW5jdGlvbihlLG4pe3ZhciBpPXRoaXMsbz12b2lkIDA9PT1uP3t9Om4sYT1vLm1ldGhvZCxsPXZvaWQgMD09PWE/ZXhwb3J0cy5NZXRob2QuR0VUOmEsZD1vLmRhdGEsdj12b2lkIDA9PT1kP3t9OmQsbT1vLnJlcGxhY2UsZz12b2lkIDAhPT1tJiZtLHc9by5wcmVzZXJ2ZVNjcm9sbCx5PXZvaWQgMCE9PXcmJncsUz1vLnByZXNlcnZlU3RhdGUsYj12b2lkIDAhPT1TJiZTLEU9by5vbmx5LFA9dm9pZCAwPT09RT9bXTpFLEk9by5oZWFkZXJzLHg9dm9pZCAwPT09ST97fTpJLFY9by5lcnJvckJhZyxUPXZvaWQgMD09PVY/XCJcIjpWLEw9by5mb3JjZUZvcm1EYXRhLE89dm9pZCAwIT09TCYmTCxrPW8ub25DYW5jZWxUb2tlbixDPXZvaWQgMD09PWs/ZnVuY3Rpb24oKXt9OmssTT1vLm9uQmVmb3JlLEE9dm9pZCAwPT09TT9mdW5jdGlvbigpe306TSxGPW8ub25TdGFydCxSPXZvaWQgMD09PUY/ZnVuY3Rpb24oKXt9OkYsaj1vLm9uUHJvZ3Jlc3MsRD12b2lkIDA9PT1qP2Z1bmN0aW9uKCl7fTpqLEI9by5vbkZpbmlzaCxxPXZvaWQgMD09PUI/ZnVuY3Rpb24oKXt9OkIsTj1vLm9uQ2FuY2VsLEg9dm9pZCAwPT09Tj9mdW5jdGlvbigpe306TixXPW8ub25TdWNjZXNzLEc9dm9pZCAwPT09Vz9mdW5jdGlvbigpe306VyxVPW8ub25FcnJvcixYPXZvaWQgMD09PVU/ZnVuY3Rpb24oKXt9OlUsSj1vLnF1ZXJ5U3RyaW5nQXJyYXlGb3JtYXQsSz12b2lkIDA9PT1KP1wiYnJhY2tldHNcIjpKLF89XCJzdHJpbmdcIj09dHlwZW9mIGU/dShlKTplO2lmKCFmdW5jdGlvbiBlKHQpe3JldHVybiB0IGluc3RhbmNlb2YgRmlsZXx8dCBpbnN0YW5jZW9mIEJsb2J8fHQgaW5zdGFuY2VvZiBGaWxlTGlzdCYmdC5sZW5ndGg+MHx8dCBpbnN0YW5jZW9mIEZvcm1EYXRhJiZBcnJheS5mcm9tKHQudmFsdWVzKCkpLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIGUodCl9KXx8XCJvYmplY3RcIj09dHlwZW9mIHQmJm51bGwhPT10JiZPYmplY3QudmFsdWVzKHQpLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIGUodCl9KX0odikmJiFPfHx2IGluc3RhbmNlb2YgRm9ybURhdGF8fCh2PWModikpLCEodiBpbnN0YW5jZW9mIEZvcm1EYXRhKSl7dmFyIHo9aChsLF8sdixLKSxRPXpbMV07Xz11KHpbMF0pLHY9UX12YXIgWT17dXJsOl8sbWV0aG9kOmwsZGF0YTp2LHJlcGxhY2U6ZyxwcmVzZXJ2ZVNjcm9sbDp5LHByZXNlcnZlU3RhdGU6Yixvbmx5OlAsaGVhZGVyczp4LGVycm9yQmFnOlQsZm9yY2VGb3JtRGF0YTpPLHF1ZXJ5U3RyaW5nQXJyYXlGb3JtYXQ6SyxjYW5jZWxsZWQ6ITEsY29tcGxldGVkOiExLGludGVycnVwdGVkOiExfTtpZighMSE9PUEoWSkmJmZ1bmN0aW9uKGUpe3JldHVybiBmKFwiYmVmb3JlXCIse2NhbmNlbGFibGU6ITAsZGV0YWlsOnt2aXNpdDplfX0pfShZKSl7dGhpcy5hY3RpdmVWaXNpdCYmdGhpcy5jYW5jZWxWaXNpdCh0aGlzLmFjdGl2ZVZpc2l0LHtpbnRlcnJ1cHRlZDohMH0pLHRoaXMuc2F2ZVNjcm9sbFBvc2l0aW9ucygpO3ZhciBaPXRoaXMuY3JlYXRlVmlzaXRJZCgpO3RoaXMuYWN0aXZlVmlzaXQ9cih7fSxZLHtvbkNhbmNlbFRva2VuOkMsb25CZWZvcmU6QSxvblN0YXJ0OlIsb25Qcm9ncmVzczpELG9uRmluaXNoOnEsb25DYW5jZWw6SCxvblN1Y2Nlc3M6RyxvbkVycm9yOlgscXVlcnlTdHJpbmdBcnJheUZvcm1hdDpLLGNhbmNlbFRva2VuOnQuQ2FuY2VsVG9rZW4uc291cmNlKCl9KSxDKHtjYW5jZWw6ZnVuY3Rpb24oKXtpLmFjdGl2ZVZpc2l0JiZpLmNhbmNlbFZpc2l0KGkuYWN0aXZlVmlzaXQse2NhbmNlbGxlZDohMH0pfX0pLGZ1bmN0aW9uKGUpe2YoXCJzdGFydFwiLHtkZXRhaWw6e3Zpc2l0OmV9fSl9KFkpLFIoWSksdCh7bWV0aG9kOmwsdXJsOnAoXykuaHJlZixkYXRhOmw9PT1leHBvcnRzLk1ldGhvZC5HRVQ/e306dixwYXJhbXM6bD09PWV4cG9ydHMuTWV0aG9kLkdFVD92Ont9LGNhbmNlbFRva2VuOnRoaXMuYWN0aXZlVmlzaXQuY2FuY2VsVG9rZW4udG9rZW4saGVhZGVyczpyKHt9LHgse0FjY2VwdDpcInRleHQvaHRtbCwgYXBwbGljYXRpb24veGh0bWwreG1sXCIsXCJYLVJlcXVlc3RlZC1XaXRoXCI6XCJYTUxIdHRwUmVxdWVzdFwiLFwiWC1JbmVydGlhXCI6ITB9LFAubGVuZ3RoP3tcIlgtSW5lcnRpYS1QYXJ0aWFsLUNvbXBvbmVudFwiOnRoaXMucGFnZS5jb21wb25lbnQsXCJYLUluZXJ0aWEtUGFydGlhbC1EYXRhXCI6UC5qb2luKFwiLFwiKX06e30sVCYmVC5sZW5ndGg/e1wiWC1JbmVydGlhLUVycm9yLUJhZ1wiOlR9Ont9LHRoaXMucGFnZS52ZXJzaW9uP3tcIlgtSW5lcnRpYS1WZXJzaW9uXCI6dGhpcy5wYWdlLnZlcnNpb259Ont9KSxvblVwbG9hZFByb2dyZXNzOmZ1bmN0aW9uKGUpe3YgaW5zdGFuY2VvZiBGb3JtRGF0YSYmKGUucGVyY2VudGFnZT1NYXRoLnJvdW5kKGUubG9hZGVkL2UudG90YWwqMTAwKSxmdW5jdGlvbihlKXtmKFwicHJvZ3Jlc3NcIix7ZGV0YWlsOntwcm9ncmVzczplfX0pfShlKSxEKGUpKX19KS50aGVuKGZ1bmN0aW9uKGUpe3ZhciB0O2lmKCFpLmlzSW5lcnRpYVJlc3BvbnNlKGUpKXJldHVybiBQcm9taXNlLnJlamVjdCh7cmVzcG9uc2U6ZX0pO3ZhciBuPWUuZGF0YTtQLmxlbmd0aCYmbi5jb21wb25lbnQ9PT1pLnBhZ2UuY29tcG9uZW50JiYobi5wcm9wcz1yKHt9LGkucGFnZS5wcm9wcyxuLnByb3BzKSkseT1pLnJlc29sdmVQcmVzZXJ2ZU9wdGlvbih5LG4pLChiPWkucmVzb2x2ZVByZXNlcnZlT3B0aW9uKGIsbikpJiZudWxsIT0odD13aW5kb3cuaGlzdG9yeS5zdGF0ZSkmJnQucmVtZW1iZXJlZFN0YXRlJiZuLmNvbXBvbmVudD09PWkucGFnZS5jb21wb25lbnQmJihuLnJlbWVtYmVyZWRTdGF0ZT13aW5kb3cuaGlzdG9yeS5zdGF0ZS5yZW1lbWJlcmVkU3RhdGUpO3ZhciBvPV8scz11KG4udXJsKTtyZXR1cm4gby5oYXNoJiYhcy5oYXNoJiZwKG8pLmhyZWY9PT1zLmhyZWYmJihzLmhhc2g9by5oYXNoLG4udXJsPXMuaHJlZiksaS5zZXRQYWdlKG4se3Zpc2l0SWQ6WixyZXBsYWNlOmcscHJlc2VydmVTY3JvbGw6eSxwcmVzZXJ2ZVN0YXRlOmJ9KX0pLnRoZW4oZnVuY3Rpb24oKXt2YXIgZT1pLnBhZ2UucHJvcHMuZXJyb3JzfHx7fTtpZihPYmplY3Qua2V5cyhlKS5sZW5ndGg+MCl7dmFyIHQ9VD9lW1RdP2VbVF06e306ZTtyZXR1cm4gZnVuY3Rpb24oZSl7ZihcImVycm9yXCIse2RldGFpbDp7ZXJyb3JzOmV9fSl9KHQpLFgodCl9cmV0dXJuIGYoXCJzdWNjZXNzXCIse2RldGFpbDp7cGFnZTppLnBhZ2V9fSksRyhpLnBhZ2UpfSkuY2F0Y2goZnVuY3Rpb24oZSl7aWYoaS5pc0luZXJ0aWFSZXNwb25zZShlLnJlc3BvbnNlKSlyZXR1cm4gaS5zZXRQYWdlKGUucmVzcG9uc2UuZGF0YSx7dmlzaXRJZDpafSk7aWYoaS5pc0xvY2F0aW9uVmlzaXRSZXNwb25zZShlLnJlc3BvbnNlKSl7dmFyIHQ9dShlLnJlc3BvbnNlLmhlYWRlcnNbXCJ4LWluZXJ0aWEtbG9jYXRpb25cIl0pLG49XztuLmhhc2gmJiF0Lmhhc2gmJnAobikuaHJlZj09PXQuaHJlZiYmKHQuaGFzaD1uLmhhc2gpLGkubG9jYXRpb25WaXNpdCh0LCEwPT09eSl9ZWxzZXtpZighZS5yZXNwb25zZSlyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7ZihcImludmFsaWRcIix7Y2FuY2VsYWJsZTohMCxkZXRhaWw6e3Jlc3BvbnNlOmUucmVzcG9uc2V9fSkmJnMuc2hvdyhlLnJlc3BvbnNlLmRhdGEpfX0pLnRoZW4oZnVuY3Rpb24oKXtpLmFjdGl2ZVZpc2l0JiZpLmZpbmlzaFZpc2l0KGkuYWN0aXZlVmlzaXQpfSkuY2F0Y2goZnVuY3Rpb24oZSl7aWYoIXQuaXNDYW5jZWwoZSkpe3ZhciBuPWYoXCJleGNlcHRpb25cIix7Y2FuY2VsYWJsZTohMCxkZXRhaWw6e2V4Y2VwdGlvbjplfX0pO2lmKGkuYWN0aXZlVmlzaXQmJmkuZmluaXNoVmlzaXQoaS5hY3RpdmVWaXNpdCksbilyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSl9fSl9fSxuLnNldFBhZ2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLGk9dm9pZCAwPT09dD97fTp0LHI9aS52aXNpdElkLG89dm9pZCAwPT09cj90aGlzLmNyZWF0ZVZpc2l0SWQoKTpyLHM9aS5yZXBsYWNlLGE9dm9pZCAwIT09cyYmcyxjPWkucHJlc2VydmVTY3JvbGwsbD12b2lkIDAhPT1jJiZjLGQ9aS5wcmVzZXJ2ZVN0YXRlLGg9dm9pZCAwIT09ZCYmZDtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMucmVzb2x2ZUNvbXBvbmVudChlLmNvbXBvbmVudCkpLnRoZW4oZnVuY3Rpb24odCl7bz09PW4udmlzaXRJZCYmKGUuc2Nyb2xsUmVnaW9ucz1lLnNjcm9sbFJlZ2lvbnN8fFtdLGUucmVtZW1iZXJlZFN0YXRlPWUucmVtZW1iZXJlZFN0YXRlfHx7fSwoYT1hfHx1KGUudXJsKS5ocmVmPT09d2luZG93LmxvY2F0aW9uLmhyZWYpP24ucmVwbGFjZVN0YXRlKGUpOm4ucHVzaFN0YXRlKGUpLG4uc3dhcENvbXBvbmVudCh7Y29tcG9uZW50OnQscGFnZTplLHByZXNlcnZlU3RhdGU6aH0pLnRoZW4oZnVuY3Rpb24oKXtsfHxuLnJlc2V0U2Nyb2xsUG9zaXRpb25zKCksYXx8bShlKX0pKX0pfSxuLnB1c2hTdGF0ZT1mdW5jdGlvbihlKXt0aGlzLnBhZ2U9ZSx3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoZSxcIlwiLGUudXJsKX0sbi5yZXBsYWNlU3RhdGU9ZnVuY3Rpb24oZSl7dGhpcy5wYWdlPWUsd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKGUsXCJcIixlLnVybCl9LG4uaGFuZGxlUG9wc3RhdGVFdmVudD1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKG51bGwhPT1lLnN0YXRlKXt2YXIgbj1lLnN0YXRlLGk9dGhpcy5jcmVhdGVWaXNpdElkKCk7UHJvbWlzZS5yZXNvbHZlKHRoaXMucmVzb2x2ZUNvbXBvbmVudChuLmNvbXBvbmVudCkpLnRoZW4oZnVuY3Rpb24oZSl7aT09PXQudmlzaXRJZCYmKHQucGFnZT1uLHQuc3dhcENvbXBvbmVudCh7Y29tcG9uZW50OmUscGFnZTpuLHByZXNlcnZlU3RhdGU6ITF9KS50aGVuKGZ1bmN0aW9uKCl7dC5yZXN0b3JlU2Nyb2xsUG9zaXRpb25zKCksbShuKX0pKX0pfWVsc2V7dmFyIG89dSh0aGlzLnBhZ2UudXJsKTtvLmhhc2g9d2luZG93LmxvY2F0aW9uLmhhc2gsdGhpcy5yZXBsYWNlU3RhdGUocih7fSx0aGlzLnBhZ2Use3VybDpvLmhyZWZ9KSksdGhpcy5yZXNldFNjcm9sbFBvc2l0aW9ucygpfX0sbi5nZXQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT10JiYodD17fSksdm9pZCAwPT09biYmKG49e30pLHRoaXMudmlzaXQoZSxyKHt9LG4se21ldGhvZDpleHBvcnRzLk1ldGhvZC5HRVQsZGF0YTp0fSkpfSxuLnJlbG9hZD1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9e30pLHRoaXMudmlzaXQod2luZG93LmxvY2F0aW9uLmhyZWYscih7fSxlLHtwcmVzZXJ2ZVNjcm9sbDohMCxwcmVzZXJ2ZVN0YXRlOiEwfSkpfSxuLnJlcGxhY2U9ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9e30pLGNvbnNvbGUud2FybihcIkluZXJ0aWEucmVwbGFjZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiBQbGVhc2UgdXNlIEluZXJ0aWEuXCIrKG51bGwhPShuPXQubWV0aG9kKT9uOlwiZ2V0XCIpK1wiKCkgaW5zdGVhZC5cIiksdGhpcy52aXNpdChlLHIoe3ByZXNlcnZlU3RhdGU6ITB9LHQse3JlcGxhY2U6ITB9KSl9LG4ucG9zdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSx2b2lkIDA9PT1uJiYobj17fSksdGhpcy52aXNpdChlLHIoe3ByZXNlcnZlU3RhdGU6ITB9LG4se21ldGhvZDpleHBvcnRzLk1ldGhvZC5QT1NULGRhdGE6dH0pKX0sbi5wdXQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT10JiYodD17fSksdm9pZCAwPT09biYmKG49e30pLHRoaXMudmlzaXQoZSxyKHtwcmVzZXJ2ZVN0YXRlOiEwfSxuLHttZXRob2Q6ZXhwb3J0cy5NZXRob2QuUFVULGRhdGE6dH0pKX0sbi5wYXRjaD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSx2b2lkIDA9PT1uJiYobj17fSksdGhpcy52aXNpdChlLHIoe3ByZXNlcnZlU3RhdGU6ITB9LG4se21ldGhvZDpleHBvcnRzLk1ldGhvZC5QQVRDSCxkYXRhOnR9KSl9LG4uZGVsZXRlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSx0aGlzLnZpc2l0KGUscih7cHJlc2VydmVTdGF0ZTohMH0sdCx7bWV0aG9kOmV4cG9ydHMuTWV0aG9kLkRFTEVURX0pKX0sbi5yZW1lbWJlcj1mdW5jdGlvbihlLHQpe3ZhciBuLGk7dm9pZCAwPT09dCYmKHQ9XCJkZWZhdWx0XCIpLGd8fHRoaXMucmVwbGFjZVN0YXRlKHIoe30sdGhpcy5wYWdlLHtyZW1lbWJlcmVkU3RhdGU6cih7fSxudWxsPT0obj10aGlzLnBhZ2UpP3ZvaWQgMDpuLnJlbWVtYmVyZWRTdGF0ZSwoaT17fSxpW3RdPWUsaSkpfSkpfSxuLnJlc3RvcmU9ZnVuY3Rpb24oZSl7dmFyIHQsbjtpZih2b2lkIDA9PT1lJiYoZT1cImRlZmF1bHRcIiksIWcpcmV0dXJuIG51bGw9PSh0PXdpbmRvdy5oaXN0b3J5LnN0YXRlKXx8bnVsbD09KG49dC5yZW1lbWJlcmVkU3RhdGUpP3ZvaWQgMDpuW2VdfSxuLm9uPWZ1bmN0aW9uKGUsdCl7dmFyIG49ZnVuY3Rpb24oZSl7dmFyIG49dChlKTtlLmNhbmNlbGFibGUmJiFlLmRlZmF1bHRQcmV2ZW50ZWQmJiExPT09biYmZS5wcmV2ZW50RGVmYXVsdCgpfTtyZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImluZXJ0aWE6XCIrZSxuKSxmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiaW5lcnRpYTpcIitlLG4pfX0sZX0oKSx5PXtidWlsZERPTUVsZW1lbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO3QuaW5uZXJIVE1MPWU7dmFyIG49dC5jb250ZW50LmZpcnN0Q2hpbGQ7aWYoIWUuc3RhcnRzV2l0aChcIjxzY3JpcHQgXCIpKXJldHVybiBuO3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7cmV0dXJuIGkuaW5uZXJIVE1MPW4uaW5uZXJIVE1MLG4uZ2V0QXR0cmlidXRlTmFtZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2kuc2V0QXR0cmlidXRlKGUsbi5nZXRBdHRyaWJ1dGUoZSl8fFwiXCIpfSksaX0saXNJbmVydGlhTWFuYWdlZEVsZW1lbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmbnVsbCE9PWUuZ2V0QXR0cmlidXRlKFwiaW5lcnRpYVwiKX0sZmluZE1hdGNoaW5nRWxlbWVudEluZGV4OmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5nZXRBdHRyaWJ1dGUoXCJpbmVydGlhXCIpO3JldHVybiBudWxsIT09bj90LmZpbmRJbmRleChmdW5jdGlvbihlKXtyZXR1cm4gZS5nZXRBdHRyaWJ1dGUoXCJpbmVydGlhXCIpPT09bn0pOi0xfSx1cGRhdGU6YShmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHQuYnVpbGRET01FbGVtZW50KGUpfSk7QXJyYXkuZnJvbShkb2N1bWVudC5oZWFkLmNoaWxkTm9kZXMpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gdC5pc0luZXJ0aWFNYW5hZ2VkRWxlbWVudChlKX0pLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIGk9dC5maW5kTWF0Y2hpbmdFbGVtZW50SW5kZXgoZSxuKTtpZigtMSE9PWkpe3ZhciByLG89bi5zcGxpY2UoaSwxKVswXTtvJiYhZS5pc0VxdWFsTm9kZShvKSYmKG51bGw9PWV8fG51bGw9PShyPWUucGFyZW50Tm9kZSl8fHIucmVwbGFjZUNoaWxkKG8sZSkpfWVsc2V7dmFyIHM7bnVsbD09ZXx8bnVsbD09KHM9ZS5wYXJlbnROb2RlKXx8cy5yZW1vdmVDaGlsZChlKX19KSxuLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZSl9KX0sMSl9LFM9bmV3IHc7ZXhwb3J0cy5JbmVydGlhPVMsZXhwb3J0cy5jcmVhdGVIZWFkTWFuYWdlcj1mdW5jdGlvbihlLHQsbil7dmFyIGk9e30scj0wO2Z1bmN0aW9uIG8oKXt2YXIgZT1PYmplY3QudmFsdWVzKGkpLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybiBlLmNvbmNhdCh0KX0sW10pLnJlZHVjZShmdW5jdGlvbihlLG4pe2lmKC0xPT09bi5pbmRleE9mKFwiPFwiKSlyZXR1cm4gZTtpZigwPT09bi5pbmRleE9mKFwiPHRpdGxlIFwiKSl7dmFyIGk9bi5tYXRjaCgvKDx0aXRsZSBbXj5dKz4pKC4qPykoPFxcL3RpdGxlPikvKTtyZXR1cm4gZS50aXRsZT1pP1wiXCIraVsxXSt0KGlbMl0pK2lbM106bixlfXZhciByPW4ubWF0Y2goLyBpbmVydGlhPVwiW15cIl0rXCIvKTtyZXR1cm4gcj9lW3JbMF1dPW46ZVtPYmplY3Qua2V5cyhlKS5sZW5ndGhdPW4sZX0se30pO3JldHVybiBPYmplY3QudmFsdWVzKGUpfWZ1bmN0aW9uIHMoKXtlP24obygpKTp5LnVwZGF0ZShvKCkpfXJldHVybntjcmVhdGVQcm92aWRlcjpmdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKCl7dmFyIGU9cis9MTtyZXR1cm4gaVtlXT1bXSxlLnRvU3RyaW5nKCl9KCk7cmV0dXJue3VwZGF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD1bXSksbnVsbCE9PWUmJk9iamVjdC5rZXlzKGkpLmluZGV4T2YoZSk+LTEmJihpW2VdPXQpLHMoKX0oZSx0KX0sZGlzY29ubmVjdDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtudWxsIT09ZSYmLTEhPT1PYmplY3Qua2V5cyhpKS5pbmRleE9mKGUpJiYoZGVsZXRlIGlbZV0scygpKX0oZSl9fX19fSxleHBvcnRzLmhyZWZUb1VybD11LGV4cG9ydHMubWVyZ2VEYXRhSW50b1F1ZXJ5U3RyaW5nPWgsZXhwb3J0cy5zaG91bGRJbnRlcmNlcHQ9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJhXCI9PT1lLmN1cnJlbnRUYXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiEoZS50YXJnZXQmJm51bGwhPWUmJmUudGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlfHxlLmRlZmF1bHRQcmV2ZW50ZWR8fHQmJmUud2hpY2g+MXx8dCYmZS5hbHRLZXl8fHQmJmUuY3RybEtleXx8dCYmZS5tZXRhS2V5fHx0JiZlLnNoaWZ0S2V5KX0sZXhwb3J0cy51cmxXaXRob3V0SGFzaD1wO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJ2YXIgbixlPShuPXJlcXVpcmUoXCJucHJvZ3Jlc3NcIikpJiZcIm9iamVjdFwiPT10eXBlb2YgbiYmXCJkZWZhdWx0XCJpbiBuP24uZGVmYXVsdDpuLHQ9bnVsbDtmdW5jdGlvbiByKG4pe2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbmVydGlhOnN0YXJ0XCIsby5iaW5kKG51bGwsbikpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbmVydGlhOnByb2dyZXNzXCIsaSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImluZXJ0aWE6ZmluaXNoXCIscyl9ZnVuY3Rpb24gbyhuKXt0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gZS5zdGFydCgpfSxuKX1mdW5jdGlvbiBpKG4pe2UuaXNTdGFydGVkKCkmJm4uZGV0YWlsLnByb2dyZXNzLnBlcmNlbnRhZ2UmJmUuc2V0KE1hdGgubWF4KGUuc3RhdHVzLG4uZGV0YWlsLnByb2dyZXNzLnBlcmNlbnRhZ2UvMTAwKi45KSl9ZnVuY3Rpb24gcyhuKXtjbGVhclRpbWVvdXQodCksZS5pc1N0YXJ0ZWQoKSYmKG4uZGV0YWlsLnZpc2l0LmNvbXBsZXRlZD9lLmRvbmUoKTpuLmRldGFpbC52aXNpdC5pbnRlcnJ1cHRlZD9lLnNldCgwKTpuLmRldGFpbC52aXNpdC5jYW5jZWxsZWQmJihlLmRvbmUoKSxlLnJlbW92ZSgpKSl9ZXhwb3J0cy5JbmVydGlhUHJvZ3Jlc3M9e2luaXQ6ZnVuY3Rpb24obil7dmFyIHQ9dm9pZCAwPT09bj97fTpuLG89dC5kZWxheSxpPXQuY29sb3Iscz12b2lkIDA9PT1pP1wiIzI5ZFwiOmksYT10LmluY2x1ZGVDU1MscD12b2lkIDA9PT1hfHxhLGQ9dC5zaG93U3Bpbm5lcixsPXZvaWQgMCE9PWQmJmQ7cih2b2lkIDA9PT1vPzI1MDpvKSxlLmNvbmZpZ3VyZSh7c2hvd1NwaW5uZXI6bH0pLHAmJmZ1bmN0aW9uKG4pe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtlLnR5cGU9XCJ0ZXh0L2Nzc1wiLGUudGV4dENvbnRlbnQ9XCJcXG4gICAgI25wcm9ncmVzcyB7XFxuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIH1cXG5cXG4gICAgI25wcm9ncmVzcyAuYmFyIHtcXG4gICAgICBiYWNrZ3JvdW5kOiBcIituK1wiO1xcblxcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgICB6LWluZGV4OiAxMDMxO1xcbiAgICAgIHRvcDogMDtcXG4gICAgICBsZWZ0OiAwO1xcblxcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGhlaWdodDogMnB4O1xcbiAgICB9XFxuXFxuICAgICNucHJvZ3Jlc3MgLnBlZyB7XFxuICAgICAgZGlzcGxheTogYmxvY2s7XFxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICAgIHJpZ2h0OiAwcHg7XFxuICAgICAgd2lkdGg6IDEwMHB4O1xcbiAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICBib3gtc2hhZG93OiAwIDAgMTBweCBcIituK1wiLCAwIDAgNXB4IFwiK24rXCI7XFxuICAgICAgb3BhY2l0eTogMS4wO1xcblxcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoM2RlZykgdHJhbnNsYXRlKDBweCwgLTRweCk7XFxuICAgICAgICAgIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgzZGVnKSB0cmFuc2xhdGUoMHB4LCAtNHB4KTtcXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDNkZWcpIHRyYW5zbGF0ZSgwcHgsIC00cHgpO1xcbiAgICB9XFxuXFxuICAgICNucHJvZ3Jlc3MgLnNwaW5uZXIge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgICB6LWluZGV4OiAxMDMxO1xcbiAgICAgIHRvcDogMTVweDtcXG4gICAgICByaWdodDogMTVweDtcXG4gICAgfVxcblxcbiAgICAjbnByb2dyZXNzIC5zcGlubmVyLWljb24ge1xcbiAgICAgIHdpZHRoOiAxOHB4O1xcbiAgICAgIGhlaWdodDogMThweDtcXG4gICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcblxcbiAgICAgIGJvcmRlcjogc29saWQgMnB4IHRyYW5zcGFyZW50O1xcbiAgICAgIGJvcmRlci10b3AtY29sb3I6IFwiK24rXCI7XFxuICAgICAgYm9yZGVyLWxlZnQtY29sb3I6IFwiK24rXCI7XFxuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xcblxcbiAgICAgIC13ZWJraXQtYW5pbWF0aW9uOiBucHJvZ3Jlc3Mtc3Bpbm5lciA0MDBtcyBsaW5lYXIgaW5maW5pdGU7XFxuICAgICAgICAgICAgICBhbmltYXRpb246IG5wcm9ncmVzcy1zcGlubmVyIDQwMG1zIGxpbmVhciBpbmZpbml0ZTtcXG4gICAgfVxcblxcbiAgICAubnByb2dyZXNzLWN1c3RvbS1wYXJlbnQge1xcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB9XFxuXFxuICAgIC5ucHJvZ3Jlc3MtY3VzdG9tLXBhcmVudCAjbnByb2dyZXNzIC5zcGlubmVyLFxcbiAgICAubnByb2dyZXNzLWN1c3RvbS1wYXJlbnQgI25wcm9ncmVzcyAuYmFyIHtcXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIH1cXG5cXG4gICAgQC13ZWJraXQta2V5ZnJhbWVzIG5wcm9ncmVzcy1zcGlubmVyIHtcXG4gICAgICAwJSAgIHsgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxcbiAgICAgIDEwMCUgeyAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7IH1cXG4gICAgfVxcbiAgICBAa2V5ZnJhbWVzIG5wcm9ncmVzcy1zcGlubmVyIHtcXG4gICAgICAwJSAgIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG4gICAgICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfVxcbiAgICB9XFxuICBcIixkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGUpfShzKX19O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4uL2NvcmUvYnVpbGRGdWxsUGF0aCcpO1xudmFyIHBhcnNlSGVhZGVycyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9wYXJzZUhlYWRlcnMnKTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luJyk7XG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL2NyZWF0ZUVycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCAgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBjb25maWcudHJhbnNpdGlvbmFsICYmIGNvbmZpZy50cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/ICdFVElNRURPVVQnIDogJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGF4aW9zLmRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbDtcblxuICBpZiAodHJhbnNpdGlvbmFsICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4sICcxLjAuMCcpLFxuICAgICAgZm9yY2VkSlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiwgJzEuMC4wJyksXG4gICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4sICcxLjAuMCcpXG4gICAgfSwgZmFsc2UpO1xuICB9XG5cbiAgLy8gZmlsdGVyIG91dCBza2lwcGVkIGludGVyY2VwdG9yc1xuICB2YXIgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdmFyIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHRydWU7XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcHJvbWlzZTtcblxuICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG5cbiAgICBBcnJheS5wcm90b3R5cGUudW5zaGlmdC5hcHBseShjaGFpbiwgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4pO1xuICAgIGNoYWluID0gY2hhaW4uY29uY2F0KHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG5cbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG5cbiAgdmFyIG5ld0NvbmZpZyA9IGNvbmZpZztcbiAgd2hpbGUgKHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHZhciBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdmFyIG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHRyeSB7XG4gICAgICBuZXdDb25maWcgPSBvbkZ1bGZpbGxlZChuZXdDb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBvblJlamVjdGVkKGVycm9yKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdChuZXdDb25maWcpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cblxuICB3aGlsZSAocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCksIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIHZhciBjb250ZXh0ID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb250ZXh0LCBkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9jb3JlL2VuaGFuY2VFcnJvcicpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB7XG4gICAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gICAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2VcbiAgfSxcblxuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpIHx8IChoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICB2YXIgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBlbmhhbmNlRXJyb3IoZSwgdGhpcywgJ0VfSlNPTl9QQVJTRScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB2YXIgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuXG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuICh0eXBlb2YgcGF5bG9hZCA9PT0gJ29iamVjdCcpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBwa2cgPSByZXF1aXJlKCcuLy4uLy4uL3BhY2thZ2UuanNvbicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goZnVuY3Rpb24odHlwZSwgaSkge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxudmFyIGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xudmFyIGN1cnJlbnRWZXJBcnIgPSBwa2cudmVyc2lvbi5zcGxpdCgnLicpO1xuXG4vKipcbiAqIENvbXBhcmUgcGFja2FnZSB2ZXJzaW9uc1xuICogQHBhcmFtIHtzdHJpbmd9IHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gdGhhblZlcnNpb25cbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc09sZGVyVmVyc2lvbih2ZXJzaW9uLCB0aGFuVmVyc2lvbikge1xuICB2YXIgcGtnVmVyc2lvbkFyciA9IHRoYW5WZXJzaW9uID8gdGhhblZlcnNpb24uc3BsaXQoJy4nKSA6IGN1cnJlbnRWZXJBcnI7XG4gIHZhciBkZXN0VmVyID0gdmVyc2lvbi5zcGxpdCgnLicpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgIGlmIChwa2dWZXJzaW9uQXJyW2ldID4gZGVzdFZlcltpXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChwa2dWZXJzaW9uQXJyW2ldIDwgZGVzdFZlcltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvclxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgdmFyIGlzRGVwcmVjYXRlZCA9IHZlcnNpb24gJiYgaXNPbGRlclZlcnNpb24odmVyc2lvbik7XG5cbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIHBrZy52ZXJzaW9uICsgJ10gVHJhbnNpdGlvbmFsIG9wdGlvbiBcXCcnICsgb3B0ICsgJ1xcJycgKyBkZXNjICsgKG1lc3NhZ2UgPyAnLiAnICsgbWVzc2FnZSA6ICcnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3B0LCBvcHRzKSB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkIGluICcgKyB2ZXJzaW9uKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGVwcmVjYXRlZCAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPbGRlclZlcnNpb246IGlzT2xkZXJWZXJzaW9uLFxuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnLCB0cnVlKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZGVmaW5lUHJvcGVydHklJywgdHJ1ZSk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdHZhciBmdW5jID0gJHJlZmxlY3RBcHBseShiaW5kLCAkY2FsbCwgYXJndW1lbnRzKTtcblx0aWYgKCRnT1BEICYmICRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdHZhciBkZXNjID0gJGdPUEQoZnVuYywgJ2xlbmd0aCcpO1xuXHRcdGlmIChkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdFx0Ly8gb3JpZ2luYWwgbGVuZ3RoLCBwbHVzIHRoZSByZWNlaXZlciwgbWludXMgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIChhZnRlciB0aGUgcmVjZWl2ZXIpXG5cdFx0XHQkZGVmaW5lUHJvcGVydHkoXG5cdFx0XHRcdGZ1bmMsXG5cdFx0XHRcdCdsZW5ndGgnLFxuXHRcdFx0XHR7IHZhbHVlOiAxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpIH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmdW5jO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyICYmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl0pOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gZ2V0TWVyZ2VGdW5jdGlvbihrZXksIG9wdGlvbnMpIHtcblx0aWYgKCFvcHRpb25zLmN1c3RvbU1lcmdlKSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZVxuXHR9XG5cdHZhciBjdXN0b21NZXJnZSA9IG9wdGlvbnMuY3VzdG9tTWVyZ2Uoa2V5KTtcblx0cmV0dXJuIHR5cGVvZiBjdXN0b21NZXJnZSA9PT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbU1lcmdlIDogZGVlcG1lcmdlXG59XG5cbmZ1bmN0aW9uIGdldEVudW1lcmFibGVPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzXG5cdFx0PyBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkuZmlsdGVyKGZ1bmN0aW9uKHN5bWJvbCkge1xuXHRcdFx0cmV0dXJuIHRhcmdldC5wcm9wZXJ0eUlzRW51bWVyYWJsZShzeW1ib2wpXG5cdFx0fSlcblx0XHQ6IFtdXG59XG5cbmZ1bmN0aW9uIGdldEtleXModGFyZ2V0KSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyh0YXJnZXQpLmNvbmNhdChnZXRFbnVtZXJhYmxlT3duUHJvcGVydHlTeW1ib2xzKHRhcmdldCkpXG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5SXNPbk9iamVjdChvYmplY3QsIHByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHByb3BlcnR5IGluIG9iamVjdFxuXHR9IGNhdGNoKF8pIHtcblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxufVxuXG4vLyBQcm90ZWN0cyBmcm9tIHByb3RvdHlwZSBwb2lzb25pbmcgYW5kIHVuZXhwZWN0ZWQgbWVyZ2luZyB1cCB0aGUgcHJvdG90eXBlIGNoYWluLlxuZnVuY3Rpb24gcHJvcGVydHlJc1Vuc2FmZSh0YXJnZXQsIGtleSkge1xuXHRyZXR1cm4gcHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAvLyBQcm9wZXJ0aWVzIGFyZSBzYWZlIHRvIG1lcmdlIGlmIHRoZXkgZG9uJ3QgZXhpc3QgaW4gdGhlIHRhcmdldCB5ZXQsXG5cdFx0JiYgIShPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkgLy8gdW5zYWZlIGlmIHRoZXkgZXhpc3QgdXAgdGhlIHByb3RvdHlwZSBjaGFpbixcblx0XHRcdCYmIE9iamVjdC5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldCwga2V5KSkgLy8gYW5kIGFsc28gdW5zYWZlIGlmIHRoZXkncmUgbm9uZW51bWVyYWJsZS5cbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRnZXRLZXlzKHRhcmdldCkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh0YXJnZXRba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSk7XG5cdH1cblx0Z2V0S2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKHByb3BlcnR5SXNVbnNhZmUodGFyZ2V0LCBrZXkpKSB7XG5cdFx0XHRyZXR1cm5cblx0XHR9XG5cblx0XHRpZiAocHJvcGVydHlJc09uT2JqZWN0KHRhcmdldCwga2V5KSAmJiBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGdldE1lcmdlRnVuY3Rpb24oa2V5LCBvcHRpb25zKSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cdC8vIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkIGlzIGFkZGVkIHRvIGBvcHRpb25zYCBzbyB0aGF0IGN1c3RvbSBhcnJheU1lcmdlKClcblx0Ly8gaW1wbGVtZW50YXRpb25zIGNhbiB1c2UgaXQuIFRoZSBjYWxsZXIgbWF5IG5vdCByZXBsYWNlIGl0LlxuXHRvcHRpb25zLmNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQ7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwbWVyZ2VfMTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdW5kZWZpbmVkO1xuXG52YXIgJFN5bnRheEVycm9yID0gU3ludGF4RXJyb3I7XG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG52YXIgZ2V0RXZhbGxlZENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKGV4cHJlc3Npb25TeW50YXgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gJEZ1bmN0aW9uKCdcInVzZSBzdHJpY3RcIjsgcmV0dXJuICgnICsgZXhwcmVzc2lvblN5bnRheCArICcpLmNvbnN0cnVjdG9yOycpKCk7XG5cdH0gY2F0Y2ggKGUpIHt9XG59O1xuXG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoe30sICcnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdCRnT1BEID0gbnVsbDsgLy8gdGhpcyBpcyBJRSA4LCB3aGljaCBoYXMgYSBicm9rZW4gZ09QRFxuXHR9XG59XG5cbnZhciB0aHJvd1R5cGVFcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoKTtcbn07XG52YXIgVGhyb3dUeXBlRXJyb3IgPSAkZ09QRFxuXHQ/IChmdW5jdGlvbiAoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMsIG5vLWNhbGxlciwgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5cdFx0XHRhcmd1bWVudHMuY2FsbGVlOyAvLyBJRSA4IGRvZXMgbm90IHRocm93IGhlcmVcblx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHR9IGNhdGNoIChjYWxsZWVUaHJvd3MpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdC8vIElFIDggdGhyb3dzIG9uIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYXJndW1lbnRzLCAnJylcblx0XHRcdFx0cmV0dXJuICRnT1BEKGFyZ3VtZW50cywgJ2NhbGxlZScpLmdldDtcblx0XHRcdH0gY2F0Y2ggKGdPUER0aHJvd3MpIHtcblx0XHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fSgpKVxuXHQ6IHRocm93VHlwZUVycm9yO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuXG52YXIgbmVlZHNFdmFsID0ge307XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHQnJUFnZ3JlZ2F0ZUVycm9yJSc6IHR5cGVvZiBBZ2dyZWdhdGVFcnJvciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBZ2dyZWdhdGVFcnJvcixcblx0JyVBcnJheSUnOiBBcnJheSxcblx0JyVBcnJheUJ1ZmZlciUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IG5lZWRzRXZhbCxcblx0JyVBdG9taWNzJSc6IHR5cGVvZiBBdG9taWNzID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEF0b21pY3MsXG5cdCclQmlnSW50JSc6IHR5cGVvZiBCaWdJbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50LFxuXHQnJUJvb2xlYW4lJzogQm9vbGVhbixcblx0JyVEYXRhVmlldyUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcsXG5cdCclRGF0ZSUnOiBEYXRlLFxuXHQnJWRlY29kZVVSSSUnOiBkZWNvZGVVUkksXG5cdCclZGVjb2RlVVJJQ29tcG9uZW50JSc6IGRlY29kZVVSSUNvbXBvbmVudCxcblx0JyVlbmNvZGVVUkklJzogZW5jb2RlVVJJLFxuXHQnJWVuY29kZVVSSUNvbXBvbmVudCUnOiBlbmNvZGVVUklDb21wb25lbnQsXG5cdCclRXJyb3IlJzogRXJyb3IsXG5cdCclZXZhbCUnOiBldmFsLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV2YWxcblx0JyVFdmFsRXJyb3IlJzogRXZhbEVycm9yLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmluYWxpemF0aW9uUmVnaXN0cnklJzogdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuXHQnJUZ1bmN0aW9uJSc6ICRGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgTWFwKClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVNYXRoJSc6IE1hdGgsXG5cdCclTnVtYmVyJSc6IE51bWJlcixcblx0JyVPYmplY3QlJzogT2JqZWN0LFxuXHQnJXBhcnNlRmxvYXQlJzogcGFyc2VGbG9hdCxcblx0JyVwYXJzZUludCUnOiBwYXJzZUludCxcblx0JyVQcm9taXNlJSc6IHR5cGVvZiBQcm9taXNlID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb21pc2UsXG5cdCclUHJveHklJzogdHlwZW9mIFByb3h5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFByb3h5LFxuXHQnJVJhbmdlRXJyb3IlJzogUmFuZ2VFcnJvcixcblx0JyVSZWZlcmVuY2VFcnJvciUnOiBSZWZlcmVuY2VFcnJvcixcblx0JyVSZWZsZWN0JSc6IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFJlZmxlY3QsXG5cdCclUmVnRXhwJSc6IFJlZ0V4cCxcblx0JyVTZXQlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQsXG5cdCclU2V0SXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgU2V0KClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlciUnOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2hhcmVkQXJyYXlCdWZmZXIsXG5cdCclU3RyaW5nJSc6IFN0cmluZyxcblx0JyVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oJydbU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVTeW1ib2wlJzogaGFzU3ltYm9scyA/IFN5bWJvbCA6IHVuZGVmaW5lZCxcblx0JyVTeW50YXhFcnJvciUnOiAkU3ludGF4RXJyb3IsXG5cdCclVGhyb3dUeXBlRXJyb3IlJzogVGhyb3dUeXBlRXJyb3IsXG5cdCclVHlwZWRBcnJheSUnOiBUeXBlZEFycmF5LFxuXHQnJVR5cGVFcnJvciUnOiAkVHlwZUVycm9yLFxuXHQnJVVpbnQ4QXJyYXklJzogdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhBcnJheSxcblx0JyVVaW50OENsYW1wZWRBcnJheSUnOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhDbGFtcGVkQXJyYXksXG5cdCclVWludDE2QXJyYXklJzogdHlwZW9mIFVpbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQxNkFycmF5LFxuXHQnJVVpbnQzMkFycmF5JSc6IHR5cGVvZiBVaW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MzJBcnJheSxcblx0JyVVUklFcnJvciUnOiBVUklFcnJvcixcblx0JyVXZWFrTWFwJSc6IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtNYXAsXG5cdCclV2Vha1JlZiUnOiB0eXBlb2YgV2Vha1JlZiA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrUmVmLFxuXHQnJVdlYWtTZXQlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldFxufTtcblxudmFyIGRvRXZhbCA9IGZ1bmN0aW9uIGRvRXZhbChuYW1lKSB7XG5cdHZhciB2YWx1ZTtcblx0aWYgKG5hbWUgPT09ICclQXN5bmNGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVHZW5lcmF0b3JGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2Z1bmN0aW9uKiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKSB7XG5cdFx0dmFsdWUgPSBnZXRFdmFsbGVkQ29uc3RydWN0b3IoJ2FzeW5jIGZ1bmN0aW9uKiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNHZW5lcmF0b3IlJykge1xuXHRcdHZhciBmbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJyk7XG5cdFx0aWYgKGZuKSB7XG5cdFx0XHR2YWx1ZSA9IGZuLnByb3RvdHlwZTtcblx0XHR9XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJScpIHtcblx0XHR2YXIgZ2VuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3IlJyk7XG5cdFx0aWYgKGdlbikge1xuXHRcdFx0dmFsdWUgPSBnZXRQcm90byhnZW4ucHJvdG90eXBlKTtcblx0XHR9XG5cdH1cblxuXHRJTlRSSU5TSUNTW25hbWVdID0gdmFsdWU7XG5cblx0cmV0dXJuIHZhbHVlO1xufTtcblxudmFyIExFR0FDWV9BTElBU0VTID0ge1xuXHQnJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b3R5cGUlJzogWydBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVBcnJheVByb3RvX2VudHJpZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZW50cmllcyddLFxuXHQnJUFycmF5UHJvdG9fZm9yRWFjaCUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdmb3JFYWNoJ10sXG5cdCclQXJyYXlQcm90b19rZXlzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2tleXMnXSxcblx0JyVBcnJheVByb3RvX3ZhbHVlcyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICd2YWx1ZXMnXSxcblx0JyVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IFsnQXN5bmNGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBbJ0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3JQcm90b3R5cGUlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGUnXSxcblx0JyVCb29sZWFuUHJvdG90eXBlJSc6IFsnQm9vbGVhbicsICdwcm90b3R5cGUnXSxcblx0JyVEYXRhVmlld1Byb3RvdHlwZSUnOiBbJ0RhdGFWaWV3JywgJ3Byb3RvdHlwZSddLFxuXHQnJURhdGVQcm90b3R5cGUlJzogWydEYXRlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUVycm9yUHJvdG90eXBlJSc6IFsnRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclRXZhbEVycm9yUHJvdG90eXBlJSc6IFsnRXZhbEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUZsb2F0MzJBcnJheVByb3RvdHlwZSUnOiBbJ0Zsb2F0MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDY0QXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDY0QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRnVuY3Rpb25Qcm90b3R5cGUlJzogWydGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3IlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnXSxcblx0JyVHZW5lcmF0b3JQcm90b3R5cGUlJzogWydHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclSW50OEFycmF5UHJvdG90eXBlJSc6IFsnSW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDE2QXJyYXlQcm90b3R5cGUlJzogWydJbnQxNkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDMyQXJyYXlQcm90b3R5cGUlJzogWydJbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUpTT05QYXJzZSUnOiBbJ0pTT04nLCAncGFyc2UnXSxcblx0JyVKU09OU3RyaW5naWZ5JSc6IFsnSlNPTicsICdzdHJpbmdpZnknXSxcblx0JyVNYXBQcm90b3R5cGUlJzogWydNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclTnVtYmVyUHJvdG90eXBlJSc6IFsnTnVtYmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJU9iamVjdFByb3RvdHlwZSUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnXSxcblx0JyVPYmpQcm90b190b1N0cmluZyUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndG9TdHJpbmcnXSxcblx0JyVPYmpQcm90b192YWx1ZU9mJSc6IFsnT2JqZWN0JywgJ3Byb3RvdHlwZScsICd2YWx1ZU9mJ10sXG5cdCclUHJvbWlzZVByb3RvdHlwZSUnOiBbJ1Byb21pc2UnLCAncHJvdG90eXBlJ10sXG5cdCclUHJvbWlzZVByb3RvX3RoZW4lJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZScsICd0aGVuJ10sXG5cdCclUHJvbWlzZV9hbGwlJzogWydQcm9taXNlJywgJ2FsbCddLFxuXHQnJVByb21pc2VfcmVqZWN0JSc6IFsnUHJvbWlzZScsICdyZWplY3QnXSxcblx0JyVQcm9taXNlX3Jlc29sdmUlJzogWydQcm9taXNlJywgJ3Jlc29sdmUnXSxcblx0JyVSYW5nZUVycm9yUHJvdG90eXBlJSc6IFsnUmFuZ2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBbJ1JlZmVyZW5jZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVJlZ0V4cFByb3RvdHlwZSUnOiBbJ1JlZ0V4cCcsICdwcm90b3R5cGUnXSxcblx0JyVTZXRQcm90b3R5cGUlJzogWydTZXQnLCAncHJvdG90eXBlJ10sXG5cdCclU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogWydTaGFyZWRBcnJheUJ1ZmZlcicsICdwcm90b3R5cGUnXSxcblx0JyVTdHJpbmdQcm90b3R5cGUlJzogWydTdHJpbmcnLCAncHJvdG90eXBlJ10sXG5cdCclU3ltYm9sUHJvdG90eXBlJSc6IFsnU3ltYm9sJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bnRheEVycm9yUHJvdG90eXBlJSc6IFsnU3ludGF4RXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZWRBcnJheVByb3RvdHlwZSUnOiBbJ1R5cGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVHlwZUVycm9yUHJvdG90eXBlJSc6IFsnVHlwZUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4QXJyYXlQcm90b3R5cGUlJzogWydVaW50OEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhDbGFtcGVkQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDE2QXJyYXlQcm90b3R5cGUlJzogWydVaW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50MzJBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQzMkFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVSSUVycm9yUHJvdG90eXBlJSc6IFsnVVJJRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha01hcFByb3RvdHlwZSUnOiBbJ1dlYWtNYXAnLCAncHJvdG90eXBlJ10sXG5cdCclV2Vha1NldFByb3RvdHlwZSUnOiBbJ1dlYWtTZXQnLCAncHJvdG90eXBlJ11cbn07XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhcycpO1xudmFyICRjb25jYXQgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgQXJyYXkucHJvdG90eXBlLmNvbmNhdCk7XG52YXIgJHNwbGljZUFwcGx5ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmFwcGx5LCBBcnJheS5wcm90b3R5cGUuc3BsaWNlKTtcbnZhciAkcmVwbGFjZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UpO1xudmFyICRzdHJTbGljZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBTdHJpbmcucHJvdG90eXBlLnNsaWNlKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgZmlyc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAwLCAxKTtcblx0dmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG5cdGlmIChmaXJzdCA9PT0gJyUnICYmIGxhc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWAnKTtcblx0fSBlbHNlIGlmIChsYXN0ID09PSAnJScgJiYgZmlyc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgb3BlbmluZyBgJWAnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IG51bWJlciB8fCBtYXRjaDtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljTmFtZSA9IG5hbWU7XG5cdHZhciBhbGlhcztcblx0aWYgKGhhc093bihMRUdBQ1lfQUxJQVNFUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHRhbGlhcyA9IExFR0FDWV9BTElBU0VTW2ludHJpbnNpY05hbWVdO1xuXHRcdGludHJpbnNpY05hbWUgPSAnJScgKyBhbGlhc1swXSArICclJztcblx0fVxuXG5cdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHR2YXIgdmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY05hbWVdO1xuXHRcdGlmICh2YWx1ZSA9PT0gbmVlZHNFdmFsKSB7XG5cdFx0XHR2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGFsaWFzOiBhbGlhcyxcblx0XHRcdG5hbWU6IGludHJpbnNpY05hbWUsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9O1xuXHR9XG5cblx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHR2YXIgcGFydHMgPSBzdHJpbmdUb1BhdGgobmFtZSk7XG5cdHZhciBpbnRyaW5zaWNCYXNlTmFtZSA9IHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0c1swXSA6ICcnO1xuXG5cdHZhciBpbnRyaW5zaWMgPSBnZXRCYXNlSW50cmluc2ljKCclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnLCBhbGxvd01pc3NpbmcpO1xuXHR2YXIgaW50cmluc2ljUmVhbE5hbWUgPSBpbnRyaW5zaWMubmFtZTtcblx0dmFyIHZhbHVlID0gaW50cmluc2ljLnZhbHVlO1xuXHR2YXIgc2tpcEZ1cnRoZXJDYWNoaW5nID0gZmFsc2U7XG5cblx0dmFyIGFsaWFzID0gaW50cmluc2ljLmFsaWFzO1xuXHRpZiAoYWxpYXMpIHtcblx0XHRpbnRyaW5zaWNCYXNlTmFtZSA9IGFsaWFzWzBdO1xuXHRcdCRzcGxpY2VBcHBseShwYXJ0cywgJGNvbmNhdChbMCwgMV0sIGFsaWFzKSk7XG5cdH1cblxuXHRmb3IgKHZhciBpID0gMSwgaXNPd24gPSB0cnVlOyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHR2YXIgcGFydCA9IHBhcnRzW2ldO1xuXHRcdHZhciBmaXJzdCA9ICRzdHJTbGljZShwYXJ0LCAwLCAxKTtcblx0XHR2YXIgbGFzdCA9ICRzdHJTbGljZShwYXJ0LCAtMSk7XG5cdFx0aWYgKFxuXHRcdFx0KFxuXHRcdFx0XHQoZmlyc3QgPT09ICdcIicgfHwgZmlyc3QgPT09IFwiJ1wiIHx8IGZpcnN0ID09PSAnYCcpXG5cdFx0XHRcdHx8IChsYXN0ID09PSAnXCInIHx8IGxhc3QgPT09IFwiJ1wiIHx8IGxhc3QgPT09ICdgJylcblx0XHRcdClcblx0XHRcdCYmIGZpcnN0ICE9PSBsYXN0XG5cdFx0KSB7XG5cdFx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdwcm9wZXJ0eSBuYW1lcyB3aXRoIHF1b3RlcyBtdXN0IGhhdmUgbWF0Y2hpbmcgcXVvdGVzJyk7XG5cdFx0fVxuXHRcdGlmIChwYXJ0ID09PSAnY29uc3RydWN0b3InIHx8ICFpc093bikge1xuXHRcdFx0c2tpcEZ1cnRoZXJDYWNoaW5nID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpbnRyaW5zaWNCYXNlTmFtZSArPSAnLicgKyBwYXJ0O1xuXHRcdGludHJpbnNpY1JlYWxOYW1lID0gJyUnICsgaW50cmluc2ljQmFzZU5hbWUgKyAnJSc7XG5cblx0XHRpZiAoaGFzT3duKElOVFJJTlNJQ1MsIGludHJpbnNpY1JlYWxOYW1lKSkge1xuXHRcdFx0dmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY1JlYWxOYW1lXTtcblx0XHR9IGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcblx0XHRcdGlmICghKHBhcnQgaW4gdmFsdWUpKSB7XG5cdFx0XHRcdGlmICghYWxsb3dNaXNzaW5nKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Jhc2UgaW50cmluc2ljIGZvciAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgdGhlIHByb3BlcnR5IGlzIG5vdCBhdmFpbGFibGUuJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZvaWQgdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCRnT1BEICYmIChpICsgMSkgPj0gcGFydHMubGVuZ3RoKSB7XG5cdFx0XHRcdHZhciBkZXNjID0gJGdPUEQodmFsdWUsIHBhcnQpO1xuXHRcdFx0XHRpc093biA9ICEhZGVzYztcblxuXHRcdFx0XHQvLyBCeSBjb252ZW50aW9uLCB3aGVuIGEgZGF0YSBwcm9wZXJ0eSBpcyBjb252ZXJ0ZWQgdG8gYW4gYWNjZXNzb3Jcblx0XHRcdFx0Ly8gcHJvcGVydHkgdG8gZW11bGF0ZSBhIGRhdGEgcHJvcGVydHkgdGhhdCBkb2VzIG5vdCBzdWZmZXIgZnJvbVxuXHRcdFx0XHQvLyB0aGUgb3ZlcnJpZGUgbWlzdGFrZSwgdGhhdCBhY2Nlc3NvcidzIGdldHRlciBpcyBtYXJrZWQgd2l0aFxuXHRcdFx0XHQvLyBhbiBgb3JpZ2luYWxWYWx1ZWAgcHJvcGVydHkuIEhlcmUsIHdoZW4gd2UgZGV0ZWN0IHRoaXMsIHdlXG5cdFx0XHRcdC8vIHVwaG9sZCB0aGUgaWxsdXNpb24gYnkgcHJldGVuZGluZyB0byBzZWUgdGhhdCBvcmlnaW5hbCBkYXRhXG5cdFx0XHRcdC8vIHByb3BlcnR5LCBpLmUuLCByZXR1cm5pbmcgdGhlIHZhbHVlIHJhdGhlciB0aGFuIHRoZSBnZXR0ZXJcblx0XHRcdFx0Ly8gaXRzZWxmLlxuXHRcdFx0XHRpZiAoaXNPd24gJiYgJ2dldCcgaW4gZGVzYyAmJiAhKCdvcmlnaW5hbFZhbHVlJyBpbiBkZXNjLmdldCkpIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGRlc2MuZ2V0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlzT3duID0gaGFzT3duKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtwYXJ0XTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlzT3duICYmICFza2lwRnVydGhlckNhY2hpbmcpIHtcblx0XHRcdFx0SU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG9yaWdTeW1ib2wgPSB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2w7XG52YXIgaGFzU3ltYm9sU2hhbSA9IHJlcXVpcmUoJy4vc2hhbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNOYXRpdmVTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2woJ2ZvbycpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2woJ2JhcicpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRyZXR1cm4gaGFzU3ltYm9sU2hhbSgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IGNvbXBsZXhpdHk6IFsyLCAxOF0sIG1heC1zdGF0ZW1lbnRzOiBbMiwgMzNdICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1N5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuIHRydWU7IH1cblxuXHR2YXIgb2JqID0ge307XG5cdHZhciBzeW0gPSBTeW1ib2woJ3Rlc3QnKTtcblx0dmFyIHN5bU9iaiA9IE9iamVjdChzeW0pO1xuXHRpZiAodHlwZW9mIHN5bSA9PT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW1PYmopICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL29iamVjdC5hc3NpZ24vaXNzdWVzLzE3XG5cdC8vIGlmIChzeW0gaW5zdGFuY2VvZiBTeW1ib2wpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uL2dldC1vd24tcHJvcGVydHktc3ltYm9scy9pc3N1ZXMvNFxuXHQvLyBpZiAoIShzeW1PYmogaW5zdGFuY2VvZiBTeW1ib2wpKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIGlmICh0eXBlb2YgU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gaWYgKFN0cmluZyhzeW0pICE9PSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltVmFsID0gNDI7XG5cdG9ialtzeW1dID0gc3ltVmFsO1xuXHRmb3IgKHN5bSBpbiBvYmopIHsgcmV0dXJuIGZhbHNlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLXVucmVhY2hhYmxlLWxvb3Bcblx0aWYgKHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopO1xuXHRpZiAoc3ltcy5sZW5ndGggIT09IDEgfHwgc3ltc1swXSAhPT0gc3ltKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBzeW0pO1xuXHRcdGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSBzeW1WYWwgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlICE9PSB0cnVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gKi9cbnZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbnZhciBjbG9uZWFibGVUYWdzID0ge307XG5jbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG5jbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG5jbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbmNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKipcbiAqIEFkZHMgdGhlIGtleS12YWx1ZSBgcGFpcmAgdG8gYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwYWlyIFRoZSBrZXktdmFsdWUgcGFpciB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBtYXBgLlxuICovXG5mdW5jdGlvbiBhZGRNYXBFbnRyeShtYXAsIHBhaXIpIHtcbiAgLy8gRG9uJ3QgcmV0dXJuIGBtYXAuc2V0YCBiZWNhdXNlIGl0J3Mgbm90IGNoYWluYWJsZSBpbiBJRSAxMS5cbiAgbWFwLnNldChwYWlyWzBdLCBwYWlyWzFdKTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gYHNldGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBtb2RpZnkuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhZGQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBzZXRgLlxuICovXG5mdW5jdGlvbiBhZGRTZXRFbnRyeShzZXQsIHZhbHVlKSB7XG4gIC8vIERvbid0IHJldHVybiBgc2V0LmFkZGAgYmVjYXVzZSBpdCdzIG5vdCBjaGFpbmFibGUgaW4gSUUgMTEuXG4gIHNldC5hZGQodmFsdWUpO1xuICByZXR1cm4gc2V0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlFYWNoKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID8gYXJyYXkubGVuZ3RoIDogMDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsXG4gICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbnZhciByZUlzTmF0aXZlID0gUmVnRXhwKCdeJyArXG4gIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IHJvb3QuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXksXG4gICAgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCksXG4gICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgcmV0dXJuIHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyBkYXRhW2tleV0gIT09IHVuZGVmaW5lZCA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID8gZW50cmllcy5sZW5ndGggOiAwO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPyBlbnRyaWVzLmxlbmd0aCA6IDA7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIGdldE1hcERhdGEodGhpcywga2V5KS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fWydkZWxldGUnXShrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgc3RhY2sgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGNhY2hlID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGNhY2hlIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gY2FjaGUuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNhY2hlID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgY2FjaGUuc2V0KGtleSwgdmFsdWUpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICAvLyBTYWZhcmkgOSBtYWtlcyBgYXJndW1lbnRzLmxlbmd0aGAgZW51bWVyYWJsZSBpbiBzdHJpY3QgbW9kZS5cbiAgdmFyIHJlc3VsdCA9IChpc0FycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpXG4gICAgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpXG4gICAgOiBbXTtcblxuICB2YXIgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aCxcbiAgICAgIHNraXBJbmRleGVzID0gISFsZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoa2V5ID09ICdsZW5ndGgnIHx8IGlzSW5kZXgoa2V5LCBsZW5ndGgpKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0Z1bGxdIFNwZWNpZnkgYSBjbG9uZSBpbmNsdWRpbmcgc3ltYm9scy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgaXNEZWVwLCBpc0Z1bGwsIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoY3VzdG9taXplcikge1xuICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgfVxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICBpZiAoaXNBcnIpIHtcbiAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgaWYgKCFpc0RlZXApIHtcbiAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgIH1cbiAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICBpZiAoaXNIb3N0T2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZU9iamVjdChpc0Z1bmMgPyB7fSA6IHZhbHVlKTtcbiAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgIHJldHVybiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgYmFzZUNsb25lLCBpc0RlZXApO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gIGlmIChzdGFja2VkKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQ7XG4gIH1cbiAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gIGlmICghaXNBcnIpIHtcbiAgICB2YXIgcHJvcHMgPSBpc0Z1bGwgPyBnZXRBbGxLZXlzKHZhbHVlKSA6IGtleXModmFsdWUpO1xuICB9XG4gIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgIGlmIChwcm9wcykge1xuICAgICAga2V5ID0gc3ViVmFsdWU7XG4gICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IHBvcHVsYXRlIGNsb25lIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgaXNEZWVwLCBpc0Z1bGwsIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gYmFzZUNyZWF0ZShwcm90bykge1xuICByZXR1cm4gaXNPYmplY3QocHJvdG8pID8gb2JqZWN0Q3JlYXRlKHByb3RvKSA6IHt9O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBpc0hvc3RPYmplY3QodmFsdWUpKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICBpZiAoaXNEZWVwKSB7XG4gICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICB9XG4gIHZhciByZXN1bHQgPSBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGJ1ZmZlci5sZW5ndGgpO1xuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjbG9uZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNsb25lIHZhbHVlcy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgbWFwLlxuICovXG5mdW5jdGlvbiBjbG9uZU1hcChtYXAsIGlzRGVlcCwgY2xvbmVGdW5jKSB7XG4gIHZhciBhcnJheSA9IGlzRGVlcCA/IGNsb25lRnVuYyhtYXBUb0FycmF5KG1hcCksIHRydWUpIDogbWFwVG9BcnJheShtYXApO1xuICByZXR1cm4gYXJyYXlSZWR1Y2UoYXJyYXksIGFkZE1hcEVudHJ5LCBuZXcgbWFwLmNvbnN0cnVjdG9yKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNsb25lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2xvbmVGdW5jIFRoZSBmdW5jdGlvbiB0byBjbG9uZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHNldC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTZXQoc2V0LCBpc0RlZXAsIGNsb25lRnVuYykge1xuICB2YXIgYXJyYXkgPSBpc0RlZXAgPyBjbG9uZUZ1bmMoc2V0VG9BcnJheShzZXQpLCB0cnVlKSA6IHNldFRvQXJyYXkoc2V0KTtcbiAgcmV0dXJuIGFycmF5UmVkdWNlKGFycmF5LCBhZGRTZXRFbnRyeSwgbmV3IHNldC5jb25zdHJ1Y3Rvcik7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlID09PSB1bmRlZmluZWQgPyBzb3VyY2Vba2V5XSA6IG5ld1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9sIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyB0by5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlTeW1ib2xzKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9sIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSBuYXRpdmVHZXRTeW1ib2xzID8gb3ZlckFyZyhuYXRpdmVHZXRTeW1ib2xzLCBPYmplY3QpIDogc3R1YkFycmF5O1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEsXG4vLyBmb3IgZGF0YSB2aWV3cyBpbiBFZGdlIDwgMTQsIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzLlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNsb25lRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2xvbmUgdmFsdWVzLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgY2xvbmVGdW5jLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHJldHVybiBjbG9uZU1hcChvYmplY3QsIGlzRGVlcCwgY2xvbmVGdW5jKTtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTZXQob2JqZWN0LCBpc0RlZXAsIGNsb25lRnVuYyk7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fCByZUlzVWludC50ZXN0KHZhbHVlKSkgJiZcbiAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgcHJvdG8gPSAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yLnByb3RvdHlwZSkgfHwgb2JqZWN0UHJvdG87XG5cbiAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgdHJ1ZSwgdHJ1ZSk7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAvLyBTYWZhcmkgOC4xIG1ha2VzIGBhcmd1bWVudHMuY2FsbGVlYCBlbnVtZXJhYmxlIGluIHN0cmljdCBtb2RlLlxuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICghcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpIHx8IG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IGFyZ3NUYWcpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc0FycmF5TGlrZWAgZXhjZXB0IHRoYXQgaXQgYWxzbyBjaGVja3MgaWYgYHZhbHVlYFxuICogaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdCgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheUxpa2VPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEZWVwO1xuIiwiLyoqXG4gKiBMb2Rhc2ggKEN1c3RvbSBCdWlsZCkgPGh0dHBzOi8vbG9kYXNoLmNvbS8+XG4gKiBCdWlsZDogYGxvZGFzaCBtb2R1bGFyaXplIGV4cG9ydHM9XCJucG1cIiAtbyAuL2BcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanMuZm91bmRhdGlvbi8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbnZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xudHlwZWRBcnJheVRhZ3NbZmxvYXQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1tmbG9hdDY0VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDhDbGFtcGVkVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG50eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG50eXBlZEFycmF5VGFnc1thcnJheUJ1ZmZlclRhZ10gPSB0eXBlZEFycmF5VGFnc1tib29sVGFnXSA9XG50eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG50eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG50eXBlZEFycmF5VGFnc1ttYXBUYWddID0gdHlwZWRBcnJheVRhZ3NbbnVtYmVyVGFnXSA9XG50eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG50eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG50eXBlZEFycmF5VGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZXhwb3J0c2AuICovXG52YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbnZhciBmcmVlTW9kdWxlID0gZnJlZUV4cG9ydHMgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7XG5cbi8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG52YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBwcm9jZXNzYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG52YXIgbm9kZVV0aWwgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgU3ltYm9sID0gcm9vdC5TeW1ib2wsXG4gICAgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheSxcbiAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlLFxuICAgIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKSxcbiAgICBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpLFxuICAgIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKSxcbiAgICBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpLFxuICAgIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKSxcbiAgICBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8qKlxuICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgYWRkXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBhbGlhcyBwdXNoXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICByZXR1cm4gdGhpcztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzdGFja0RlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZFRhZyA6IG51bGxUYWc7XG4gIH1cbiAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgID8gZ2V0UmF3VGFnKHZhbHVlKVxuICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAqIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBVbm9yZGVyZWQgY29tcGFyaXNvblxuICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgdmFsdWVgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgfVxuICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzVHlwZWRBcnJheWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNUeXBlZEFycmF5KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gIGlmIChzdGFja2VkICYmIHN0YWNrLmdldChvdGhlcikpIHtcbiAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZW9mIHZhbHVlID09ICdudW1iZXInIHx8IHJlSXNVaW50LnRlc3QodmFsdWUpKSAmJlxuICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcgdXNpbmcgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICogZXF1aXZhbGVudC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gKiBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWQgYXJyYXlzLiBgT2JqZWN0YCBvYmplY3RzIGFyZSBjb21wYXJlZFxuICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogb2JqZWN0ID09PSBvdGhlcjtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5cyhuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLmtleXMoJ2hpJyk7XG4gKiAvLyA9PiBbJzAnLCAnMSddXG4gKi9cbmZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXF1YWw7XG4iLCIvKiBOUHJvZ3Jlc3MsIChjKSAyMDEzLCAyMDE0IFJpY28gU3RhLiBDcnV6IC0gaHR0cDovL3JpY29zdGFjcnV6LmNvbS9ucHJvZ3Jlc3NcbiAqIEBsaWNlbnNlIE1JVCAqL1xuXG47KGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZhY3RvcnkpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIHJvb3QuTlByb2dyZXNzID0gZmFjdG9yeSgpO1xuICB9XG5cbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xuICB2YXIgTlByb2dyZXNzID0ge307XG5cbiAgTlByb2dyZXNzLnZlcnNpb24gPSAnMC4yLjAnO1xuXG4gIHZhciBTZXR0aW5ncyA9IE5Qcm9ncmVzcy5zZXR0aW5ncyA9IHtcbiAgICBtaW5pbXVtOiAwLjA4LFxuICAgIGVhc2luZzogJ2Vhc2UnLFxuICAgIHBvc2l0aW9uVXNpbmc6ICcnLFxuICAgIHNwZWVkOiAyMDAsXG4gICAgdHJpY2tsZTogdHJ1ZSxcbiAgICB0cmlja2xlUmF0ZTogMC4wMixcbiAgICB0cmlja2xlU3BlZWQ6IDgwMCxcbiAgICBzaG93U3Bpbm5lcjogdHJ1ZSxcbiAgICBiYXJTZWxlY3RvcjogJ1tyb2xlPVwiYmFyXCJdJyxcbiAgICBzcGlubmVyU2VsZWN0b3I6ICdbcm9sZT1cInNwaW5uZXJcIl0nLFxuICAgIHBhcmVudDogJ2JvZHknLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cImJhclwiIHJvbGU9XCJiYXJcIj48ZGl2IGNsYXNzPVwicGVnXCI+PC9kaXY+PC9kaXY+PGRpdiBjbGFzcz1cInNwaW5uZXJcIiByb2xlPVwic3Bpbm5lclwiPjxkaXYgY2xhc3M9XCJzcGlubmVyLWljb25cIj48L2Rpdj48L2Rpdj4nXG4gIH07XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogICAgIE5Qcm9ncmVzcy5jb25maWd1cmUoe1xuICAgKiAgICAgICBtaW5pbXVtOiAwLjFcbiAgICogICAgIH0pO1xuICAgKi9cbiAgTlByb2dyZXNzLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIga2V5LCB2YWx1ZTtcbiAgICBmb3IgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkgU2V0dGluZ3Nba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBMYXN0IG51bWJlci5cbiAgICovXG5cbiAgTlByb2dyZXNzLnN0YXR1cyA9IG51bGw7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2dyZXNzIGJhciBzdGF0dXMsIHdoZXJlIGBuYCBpcyBhIG51bWJlciBmcm9tIGAwLjBgIHRvIGAxLjBgLlxuICAgKlxuICAgKiAgICAgTlByb2dyZXNzLnNldCgwLjQpO1xuICAgKiAgICAgTlByb2dyZXNzLnNldCgxLjApO1xuICAgKi9cblxuICBOUHJvZ3Jlc3Muc2V0ID0gZnVuY3Rpb24obikge1xuICAgIHZhciBzdGFydGVkID0gTlByb2dyZXNzLmlzU3RhcnRlZCgpO1xuXG4gICAgbiA9IGNsYW1wKG4sIFNldHRpbmdzLm1pbmltdW0sIDEpO1xuICAgIE5Qcm9ncmVzcy5zdGF0dXMgPSAobiA9PT0gMSA/IG51bGwgOiBuKTtcblxuICAgIHZhciBwcm9ncmVzcyA9IE5Qcm9ncmVzcy5yZW5kZXIoIXN0YXJ0ZWQpLFxuICAgICAgICBiYXIgICAgICA9IHByb2dyZXNzLnF1ZXJ5U2VsZWN0b3IoU2V0dGluZ3MuYmFyU2VsZWN0b3IpLFxuICAgICAgICBzcGVlZCAgICA9IFNldHRpbmdzLnNwZWVkLFxuICAgICAgICBlYXNlICAgICA9IFNldHRpbmdzLmVhc2luZztcblxuICAgIHByb2dyZXNzLm9mZnNldFdpZHRoOyAvKiBSZXBhaW50ICovXG5cbiAgICBxdWV1ZShmdW5jdGlvbihuZXh0KSB7XG4gICAgICAvLyBTZXQgcG9zaXRpb25Vc2luZyBpZiBpdCBoYXNuJ3QgYWxyZWFkeSBiZWVuIHNldFxuICAgICAgaWYgKFNldHRpbmdzLnBvc2l0aW9uVXNpbmcgPT09ICcnKSBTZXR0aW5ncy5wb3NpdGlvblVzaW5nID0gTlByb2dyZXNzLmdldFBvc2l0aW9uaW5nQ1NTKCk7XG5cbiAgICAgIC8vIEFkZCB0cmFuc2l0aW9uXG4gICAgICBjc3MoYmFyLCBiYXJQb3NpdGlvbkNTUyhuLCBzcGVlZCwgZWFzZSkpO1xuXG4gICAgICBpZiAobiA9PT0gMSkge1xuICAgICAgICAvLyBGYWRlIG91dFxuICAgICAgICBjc3MocHJvZ3Jlc3MsIHsgXG4gICAgICAgICAgdHJhbnNpdGlvbjogJ25vbmUnLCBcbiAgICAgICAgICBvcGFjaXR5OiAxIFxuICAgICAgICB9KTtcbiAgICAgICAgcHJvZ3Jlc3Mub2Zmc2V0V2lkdGg7IC8qIFJlcGFpbnQgKi9cblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNzcyhwcm9ncmVzcywgeyBcbiAgICAgICAgICAgIHRyYW5zaXRpb246ICdhbGwgJyArIHNwZWVkICsgJ21zIGxpbmVhcicsIFxuICAgICAgICAgICAgb3BhY2l0eTogMCBcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgTlByb2dyZXNzLnJlbW92ZSgpO1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH0sIHNwZWVkKTtcbiAgICAgICAgfSwgc3BlZWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dChuZXh0LCBzcGVlZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBOUHJvZ3Jlc3MuaXNTdGFydGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBOUHJvZ3Jlc3Muc3RhdHVzID09PSAnbnVtYmVyJztcbiAgfTtcblxuICAvKipcbiAgICogU2hvd3MgdGhlIHByb2dyZXNzIGJhci5cbiAgICogVGhpcyBpcyB0aGUgc2FtZSBhcyBzZXR0aW5nIHRoZSBzdGF0dXMgdG8gMCUsIGV4Y2VwdCB0aGF0IGl0IGRvZXNuJ3QgZ28gYmFja3dhcmRzLlxuICAgKlxuICAgKiAgICAgTlByb2dyZXNzLnN0YXJ0KCk7XG4gICAqXG4gICAqL1xuICBOUHJvZ3Jlc3Muc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIU5Qcm9ncmVzcy5zdGF0dXMpIE5Qcm9ncmVzcy5zZXQoMCk7XG5cbiAgICB2YXIgd29yayA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFOUHJvZ3Jlc3Muc3RhdHVzKSByZXR1cm47XG4gICAgICAgIE5Qcm9ncmVzcy50cmlja2xlKCk7XG4gICAgICAgIHdvcmsoKTtcbiAgICAgIH0sIFNldHRpbmdzLnRyaWNrbGVTcGVlZCk7XG4gICAgfTtcblxuICAgIGlmIChTZXR0aW5ncy50cmlja2xlKSB3b3JrKCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogSGlkZXMgdGhlIHByb2dyZXNzIGJhci5cbiAgICogVGhpcyBpcyB0aGUgKnNvcnQgb2YqIHRoZSBzYW1lIGFzIHNldHRpbmcgdGhlIHN0YXR1cyB0byAxMDAlLCB3aXRoIHRoZVxuICAgKiBkaWZmZXJlbmNlIGJlaW5nIGBkb25lKClgIG1ha2VzIHNvbWUgcGxhY2VibyBlZmZlY3Qgb2Ygc29tZSByZWFsaXN0aWMgbW90aW9uLlxuICAgKlxuICAgKiAgICAgTlByb2dyZXNzLmRvbmUoKTtcbiAgICpcbiAgICogSWYgYHRydWVgIGlzIHBhc3NlZCwgaXQgd2lsbCBzaG93IHRoZSBwcm9ncmVzcyBiYXIgZXZlbiBpZiBpdHMgaGlkZGVuLlxuICAgKlxuICAgKiAgICAgTlByb2dyZXNzLmRvbmUodHJ1ZSk7XG4gICAqL1xuXG4gIE5Qcm9ncmVzcy5kb25lID0gZnVuY3Rpb24oZm9yY2UpIHtcbiAgICBpZiAoIWZvcmNlICYmICFOUHJvZ3Jlc3Muc3RhdHVzKSByZXR1cm4gdGhpcztcblxuICAgIHJldHVybiBOUHJvZ3Jlc3MuaW5jKDAuMyArIDAuNSAqIE1hdGgucmFuZG9tKCkpLnNldCgxKTtcbiAgfTtcblxuICAvKipcbiAgICogSW5jcmVtZW50cyBieSBhIHJhbmRvbSBhbW91bnQuXG4gICAqL1xuXG4gIE5Qcm9ncmVzcy5pbmMgPSBmdW5jdGlvbihhbW91bnQpIHtcbiAgICB2YXIgbiA9IE5Qcm9ncmVzcy5zdGF0dXM7XG5cbiAgICBpZiAoIW4pIHtcbiAgICAgIHJldHVybiBOUHJvZ3Jlc3Muc3RhcnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBhbW91bnQgIT09ICdudW1iZXInKSB7XG4gICAgICAgIGFtb3VudCA9ICgxIC0gbikgKiBjbGFtcChNYXRoLnJhbmRvbSgpICogbiwgMC4xLCAwLjk1KTtcbiAgICAgIH1cblxuICAgICAgbiA9IGNsYW1wKG4gKyBhbW91bnQsIDAsIDAuOTk0KTtcbiAgICAgIHJldHVybiBOUHJvZ3Jlc3Muc2V0KG4pO1xuICAgIH1cbiAgfTtcblxuICBOUHJvZ3Jlc3MudHJpY2tsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBOUHJvZ3Jlc3MuaW5jKE1hdGgucmFuZG9tKCkgKiBTZXR0aW5ncy50cmlja2xlUmF0ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdhaXRzIGZvciBhbGwgc3VwcGxpZWQgalF1ZXJ5IHByb21pc2VzIGFuZFxuICAgKiBpbmNyZWFzZXMgdGhlIHByb2dyZXNzIGFzIHRoZSBwcm9taXNlcyByZXNvbHZlLlxuICAgKlxuICAgKiBAcGFyYW0gJHByb21pc2UgalFVZXJ5IFByb21pc2VcbiAgICovXG4gIChmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5pdGlhbCA9IDAsIGN1cnJlbnQgPSAwO1xuXG4gICAgTlByb2dyZXNzLnByb21pc2UgPSBmdW5jdGlvbigkcHJvbWlzZSkge1xuICAgICAgaWYgKCEkcHJvbWlzZSB8fCAkcHJvbWlzZS5zdGF0ZSgpID09PSBcInJlc29sdmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50ID09PSAwKSB7XG4gICAgICAgIE5Qcm9ncmVzcy5zdGFydCgpO1xuICAgICAgfVxuXG4gICAgICBpbml0aWFsKys7XG4gICAgICBjdXJyZW50Kys7XG5cbiAgICAgICRwcm9taXNlLmFsd2F5cyhmdW5jdGlvbigpIHtcbiAgICAgICAgY3VycmVudC0tO1xuICAgICAgICBpZiAoY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgICAgaW5pdGlhbCA9IDA7XG4gICAgICAgICAgICBOUHJvZ3Jlc3MuZG9uZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTlByb2dyZXNzLnNldCgoaW5pdGlhbCAtIGN1cnJlbnQpIC8gaW5pdGlhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gIH0pKCk7XG5cbiAgLyoqXG4gICAqIChJbnRlcm5hbCkgcmVuZGVycyB0aGUgcHJvZ3Jlc3MgYmFyIG1hcmt1cCBiYXNlZCBvbiB0aGUgYHRlbXBsYXRlYFxuICAgKiBzZXR0aW5nLlxuICAgKi9cblxuICBOUHJvZ3Jlc3MucmVuZGVyID0gZnVuY3Rpb24oZnJvbVN0YXJ0KSB7XG4gICAgaWYgKE5Qcm9ncmVzcy5pc1JlbmRlcmVkKCkpIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbnByb2dyZXNzJyk7XG5cbiAgICBhZGRDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICducHJvZ3Jlc3MtYnVzeScpO1xuICAgIFxuICAgIHZhciBwcm9ncmVzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHByb2dyZXNzLmlkID0gJ25wcm9ncmVzcyc7XG4gICAgcHJvZ3Jlc3MuaW5uZXJIVE1MID0gU2V0dGluZ3MudGVtcGxhdGU7XG5cbiAgICB2YXIgYmFyICAgICAgPSBwcm9ncmVzcy5xdWVyeVNlbGVjdG9yKFNldHRpbmdzLmJhclNlbGVjdG9yKSxcbiAgICAgICAgcGVyYyAgICAgPSBmcm9tU3RhcnQgPyAnLTEwMCcgOiB0b0JhclBlcmMoTlByb2dyZXNzLnN0YXR1cyB8fCAwKSxcbiAgICAgICAgcGFyZW50ICAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNldHRpbmdzLnBhcmVudCksXG4gICAgICAgIHNwaW5uZXI7XG4gICAgXG4gICAgY3NzKGJhciwge1xuICAgICAgdHJhbnNpdGlvbjogJ2FsbCAwIGxpbmVhcicsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgnICsgcGVyYyArICclLDAsMCknXG4gICAgfSk7XG5cbiAgICBpZiAoIVNldHRpbmdzLnNob3dTcGlubmVyKSB7XG4gICAgICBzcGlubmVyID0gcHJvZ3Jlc3MucXVlcnlTZWxlY3RvcihTZXR0aW5ncy5zcGlubmVyU2VsZWN0b3IpO1xuICAgICAgc3Bpbm5lciAmJiByZW1vdmVFbGVtZW50KHNwaW5uZXIpO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnQgIT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgYWRkQ2xhc3MocGFyZW50LCAnbnByb2dyZXNzLWN1c3RvbS1wYXJlbnQnKTtcbiAgICB9XG5cbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQocHJvZ3Jlc3MpO1xuICAgIHJldHVybiBwcm9ncmVzcztcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGUgZWxlbWVudC4gT3Bwb3NpdGUgb2YgcmVuZGVyKCkuXG4gICAqL1xuXG4gIE5Qcm9ncmVzcy5yZW1vdmUgPSBmdW5jdGlvbigpIHtcbiAgICByZW1vdmVDbGFzcyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICducHJvZ3Jlc3MtYnVzeScpO1xuICAgIHJlbW92ZUNsYXNzKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU2V0dGluZ3MucGFyZW50KSwgJ25wcm9ncmVzcy1jdXN0b20tcGFyZW50Jyk7XG4gICAgdmFyIHByb2dyZXNzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25wcm9ncmVzcycpO1xuICAgIHByb2dyZXNzICYmIHJlbW92ZUVsZW1lbnQocHJvZ3Jlc3MpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHByb2dyZXNzIGJhciBpcyByZW5kZXJlZC5cbiAgICovXG5cbiAgTlByb2dyZXNzLmlzUmVuZGVyZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gISFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbnByb2dyZXNzJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERldGVybWluZSB3aGljaCBwb3NpdGlvbmluZyBDU1MgcnVsZSB0byB1c2UuXG4gICAqL1xuXG4gIE5Qcm9ncmVzcy5nZXRQb3NpdGlvbmluZ0NTUyA9IGZ1bmN0aW9uKCkge1xuICAgIC8vIFNuaWZmIG9uIGRvY3VtZW50LmJvZHkuc3R5bGVcbiAgICB2YXIgYm9keVN0eWxlID0gZG9jdW1lbnQuYm9keS5zdHlsZTtcblxuICAgIC8vIFNuaWZmIHByZWZpeGVzXG4gICAgdmFyIHZlbmRvclByZWZpeCA9ICgnV2Via2l0VHJhbnNmb3JtJyBpbiBib2R5U3R5bGUpID8gJ1dlYmtpdCcgOlxuICAgICAgICAgICAgICAgICAgICAgICAoJ01velRyYW5zZm9ybScgaW4gYm9keVN0eWxlKSA/ICdNb3onIDpcbiAgICAgICAgICAgICAgICAgICAgICAgKCdtc1RyYW5zZm9ybScgaW4gYm9keVN0eWxlKSA/ICdtcycgOlxuICAgICAgICAgICAgICAgICAgICAgICAoJ09UcmFuc2Zvcm0nIGluIGJvZHlTdHlsZSkgPyAnTycgOiAnJztcblxuICAgIGlmICh2ZW5kb3JQcmVmaXggKyAnUGVyc3BlY3RpdmUnIGluIGJvZHlTdHlsZSkge1xuICAgICAgLy8gTW9kZXJuIGJyb3dzZXJzIHdpdGggM0Qgc3VwcG9ydCwgZS5nLiBXZWJraXQsIElFMTBcbiAgICAgIHJldHVybiAndHJhbnNsYXRlM2QnO1xuICAgIH0gZWxzZSBpZiAodmVuZG9yUHJlZml4ICsgJ1RyYW5zZm9ybScgaW4gYm9keVN0eWxlKSB7XG4gICAgICAvLyBCcm93c2VycyB3aXRob3V0IDNEIHN1cHBvcnQsIGUuZy4gSUU5XG4gICAgICByZXR1cm4gJ3RyYW5zbGF0ZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEJyb3dzZXJzIHdpdGhvdXQgdHJhbnNsYXRlKCkgc3VwcG9ydCwgZS5nLiBJRTctOFxuICAgICAgcmV0dXJuICdtYXJnaW4nO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogSGVscGVyc1xuICAgKi9cblxuICBmdW5jdGlvbiBjbGFtcChuLCBtaW4sIG1heCkge1xuICAgIGlmIChuIDwgbWluKSByZXR1cm4gbWluO1xuICAgIGlmIChuID4gbWF4KSByZXR1cm4gbWF4O1xuICAgIHJldHVybiBuO1xuICB9XG5cbiAgLyoqXG4gICAqIChJbnRlcm5hbCkgY29udmVydHMgYSBwZXJjZW50YWdlIChgMC4uMWApIHRvIGEgYmFyIHRyYW5zbGF0ZVhcbiAgICogcGVyY2VudGFnZSAoYC0xMDAlLi4wJWApLlxuICAgKi9cblxuICBmdW5jdGlvbiB0b0JhclBlcmMobikge1xuICAgIHJldHVybiAoLTEgKyBuKSAqIDEwMDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIChJbnRlcm5hbCkgcmV0dXJucyB0aGUgY29ycmVjdCBDU1MgZm9yIGNoYW5naW5nIHRoZSBiYXInc1xuICAgKiBwb3NpdGlvbiBnaXZlbiBhbiBuIHBlcmNlbnRhZ2UsIGFuZCBzcGVlZCBhbmQgZWFzZSBmcm9tIFNldHRpbmdzXG4gICAqL1xuXG4gIGZ1bmN0aW9uIGJhclBvc2l0aW9uQ1NTKG4sIHNwZWVkLCBlYXNlKSB7XG4gICAgdmFyIGJhckNTUztcblxuICAgIGlmIChTZXR0aW5ncy5wb3NpdGlvblVzaW5nID09PSAndHJhbnNsYXRlM2QnKSB7XG4gICAgICBiYXJDU1MgPSB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKCcrdG9CYXJQZXJjKG4pKyclLDAsMCknIH07XG4gICAgfSBlbHNlIGlmIChTZXR0aW5ncy5wb3NpdGlvblVzaW5nID09PSAndHJhbnNsYXRlJykge1xuICAgICAgYmFyQ1NTID0geyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyt0b0JhclBlcmMobikrJyUsMCknIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhckNTUyA9IHsgJ21hcmdpbi1sZWZ0JzogdG9CYXJQZXJjKG4pKyclJyB9O1xuICAgIH1cblxuICAgIGJhckNTUy50cmFuc2l0aW9uID0gJ2FsbCAnK3NwZWVkKydtcyAnK2Vhc2U7XG5cbiAgICByZXR1cm4gYmFyQ1NTO1xuICB9XG5cbiAgLyoqXG4gICAqIChJbnRlcm5hbCkgUXVldWVzIGEgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAqL1xuXG4gIHZhciBxdWV1ZSA9IChmdW5jdGlvbigpIHtcbiAgICB2YXIgcGVuZGluZyA9IFtdO1xuICAgIFxuICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB2YXIgZm4gPSBwZW5kaW5nLnNoaWZ0KCk7XG4gICAgICBpZiAoZm4pIHtcbiAgICAgICAgZm4obmV4dCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZuKSB7XG4gICAgICBwZW5kaW5nLnB1c2goZm4pO1xuICAgICAgaWYgKHBlbmRpbmcubGVuZ3RoID09IDEpIG5leHQoKTtcbiAgICB9O1xuICB9KSgpO1xuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIEFwcGxpZXMgY3NzIHByb3BlcnRpZXMgdG8gYW4gZWxlbWVudCwgc2ltaWxhciB0byB0aGUgalF1ZXJ5IFxuICAgKiBjc3MgbWV0aG9kLlxuICAgKlxuICAgKiBXaGlsZSB0aGlzIGhlbHBlciBkb2VzIGFzc2lzdCB3aXRoIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eSBuYW1lcywgaXQgXG4gICAqIGRvZXMgbm90IHBlcmZvcm0gYW55IG1hbmlwdWxhdGlvbiBvZiB2YWx1ZXMgcHJpb3IgdG8gc2V0dGluZyBzdHlsZXMuXG4gICAqL1xuXG4gIHZhciBjc3MgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNzc1ByZWZpeGVzID0gWyAnV2Via2l0JywgJ08nLCAnTW96JywgJ21zJyBdLFxuICAgICAgICBjc3NQcm9wcyAgICA9IHt9O1xuXG4gICAgZnVuY3Rpb24gY2FtZWxDYXNlKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9eLW1zLS8sICdtcy0nKS5yZXBsYWNlKC8tKFtcXGRhLXpdKS9naSwgZnVuY3Rpb24obWF0Y2gsIGxldHRlcikge1xuICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWZW5kb3JQcm9wKG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmJvZHkuc3R5bGU7XG4gICAgICBpZiAobmFtZSBpbiBzdHlsZSkgcmV0dXJuIG5hbWU7XG5cbiAgICAgIHZhciBpID0gY3NzUHJlZml4ZXMubGVuZ3RoLFxuICAgICAgICAgIGNhcE5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSxcbiAgICAgICAgICB2ZW5kb3JOYW1lO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2ZW5kb3JOYW1lID0gY3NzUHJlZml4ZXNbaV0gKyBjYXBOYW1lO1xuICAgICAgICBpZiAodmVuZG9yTmFtZSBpbiBzdHlsZSkgcmV0dXJuIHZlbmRvck5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN0eWxlUHJvcChuYW1lKSB7XG4gICAgICBuYW1lID0gY2FtZWxDYXNlKG5hbWUpO1xuICAgICAgcmV0dXJuIGNzc1Byb3BzW25hbWVdIHx8IChjc3NQcm9wc1tuYW1lXSA9IGdldFZlbmRvclByb3AobmFtZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5Q3NzKGVsZW1lbnQsIHByb3AsIHZhbHVlKSB7XG4gICAgICBwcm9wID0gZ2V0U3R5bGVQcm9wKHByb3ApO1xuICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbihlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBwcm9wLCBcbiAgICAgICAgICB2YWx1ZTtcblxuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09IDIpIHtcbiAgICAgICAgZm9yIChwcm9wIGluIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BlcnRpZXNbcHJvcF07XG4gICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgYXBwbHlDc3MoZWxlbWVudCwgcHJvcCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBseUNzcyhlbGVtZW50LCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pKCk7XG5cbiAgLyoqXG4gICAqIChJbnRlcm5hbCkgRGV0ZXJtaW5lcyBpZiBhbiBlbGVtZW50IG9yIHNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIGNsYXNzIG5hbWVzIGNvbnRhaW5zIGEgY2xhc3MgbmFtZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gaGFzQ2xhc3MoZWxlbWVudCwgbmFtZSkge1xuICAgIHZhciBsaXN0ID0gdHlwZW9mIGVsZW1lbnQgPT0gJ3N0cmluZycgPyBlbGVtZW50IDogY2xhc3NMaXN0KGVsZW1lbnQpO1xuICAgIHJldHVybiBsaXN0LmluZGV4T2YoJyAnICsgbmFtZSArICcgJykgPj0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIEFkZHMgYSBjbGFzcyB0byBhbiBlbGVtZW50LlxuICAgKi9cblxuICBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBuYW1lKSB7XG4gICAgdmFyIG9sZExpc3QgPSBjbGFzc0xpc3QoZWxlbWVudCksXG4gICAgICAgIG5ld0xpc3QgPSBvbGRMaXN0ICsgbmFtZTtcblxuICAgIGlmIChoYXNDbGFzcyhvbGRMaXN0LCBuYW1lKSkgcmV0dXJuOyBcblxuICAgIC8vIFRyaW0gdGhlIG9wZW5pbmcgc3BhY2UuXG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBuZXdMaXN0LnN1YnN0cmluZygxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIFJlbW92ZXMgYSBjbGFzcyBmcm9tIGFuIGVsZW1lbnQuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIG5hbWUpIHtcbiAgICB2YXIgb2xkTGlzdCA9IGNsYXNzTGlzdChlbGVtZW50KSxcbiAgICAgICAgbmV3TGlzdDtcblxuICAgIGlmICghaGFzQ2xhc3MoZWxlbWVudCwgbmFtZSkpIHJldHVybjtcblxuICAgIC8vIFJlcGxhY2UgdGhlIGNsYXNzIG5hbWUuXG4gICAgbmV3TGlzdCA9IG9sZExpc3QucmVwbGFjZSgnICcgKyBuYW1lICsgJyAnLCAnICcpO1xuXG4gICAgLy8gVHJpbSB0aGUgb3BlbmluZyBhbmQgY2xvc2luZyBzcGFjZXMuXG4gICAgZWxlbWVudC5jbGFzc05hbWUgPSBuZXdMaXN0LnN1YnN0cmluZygxLCBuZXdMaXN0Lmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIChJbnRlcm5hbCkgR2V0cyBhIHNwYWNlIHNlcGFyYXRlZCBsaXN0IG9mIHRoZSBjbGFzcyBuYW1lcyBvbiB0aGUgZWxlbWVudC4gXG4gICAqIFRoZSBsaXN0IGlzIHdyYXBwZWQgd2l0aCBhIHNpbmdsZSBzcGFjZSBvbiBlYWNoIGVuZCB0byBmYWNpbGl0YXRlIGZpbmRpbmcgXG4gICAqIG1hdGNoZXMgd2l0aGluIHRoZSBsaXN0LlxuICAgKi9cblxuICBmdW5jdGlvbiBjbGFzc0xpc3QoZWxlbWVudCkge1xuICAgIHJldHVybiAoJyAnICsgKGVsZW1lbnQuY2xhc3NOYW1lIHx8ICcnKSArICcgJykucmVwbGFjZSgvXFxzKy9naSwgJyAnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiAoSW50ZXJuYWwpIFJlbW92ZXMgYW4gZWxlbWVudCBmcm9tIHRoZSBET00uXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlICYmIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBOUHJvZ3Jlc3M7XG59KTtcblxuIiwidmFyIGhhc01hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZTtcbnZhciBtYXBTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzTWFwID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNYXAucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBtYXBTaXplID0gaGFzTWFwICYmIG1hcFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBtYXBTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBtYXBTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIG1hcEZvckVhY2ggPSBoYXNNYXAgJiYgTWFwLnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1NldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZTtcbnZhciBzZXRTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzU2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihTZXQucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBzZXRTaXplID0gaGFzU2V0ICYmIHNldFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBzZXRTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBzZXRTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIHNldEZvckVhY2ggPSBoYXNTZXQgJiYgU2V0LnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrTWFwLnByb3RvdHlwZTtcbnZhciB3ZWFrTWFwSGFzID0gaGFzV2Vha01hcCA/IFdlYWtNYXAucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgaGFzV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nICYmIFdlYWtTZXQucHJvdG90eXBlO1xudmFyIHdlYWtTZXRIYXMgPSBoYXNXZWFrU2V0ID8gV2Vha1NldC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciBoYXNXZWFrUmVmID0gdHlwZW9mIFdlYWtSZWYgPT09ICdmdW5jdGlvbicgJiYgV2Vha1JlZi5wcm90b3R5cGU7XG52YXIgd2Vha1JlZkRlcmVmID0gaGFzV2Vha1JlZiA/IFdlYWtSZWYucHJvdG90eXBlLmRlcmVmIDogbnVsbDtcbnZhciBib29sZWFuVmFsdWVPZiA9IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2Y7XG52YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgJG1hdGNoID0gU3RyaW5nLnByb3RvdHlwZS5tYXRjaDtcbnZhciAkc2xpY2UgPSBTdHJpbmcucHJvdG90eXBlLnNsaWNlO1xudmFyICRyZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyICR0b1VwcGVyQ2FzZSA9IFN0cmluZy5wcm90b3R5cGUudG9VcHBlckNhc2U7XG52YXIgJHRvTG93ZXJDYXNlID0gU3RyaW5nLnByb3RvdHlwZS50b0xvd2VyQ2FzZTtcbnZhciAkdGVzdCA9IFJlZ0V4cC5wcm90b3R5cGUudGVzdDtcbnZhciAkY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciAkam9pbiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xudmFyICRhcnJTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciAkZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGJpZ0ludFZhbHVlT2YgPSB0eXBlb2YgQmlnSW50ID09PSAnZnVuY3Rpb24nID8gQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mIDogbnVsbDtcbnZhciBnT1BTID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBzeW1Ub1N0cmluZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcgPyBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nIDogbnVsbDtcbnZhciBoYXNTaGFtbWVkU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ29iamVjdCc7XG4vLyBpZSwgYGhhcy10b3N0cmluZ3RhZy9zaGFtc1xudmFyIHRvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgKHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09IGhhc1NoYW1tZWRTeW1ib2xzID8gJ29iamVjdCcgOiAnc3ltYm9sJylcbiAgICA/IFN5bWJvbC50b1N0cmluZ1RhZ1xuICAgIDogbnVsbDtcbnZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG52YXIgZ1BPID0gKHR5cGVvZiBSZWZsZWN0ID09PSAnZnVuY3Rpb24nID8gUmVmbGVjdC5nZXRQcm90b3R5cGVPZiA6IE9iamVjdC5nZXRQcm90b3R5cGVPZikgfHwgKFxuICAgIFtdLl9fcHJvdG9fXyA9PT0gQXJyYXkucHJvdG90eXBlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cbiAgICAgICAgPyBmdW5jdGlvbiAoTykge1xuICAgICAgICAgICAgcmV0dXJuIE8uX19wcm90b19fOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG4gICAgICAgIH1cbiAgICAgICAgOiBudWxsXG4pO1xuXG5mdW5jdGlvbiBhZGROdW1lcmljU2VwYXJhdG9yKG51bSwgc3RyKSB7XG4gICAgaWYgKFxuICAgICAgICBudW0gPT09IEluZmluaXR5XG4gICAgICAgIHx8IG51bSA9PT0gLUluZmluaXR5XG4gICAgICAgIHx8IG51bSAhPT0gbnVtXG4gICAgICAgIHx8IChudW0gJiYgbnVtID4gLTEwMDAgJiYgbnVtIDwgMTAwMClcbiAgICAgICAgfHwgJHRlc3QuY2FsbCgvZS8sIHN0cilcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgdmFyIHNlcFJlZ2V4ID0gL1swLTldKD89KD86WzAtOV17M30pKyg/IVswLTldKSkvZztcbiAgICBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGludCA9IG51bSA8IDAgPyAtJGZsb29yKC1udW0pIDogJGZsb29yKG51bSk7IC8vIHRydW5jKG51bSlcbiAgICAgICAgaWYgKGludCAhPT0gbnVtKSB7XG4gICAgICAgICAgICB2YXIgaW50U3RyID0gU3RyaW5nKGludCk7XG4gICAgICAgICAgICB2YXIgZGVjID0gJHNsaWNlLmNhbGwoc3RyLCBpbnRTdHIubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChpbnRTdHIsIHNlcFJlZ2V4LCAnJCZfJykgKyAnLicgKyAkcmVwbGFjZS5jYWxsKCRyZXBsYWNlLmNhbGwoZGVjLCAvKFswLTldezN9KS9nLCAnJCZfJyksIC9fJC8sICcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChzdHIsIHNlcFJlZ2V4LCAnJCZfJyk7XG59XG5cbnZhciBpbnNwZWN0Q3VzdG9tID0gcmVxdWlyZSgnLi91dGlsLmluc3BlY3QnKS5jdXN0b207XG52YXIgaW5zcGVjdFN5bWJvbCA9IGluc3BlY3RDdXN0b20gJiYgaXNTeW1ib2woaW5zcGVjdEN1c3RvbSkgPyBpbnNwZWN0Q3VzdG9tIDogbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNwZWN0XyhvYmosIG9wdGlvbnMsIGRlcHRoLCBzZWVuKSB7XG4gICAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpICYmIChvcHRzLnF1b3RlU3R5bGUgIT09ICdzaW5nbGUnICYmIG9wdHMucXVvdGVTdHlsZSAhPT0gJ2RvdWJsZScpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcInF1b3RlU3R5bGVcIiBtdXN0IGJlIFwic2luZ2xlXCIgb3IgXCJkb3VibGVcIicpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnbWF4U3RyaW5nTGVuZ3RoJykgJiYgKHR5cGVvZiBvcHRzLm1heFN0cmluZ0xlbmd0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0cy5tYXhTdHJpbmdMZW5ndGggPCAwICYmIG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBJbmZpbml0eVxuICAgICAgICAgICAgOiBvcHRzLm1heFN0cmluZ0xlbmd0aCAhPT0gbnVsbFxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm1heFN0cmluZ0xlbmd0aFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIEluZmluaXR5LCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgdmFyIGN1c3RvbUluc3BlY3QgPSBoYXMob3B0cywgJ2N1c3RvbUluc3BlY3QnKSA/IG9wdHMuY3VzdG9tSW5zcGVjdCA6IHRydWU7XG4gICAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0ICE9PSAnYm9vbGVhbicgJiYgY3VzdG9tSW5zcGVjdCAhPT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiY3VzdG9tSW5zcGVjdFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBgdHJ1ZWAsIGBmYWxzZWAsIG9yIGBcXCdzeW1ib2xcXCdgJyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBoYXMob3B0cywgJ2luZGVudCcpXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSBudWxsXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSAnXFx0J1xuICAgICAgICAmJiAhKHBhcnNlSW50KG9wdHMuaW5kZW50LCAxMCkgPT09IG9wdHMuaW5kZW50ICYmIG9wdHMuaW5kZW50ID4gMClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiaW5kZW50XCIgbXVzdCBiZSBcIlxcXFx0XCIsIGFuIGludGVnZXIgPiAwLCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgaWYgKGhhcyhvcHRzLCAnbnVtZXJpY1NlcGFyYXRvcicpICYmIHR5cGVvZiBvcHRzLm51bWVyaWNTZXBhcmF0b3IgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJudW1lcmljU2VwYXJhdG9yXCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGB0cnVlYCBvciBgZmFsc2VgJyk7XG4gICAgfVxuICAgIHZhciBudW1lcmljU2VwYXJhdG9yID0gb3B0cy5udW1lcmljU2VwYXJhdG9yO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvYmogPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaW5zcGVjdFN0cmluZyhvYmosIG9wdHMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKG9iaiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5IC8gb2JqID4gMCA/ICcwJyA6ICctMCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ciA9IFN0cmluZyhvYmopO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBzdHIpIDogc3RyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgdmFyIGJpZ0ludFN0ciA9IFN0cmluZyhvYmopICsgJ24nO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBiaWdJbnRTdHIpIDogYmlnSW50U3RyO1xuICAgIH1cblxuICAgIHZhciBtYXhEZXB0aCA9IHR5cGVvZiBvcHRzLmRlcHRoID09PSAndW5kZWZpbmVkJyA/IDUgOiBvcHRzLmRlcHRoO1xuICAgIGlmICh0eXBlb2YgZGVwdGggPT09ICd1bmRlZmluZWQnKSB7IGRlcHRoID0gMDsgfVxuICAgIGlmIChkZXB0aCA+PSBtYXhEZXB0aCAmJiBtYXhEZXB0aCA+IDAgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkob2JqKSA/ICdbQXJyYXldJyA6ICdbT2JqZWN0XSc7XG4gICAgfVxuXG4gICAgdmFyIGluZGVudCA9IGdldEluZGVudChvcHRzLCBkZXB0aCk7XG5cbiAgICBpZiAodHlwZW9mIHNlZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZW4gPSBbXTtcbiAgICB9IGVsc2UgaWYgKGluZGV4T2Yoc2Vlbiwgb2JqKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSwgZnJvbSwgbm9JbmRlbnQpIHtcbiAgICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgICAgIHNlZW4gPSAkYXJyU2xpY2UuY2FsbChzZWVuKTtcbiAgICAgICAgICAgIHNlZW4ucHVzaChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9JbmRlbnQpIHtcbiAgICAgICAgICAgIHZhciBuZXdPcHRzID0ge1xuICAgICAgICAgICAgICAgIGRlcHRoOiBvcHRzLmRlcHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgbmV3T3B0cy5xdW90ZVN0eWxlID0gb3B0cy5xdW90ZVN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBuZXdPcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnNwZWN0Xyh2YWx1ZSwgb3B0cywgZGVwdGggKyAxLCBzZWVuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgbmFtZSA9IG5hbWVPZihvYmopO1xuICAgICAgICB2YXIga2V5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgcmV0dXJuICdbRnVuY3Rpb24nICsgKG5hbWUgPyAnOiAnICsgbmFtZSA6ICcgKGFub255bW91cyknKSArICddJyArIChrZXlzLmxlbmd0aCA+IDAgPyAnIHsgJyArICRqb2luLmNhbGwoa2V5cywgJywgJykgKyAnIH0nIDogJycpO1xuICAgIH1cbiAgICBpZiAoaXNTeW1ib2wob2JqKSkge1xuICAgICAgICB2YXIgc3ltU3RyaW5nID0gaGFzU2hhbW1lZFN5bWJvbHMgPyAkcmVwbGFjZS5jYWxsKFN0cmluZyhvYmopLCAvXihTeW1ib2xcXCguKlxcKSlfW14pXSokLywgJyQxJykgOiBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaGFzU2hhbW1lZFN5bWJvbHMgPyBtYXJrQm94ZWQoc3ltU3RyaW5nKSA6IHN5bVN0cmluZztcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgICAgIHZhciBzID0gJzwnICsgJHRvTG93ZXJDYXNlLmNhbGwoU3RyaW5nKG9iai5ub2RlTmFtZSkpO1xuICAgICAgICB2YXIgYXR0cnMgPSBvYmouYXR0cmlidXRlcyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcyArPSAnICcgKyBhdHRyc1tpXS5uYW1lICsgJz0nICsgd3JhcFF1b3RlcyhxdW90ZShhdHRyc1tpXS52YWx1ZSksICdkb3VibGUnLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBzICs9ICc+JztcbiAgICAgICAgaWYgKG9iai5jaGlsZE5vZGVzICYmIG9iai5jaGlsZE5vZGVzLmxlbmd0aCkgeyBzICs9ICcuLi4nOyB9XG4gICAgICAgIHMgKz0gJzwvJyArICR0b0xvd2VyQ2FzZS5jYWxsKFN0cmluZyhvYmoubm9kZU5hbWUpKSArICc+JztcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKG9iai5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbXSc7IH1cbiAgICAgICAgdmFyIHhzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoaW5kZW50ICYmICFzaW5nbGVMaW5lVmFsdWVzKHhzKSkge1xuICAgICAgICAgICAgcmV0dXJuICdbJyArIGluZGVudGVkSm9pbih4cywgaW5kZW50KSArICddJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1sgJyArICRqb2luLmNhbGwoeHMsICcsICcpICsgJyBdJztcbiAgICB9XG4gICAgaWYgKGlzRXJyb3Iob2JqKSkge1xuICAgICAgICB2YXIgcGFydHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmICgnY2F1c2UnIGluIG9iaiAmJiAhaXNFbnVtZXJhYmxlLmNhbGwob2JqLCAnY2F1c2UnKSkge1xuICAgICAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoJ1tjYXVzZV06ICcgKyBpbnNwZWN0KG9iai5jYXVzZSksIHBhcnRzKSwgJywgJykgKyAnIH0nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbJyArIFN0cmluZyhvYmopICsgJ10nOyB9XG4gICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArICRqb2luLmNhbGwocGFydHMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGN1c3RvbUluc3BlY3QpIHtcbiAgICAgICAgaWYgKGluc3BlY3RTeW1ib2wgJiYgdHlwZW9mIG9ialtpbnNwZWN0U3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9ialtpbnNwZWN0U3ltYm9sXSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGN1c3RvbUluc3BlY3QgIT09ICdzeW1ib2wnICYmIHR5cGVvZiBvYmouaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5pbnNwZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTWFwKG9iaikpIHtcbiAgICAgICAgdmFyIG1hcFBhcnRzID0gW107XG4gICAgICAgIG1hcEZvckVhY2guY2FsbChvYmosIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBtYXBQYXJ0cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmosIHRydWUpICsgJyA9PiAnICsgaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdNYXAnLCBtYXBTaXplLmNhbGwob2JqKSwgbWFwUGFydHMsIGluZGVudCk7XG4gICAgfVxuICAgIGlmIChpc1NldChvYmopKSB7XG4gICAgICAgIHZhciBzZXRQYXJ0cyA9IFtdO1xuICAgICAgICBzZXRGb3JFYWNoLmNhbGwob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHNldFBhcnRzLnB1c2goaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdTZXQnLCBzZXRTaXplLmNhbGwob2JqKSwgc2V0UGFydHMsIGluZGVudCk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtNYXAob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha01hcCcpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrU2V0KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtTZXQnKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha1JlZihvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrUmVmJyk7XG4gICAgfVxuICAgIGlmIChpc051bWJlcihvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChOdW1iZXIob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoaXNCaWdJbnQob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoYmlnSW50VmFsdWVPZi5jYWxsKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQm9vbGVhbihvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoYm9vbGVhblZhbHVlT2YuY2FsbChvYmopKTtcbiAgICB9XG4gICAgaWYgKGlzU3RyaW5nKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KFN0cmluZyhvYmopKSk7XG4gICAgfVxuICAgIGlmICghaXNEYXRlKG9iaikgJiYgIWlzUmVnRXhwKG9iaikpIHtcbiAgICAgICAgdmFyIHlzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICB2YXIgaXNQbGFpbk9iamVjdCA9IGdQTyA/IGdQTyhvYmopID09PSBPYmplY3QucHJvdG90eXBlIDogb2JqIGluc3RhbmNlb2YgT2JqZWN0IHx8IG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xuICAgICAgICB2YXIgcHJvdG9UYWcgPSBvYmogaW5zdGFuY2VvZiBPYmplY3QgPyAnJyA6ICdudWxsIHByb3RvdHlwZSc7XG4gICAgICAgIHZhciBzdHJpbmdUYWcgPSAhaXNQbGFpbk9iamVjdCAmJiB0b1N0cmluZ1RhZyAmJiBPYmplY3Qob2JqKSA9PT0gb2JqICYmIHRvU3RyaW5nVGFnIGluIG9iaiA/ICRzbGljZS5jYWxsKHRvU3RyKG9iaiksIDgsIC0xKSA6IHByb3RvVGFnID8gJ09iamVjdCcgOiAnJztcbiAgICAgICAgdmFyIGNvbnN0cnVjdG9yVGFnID0gaXNQbGFpbk9iamVjdCB8fCB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yICE9PSAnZnVuY3Rpb24nID8gJycgOiBvYmouY29uc3RydWN0b3IubmFtZSA/IG9iai5jb25zdHJ1Y3Rvci5uYW1lICsgJyAnIDogJyc7XG4gICAgICAgIHZhciB0YWcgPSBjb25zdHJ1Y3RvclRhZyArIChzdHJpbmdUYWcgfHwgcHJvdG9UYWcgPyAnWycgKyAkam9pbi5jYWxsKCRjb25jYXQuY2FsbChbXSwgc3RyaW5nVGFnIHx8IFtdLCBwcm90b1RhZyB8fCBbXSksICc6ICcpICsgJ10gJyA6ICcnKTtcbiAgICAgICAgaWYgKHlzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gdGFnICsgJ3t9JzsgfVxuICAgICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGFnICsgJ3snICsgaW5kZW50ZWRKb2luKHlzLCBpbmRlbnQpICsgJ30nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWcgKyAneyAnICsgJGpvaW4uY2FsbCh5cywgJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKG9iaik7XG59O1xuXG5mdW5jdGlvbiB3cmFwUXVvdGVzKHMsIGRlZmF1bHRTdHlsZSwgb3B0cykge1xuICAgIHZhciBxdW90ZUNoYXIgPSAob3B0cy5xdW90ZVN0eWxlIHx8IGRlZmF1bHRTdHlsZSkgPT09ICdkb3VibGUnID8gJ1wiJyA6IFwiJ1wiO1xuICAgIHJldHVybiBxdW90ZUNoYXIgKyBzICsgcXVvdGVDaGFyO1xufVxuXG5mdW5jdGlvbiBxdW90ZShzKSB7XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwoU3RyaW5nKHMpLCAvXCIvZywgJyZxdW90OycpO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5KG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzRGF0ZShvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IERhdGVdJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc0Vycm9yKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzU3RyaW5nKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgU3RyaW5nXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc051bWJlcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IE51bWJlcl0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNCb29sZWFuKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuXG4vLyBTeW1ib2wgYW5kIEJpZ0ludCBkbyBoYXZlIFN5bWJvbC50b1N0cmluZ1RhZyBieSBzcGVjLCBzbyB0aGF0IGNhbid0IGJlIHVzZWQgdG8gZWxpbWluYXRlIGZhbHNlIHBvc2l0aXZlc1xuZnVuY3Rpb24gaXNTeW1ib2wob2JqKSB7XG4gICAgaWYgKGhhc1NoYW1tZWRTeW1ib2xzKSB7XG4gICAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqIGluc3RhbmNlb2YgU3ltYm9sO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8ICFzeW1Ub1N0cmluZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHN5bVRvU3RyaW5nLmNhbGwob2JqKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzQmlnSW50KG9iaikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8ICFiaWdJbnRWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgYmlnSW50VmFsdWVPZi5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSB8fCBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkgaW4gdGhpczsgfTtcbmZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xuICAgIHJldHVybiBoYXNPd24uY2FsbChvYmosIGtleSk7XG59XG5cbmZ1bmN0aW9uIHRvU3RyKG9iaikge1xuICAgIHJldHVybiBvYmplY3RUb1N0cmluZy5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIG5hbWVPZihmKSB7XG4gICAgaWYgKGYubmFtZSkgeyByZXR1cm4gZi5uYW1lOyB9XG4gICAgdmFyIG0gPSAkbWF0Y2guY2FsbChmdW5jdGlvblRvU3RyaW5nLmNhbGwoZiksIC9eZnVuY3Rpb25cXHMqKFtcXHckXSspLyk7XG4gICAgaWYgKG0pIHsgcmV0dXJuIG1bMV07IH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gaW5kZXhPZih4cywgeCkge1xuICAgIGlmICh4cy5pbmRleE9mKSB7IHJldHVybiB4cy5pbmRleE9mKHgpOyB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKHhzW2ldID09PSB4KSB7IHJldHVybiBpOyB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gaXNNYXAoeCkge1xuICAgIGlmICghbWFwU2l6ZSB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBtYXBTaXplLmNhbGwoeCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzZXRTaXplLmNhbGwoeCk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrTWFwKHgpIHtcbiAgICBpZiAoIXdlYWtNYXBIYXMgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha01hcEhhcy5jYWxsKHgsIHdlYWtNYXBIYXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2Vha1NldEhhcy5jYWxsKHgsIHdlYWtTZXRIYXMpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFdlYWtNYXA7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dlYWtSZWYoeCkge1xuICAgIGlmICghd2Vha1JlZkRlcmVmIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtSZWZEZXJlZi5jYWxsKHgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTZXQoeCkge1xuICAgIGlmICghc2V0U2l6ZSB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzZXRTaXplLmNhbGwoeCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXBTaXplLmNhbGwoeCk7XG4gICAgICAgIH0gY2F0Y2ggKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrU2V0KHgpIHtcbiAgICBpZiAoIXdlYWtTZXRIYXMgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha1NldEhhcy5jYWxsKHgsIHdlYWtTZXRIYXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2Vha01hcEhhcy5jYWxsKHgsIHdlYWtNYXBIYXMpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFdlYWtTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQoeCkge1xuICAgIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHgubm9kZU5hbWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB4LmdldEF0dHJpYnV0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaW5zcGVjdFN0cmluZyhzdHIsIG9wdHMpIHtcbiAgICBpZiAoc3RyLmxlbmd0aCA+IG9wdHMubWF4U3RyaW5nTGVuZ3RoKSB7XG4gICAgICAgIHZhciByZW1haW5pbmcgPSBzdHIubGVuZ3RoIC0gb3B0cy5tYXhTdHJpbmdMZW5ndGg7XG4gICAgICAgIHZhciB0cmFpbGVyID0gJy4uLiAnICsgcmVtYWluaW5nICsgJyBtb3JlIGNoYXJhY3RlcicgKyAocmVtYWluaW5nID4gMSA/ICdzJyA6ICcnKTtcbiAgICAgICAgcmV0dXJuIGluc3BlY3RTdHJpbmcoJHNsaWNlLmNhbGwoc3RyLCAwLCBvcHRzLm1heFN0cmluZ0xlbmd0aCksIG9wdHMpICsgdHJhaWxlcjtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRyb2wtcmVnZXhcbiAgICB2YXIgcyA9ICRyZXBsYWNlLmNhbGwoJHJlcGxhY2UuY2FsbChzdHIsIC8oWydcXFxcXSkvZywgJ1xcXFwkMScpLCAvW1xceDAwLVxceDFmXS9nLCBsb3dieXRlKTtcbiAgICByZXR1cm4gd3JhcFF1b3RlcyhzLCAnc2luZ2xlJywgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGxvd2J5dGUoYykge1xuICAgIHZhciBuID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB4ID0ge1xuICAgICAgICA4OiAnYicsXG4gICAgICAgIDk6ICd0JyxcbiAgICAgICAgMTA6ICduJyxcbiAgICAgICAgMTI6ICdmJyxcbiAgICAgICAgMTM6ICdyJ1xuICAgIH1bbl07XG4gICAgaWYgKHgpIHsgcmV0dXJuICdcXFxcJyArIHg7IH1cbiAgICByZXR1cm4gJ1xcXFx4JyArIChuIDwgMHgxMCA/ICcwJyA6ICcnKSArICR0b1VwcGVyQ2FzZS5jYWxsKG4udG9TdHJpbmcoMTYpKTtcbn1cblxuZnVuY3Rpb24gbWFya0JveGVkKHN0cikge1xuICAgIHJldHVybiAnT2JqZWN0KCcgKyBzdHIgKyAnKSc7XG59XG5cbmZ1bmN0aW9uIHdlYWtDb2xsZWN0aW9uT2YodHlwZSkge1xuICAgIHJldHVybiB0eXBlICsgJyB7ID8gfSc7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3Rpb25PZih0eXBlLCBzaXplLCBlbnRyaWVzLCBpbmRlbnQpIHtcbiAgICB2YXIgam9pbmVkRW50cmllcyA9IGluZGVudCA/IGluZGVudGVkSm9pbihlbnRyaWVzLCBpbmRlbnQpIDogJGpvaW4uY2FsbChlbnRyaWVzLCAnLCAnKTtcbiAgICByZXR1cm4gdHlwZSArICcgKCcgKyBzaXplICsgJykgeycgKyBqb2luZWRFbnRyaWVzICsgJ30nO1xufVxuXG5mdW5jdGlvbiBzaW5nbGVMaW5lVmFsdWVzKHhzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB4cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaW5kZXhPZih4c1tpXSwgJ1xcbicpID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZW50KG9wdHMsIGRlcHRoKSB7XG4gICAgdmFyIGJhc2VJbmRlbnQ7XG4gICAgaWYgKG9wdHMuaW5kZW50ID09PSAnXFx0Jykge1xuICAgICAgICBiYXNlSW5kZW50ID0gJ1xcdCc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0cy5pbmRlbnQgPT09ICdudW1iZXInICYmIG9wdHMuaW5kZW50ID4gMCkge1xuICAgICAgICBiYXNlSW5kZW50ID0gJGpvaW4uY2FsbChBcnJheShvcHRzLmluZGVudCArIDEpLCAnICcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBiYXNlOiBiYXNlSW5kZW50LFxuICAgICAgICBwcmV2OiAkam9pbi5jYWxsKEFycmF5KGRlcHRoICsgMSksIGJhc2VJbmRlbnQpXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaW5kZW50ZWRKb2luKHhzLCBpbmRlbnQpIHtcbiAgICBpZiAoeHMubGVuZ3RoID09PSAwKSB7IHJldHVybiAnJzsgfVxuICAgIHZhciBsaW5lSm9pbmVyID0gJ1xcbicgKyBpbmRlbnQucHJldiArIGluZGVudC5iYXNlO1xuICAgIHJldHVybiBsaW5lSm9pbmVyICsgJGpvaW4uY2FsbCh4cywgJywnICsgbGluZUpvaW5lcikgKyAnXFxuJyArIGluZGVudC5wcmV2O1xufVxuXG5mdW5jdGlvbiBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCkge1xuICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqKTtcbiAgICB2YXIgeHMgPSBbXTtcbiAgICBpZiAoaXNBcnIpIHtcbiAgICAgICAgeHMubGVuZ3RoID0gb2JqLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHhzW2ldID0gaGFzKG9iaiwgaSkgPyBpbnNwZWN0KG9ialtpXSwgb2JqKSA6ICcnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBzeW1zID0gdHlwZW9mIGdPUFMgPT09ICdmdW5jdGlvbicgPyBnT1BTKG9iaikgOiBbXTtcbiAgICB2YXIgc3ltTWFwO1xuICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scykge1xuICAgICAgICBzeW1NYXAgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBzeW1zLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBzeW1NYXBbJyQnICsgc3ltc1trXV0gPSBzeW1zW2tdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICghaGFzKG9iaiwga2V5KSkgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICBpZiAoaXNBcnIgJiYgU3RyaW5nKE51bWJlcihrZXkpKSA9PT0ga2V5ICYmIGtleSA8IG9iai5sZW5ndGgpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKGhhc1NoYW1tZWRTeW1ib2xzICYmIHN5bU1hcFsnJCcgKyBrZXldIGluc3RhbmNlb2YgU3ltYm9sKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRvIHByZXZlbnQgc2hhbW1lZCBTeW1ib2xzLCB3aGljaCBhcmUgc3RvcmVkIGFzIHN0cmluZ3MsIGZyb20gYmVpbmcgaW5jbHVkZWQgaW4gdGhlIHN0cmluZyBrZXkgc2VjdGlvblxuICAgICAgICAgICAgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoJHRlc3QuY2FsbCgvW15cXHckXS8sIGtleSkpIHtcbiAgICAgICAgICAgIHhzLnB1c2goaW5zcGVjdChrZXksIG9iaikgKyAnOiAnICsgaW5zcGVjdChvYmpba2V5XSwgb2JqKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4cy5wdXNoKGtleSArICc6ICcgKyBpbnNwZWN0KG9ialtrZXldLCBvYmopKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGdPUFMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzeW1zLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoaXNFbnVtZXJhYmxlLmNhbGwob2JqLCBzeW1zW2pdKSkge1xuICAgICAgICAgICAgICAgIHhzLnB1c2goJ1snICsgaW5zcGVjdChzeW1zW2pdKSArICddOiAnICsgaW5zcGVjdChvYmpbc3ltc1tqXV0sIG9iaikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB4cztcbn1cbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyIHBlcmNlbnRUd2VudGllcyA9IC8lMjAvZztcblxudmFyIEZvcm1hdCA9IHtcbiAgICBSRkMxNzM4OiAnUkZDMTczOCcsXG4gICAgUkZDMzk4NjogJ1JGQzM5ODYnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAnZGVmYXVsdCc6IEZvcm1hdC5SRkMzOTg2LFxuICAgIGZvcm1hdHRlcnM6IHtcbiAgICAgICAgUkZDMTczODogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVwbGFjZS5jYWxsKHZhbHVlLCBwZXJjZW50VHdlbnRpZXMsICcrJyk7XG4gICAgICAgIH0sXG4gICAgICAgIFJGQzM5ODY6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFJGQzE3Mzg6IEZvcm1hdC5SRkMxNzM4LFxuICAgIFJGQzM5ODY6IEZvcm1hdC5SRkMzOTg2XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbnZhciBwYXJzZSA9IHJlcXVpcmUoJy4vcGFyc2UnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZvcm1hdHM6IGZvcm1hdHMsXG4gICAgcGFyc2U6IHBhcnNlLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gICAgYWxsb3dEb3RzOiBmYWxzZSxcbiAgICBhbGxvd1Byb3RvdHlwZXM6IGZhbHNlLFxuICAgIGFsbG93U3BhcnNlOiBmYWxzZSxcbiAgICBhcnJheUxpbWl0OiAyMCxcbiAgICBjaGFyc2V0OiAndXRmLTgnLFxuICAgIGNoYXJzZXRTZW50aW5lbDogZmFsc2UsXG4gICAgY29tbWE6IGZhbHNlLFxuICAgIGRlY29kZXI6IHV0aWxzLmRlY29kZSxcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBkZXB0aDogNSxcbiAgICBpZ25vcmVRdWVyeVByZWZpeDogZmFsc2UsXG4gICAgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzOiBmYWxzZSxcbiAgICBwYXJhbWV0ZXJMaW1pdDogMTAwMCxcbiAgICBwYXJzZUFycmF5czogdHJ1ZSxcbiAgICBwbGFpbk9iamVjdHM6IGZhbHNlLFxuICAgIHN0cmljdE51bGxIYW5kbGluZzogZmFsc2Vcbn07XG5cbnZhciBpbnRlcnByZXROdW1lcmljRW50aXRpZXMgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mIyhcXGQrKTsvZywgZnVuY3Rpb24gKCQwLCBudW1iZXJTdHIpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobnVtYmVyU3RyLCAxMCkpO1xuICAgIH0pO1xufTtcblxudmFyIHBhcnNlQXJyYXlWYWx1ZSA9IGZ1bmN0aW9uICh2YWwsIG9wdGlvbnMpIHtcbiAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIG9wdGlvbnMuY29tbWEgJiYgdmFsLmluZGV4T2YoJywnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB2YWwuc3BsaXQoJywnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xufTtcblxuLy8gVGhpcyBpcyB3aGF0IGJyb3dzZXJzIHdpbGwgc3VibWl0IHdoZW4gdGhlIOKckyBjaGFyYWN0ZXIgb2NjdXJzIGluIGFuXG4vLyBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQgYm9keSBhbmQgdGhlIGVuY29kaW5nIG9mIHRoZSBwYWdlIGNvbnRhaW5pbmdcbi8vIHRoZSBmb3JtIGlzIGlzby04ODU5LTEsIG9yIHdoZW4gdGhlIHN1Ym1pdHRlZCBmb3JtIGhhcyBhbiBhY2NlcHQtY2hhcnNldFxuLy8gYXR0cmlidXRlIG9mIGlzby04ODU5LTEuIFByZXN1bWFibHkgYWxzbyB3aXRoIG90aGVyIGNoYXJzZXRzIHRoYXQgZG8gbm90IGNvbnRhaW5cbi8vIHRoZSDinJMgY2hhcmFjdGVyLCBzdWNoIGFzIHVzLWFzY2lpLlxudmFyIGlzb1NlbnRpbmVsID0gJ3V0Zjg9JTI2JTIzMTAwMDMlM0InOyAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JylcblxuLy8gVGhlc2UgYXJlIHRoZSBwZXJjZW50LWVuY29kZWQgdXRmLTggb2N0ZXRzIHJlcHJlc2VudGluZyBhIGNoZWNrbWFyaywgaW5kaWNhdGluZyB0aGF0IHRoZSByZXF1ZXN0IGFjdHVhbGx5IGlzIHV0Zi04IGVuY29kZWQuXG52YXIgY2hhcnNldFNlbnRpbmVsID0gJ3V0Zjg9JUUyJTlDJTkzJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCfinJMnKVxuXG52YXIgcGFyc2VWYWx1ZXMgPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nVmFsdWVzKHN0ciwgb3B0aW9ucykge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIgY2xlYW5TdHIgPSBvcHRpb25zLmlnbm9yZVF1ZXJ5UHJlZml4ID8gc3RyLnJlcGxhY2UoL15cXD8vLCAnJykgOiBzdHI7XG4gICAgdmFyIGxpbWl0ID0gb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdCA9PT0gSW5maW5pdHkgPyB1bmRlZmluZWQgOiBvcHRpb25zLnBhcmFtZXRlckxpbWl0O1xuICAgIHZhciBwYXJ0cyA9IGNsZWFuU3RyLnNwbGl0KG9wdGlvbnMuZGVsaW1pdGVyLCBsaW1pdCk7XG4gICAgdmFyIHNraXBJbmRleCA9IC0xOyAvLyBLZWVwIHRyYWNrIG9mIHdoZXJlIHRoZSB1dGY4IHNlbnRpbmVsIHdhcyBmb3VuZFxuICAgIHZhciBpO1xuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRpb25zLmNoYXJzZXQ7XG4gICAgaWYgKG9wdGlvbnMuY2hhcnNldFNlbnRpbmVsKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHBhcnRzW2ldLmluZGV4T2YoJ3V0Zjg9JykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbaV0gPT09IGNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ3V0Zi04JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBpc29TZW50aW5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyc2V0ID0gJ2lzby04ODU5LTEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBza2lwSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGkgPSBwYXJ0cy5sZW5ndGg7IC8vIFRoZSBlc2xpbnQgc2V0dGluZ3MgZG8gbm90IGFsbG93IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChpID09PSBza2lwSW5kZXgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG5cbiAgICAgICAgdmFyIGJyYWNrZXRFcXVhbHNQb3MgPSBwYXJ0LmluZGV4T2YoJ109Jyk7XG4gICAgICAgIHZhciBwb3MgPSBicmFja2V0RXF1YWxzUG9zID09PSAtMSA/IHBhcnQuaW5kZXhPZignPScpIDogYnJhY2tldEVxdWFsc1BvcyArIDE7XG5cbiAgICAgICAgdmFyIGtleSwgdmFsO1xuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHZhbCA9IG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nID8gbnVsbCA6ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAga2V5ID0gb3B0aW9ucy5kZWNvZGVyKHBhcnQuc2xpY2UoMCwgcG9zKSwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ2tleScpO1xuICAgICAgICAgICAgdmFsID0gdXRpbHMubWF5YmVNYXAoXG4gICAgICAgICAgICAgICAgcGFyc2VBcnJheVZhbHVlKHBhcnQuc2xpY2UocG9zICsgMSksIG9wdGlvbnMpLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlbmNvZGVkVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRlY29kZXIoZW5jb2RlZFZhbCwgZGVmYXVsdHMuZGVjb2RlciwgY2hhcnNldCwgJ3ZhbHVlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgJiYgb3B0aW9ucy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgJiYgY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICB2YWwgPSBpbnRlcnByZXROdW1lcmljRW50aXRpZXModmFsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJ0LmluZGV4T2YoJ1tdPScpID4gLTEpIHtcbiAgICAgICAgICAgIHZhbCA9IGlzQXJyYXkodmFsKSA/IFt2YWxdIDogdmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB1dGlscy5jb21iaW5lKG9ialtrZXldLCB2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqW2tleV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIHBhcnNlT2JqZWN0ID0gZnVuY3Rpb24gKGNoYWluLCB2YWwsIG9wdGlvbnMsIHZhbHVlc1BhcnNlZCkge1xuICAgIHZhciBsZWFmID0gdmFsdWVzUGFyc2VkID8gdmFsIDogcGFyc2VBcnJheVZhbHVlKHZhbCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBpID0gY2hhaW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIG9iajtcbiAgICAgICAgdmFyIHJvb3QgPSBjaGFpbltpXTtcblxuICAgICAgICBpZiAocm9vdCA9PT0gJ1tdJyAmJiBvcHRpb25zLnBhcnNlQXJyYXlzKSB7XG4gICAgICAgICAgICBvYmogPSBbXS5jb25jYXQobGVhZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgICAgICAgIHZhciBjbGVhblJvb3QgPSByb290LmNoYXJBdCgwKSA9PT0gJ1snICYmIHJvb3QuY2hhckF0KHJvb3QubGVuZ3RoIC0gMSkgPT09ICddJyA/IHJvb3Quc2xpY2UoMSwgLTEpIDogcm9vdDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KGNsZWFuUm9vdCwgMTApO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnBhcnNlQXJyYXlzICYmIGNsZWFuUm9vdCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICBvYmogPSB7IDA6IGxlYWYgfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgIWlzTmFOKGluZGV4KVxuICAgICAgICAgICAgICAgICYmIHJvb3QgIT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIFN0cmluZyhpbmRleCkgPT09IGNsZWFuUm9vdFxuICAgICAgICAgICAgICAgICYmIGluZGV4ID49IDBcbiAgICAgICAgICAgICAgICAmJiAob3B0aW9ucy5wYXJzZUFycmF5cyAmJiBpbmRleCA8PSBvcHRpb25zLmFycmF5TGltaXQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBvYmogPSBbXTtcbiAgICAgICAgICAgICAgICBvYmpbaW5kZXhdID0gbGVhZjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xlYW5Sb290ICE9PSAnX19wcm90b19fJykge1xuICAgICAgICAgICAgICAgIG9ialtjbGVhblJvb3RdID0gbGVhZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxlYWYgPSBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxlYWY7XG59O1xuXG52YXIgcGFyc2VLZXlzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ0tleXMoZ2l2ZW5LZXksIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKSB7XG4gICAgaWYgKCFnaXZlbktleSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmb3JtIGRvdCBub3RhdGlvbiB0byBicmFja2V0IG5vdGF0aW9uXG4gICAgdmFyIGtleSA9IG9wdGlvbnMuYWxsb3dEb3RzID8gZ2l2ZW5LZXkucmVwbGFjZSgvXFwuKFteLltdKykvZywgJ1skMV0nKSA6IGdpdmVuS2V5O1xuXG4gICAgLy8gVGhlIHJlZ2V4IGNodW5rc1xuXG4gICAgdmFyIGJyYWNrZXRzID0gLyhcXFtbXltcXF1dKl0pLztcbiAgICB2YXIgY2hpbGQgPSAvKFxcW1teW1xcXV0qXSkvZztcblxuICAgIC8vIEdldCB0aGUgcGFyZW50XG5cbiAgICB2YXIgc2VnbWVudCA9IG9wdGlvbnMuZGVwdGggPiAwICYmIGJyYWNrZXRzLmV4ZWMoa2V5KTtcbiAgICB2YXIgcGFyZW50ID0gc2VnbWVudCA/IGtleS5zbGljZSgwLCBzZWdtZW50LmluZGV4KSA6IGtleTtcblxuICAgIC8vIFN0YXNoIHRoZSBwYXJlbnQgaWYgaXQgZXhpc3RzXG5cbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlbid0IHVzaW5nIHBsYWluIG9iamVjdHMsIG9wdGlvbmFsbHkgcHJlZml4IGtleXMgdGhhdCB3b3VsZCBvdmVyd3JpdGUgb2JqZWN0IHByb3RvdHlwZSBwcm9wZXJ0aWVzXG4gICAgICAgIGlmICghb3B0aW9ucy5wbGFpbk9iamVjdHMgJiYgaGFzLmNhbGwoT2JqZWN0LnByb3RvdHlwZSwgcGFyZW50KSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtleXMucHVzaChwYXJlbnQpO1xuICAgIH1cblxuICAgIC8vIExvb3AgdGhyb3VnaCBjaGlsZHJlbiBhcHBlbmRpbmcgdG8gdGhlIGFycmF5IHVudGlsIHdlIGhpdCBkZXB0aFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChvcHRpb25zLmRlcHRoID4gMCAmJiAoc2VnbWVudCA9IGNoaWxkLmV4ZWMoa2V5KSkgIT09IG51bGwgJiYgaSA8IG9wdGlvbnMuZGVwdGgpIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHNlZ21lbnRbMV0uc2xpY2UoMSwgLTEpKSkge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmFsbG93UHJvdG90eXBlcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrZXlzLnB1c2goc2VnbWVudFsxXSk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlbWFpbmRlciwganVzdCBhZGQgd2hhdGV2ZXIgaXMgbGVmdFxuXG4gICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAga2V5cy5wdXNoKCdbJyArIGtleS5zbGljZShzZWdtZW50LmluZGV4KSArICddJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlT2JqZWN0KGtleXMsIHZhbCwgb3B0aW9ucywgdmFsdWVzUGFyc2VkKTtcbn07XG5cbnZhciBub3JtYWxpemVQYXJzZU9wdGlvbnMgPSBmdW5jdGlvbiBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZGVjb2RlciAhPT0gbnVsbCAmJiBvcHRzLmRlY29kZXIgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0cy5kZWNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0RlY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRzLmNoYXJzZXQgIT09ICd1bmRlZmluZWQnICYmIG9wdHMuY2hhcnNldCAhPT0gJ3V0Zi04JyAmJiBvcHRzLmNoYXJzZXQgIT09ICdpc28tODg1OS0xJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgY2hhcnNldCBvcHRpb24gbXVzdCBiZSBlaXRoZXIgdXRmLTgsIGlzby04ODU5LTEsIG9yIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICB2YXIgY2hhcnNldCA9IHR5cGVvZiBvcHRzLmNoYXJzZXQgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuY2hhcnNldCA6IG9wdHMuY2hhcnNldDtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGFsbG93RG90czogdHlwZW9mIG9wdHMuYWxsb3dEb3RzID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmFsbG93RG90cyA6ICEhb3B0cy5hbGxvd0RvdHMsXG4gICAgICAgIGFsbG93UHJvdG90eXBlczogdHlwZW9mIG9wdHMuYWxsb3dQcm90b3R5cGVzID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93UHJvdG90eXBlcyA6IGRlZmF1bHRzLmFsbG93UHJvdG90eXBlcyxcbiAgICAgICAgYWxsb3dTcGFyc2U6IHR5cGVvZiBvcHRzLmFsbG93U3BhcnNlID09PSAnYm9vbGVhbicgPyBvcHRzLmFsbG93U3BhcnNlIDogZGVmYXVsdHMuYWxsb3dTcGFyc2UsXG4gICAgICAgIGFycmF5TGltaXQ6IHR5cGVvZiBvcHRzLmFycmF5TGltaXQgPT09ICdudW1iZXInID8gb3B0cy5hcnJheUxpbWl0IDogZGVmYXVsdHMuYXJyYXlMaW1pdCxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBjb21tYTogdHlwZW9mIG9wdHMuY29tbWEgPT09ICdib29sZWFuJyA/IG9wdHMuY29tbWEgOiBkZWZhdWx0cy5jb21tYSxcbiAgICAgICAgZGVjb2RlcjogdHlwZW9mIG9wdHMuZGVjb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuZGVjb2RlciA6IGRlZmF1bHRzLmRlY29kZXIsXG4gICAgICAgIGRlbGltaXRlcjogdHlwZW9mIG9wdHMuZGVsaW1pdGVyID09PSAnc3RyaW5nJyB8fCB1dGlscy5pc1JlZ0V4cChvcHRzLmRlbGltaXRlcikgPyBvcHRzLmRlbGltaXRlciA6IGRlZmF1bHRzLmRlbGltaXRlcixcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWltcGxpY2l0LWNvZXJjaW9uLCBuby1leHRyYS1wYXJlbnNcbiAgICAgICAgZGVwdGg6ICh0eXBlb2Ygb3B0cy5kZXB0aCA9PT0gJ251bWJlcicgfHwgb3B0cy5kZXB0aCA9PT0gZmFsc2UpID8gK29wdHMuZGVwdGggOiBkZWZhdWx0cy5kZXB0aCxcbiAgICAgICAgaWdub3JlUXVlcnlQcmVmaXg6IG9wdHMuaWdub3JlUXVlcnlQcmVmaXggPT09IHRydWUsXG4gICAgICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogdHlwZW9mIG9wdHMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID09PSAnYm9vbGVhbicgPyBvcHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyA6IGRlZmF1bHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyxcbiAgICAgICAgcGFyYW1ldGVyTGltaXQ6IHR5cGVvZiBvcHRzLnBhcmFtZXRlckxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdHMucGFyYW1ldGVyTGltaXQgOiBkZWZhdWx0cy5wYXJhbWV0ZXJMaW1pdCxcbiAgICAgICAgcGFyc2VBcnJheXM6IG9wdHMucGFyc2VBcnJheXMgIT09IGZhbHNlLFxuICAgICAgICBwbGFpbk9iamVjdHM6IHR5cGVvZiBvcHRzLnBsYWluT2JqZWN0cyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5wbGFpbk9iamVjdHMgOiBkZWZhdWx0cy5wbGFpbk9iamVjdHMsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIsIG9wdHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IG5vcm1hbGl6ZVBhcnNlT3B0aW9ucyhvcHRzKTtcblxuICAgIGlmIChzdHIgPT09ICcnIHx8IHN0ciA9PT0gbnVsbCB8fCB0eXBlb2Ygc3RyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgfVxuXG4gICAgdmFyIHRlbXBPYmogPSB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyA/IHBhcnNlVmFsdWVzKHN0ciwgb3B0aW9ucykgOiBzdHI7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuXG4gICAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBrZXlzIGFuZCBzZXR1cCB0aGUgbmV3IG9iamVjdFxuXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgIHZhciBuZXdPYmogPSBwYXJzZUtleXMoa2V5LCB0ZW1wT2JqW2tleV0sIG9wdGlvbnMsIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnKTtcbiAgICAgICAgb2JqID0gdXRpbHMubWVyZ2Uob2JqLCBuZXdPYmosIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmFsbG93U3BhcnNlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIHV0aWxzLmNvbXBhY3Qob2JqKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRTaWRlQ2hhbm5lbCA9IHJlcXVpcmUoJ3NpZGUtY2hhbm5lbCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGZvcm1hdHMgPSByZXF1aXJlKCcuL2Zvcm1hdHMnKTtcbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgYXJyYXlQcmVmaXhHZW5lcmF0b3JzID0ge1xuICAgIGJyYWNrZXRzOiBmdW5jdGlvbiBicmFja2V0cyhwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeCArICdbXSc7XG4gICAgfSxcbiAgICBjb21tYTogJ2NvbW1hJyxcbiAgICBpbmRpY2VzOiBmdW5jdGlvbiBpbmRpY2VzKHByZWZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnWycgKyBrZXkgKyAnXSc7XG4gICAgfSxcbiAgICByZXBlYXQ6IGZ1bmN0aW9uIHJlcGVhdChwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgc3BsaXQgPSBTdHJpbmcucHJvdG90eXBlLnNwbGl0O1xudmFyIHB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcbnZhciBwdXNoVG9BcnJheSA9IGZ1bmN0aW9uIChhcnIsIHZhbHVlT3JBcnJheSkge1xuICAgIHB1c2guYXBwbHkoYXJyLCBpc0FycmF5KHZhbHVlT3JBcnJheSkgPyB2YWx1ZU9yQXJyYXkgOiBbdmFsdWVPckFycmF5XSk7XG59O1xuXG52YXIgdG9JU08gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcblxudmFyIGRlZmF1bHRGb3JtYXQgPSBmb3JtYXRzWydkZWZhdWx0J107XG52YXIgZGVmYXVsdHMgPSB7XG4gICAgYWRkUXVlcnlQcmVmaXg6IGZhbHNlLFxuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGRlbGltaXRlcjogJyYnLFxuICAgIGVuY29kZTogdHJ1ZSxcbiAgICBlbmNvZGVyOiB1dGlscy5lbmNvZGUsXG4gICAgZW5jb2RlVmFsdWVzT25seTogZmFsc2UsXG4gICAgZm9ybWF0OiBkZWZhdWx0Rm9ybWF0LFxuICAgIGZvcm1hdHRlcjogZm9ybWF0cy5mb3JtYXR0ZXJzW2RlZmF1bHRGb3JtYXRdLFxuICAgIC8vIGRlcHJlY2F0ZWRcbiAgICBpbmRpY2VzOiBmYWxzZSxcbiAgICBzZXJpYWxpemVEYXRlOiBmdW5jdGlvbiBzZXJpYWxpemVEYXRlKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRvSVNPLmNhbGwoZGF0ZSk7XG4gICAgfSxcbiAgICBza2lwTnVsbHM6IGZhbHNlLFxuICAgIHN0cmljdE51bGxIYW5kbGluZzogZmFsc2Vcbn07XG5cbnZhciBpc05vbk51bGxpc2hQcmltaXRpdmUgPSBmdW5jdGlvbiBpc05vbk51bGxpc2hQcmltaXRpdmUodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ3N0cmluZydcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdudW1iZXInXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnYm9vbGVhbidcbiAgICAgICAgfHwgdHlwZW9mIHYgPT09ICdzeW1ib2wnXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnYmlnaW50Jztcbn07XG5cbnZhciBzZW50aW5lbCA9IHt9O1xuXG52YXIgc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5KFxuICAgIG9iamVjdCxcbiAgICBwcmVmaXgsXG4gICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmcsXG4gICAgc2tpcE51bGxzLFxuICAgIGVuY29kZXIsXG4gICAgZmlsdGVyLFxuICAgIHNvcnQsXG4gICAgYWxsb3dEb3RzLFxuICAgIHNlcmlhbGl6ZURhdGUsXG4gICAgZm9ybWF0LFxuICAgIGZvcm1hdHRlcixcbiAgICBlbmNvZGVWYWx1ZXNPbmx5LFxuICAgIGNoYXJzZXQsXG4gICAgc2lkZUNoYW5uZWxcbikge1xuICAgIHZhciBvYmogPSBvYmplY3Q7XG5cbiAgICB2YXIgdG1wU2MgPSBzaWRlQ2hhbm5lbDtcbiAgICB2YXIgc3RlcCA9IDA7XG4gICAgdmFyIGZpbmRGbGFnID0gZmFsc2U7XG4gICAgd2hpbGUgKCh0bXBTYyA9IHRtcFNjLmdldChzZW50aW5lbCkpICE9PSB2b2lkIHVuZGVmaW5lZCAmJiAhZmluZEZsYWcpIHtcbiAgICAgICAgLy8gV2hlcmUgb2JqZWN0IGxhc3QgYXBwZWFyZWQgaW4gdGhlIHJlZiB0cmVlXG4gICAgICAgIHZhciBwb3MgPSB0bXBTYy5nZXQob2JqZWN0KTtcbiAgICAgICAgc3RlcCArPSAxO1xuICAgICAgICBpZiAodHlwZW9mIHBvcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmIChwb3MgPT09IHN0ZXApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQ3ljbGljIG9iamVjdCB2YWx1ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaW5kRmxhZyA9IHRydWU7IC8vIEJyZWFrIHdoaWxlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0bXBTYy5nZXQoc2VudGluZWwpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgc3RlcCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvYmogPSBmaWx0ZXIocHJlZml4LCBvYmopO1xuICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICBvYmogPSBzZXJpYWxpemVEYXRlKG9iaik7XG4gICAgfSBlbHNlIGlmIChnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGlzQXJyYXkob2JqKSkge1xuICAgICAgICBvYmogPSB1dGlscy5tYXliZU1hcChvYmosIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemVEYXRlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICBpZiAoc3RyaWN0TnVsbEhhbmRsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5jb2RlciAmJiAhZW5jb2RlVmFsdWVzT25seSA/IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAna2V5JywgZm9ybWF0KSA6IHByZWZpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9iaiA9ICcnO1xuICAgIH1cblxuICAgIGlmIChpc05vbk51bGxpc2hQcmltaXRpdmUob2JqKSB8fCB1dGlscy5pc0J1ZmZlcihvYmopKSB7XG4gICAgICAgIGlmIChlbmNvZGVyKSB7XG4gICAgICAgICAgICB2YXIga2V5VmFsdWUgPSBlbmNvZGVWYWx1ZXNPbmx5ID8gcHJlZml4IDogZW5jb2RlcihwcmVmaXgsIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICdrZXknLCBmb3JtYXQpO1xuICAgICAgICAgICAgaWYgKGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgZW5jb2RlVmFsdWVzT25seSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNBcnJheSA9IHNwbGl0LmNhbGwoU3RyaW5nKG9iaiksICcsJyk7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlc0pvaW5lZCA9ICcnO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzQXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzSm9pbmVkICs9IChpID09PSAwID8gJycgOiAnLCcpICsgZm9ybWF0dGVyKGVuY29kZXIodmFsdWVzQXJyYXlbaV0sIGRlZmF1bHRzLmVuY29kZXIsIGNoYXJzZXQsICd2YWx1ZScsIGZvcm1hdCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW2Zvcm1hdHRlcihrZXlWYWx1ZSkgKyAnPScgKyB2YWx1ZXNKb2luZWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIoa2V5VmFsdWUpICsgJz0nICsgZm9ybWF0dGVyKGVuY29kZXIob2JqLCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAndmFsdWUnLCBmb3JtYXQpKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIocHJlZml4KSArICc9JyArIGZvcm1hdHRlcihTdHJpbmcob2JqKSldO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cblxuICAgIHZhciBvYmpLZXlzO1xuICAgIGlmIChnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGlzQXJyYXkob2JqKSkge1xuICAgICAgICAvLyB3ZSBuZWVkIHRvIGpvaW4gZWxlbWVudHMgaW5cbiAgICAgICAgb2JqS2V5cyA9IFt7IHZhbHVlOiBvYmoubGVuZ3RoID4gMCA/IG9iai5qb2luKCcsJykgfHwgbnVsbCA6IHZvaWQgdW5kZWZpbmVkIH1dO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShmaWx0ZXIpKSB7XG4gICAgICAgIG9iaktleXMgPSBmaWx0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICBvYmpLZXlzID0gc29ydCA/IGtleXMuc29ydChzb3J0KSA6IGtleXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmpLZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIHZhciBrZXkgPSBvYmpLZXlzW2pdO1xuICAgICAgICB2YXIgdmFsdWUgPSB0eXBlb2Yga2V5ID09PSAnb2JqZWN0JyAmJiB0eXBlb2Yga2V5LnZhbHVlICE9PSAndW5kZWZpbmVkJyA/IGtleS52YWx1ZSA6IG9ialtrZXldO1xuXG4gICAgICAgIGlmIChza2lwTnVsbHMgJiYgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleVByZWZpeCA9IGlzQXJyYXkob2JqKVxuICAgICAgICAgICAgPyB0eXBlb2YgZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2Z1bmN0aW9uJyA/IGdlbmVyYXRlQXJyYXlQcmVmaXgocHJlZml4LCBrZXkpIDogcHJlZml4XG4gICAgICAgICAgICA6IHByZWZpeCArIChhbGxvd0RvdHMgPyAnLicgKyBrZXkgOiAnWycgKyBrZXkgKyAnXScpO1xuXG4gICAgICAgIHNpZGVDaGFubmVsLnNldChvYmplY3QsIHN0ZXApO1xuICAgICAgICB2YXIgdmFsdWVTaWRlQ2hhbm5lbCA9IGdldFNpZGVDaGFubmVsKCk7XG4gICAgICAgIHZhbHVlU2lkZUNoYW5uZWwuc2V0KHNlbnRpbmVsLCBzaWRlQ2hhbm5lbCk7XG4gICAgICAgIHB1c2hUb0FycmF5KHZhbHVlcywgc3RyaW5naWZ5KFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBrZXlQcmVmaXgsXG4gICAgICAgICAgICBnZW5lcmF0ZUFycmF5UHJlZml4LFxuICAgICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgZW5jb2RlcixcbiAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIGNoYXJzZXQsXG4gICAgICAgICAgICB2YWx1ZVNpZGVDaGFubmVsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZW5jb2RlciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgZGVmYXVsdHMuY2hhcnNldDtcbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICBpZiAodHlwZW9mIG9wdHMuZm9ybWF0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWhhcy5jYWxsKGZvcm1hdHMuZm9ybWF0dGVycywgb3B0cy5mb3JtYXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gb3B0cy5mb3JtYXQ7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0cy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBpc0FycmF5KG9wdHMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRRdWVyeVByZWZpeDogdHlwZW9mIG9wdHMuYWRkUXVlcnlQcmVmaXggPT09ICdib29sZWFuJyA/IG9wdHMuYWRkUXVlcnlQcmVmaXggOiBkZWZhdWx0cy5hZGRRdWVyeVByZWZpeCxcbiAgICAgICAgYWxsb3dEb3RzOiB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cyxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5kZWxpbWl0ZXIgOiBvcHRzLmRlbGltaXRlcixcbiAgICAgICAgZW5jb2RlOiB0eXBlb2Ygb3B0cy5lbmNvZGUgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlIDogZGVmYXVsdHMuZW5jb2RlLFxuICAgICAgICBlbmNvZGVyOiB0eXBlb2Ygb3B0cy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcixcbiAgICAgICAgZW5jb2RlVmFsdWVzT25seTogdHlwZW9mIG9wdHMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICAgICAgc2VyaWFsaXplRGF0ZTogdHlwZW9mIG9wdHMuc2VyaWFsaXplRGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc2VyaWFsaXplRGF0ZSA6IGRlZmF1bHRzLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgIHNraXBOdWxsczogdHlwZW9mIG9wdHMuc2tpcE51bGxzID09PSAnYm9vbGVhbicgPyBvcHRzLnNraXBOdWxscyA6IGRlZmF1bHRzLnNraXBOdWxscyxcbiAgICAgICAgc29ydDogdHlwZW9mIG9wdHMuc29ydCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc29ydCA6IG51bGwsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG9wdHMpIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKTtcblxuICAgIHZhciBvYmpLZXlzO1xuICAgIHZhciBmaWx0ZXI7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGFycmF5Rm9ybWF0O1xuICAgIGlmIChvcHRzICYmIG9wdHMuYXJyYXlGb3JtYXQgaW4gYXJyYXlQcmVmaXhHZW5lcmF0b3JzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5hcnJheUZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgJ2luZGljZXMnIGluIG9wdHMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmluZGljZXMgPyAnaW5kaWNlcycgOiAncmVwZWF0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheUZvcm1hdCA9ICdpbmRpY2VzJztcbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGFycmF5UHJlZml4R2VuZXJhdG9yc1thcnJheUZvcm1hdF07XG5cbiAgICBpZiAoIW9iaktleXMpIHtcbiAgICAgICAgb2JqS2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuc29ydCkge1xuICAgICAgICBvYmpLZXlzLnNvcnQob3B0aW9ucy5zb3J0KTtcbiAgICB9XG5cbiAgICB2YXIgc2lkZUNoYW5uZWwgPSBnZXRTaWRlQ2hhbm5lbCgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqS2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tpXTtcblxuICAgICAgICBpZiAob3B0aW9ucy5za2lwTnVsbHMgJiYgb2JqW2tleV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHB1c2hUb0FycmF5KGtleXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIG9ialtrZXldLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgb3B0aW9ucy5za2lwTnVsbHMsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZSA/IG9wdGlvbnMuZW5jb2RlciA6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25zLmZpbHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuc29ydCxcbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dEb3RzLFxuICAgICAgICAgICAgb3B0aW9ucy5zZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXQsXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIG9wdGlvbnMuY2hhcnNldCxcbiAgICAgICAgICAgIHNpZGVDaGFubmVsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHZhciBqb2luZWQgPSBrZXlzLmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpO1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLmFkZFF1ZXJ5UHJlZml4ID09PSB0cnVlID8gJz8nIDogJyc7XG5cbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JyksIHRoZSBcIm51bWVyaWMgZW50aXR5XCIgcmVwcmVzZW50YXRpb24gb2YgYSBjaGVja21hcmtcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lMjYlMjMxMDAwMyUzQiYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCfinJMnKVxuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSVFMiU5QyU5MyYnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGpvaW5lZC5sZW5ndGggPiAwID8gcHJlZml4ICsgam9pbmVkIDogJyc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGhleFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgIGFycmF5LnB1c2goJyUnICsgKChpIDwgMTYgPyAnMCcgOiAnJykgKyBpLnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufSgpKTtcblxudmFyIGNvbXBhY3RRdWV1ZSA9IGZ1bmN0aW9uIGNvbXBhY3RRdWV1ZShxdWV1ZSkge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWUucG9wKCk7XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhciBjb21wYWN0ZWQgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9ialtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFjdGVkLnB1c2gob2JqW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0ub2JqW2l0ZW0ucHJvcF0gPSBjb21wYWN0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgYXJyYXlUb09iamVjdCA9IGZ1bmN0aW9uIGFycmF5VG9PYmplY3Qoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBvYmpbaV0gPSBzb3VyY2VbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIG1lcmdlID0gZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQucHVzaChzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKChvcHRpb25zICYmIChvcHRpb25zLnBsYWluT2JqZWN0cyB8fCBvcHRpb25zLmFsbG93UHJvdG90eXBlcykpIHx8ICFoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0YXJnZXQsIHNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0IHx8IHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoc291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgbWVyZ2VUYXJnZXQgPSB0YXJnZXQ7XG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiAhaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIG1lcmdlVGFyZ2V0ID0gYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoaGFzLmNhbGwodGFyZ2V0LCBpKSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRJdGVtID0gdGFyZ2V0W2ldO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJdGVtICYmIHR5cGVvZiB0YXJnZXRJdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBtZXJnZSh0YXJnZXRJdGVtLCBpdGVtLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICAgICAgaWYgKGhhcy5jYWxsKGFjYywga2V5KSkge1xuICAgICAgICAgICAgYWNjW2tleV0gPSBtZXJnZShhY2Nba2V5XSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG1lcmdlVGFyZ2V0KTtcbn07XG5cbnZhciBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ25TaW5nbGVTb3VyY2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdGFyZ2V0KTtcbn07XG5cbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAoc3RyLCBkZWNvZGVyLCBjaGFyc2V0KSB7XG4gICAgdmFyIHN0cldpdGhvdXRQbHVzID0gc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgLy8gdW5lc2NhcGUgbmV2ZXIgdGhyb3dzLCBubyB0cnkuLi5jYXRjaCBuZWVkZWQ6XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cy5yZXBsYWNlKC8lWzAtOWEtZl17Mn0vZ2ksIHVuZXNjYXBlKTtcbiAgICB9XG4gICAgLy8gdXRmLThcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cldpdGhvdXRQbHVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cztcbiAgICB9XG59O1xuXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKHN0ciwgZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQsIGtpbmQsIGZvcm1hdCkge1xuICAgIC8vIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSB3cml0dGVuIGJ5IEJyaWFuIFdoaXRlIChtc2NkZXgpIGZvciB0aGUgaW8uanMgY29yZSBxdWVyeXN0cmluZyBsaWJyYXJ5LlxuICAgIC8vIEl0IGhhcyBiZWVuIGFkYXB0ZWQgaGVyZSBmb3Igc3RyaWN0ZXIgYWRoZXJlbmNlIHRvIFJGQyAzOTg2XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gc3RyO1xuICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3ltYm9sJykge1xuICAgICAgICBzdHJpbmcgPSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3RyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0cmluZyA9IFN0cmluZyhzdHIpO1xuICAgIH1cblxuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZShzdHJpbmcpLnJlcGxhY2UoLyV1WzAtOWEtZl17NH0vZ2ksIGZ1bmN0aW9uICgkMCkge1xuICAgICAgICAgICAgcmV0dXJuICclMjYlMjMnICsgcGFyc2VJbnQoJDAuc2xpY2UoMiksIDE2KSArICclM0InO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgIHx8IGMgPT09IDB4MkUgLy8gLlxuICAgICAgICAgICAgfHwgYyA9PT0gMHg1RiAvLyBfXG4gICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgIHx8IChjID49IDB4MzAgJiYgYyA8PSAweDM5KSAvLyAwLTlcbiAgICAgICAgICAgIHx8IChjID49IDB4NDEgJiYgYyA8PSAweDVBKSAvLyBhLXpcbiAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgICAgIHx8IChmb3JtYXQgPT09IGZvcm1hdHMuUkZDMTczOCAmJiAoYyA9PT0gMHgyOCB8fCBjID09PSAweDI5KSkgLy8gKCApXG4gICAgICAgICkge1xuICAgICAgICAgICAgb3V0ICs9IHN0cmluZy5jaGFyQXQoaSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgaGV4VGFibGVbY107XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEMwIHwgKGMgPj4gNildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXSArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc3RyaW5nLmNoYXJDb2RlQXQoaSkgJiAweDNGRikpO1xuICAgICAgICAvKiBlc2xpbnQgb3BlcmF0b3ItbGluZWJyZWFrOiBbMiwgXCJiZWZvcmVcIl0gKi9cbiAgICAgICAgb3V0ICs9IGhleFRhYmxlWzB4RjAgfCAoYyA+PiAxOCldXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gMTIpICYgMHgzRildXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG52YXIgY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWUpIHtcbiAgICB2YXIgcXVldWUgPSBbeyBvYmo6IHsgbzogdmFsdWUgfSwgcHJvcDogJ28nIH1dO1xuICAgIHZhciByZWZzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWVbaV07XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgcmVmcy5pbmRleE9mKHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wYWN0UXVldWUocXVldWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIGlzUmVnRXhwID0gZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cbnZhciBpc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISEob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSk7XG59O1xuXG52YXIgY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoYSwgYikge1xuICAgIHJldHVybiBbXS5jb25jYXQoYSwgYik7XG59O1xuXG52YXIgbWF5YmVNYXAgPSBmdW5jdGlvbiBtYXliZU1hcCh2YWwsIGZuKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgICB2YXIgbWFwcGVkID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBtYXBwZWQucHVzaChmbih2YWxbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwcGVkO1xuICAgIH1cbiAgICByZXR1cm4gZm4odmFsKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFycmF5VG9PYmplY3Q6IGFycmF5VG9PYmplY3QsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgY29tYmluZTogY29tYmluZSxcbiAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgICBpc1JlZ0V4cDogaXNSZWdFeHAsXG4gICAgbWF5YmVNYXA6IG1heWJlTWFwLFxuICAgIG1lcmdlOiBtZXJnZVxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRXZWFrTWFwID0gR2V0SW50cmluc2ljKCclV2Vha01hcCUnLCB0cnVlKTtcbnZhciAkTWFwID0gR2V0SW50cmluc2ljKCclTWFwJScsIHRydWUpO1xuXG52YXIgJHdlYWtNYXBHZXQgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmdldCcsIHRydWUpO1xudmFyICR3ZWFrTWFwU2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcEhhcyA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG52YXIgJG1hcEdldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkbWFwU2V0ID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLnNldCcsIHRydWUpO1xudmFyICRtYXBIYXMgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG5cbi8qXG4gKiBUaGlzIGZ1bmN0aW9uIHRyYXZlcnNlcyB0aGUgbGlzdCByZXR1cm5pbmcgdGhlIG5vZGUgY29ycmVzcG9uZGluZyB0byB0aGVcbiAqIGdpdmVuIGtleS5cbiAqXG4gKiBUaGF0IG5vZGUgaXMgYWxzbyBtb3ZlZCB0byB0aGUgaGVhZCBvZiB0aGUgbGlzdCwgc28gdGhhdCBpZiBpdCdzIGFjY2Vzc2VkXG4gKiBhZ2FpbiB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIHRoZSB3aG9sZSBsaXN0LiBCeSBkb2luZyBzbywgYWxsIHRoZSByZWNlbnRseVxuICogdXNlZCBub2RlcyBjYW4gYmUgYWNjZXNzZWQgcmVsYXRpdmVseSBxdWlja2x5LlxuICovXG52YXIgbGlzdEdldE5vZGUgPSBmdW5jdGlvbiAobGlzdCwga2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0Zm9yICh2YXIgcHJldiA9IGxpc3QsIGN1cnI7IChjdXJyID0gcHJldi5uZXh0KSAhPT0gbnVsbDsgcHJldiA9IGN1cnIpIHtcblx0XHRpZiAoY3Vyci5rZXkgPT09IGtleSkge1xuXHRcdFx0cHJldi5uZXh0ID0gY3Vyci5uZXh0O1xuXHRcdFx0Y3Vyci5uZXh0ID0gbGlzdC5uZXh0O1xuXHRcdFx0bGlzdC5uZXh0ID0gY3VycjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdFx0cmV0dXJuIGN1cnI7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgbGlzdEdldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHtcblx0dmFyIG5vZGUgPSBsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xuXHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlO1xufTtcbnZhciBsaXN0U2V0ID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSwgdmFsdWUpIHtcblx0dmFyIG5vZGUgPSBsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xuXHRpZiAobm9kZSkge1xuXHRcdG5vZGUudmFsdWUgPSB2YWx1ZTtcblx0fSBlbHNlIHtcblx0XHQvLyBQcmVwZW5kIHRoZSBuZXcgbm9kZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0XG5cdFx0b2JqZWN0cy5uZXh0ID0geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHRrZXk6IGtleSxcblx0XHRcdG5leHQ6IG9iamVjdHMubmV4dCxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH07XG5cdH1cbn07XG52YXIgbGlzdEhhcyA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHtcblx0cmV0dXJuICEhbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWwoKSB7XG5cdHZhciAkd207XG5cdHZhciAkbTtcblx0dmFyICRvO1xuXHR2YXIgY2hhbm5lbCA9IHtcblx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdHJldHVybiAkd2Vha01hcEdldCgkd20sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0XHRyZXR1cm4gJG1hcEdldCgkbSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCRvKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZWx5LWlmXG5cdFx0XHRcdFx0cmV0dXJuIGxpc3RHZXQoJG8sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhczogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdHJldHVybiAkd2Vha01hcEhhcygkd20sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0XHRyZXR1cm4gJG1hcEhhcygkbSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCRvKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZWx5LWlmXG5cdFx0XHRcdFx0cmV0dXJuIGxpc3RIYXMoJG8sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdGlmICghJHdtKSB7XG5cdFx0XHRcdFx0JHdtID0gbmV3ICRXZWFrTWFwKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JHdlYWtNYXBTZXQoJHdtLCBrZXksIHZhbHVlKTtcblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoISRtKSB7XG5cdFx0XHRcdFx0JG0gPSBuZXcgJE1hcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCRtYXBTZXQoJG0sIGtleSwgdmFsdWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCEkbykge1xuXHRcdFx0XHRcdC8qXG5cdFx0XHRcdFx0ICogSW5pdGlhbGl6ZSB0aGUgbGlua2VkIGxpc3QgYXMgYW4gZW1wdHkgbm9kZSwgc28gdGhhdCB3ZSBkb24ndCBoYXZlXG5cdFx0XHRcdFx0ICogdG8gc3BlY2lhbC1jYXNlIGhhbmRsaW5nIG9mIHRoZSBmaXJzdCBub2RlOiB3ZSBjYW4gYWx3YXlzIHJlZmVyIHRvXG5cdFx0XHRcdFx0ICogaXQgYXMgKHByZXZpb3VzIG5vZGUpLm5leHQsIGluc3RlYWQgb2Ygc29tZXRoaW5nIGxpa2UgKGxpc3QpLmhlYWRcblx0XHRcdFx0XHQgKi9cblx0XHRcdFx0XHQkbyA9IHsga2V5OiB7fSwgbmV4dDogbnVsbCB9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3RTZXQoJG8sIGtleSwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGNoYW5uZWw7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJmdW5jdGlvbiBFICgpIHtcbiAgLy8gS2VlcCB0aGlzIGVtcHR5IHNvIGl0J3MgZWFzaWVyIHRvIGluaGVyaXQgZnJvbVxuICAvLyAodmlhIGh0dHBzOi8vZ2l0aHViLmNvbS9saXBzbWFjayBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvaXNzdWVzLzMpXG59XG5cbkUucHJvdG90eXBlID0ge1xuICBvbjogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrLCBjdHgpIHtcbiAgICB2YXIgZSA9IHRoaXMuZSB8fCAodGhpcy5lID0ge30pO1xuXG4gICAgKGVbbmFtZV0gfHwgKGVbbmFtZV0gPSBbXSkpLnB1c2goe1xuICAgICAgZm46IGNhbGxiYWNrLFxuICAgICAgY3R4OiBjdHhcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIG9uY2U6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaywgY3R4KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZ1bmN0aW9uIGxpc3RlbmVyICgpIHtcbiAgICAgIHNlbGYub2ZmKG5hbWUsIGxpc3RlbmVyKTtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KGN0eCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXIuXyA9IGNhbGxiYWNrXG4gICAgcmV0dXJuIHRoaXMub24obmFtZSwgbGlzdGVuZXIsIGN0eCk7XG4gIH0sXG5cbiAgZW1pdDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgZGF0YSA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICB2YXIgZXZ0QXJyID0gKCh0aGlzLmUgfHwgKHRoaXMuZSA9IHt9KSlbbmFtZV0gfHwgW10pLnNsaWNlKCk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBldnRBcnIubGVuZ3RoO1xuXG4gICAgZm9yIChpOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGV2dEFycltpXS5mbi5hcHBseShldnRBcnJbaV0uY3R4LCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBvZmY6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBlID0gdGhpcy5lIHx8ICh0aGlzLmUgPSB7fSk7XG4gICAgdmFyIGV2dHMgPSBlW25hbWVdO1xuICAgIHZhciBsaXZlRXZlbnRzID0gW107XG5cbiAgICBpZiAoZXZ0cyAmJiBjYWxsYmFjaykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV2dHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGV2dHNbaV0uZm4gIT09IGNhbGxiYWNrICYmIGV2dHNbaV0uZm4uXyAhPT0gY2FsbGJhY2spXG4gICAgICAgICAgbGl2ZUV2ZW50cy5wdXNoKGV2dHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBldmVudCBmcm9tIHF1ZXVlIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICAvLyBTdWdnZXN0ZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2xhemRcbiAgICAvLyBSZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9zY290dGNvcmdhbi90aW55LWVtaXR0ZXIvY29tbWl0L2M2ZWJmYWE5YmM5NzNiMzNkMTEwYTg0YTMwNzc0MmI3Y2Y5NGM5NTMjY29tbWl0Y29tbWVudC01MDI0OTEwXG5cbiAgICAobGl2ZUV2ZW50cy5sZW5ndGgpXG4gICAgICA/IGVbbmFtZV0gPSBsaXZlRXZlbnRzXG4gICAgICA6IGRlbGV0ZSBlW25hbWVdO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRTtcbm1vZHVsZS5leHBvcnRzLlRpbnlFbWl0dGVyID0gRTtcbiIsInZhciBFID0gcmVxdWlyZSgnLi9pbmRleC5qcycpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBydW50aW1lIGhlbHBlciBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIG9uIGNvbXBvbmVudHNcbi8vIGluIGEgdHJlZS1zaGFrYWJsZSB3YXlcbmV4cG9ydHMuZGVmYXVsdCA9IChzZmMsIHByb3BzKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0ID0gc2ZjLl9fdmNjT3B0cyB8fCBzZmM7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIHByb3BzKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIi8qKlxyXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcclxuICogaXMgaW4gdGhhdCBtYXAuXHJcbiAqIElNUE9SVEFOVDogYWxsIGNhbGxzIG9mIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBwcmVmaXhlZCB3aXRoXHJcbiAqIFxcL1xcKiNcXF9cXF9QVVJFXFxfXFxfXFwqXFwvXHJcbiAqIFNvIHRoYXQgcm9sbHVwIGNhbiB0cmVlLXNoYWtlIHRoZW0gaWYgbmVjZXNzYXJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gbWFrZU1hcChzdHIsIGV4cGVjdHNMb3dlckNhc2UpIHtcclxuICAgIGNvbnN0IG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBjb25zdCBsaXN0ID0gc3RyLnNwbGl0KCcsJyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UgPyB2YWwgPT4gISFtYXBbdmFsLnRvTG93ZXJDYXNlKCldIDogdmFsID0+ICEhbWFwW3ZhbF07XHJcbn1cblxuLyoqXHJcbiAqIGRldiBvbmx5IGZsYWcgLT4gbmFtZSBtYXBwaW5nXHJcbiAqL1xyXG5jb25zdCBQYXRjaEZsYWdOYW1lcyA9IHtcclxuICAgIFsxIC8qIFRFWFQgKi9dOiBgVEVYVGAsXHJcbiAgICBbMiAvKiBDTEFTUyAqL106IGBDTEFTU2AsXHJcbiAgICBbNCAvKiBTVFlMRSAqL106IGBTVFlMRWAsXHJcbiAgICBbOCAvKiBQUk9QUyAqL106IGBQUk9QU2AsXHJcbiAgICBbMTYgLyogRlVMTF9QUk9QUyAqL106IGBGVUxMX1BST1BTYCxcclxuICAgIFszMiAvKiBIWURSQVRFX0VWRU5UUyAqL106IGBIWURSQVRFX0VWRU5UU2AsXHJcbiAgICBbNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovXTogYFNUQUJMRV9GUkFHTUVOVGAsXHJcbiAgICBbMTI4IC8qIEtFWUVEX0ZSQUdNRU5UICovXTogYEtFWUVEX0ZSQUdNRU5UYCxcclxuICAgIFsyNTYgLyogVU5LRVlFRF9GUkFHTUVOVCAqL106IGBVTktFWUVEX0ZSQUdNRU5UYCxcclxuICAgIFs1MTIgLyogTkVFRF9QQVRDSCAqL106IGBORUVEX1BBVENIYCxcclxuICAgIFsxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi9dOiBgRFlOQU1JQ19TTE9UU2AsXHJcbiAgICBbMjA0OCAvKiBERVZfUk9PVF9GUkFHTUVOVCAqL106IGBERVZfUk9PVF9GUkFHTUVOVGAsXHJcbiAgICBbLTEgLyogSE9JU1RFRCAqL106IGBIT0lTVEVEYCxcclxuICAgIFstMiAvKiBCQUlMICovXTogYEJBSUxgXHJcbn07XG5cbi8qKlxyXG4gKiBEZXYgb25seVxyXG4gKi9cclxuY29uc3Qgc2xvdEZsYWdzVGV4dCA9IHtcclxuICAgIFsxIC8qIFNUQUJMRSAqL106ICdTVEFCTEUnLFxyXG4gICAgWzIgLyogRFlOQU1JQyAqL106ICdEWU5BTUlDJyxcclxuICAgIFszIC8qIEZPUldBUkRFRCAqL106ICdGT1JXQVJERUQnXHJcbn07XG5cbmNvbnN0IEdMT0JBTFNfV0hJVEVfTElTVEVEID0gJ0luZmluaXR5LHVuZGVmaW5lZCxOYU4saXNGaW5pdGUsaXNOYU4scGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksJyArXHJcbiAgICAnZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSwnICtcclxuICAgICdPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLEJpZ0ludCc7XHJcbmNvbnN0IGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChHTE9CQUxTX1dISVRFX0xJU1RFRCk7XG5cbmNvbnN0IHJhbmdlID0gMjtcclxuZnVuY3Rpb24gZ2VuZXJhdGVDb2RlRnJhbWUoc291cmNlLCBzdGFydCA9IDAsIGVuZCA9IHNvdXJjZS5sZW5ndGgpIHtcclxuICAgIC8vIFNwbGl0IHRoZSBjb250ZW50IGludG8gaW5kaXZpZHVhbCBsaW5lcyBidXQgY2FwdHVyZSB0aGUgbmV3bGluZSBzZXF1ZW5jZVxyXG4gICAgLy8gdGhhdCBzZXBhcmF0ZWQgZWFjaCBsaW5lLiBUaGlzIGlzIGltcG9ydGFudCBiZWNhdXNlIHRoZSBhY3R1YWwgc2VxdWVuY2UgaXNcclxuICAgIC8vIG5lZWRlZCB0byBwcm9wZXJseSB0YWtlIGludG8gYWNjb3VudCB0aGUgZnVsbCBsaW5lIGxlbmd0aCBmb3Igb2Zmc2V0XHJcbiAgICAvLyBjb21wYXJpc29uXHJcbiAgICBsZXQgbGluZXMgPSBzb3VyY2Uuc3BsaXQoLyhcXHI/XFxuKS8pO1xyXG4gICAgLy8gU2VwYXJhdGUgdGhlIGxpbmVzIGFuZCBuZXdsaW5lIHNlcXVlbmNlcyBpbnRvIHNlcGFyYXRlIGFycmF5cyBmb3IgZWFzaWVyIHJlZmVyZW5jaW5nXHJcbiAgICBjb25zdCBuZXdsaW5lU2VxdWVuY2VzID0gbGluZXMuZmlsdGVyKChfLCBpZHgpID0+IGlkeCAlIDIgPT09IDEpO1xyXG4gICAgbGluZXMgPSBsaW5lcy5maWx0ZXIoKF8sIGlkeCkgPT4gaWR4ICUgMiA9PT0gMCk7XHJcbiAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgY29uc3QgcmVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY291bnQgKz1cclxuICAgICAgICAgICAgbGluZXNbaV0ubGVuZ3RoICtcclxuICAgICAgICAgICAgICAgICgobmV3bGluZVNlcXVlbmNlc1tpXSAmJiBuZXdsaW5lU2VxdWVuY2VzW2ldLmxlbmd0aCkgfHwgMCk7XHJcbiAgICAgICAgaWYgKGNvdW50ID49IHN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSBpIC0gcmFuZ2U7IGogPD0gaSArIHJhbmdlIHx8IGVuZCA+IGNvdW50OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBqICsgMTtcclxuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAke2xpbmV9JHsnICcucmVwZWF0KE1hdGgubWF4KDMgLSBTdHJpbmcobGluZSkubGVuZ3RoLCAwKSl9fCAgJHtsaW5lc1tqXX1gKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdMaW5lU2VxTGVuZ3RoID0gKG5ld2xpbmVTZXF1ZW5jZXNbal0gJiYgbmV3bGluZVNlcXVlbmNlc1tqXS5sZW5ndGgpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoaiA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFkID0gc3RhcnQgLSAoY291bnQgLSAobGluZUxlbmd0aCArIG5ld0xpbmVTZXFMZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1heCgxLCBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyAnICcucmVwZWF0KHBhZCkgKyAnXicucmVwZWF0KGxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaiA+IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kID4gY291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyAnXicucmVwZWF0KGxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBsaW5lTGVuZ3RoICsgbmV3TGluZVNlcUxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLmpvaW4oJ1xcbicpO1xyXG59XG5cbi8qKlxyXG4gKiBPbiB0aGUgY2xpZW50IHdlIG9ubHkgbmVlZCB0byBvZmZlciBzcGVjaWFsIGNhc2VzIGZvciBib29sZWFuIGF0dHJpYnV0ZXMgdGhhdFxyXG4gKiBoYXZlIGRpZmZlcmVudCBuYW1lcyBmcm9tIHRoZWlyIGNvcnJlc3BvbmRpbmcgZG9tIHByb3BlcnRpZXM6XHJcbiAqIC0gaXRlbXNjb3BlIC0+IE4vQVxyXG4gKiAtIGFsbG93ZnVsbHNjcmVlbiAtPiBhbGxvd0Z1bGxzY3JlZW5cclxuICogLSBmb3Jtbm92YWxpZGF0ZSAtPiBmb3JtTm9WYWxpZGF0ZVxyXG4gKiAtIGlzbWFwIC0+IGlzTWFwXHJcbiAqIC0gbm9tb2R1bGUgLT4gbm9Nb2R1bGVcclxuICogLSBub3ZhbGlkYXRlIC0+IG5vVmFsaWRhdGVcclxuICogLSByZWFkb25seSAtPiByZWFkT25seVxyXG4gKi9cclxuY29uc3Qgc3BlY2lhbEJvb2xlYW5BdHRycyA9IGBpdGVtc2NvcGUsYWxsb3dmdWxsc2NyZWVuLGZvcm1ub3ZhbGlkYXRlLGlzbWFwLG5vbW9kdWxlLG5vdmFsaWRhdGUscmVhZG9ubHlgO1xyXG5jb25zdCBpc1NwZWNpYWxCb29sZWFuQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzKTtcclxuLyoqXHJcbiAqIFRoZSBmdWxsIGxpc3QgaXMgbmVlZGVkIGR1cmluZyBTU1IgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBpbml0aWFsIG1hcmt1cC5cclxuICovXHJcbmNvbnN0IGlzQm9vbGVhbkF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoc3BlY2lhbEJvb2xlYW5BdHRycyArXHJcbiAgICBgLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjb250cm9scyxkZWZhdWx0LGRlZmVyLGRpc2FibGVkLGhpZGRlbixgICtcclxuICAgIGBsb29wLG9wZW4scmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLGAgK1xyXG4gICAgYGNoZWNrZWQsbXV0ZWQsbXVsdGlwbGUsc2VsZWN0ZWRgKTtcclxuLyoqXHJcbiAqIEJvb2xlYW4gYXR0cmlidXRlcyBzaG91bGQgYmUgaW5jbHVkZWQgaWYgdGhlIHZhbHVlIGlzIHRydXRoeSBvciAnJy5cclxuICogZS5nLiBgPHNlbGVjdCBtdWx0aXBsZT5gIGNvbXBpbGVzIHRvIGB7IG11bHRpcGxlOiAnJyB9YFxyXG4gKi9cclxuZnVuY3Rpb24gaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gISF2YWx1ZSB8fCB2YWx1ZSA9PT0gJyc7XHJcbn1cclxuY29uc3QgdW5zYWZlQXR0ckNoYXJSRSA9IC9bPi89XCInXFx1MDAwOVxcdTAwMGFcXHUwMDBjXFx1MDAyMF0vO1xyXG5jb25zdCBhdHRyVmFsaWRhdGlvbkNhY2hlID0ge307XHJcbmZ1bmN0aW9uIGlzU1NSU2FmZUF0dHJOYW1lKG5hbWUpIHtcclxuICAgIGlmIChhdHRyVmFsaWRhdGlvbkNhY2hlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGF0dHJWYWxpZGF0aW9uQ2FjaGVbbmFtZV07XHJcbiAgICB9XHJcbiAgICBjb25zdCBpc1Vuc2FmZSA9IHVuc2FmZUF0dHJDaGFyUkUudGVzdChuYW1lKTtcclxuICAgIGlmIChpc1Vuc2FmZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYHVuc2FmZSBhdHRyaWJ1dGUgbmFtZTogJHtuYW1lfWApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChhdHRyVmFsaWRhdGlvbkNhY2hlW25hbWVdID0gIWlzVW5zYWZlKTtcclxufVxyXG5jb25zdCBwcm9wc1RvQXR0ck1hcCA9IHtcclxuICAgIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXHJcbiAgICBjbGFzc05hbWU6ICdjbGFzcycsXHJcbiAgICBodG1sRm9yOiAnZm9yJyxcclxuICAgIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXHJcbn07XHJcbi8qKlxyXG4gKiBDU1MgcHJvcGVydGllcyB0aGF0IGFjY2VwdCBwbGFpbiBudW1iZXJzXHJcbiAqL1xyXG5jb25zdCBpc05vVW5pdE51bWVyaWNTdHlsZVByb3AgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsYm9yZGVyLWltYWdlLW91dHNldCxib3JkZXItaW1hZ2Utc2xpY2UsYCArXHJcbiAgICBgYm9yZGVyLWltYWdlLXdpZHRoLGJveC1mbGV4LGJveC1mbGV4LWdyb3VwLGJveC1vcmRpbmFsLWdyb3VwLGNvbHVtbi1jb3VudCxgICtcclxuICAgIGBjb2x1bW5zLGZsZXgsZmxleC1ncm93LGZsZXgtcG9zaXRpdmUsZmxleC1zaHJpbmssZmxleC1uZWdhdGl2ZSxmbGV4LW9yZGVyLGAgK1xyXG4gICAgYGdyaWQtcm93LGdyaWQtcm93LWVuZCxncmlkLXJvdy1zcGFuLGdyaWQtcm93LXN0YXJ0LGdyaWQtY29sdW1uLGAgK1xyXG4gICAgYGdyaWQtY29sdW1uLWVuZCxncmlkLWNvbHVtbi1zcGFuLGdyaWQtY29sdW1uLXN0YXJ0LGZvbnQtd2VpZ2h0LGxpbmUtY2xhbXAsYCArXHJcbiAgICBgbGluZS1oZWlnaHQsb3BhY2l0eSxvcmRlcixvcnBoYW5zLHRhYi1zaXplLHdpZG93cyx6LWluZGV4LHpvb20sYCArXHJcbiAgICAvLyBTVkdcclxuICAgIGBmaWxsLW9wYWNpdHksZmxvb2Qtb3BhY2l0eSxzdG9wLW9wYWNpdHksc3Ryb2tlLWRhc2hhcnJheSxzdHJva2UtZGFzaG9mZnNldCxgICtcclxuICAgIGBzdHJva2UtbWl0ZXJsaW1pdCxzdHJva2Utb3BhY2l0eSxzdHJva2Utd2lkdGhgKTtcclxuLyoqXHJcbiAqIEtub3duIGF0dHJpYnV0ZXMsIHRoaXMgaXMgdXNlZCBmb3Igc3RyaW5naWZpY2F0aW9uIG9mIHJ1bnRpbWUgc3RhdGljIG5vZGVzXHJcbiAqIHNvIHRoYXQgd2UgZG9uJ3Qgc3RyaW5naWZ5IGJpbmRpbmdzIHRoYXQgY2Fubm90IGJlIHNldCBmcm9tIEhUTUwuXHJcbiAqIERvbid0IGFsc28gZm9yZ2V0IHRvIGFsbG93IGBkYXRhLSpgIGFuZCBgYXJpYS0qYCFcclxuICogR2VuZXJhdGVkIGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9BdHRyaWJ1dGVzXHJcbiAqL1xyXG5jb25zdCBpc0tub3duSHRtbEF0dHIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYGFjY2VwdCxhY2NlcHQtY2hhcnNldCxhY2Nlc3NrZXksYWN0aW9uLGFsaWduLGFsbG93LGFsdCxhc3luYyxgICtcclxuICAgIGBhdXRvY2FwaXRhbGl6ZSxhdXRvY29tcGxldGUsYXV0b2ZvY3VzLGF1dG9wbGF5LGJhY2tncm91bmQsYmdjb2xvcixgICtcclxuICAgIGBib3JkZXIsYnVmZmVyZWQsY2FwdHVyZSxjaGFsbGVuZ2UsY2hhcnNldCxjaGVja2VkLGNpdGUsY2xhc3MsY29kZSxgICtcclxuICAgIGBjb2RlYmFzZSxjb2xvcixjb2xzLGNvbHNwYW4sY29udGVudCxjb250ZW50ZWRpdGFibGUsY29udGV4dG1lbnUsY29udHJvbHMsYCArXHJcbiAgICBgY29vcmRzLGNyb3Nzb3JpZ2luLGNzcCxkYXRhLGRhdGV0aW1lLGRlY29kaW5nLGRlZmF1bHQsZGVmZXIsZGlyLGRpcm5hbWUsYCArXHJcbiAgICBgZGlzYWJsZWQsZG93bmxvYWQsZHJhZ2dhYmxlLGRyb3B6b25lLGVuY3R5cGUsZW50ZXJrZXloaW50LGZvcixmb3JtLGAgK1xyXG4gICAgYGZvcm1hY3Rpb24sZm9ybWVuY3R5cGUsZm9ybW1ldGhvZCxmb3Jtbm92YWxpZGF0ZSxmb3JtdGFyZ2V0LGhlYWRlcnMsYCArXHJcbiAgICBgaGVpZ2h0LGhpZGRlbixoaWdoLGhyZWYsaHJlZmxhbmcsaHR0cC1lcXVpdixpY29uLGlkLGltcG9ydGFuY2UsaW50ZWdyaXR5LGAgK1xyXG4gICAgYGlzbWFwLGl0ZW1wcm9wLGtleXR5cGUsa2luZCxsYWJlbCxsYW5nLGxhbmd1YWdlLGxvYWRpbmcsbGlzdCxsb29wLGxvdyxgICtcclxuICAgIGBtYW5pZmVzdCxtYXgsbWF4bGVuZ3RoLG1pbmxlbmd0aCxtZWRpYSxtaW4sbXVsdGlwbGUsbXV0ZWQsbmFtZSxub3ZhbGlkYXRlLGAgK1xyXG4gICAgYG9wZW4sb3B0aW11bSxwYXR0ZXJuLHBpbmcscGxhY2Vob2xkZXIscG9zdGVyLHByZWxvYWQscmFkaW9ncm91cCxyZWFkb25seSxgICtcclxuICAgIGByZWZlcnJlcnBvbGljeSxyZWwscmVxdWlyZWQscmV2ZXJzZWQscm93cyxyb3dzcGFuLHNhbmRib3gsc2NvcGUsc2NvcGVkLGAgK1xyXG4gICAgYHNlbGVjdGVkLHNoYXBlLHNpemUsc2l6ZXMsc2xvdCxzcGFuLHNwZWxsY2hlY2ssc3JjLHNyY2RvYyxzcmNsYW5nLHNyY3NldCxgICtcclxuICAgIGBzdGFydCxzdGVwLHN0eWxlLHN1bW1hcnksdGFiaW5kZXgsdGFyZ2V0LHRpdGxlLHRyYW5zbGF0ZSx0eXBlLHVzZW1hcCxgICtcclxuICAgIGB2YWx1ZSx3aWR0aCx3cmFwYCk7XHJcbi8qKlxyXG4gKiBHZW5lcmF0ZWQgZnJvbSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9TVkcvQXR0cmlidXRlXHJcbiAqL1xyXG5jb25zdCBpc0tub3duU3ZnQXR0ciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChgeG1sbnMsYWNjZW50LWhlaWdodCxhY2N1bXVsYXRlLGFkZGl0aXZlLGFsaWdubWVudC1iYXNlbGluZSxhbHBoYWJldGljLGFtcGxpdHVkZSxgICtcclxuICAgIGBhcmFiaWMtZm9ybSxhc2NlbnQsYXR0cmlidXRlTmFtZSxhdHRyaWJ1dGVUeXBlLGF6aW11dGgsYmFzZUZyZXF1ZW5jeSxgICtcclxuICAgIGBiYXNlbGluZS1zaGlmdCxiYXNlUHJvZmlsZSxiYm94LGJlZ2luLGJpYXMsYnksY2FsY01vZGUsY2FwLWhlaWdodCxjbGFzcyxgICtcclxuICAgIGBjbGlwLGNsaXBQYXRoVW5pdHMsY2xpcC1wYXRoLGNsaXAtcnVsZSxjb2xvcixjb2xvci1pbnRlcnBvbGF0aW9uLGAgK1xyXG4gICAgYGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyxjb2xvci1wcm9maWxlLGNvbG9yLXJlbmRlcmluZyxgICtcclxuICAgIGBjb250ZW50U2NyaXB0VHlwZSxjb250ZW50U3R5bGVUeXBlLGNyb3Nzb3JpZ2luLGN1cnNvcixjeCxjeSxkLGRlY2VsZXJhdGUsYCArXHJcbiAgICBgZGVzY2VudCxkaWZmdXNlQ29uc3RhbnQsZGlyZWN0aW9uLGRpc3BsYXksZGl2aXNvcixkb21pbmFudC1iYXNlbGluZSxkdXIsZHgsYCArXHJcbiAgICBgZHksZWRnZU1vZGUsZWxldmF0aW9uLGVuYWJsZS1iYWNrZ3JvdW5kLGVuZCxleHBvbmVudCxmaWxsLGZpbGwtb3BhY2l0eSxgICtcclxuICAgIGBmaWxsLXJ1bGUsZmlsdGVyLGZpbHRlclJlcyxmaWx0ZXJVbml0cyxmbG9vZC1jb2xvcixmbG9vZC1vcGFjaXR5LGAgK1xyXG4gICAgYGZvbnQtZmFtaWx5LGZvbnQtc2l6ZSxmb250LXNpemUtYWRqdXN0LGZvbnQtc3RyZXRjaCxmb250LXN0eWxlLGAgK1xyXG4gICAgYGZvbnQtdmFyaWFudCxmb250LXdlaWdodCxmb3JtYXQsZnJvbSxmcixmeCxmeSxnMSxnMixnbHlwaC1uYW1lLGAgK1xyXG4gICAgYGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwsZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwsZ2x5cGhSZWYsYCArXHJcbiAgICBgZ3JhZGllbnRUcmFuc2Zvcm0sZ3JhZGllbnRVbml0cyxoYW5naW5nLGhlaWdodCxocmVmLGhyZWZsYW5nLGhvcml6LWFkdi14LGAgK1xyXG4gICAgYGhvcml6LW9yaWdpbi14LGlkLGlkZW9ncmFwaGljLGltYWdlLXJlbmRlcmluZyxpbixpbjIsaW50ZXJjZXB0LGssazEsazIsazMsYCArXHJcbiAgICBgazQsa2VybmVsTWF0cml4LGtlcm5lbFVuaXRMZW5ndGgsa2VybmluZyxrZXlQb2ludHMsa2V5U3BsaW5lcyxrZXlUaW1lcyxgICtcclxuICAgIGBsYW5nLGxlbmd0aEFkanVzdCxsZXR0ZXItc3BhY2luZyxsaWdodGluZy1jb2xvcixsaW1pdGluZ0NvbmVBbmdsZSxsb2NhbCxgICtcclxuICAgIGBtYXJrZXItZW5kLG1hcmtlci1taWQsbWFya2VyLXN0YXJ0LG1hcmtlckhlaWdodCxtYXJrZXJVbml0cyxtYXJrZXJXaWR0aCxgICtcclxuICAgIGBtYXNrLG1hc2tDb250ZW50VW5pdHMsbWFza1VuaXRzLG1hdGhlbWF0aWNhbCxtYXgsbWVkaWEsbWV0aG9kLG1pbixtb2RlLGAgK1xyXG4gICAgYG5hbWUsbnVtT2N0YXZlcyxvZmZzZXQsb3BhY2l0eSxvcGVyYXRvcixvcmRlcixvcmllbnQsb3JpZW50YXRpb24sb3JpZ2luLGAgK1xyXG4gICAgYG92ZXJmbG93LG92ZXJsaW5lLXBvc2l0aW9uLG92ZXJsaW5lLXRoaWNrbmVzcyxwYW5vc2UtMSxwYWludC1vcmRlcixwYXRoLGAgK1xyXG4gICAgYHBhdGhMZW5ndGgscGF0dGVybkNvbnRlbnRVbml0cyxwYXR0ZXJuVHJhbnNmb3JtLHBhdHRlcm5Vbml0cyxwaW5nLGAgK1xyXG4gICAgYHBvaW50ZXItZXZlbnRzLHBvaW50cyxwb2ludHNBdFgscG9pbnRzQXRZLHBvaW50c0F0WixwcmVzZXJ2ZUFscGhhLGAgK1xyXG4gICAgYHByZXNlcnZlQXNwZWN0UmF0aW8scHJpbWl0aXZlVW5pdHMscixyYWRpdXMscmVmZXJyZXJQb2xpY3kscmVmWCxyZWZZLHJlbCxgICtcclxuICAgIGByZW5kZXJpbmctaW50ZW50LHJlcGVhdENvdW50LHJlcGVhdER1cixyZXF1aXJlZEV4dGVuc2lvbnMscmVxdWlyZWRGZWF0dXJlcyxgICtcclxuICAgIGByZXN0YXJ0LHJlc3VsdCxyb3RhdGUscngscnksc2NhbGUsc2VlZCxzaGFwZS1yZW5kZXJpbmcsc2xvcGUsc3BhY2luZyxgICtcclxuICAgIGBzcGVjdWxhckNvbnN0YW50LHNwZWN1bGFyRXhwb25lbnQsc3BlZWQsc3ByZWFkTWV0aG9kLHN0YXJ0T2Zmc2V0LGAgK1xyXG4gICAgYHN0ZERldmlhdGlvbixzdGVtaCxzdGVtdixzdGl0Y2hUaWxlcyxzdG9wLWNvbG9yLHN0b3Atb3BhY2l0eSxgICtcclxuICAgIGBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uLHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzLHN0cmluZyxzdHJva2UsYCArXHJcbiAgICBgc3Ryb2tlLWRhc2hhcnJheSxzdHJva2UtZGFzaG9mZnNldCxzdHJva2UtbGluZWNhcCxzdHJva2UtbGluZWpvaW4sYCArXHJcbiAgICBgc3Ryb2tlLW1pdGVybGltaXQsc3Ryb2tlLW9wYWNpdHksc3Ryb2tlLXdpZHRoLHN0eWxlLHN1cmZhY2VTY2FsZSxgICtcclxuICAgIGBzeXN0ZW1MYW5ndWFnZSx0YWJpbmRleCx0YWJsZVZhbHVlcyx0YXJnZXQsdGFyZ2V0WCx0YXJnZXRZLHRleHQtYW5jaG9yLGAgK1xyXG4gICAgYHRleHQtZGVjb3JhdGlvbix0ZXh0LXJlbmRlcmluZyx0ZXh0TGVuZ3RoLHRvLHRyYW5zZm9ybSx0cmFuc2Zvcm0tb3JpZ2luLGAgK1xyXG4gICAgYHR5cGUsdTEsdTIsdW5kZXJsaW5lLXBvc2l0aW9uLHVuZGVybGluZS10aGlja25lc3MsdW5pY29kZSx1bmljb2RlLWJpZGksYCArXHJcbiAgICBgdW5pY29kZS1yYW5nZSx1bml0cy1wZXItZW0sdi1hbHBoYWJldGljLHYtaGFuZ2luZyx2LWlkZW9ncmFwaGljLGAgK1xyXG4gICAgYHYtbWF0aGVtYXRpY2FsLHZhbHVlcyx2ZWN0b3ItZWZmZWN0LHZlcnNpb24sdmVydC1hZHYteSx2ZXJ0LW9yaWdpbi14LGAgK1xyXG4gICAgYHZlcnQtb3JpZ2luLXksdmlld0JveCx2aWV3VGFyZ2V0LHZpc2liaWxpdHksd2lkdGgsd2lkdGhzLHdvcmQtc3BhY2luZyxgICtcclxuICAgIGB3cml0aW5nLW1vZGUseCx4LWhlaWdodCx4MSx4Mix4Q2hhbm5lbFNlbGVjdG9yLHhsaW5rOmFjdHVhdGUseGxpbms6YXJjcm9sZSxgICtcclxuICAgIGB4bGluazpocmVmLHhsaW5rOnJvbGUseGxpbms6c2hvdyx4bGluazp0aXRsZSx4bGluazp0eXBlLHhtbDpiYXNlLHhtbDpsYW5nLGAgK1xyXG4gICAgYHhtbDpzcGFjZSx5LHkxLHkyLHlDaGFubmVsU2VsZWN0b3Iseix6b29tQW5kUGFuYCk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlKHZhbHVlKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBjb25zdCByZXMgPSB7fTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZVtpXTtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGlzU3RyaW5nKGl0ZW0pXHJcbiAgICAgICAgICAgICAgICA/IHBhcnNlU3RyaW5nU3R5bGUoaXRlbSlcclxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplU3R5bGUoaXRlbSk7XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBub3JtYWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVkW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5jb25zdCBsaXN0RGVsaW1pdGVyUkUgPSAvOyg/IVteKF0qXFwpKS9nO1xyXG5jb25zdCBwcm9wZXJ0eURlbGltaXRlclJFID0gLzooLispLztcclxuZnVuY3Rpb24gcGFyc2VTdHJpbmdTdHlsZShjc3NUZXh0KSB7XHJcbiAgICBjb25zdCByZXQgPSB7fTtcclxuICAgIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlclJFKS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXJSRSk7XHJcbiAgICAgICAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXRbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuZnVuY3Rpb24gc3RyaW5naWZ5U3R5bGUoc3R5bGVzKSB7XHJcbiAgICBsZXQgcmV0ID0gJyc7XHJcbiAgICBpZiAoIXN0eWxlcyB8fCBpc1N0cmluZyhzdHlsZXMpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga2V5IGluIHN0eWxlcykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVzW2tleV07XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEtleSA9IGtleS5zdGFydHNXaXRoKGAtLWApID8ga2V5IDogaHlwaGVuYXRlKGtleSk7XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fFxyXG4gICAgICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05vVW5pdE51bWVyaWNTdHlsZVByb3Aobm9ybWFsaXplZEtleSkpKSB7XHJcbiAgICAgICAgICAgIC8vIG9ubHkgcmVuZGVyIHZhbGlkIHZhbHVlc1xyXG4gICAgICAgICAgICByZXQgKz0gYCR7bm9ybWFsaXplZEtleX06JHt2YWx1ZX07YDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzKHZhbHVlKSB7XHJcbiAgICBsZXQgcmVzID0gJyc7XHJcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgcmVzID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IG5vcm1hbGl6ZUNsYXNzKHZhbHVlW2ldKTtcclxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJlcyArPSBub3JtYWxpemVkICsgJyAnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZVtuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgcmVzICs9IG5hbWUgKyAnICc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzLnRyaW0oKTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyhwcm9wcykge1xyXG4gICAgaWYgKCFwcm9wcylcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIGxldCB7IGNsYXNzOiBrbGFzcywgc3R5bGUgfSA9IHByb3BzO1xyXG4gICAgaWYgKGtsYXNzICYmICFpc1N0cmluZyhrbGFzcykpIHtcclxuICAgICAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcclxuICAgIH1cclxuICAgIGlmIChzdHlsZSkge1xyXG4gICAgICAgIHByb3BzLnN0eWxlID0gbm9ybWFsaXplU3R5bGUoc3R5bGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzO1xyXG59XG5cbi8vIFRoZXNlIHRhZyBjb25maWdzIGFyZSBzaGFyZWQgYmV0d2VlbiBjb21waWxlci1kb20gYW5kIHJ1bnRpbWUtZG9tLCBzbyB0aGV5XHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvRWxlbWVudFxyXG5jb25zdCBIVE1MX1RBR1MgPSAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlciwnICtcclxuICAgICdoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sJyArXHJcbiAgICAnZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsJyArXHJcbiAgICAnZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsJyArXHJcbiAgICAndGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSwnICtcclxuICAgICdjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsJyArXHJcbiAgICAndGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLCcgK1xyXG4gICAgJ29wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsJyArXHJcbiAgICAnc3VtbWFyeSx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCc7XHJcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9FbGVtZW50XHJcbmNvbnN0IFNWR19UQUdTID0gJ3N2ZyxhbmltYXRlLGFuaW1hdGVNb3Rpb24sYW5pbWF0ZVRyYW5zZm9ybSxjaXJjbGUsY2xpcFBhdGgsY29sb3ItcHJvZmlsZSwnICtcclxuICAgICdkZWZzLGRlc2MsZGlzY2FyZCxlbGxpcHNlLGZlQmxlbmQsZmVDb2xvck1hdHJpeCxmZUNvbXBvbmVudFRyYW5zZmVyLCcgK1xyXG4gICAgJ2ZlQ29tcG9zaXRlLGZlQ29udm9sdmVNYXRyaXgsZmVEaWZmdXNlTGlnaHRpbmcsZmVEaXNwbGFjZW1lbnRNYXAsJyArXHJcbiAgICAnZmVEaXN0YW5jZUxpZ2h0LGZlRHJvcFNoYWRvdyxmZUZsb29kLGZlRnVuY0EsZmVGdW5jQixmZUZ1bmNHLGZlRnVuY1IsJyArXHJcbiAgICAnZmVHYXVzc2lhbkJsdXIsZmVJbWFnZSxmZU1lcmdlLGZlTWVyZ2VOb2RlLGZlTW9ycGhvbG9neSxmZU9mZnNldCwnICtcclxuICAgICdmZVBvaW50TGlnaHQsZmVTcGVjdWxhckxpZ2h0aW5nLGZlU3BvdExpZ2h0LGZlVGlsZSxmZVR1cmJ1bGVuY2UsZmlsdGVyLCcgK1xyXG4gICAgJ2ZvcmVpZ25PYmplY3QsZyxoYXRjaCxoYXRjaHBhdGgsaW1hZ2UsbGluZSxsaW5lYXJHcmFkaWVudCxtYXJrZXIsbWFzaywnICtcclxuICAgICdtZXNoLG1lc2hncmFkaWVudCxtZXNocGF0Y2gsbWVzaHJvdyxtZXRhZGF0YSxtcGF0aCxwYXRoLHBhdHRlcm4sJyArXHJcbiAgICAncG9seWdvbixwb2x5bGluZSxyYWRpYWxHcmFkaWVudCxyZWN0LHNldCxzb2xpZGNvbG9yLHN0b3Asc3dpdGNoLHN5bWJvbCwnICtcclxuICAgICd0ZXh0LHRleHRQYXRoLHRpdGxlLHRzcGFuLHVua25vd24sdXNlLHZpZXcnO1xyXG5jb25zdCBWT0lEX1RBR1MgPSAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxocixpbWcsaW5wdXQsbGluayxtZXRhLHBhcmFtLHNvdXJjZSx0cmFjayx3YnInO1xyXG4vKipcclxuICogQ29tcGlsZXIgb25seS5cclxuICogRG8gTk9UIHVzZSBpbiBydW50aW1lIGNvZGUgcGF0aHMgdW5sZXNzIGJlaGluZCBgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpYCBmbGFnLlxyXG4gKi9cclxuY29uc3QgaXNIVE1MVGFnID0gLyojX19QVVJFX18qLyBtYWtlTWFwKEhUTUxfVEFHUyk7XHJcbi8qKlxyXG4gKiBDb21waWxlciBvbmx5LlxyXG4gKiBEbyBOT1QgdXNlIGluIHJ1bnRpbWUgY29kZSBwYXRocyB1bmxlc3MgYmVoaW5kIGAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylgIGZsYWcuXHJcbiAqL1xyXG5jb25zdCBpc1NWR1RhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChTVkdfVEFHUyk7XHJcbi8qKlxyXG4gKiBDb21waWxlciBvbmx5LlxyXG4gKiBEbyBOT1QgdXNlIGluIHJ1bnRpbWUgY29kZSBwYXRocyB1bmxlc3MgYmVoaW5kIGAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylgIGZsYWcuXHJcbiAqL1xyXG5jb25zdCBpc1ZvaWRUYWcgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoVk9JRF9UQUdTKTtcblxuY29uc3QgZXNjYXBlUkUgPSAvW1wiJyY8Pl0vO1xyXG5mdW5jdGlvbiBlc2NhcGVIdG1sKHN0cmluZykge1xyXG4gICAgY29uc3Qgc3RyID0gJycgKyBzdHJpbmc7XHJcbiAgICBjb25zdCBtYXRjaCA9IGVzY2FwZVJFLmV4ZWMoc3RyKTtcclxuICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG4gICAgbGV0IGh0bWwgPSAnJztcclxuICAgIGxldCBlc2NhcGVkO1xyXG4gICAgbGV0IGluZGV4O1xyXG4gICAgbGV0IGxhc3RJbmRleCA9IDA7XHJcbiAgICBmb3IgKGluZGV4ID0gbWF0Y2guaW5kZXg7IGluZGV4IDwgc3RyLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgIHN3aXRjaCAoc3RyLmNoYXJDb2RlQXQoaW5kZXgpKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMzQ6IC8vIFwiXHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZxdW90Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzODogLy8gJlxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmYW1wOyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzOTogLy8gJ1xyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmIzM5Oyc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA2MDogLy8gPFxyXG4gICAgICAgICAgICAgICAgZXNjYXBlZCA9ICcmbHQ7JztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDYyOiAvLyA+XHJcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gJyZndDsnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxhc3RJbmRleCAhPT0gaW5kZXgpIHtcclxuICAgICAgICAgICAgaHRtbCArPSBzdHIuc2xpY2UobGFzdEluZGV4LCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMTtcclxuICAgICAgICBodG1sICs9IGVzY2FwZWQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGFzdEluZGV4ICE9PSBpbmRleCA/IGh0bWwgKyBzdHIuc2xpY2UobGFzdEluZGV4LCBpbmRleCkgOiBodG1sO1xyXG59XHJcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNTIvc3ludGF4Lmh0bWwjY29tbWVudHNcclxuY29uc3QgY29tbWVudFN0cmlwUkUgPSAvXi0/Pnw8IS0tfC0tPnwtLSE+fDwhLSQvZztcclxuZnVuY3Rpb24gZXNjYXBlSHRtbENvbW1lbnQoc3JjKSB7XHJcbiAgICByZXR1cm4gc3JjLnJlcGxhY2UoY29tbWVudFN0cmlwUkUsICcnKTtcclxufVxuXG5mdW5jdGlvbiBsb29zZUNvbXBhcmVBcnJheXMoYSwgYikge1xyXG4gICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICBsZXQgZXF1YWwgPSB0cnVlO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGVxdWFsICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgZXF1YWwgPSBsb29zZUVxdWFsKGFbaV0sIGJbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVxdWFsO1xyXG59XHJcbmZ1bmN0aW9uIGxvb3NlRXF1YWwoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBsZXQgYVZhbGlkVHlwZSA9IGlzRGF0ZShhKTtcclxuICAgIGxldCBiVmFsaWRUeXBlID0gaXNEYXRlKGIpO1xyXG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xyXG4gICAgICAgIHJldHVybiBhVmFsaWRUeXBlICYmIGJWYWxpZFR5cGUgPyBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKCkgOiBmYWxzZTtcclxuICAgIH1cclxuICAgIGFWYWxpZFR5cGUgPSBpc0FycmF5KGEpO1xyXG4gICAgYlZhbGlkVHlwZSA9IGlzQXJyYXkoYik7XHJcbiAgICBpZiAoYVZhbGlkVHlwZSB8fCBiVmFsaWRUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIGFWYWxpZFR5cGUgJiYgYlZhbGlkVHlwZSA/IGxvb3NlQ29tcGFyZUFycmF5cyhhLCBiKSA6IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgYVZhbGlkVHlwZSA9IGlzT2JqZWN0KGEpO1xyXG4gICAgYlZhbGlkVHlwZSA9IGlzT2JqZWN0KGIpO1xyXG4gICAgaWYgKGFWYWxpZFR5cGUgfHwgYlZhbGlkVHlwZSkge1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZjogdGhpcyBpZiB3aWxsIHByb2JhYmx5IG5ldmVyIGJlIGNhbGxlZCAqL1xyXG4gICAgICAgIGlmICghYVZhbGlkVHlwZSB8fCAhYlZhbGlkVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFLZXlzQ291bnQgPSBPYmplY3Qua2V5cyhhKS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgYktleXNDb3VudCA9IE9iamVjdC5rZXlzKGIpLmxlbmd0aDtcclxuICAgICAgICBpZiAoYUtleXNDb3VudCAhPT0gYktleXNDb3VudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGEpIHtcclxuICAgICAgICAgICAgY29uc3QgYUhhc0tleSA9IGEuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgICAgICAgICAgY29uc3QgYkhhc0tleSA9IGIuaGFzT3duUHJvcGVydHkoa2V5KTtcclxuICAgICAgICAgICAgaWYgKChhSGFzS2V5ICYmICFiSGFzS2V5KSB8fFxyXG4gICAgICAgICAgICAgICAgKCFhSGFzS2V5ICYmIGJIYXNLZXkpIHx8XHJcbiAgICAgICAgICAgICAgICAhbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKTtcclxufVxyXG5mdW5jdGlvbiBsb29zZUluZGV4T2YoYXJyLCB2YWwpIHtcclxuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGl0ZW0gPT4gbG9vc2VFcXVhbChpdGVtLCB2YWwpKTtcclxufVxuXG4vKipcclxuICogRm9yIGNvbnZlcnRpbmcge3sgaW50ZXJwb2xhdGlvbiB9fSB2YWx1ZXMgdG8gZGlzcGxheWVkIHN0cmluZ3MuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB0b0Rpc3BsYXlTdHJpbmcgPSAodmFsKSA9PiB7XHJcbiAgICByZXR1cm4gdmFsID09IG51bGxcclxuICAgICAgICA/ICcnXHJcbiAgICAgICAgOiBpc0FycmF5KHZhbCkgfHxcclxuICAgICAgICAgICAgKGlzT2JqZWN0KHZhbCkgJiZcclxuICAgICAgICAgICAgICAgICh2YWwudG9TdHJpbmcgPT09IG9iamVjdFRvU3RyaW5nIHx8ICFpc0Z1bmN0aW9uKHZhbC50b1N0cmluZykpKVxyXG4gICAgICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgcmVwbGFjZXIsIDIpXHJcbiAgICAgICAgICAgIDogU3RyaW5nKHZhbCk7XHJcbn07XHJcbmNvbnN0IHJlcGxhY2VyID0gKF9rZXksIHZhbCkgPT4ge1xyXG4gICAgLy8gY2FuJ3QgdXNlIGlzUmVmIGhlcmUgc2luY2UgQHZ1ZS9zaGFyZWQgaGFzIG5vIGRlcHNcclxuICAgIGlmICh2YWwgJiYgdmFsLl9fdl9pc1JlZikge1xyXG4gICAgICAgIHJldHVybiByZXBsYWNlcihfa2V5LCB2YWwudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNNYXAodmFsKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFtgTWFwKCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLmVudHJpZXMoKV0ucmVkdWNlKChlbnRyaWVzLCBba2V5LCB2YWxdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbnRyaWVzW2Ake2tleX0gPT5gXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyaWVzO1xyXG4gICAgICAgICAgICB9LCB7fSlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNTZXQodmFsKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFtgU2V0KCR7dmFsLnNpemV9KWBdOiBbLi4udmFsLnZhbHVlcygpXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdCh2YWwpICYmICFpc0FycmF5KHZhbCkgJiYgIWlzUGxhaW5PYmplY3QodmFsKSkge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWw7XHJcbn07XG5cbmNvbnN0IEVNUFRZX09CSiA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgPyBPYmplY3QuZnJlZXplKHt9KVxyXG4gICAgOiB7fTtcclxuY29uc3QgRU1QVFlfQVJSID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXTtcclxuY29uc3QgTk9PUCA9ICgpID0+IHsgfTtcclxuLyoqXHJcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXHJcbiAqL1xyXG5jb25zdCBOTyA9ICgpID0+IGZhbHNlO1xyXG5jb25zdCBvblJFID0gL15vblteYS16XS87XHJcbmNvbnN0IGlzT24gPSAoa2V5KSA9PiBvblJFLnRlc3Qoa2V5KTtcclxuY29uc3QgaXNNb2RlbExpc3RlbmVyID0gKGtleSkgPT4ga2V5LnN0YXJ0c1dpdGgoJ29uVXBkYXRlOicpO1xyXG5jb25zdCBleHRlbmQgPSBPYmplY3QuYXNzaWduO1xyXG5jb25zdCByZW1vdmUgPSAoYXJyLCBlbCkgPT4ge1xyXG4gICAgY29uc3QgaSA9IGFyci5pbmRleE9mKGVsKTtcclxuICAgIGlmIChpID4gLTEpIHtcclxuICAgICAgICBhcnIuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XHJcbmNvbnN0IGhhc093biA9ICh2YWwsIGtleSkgPT4gaGFzT3duUHJvcGVydHkuY2FsbCh2YWwsIGtleSk7XHJcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xyXG5jb25zdCBpc01hcCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSAnW29iamVjdCBNYXBdJztcclxuY29uc3QgaXNTZXQgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gJ1tvYmplY3QgU2V0XSc7XHJcbmNvbnN0IGlzRGF0ZSA9ICh2YWwpID0+IHZhbCBpbnN0YW5jZW9mIERhdGU7XHJcbmNvbnN0IGlzRnVuY3Rpb24gPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xyXG5jb25zdCBpc1N0cmluZyA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xyXG5jb25zdCBpc1N5bWJvbCA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09ICdzeW1ib2wnO1xyXG5jb25zdCBpc09iamVjdCA9ICh2YWwpID0+IHZhbCAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcclxuY29uc3QgaXNQcm9taXNlID0gKHZhbCkgPT4ge1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwudGhlbikgJiYgaXNGdW5jdGlvbih2YWwuY2F0Y2gpO1xyXG59O1xyXG5jb25zdCBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbmNvbnN0IHRvVHlwZVN0cmluZyA9ICh2YWx1ZSkgPT4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XHJcbmNvbnN0IHRvUmF3VHlwZSA9ICh2YWx1ZSkgPT4ge1xyXG4gICAgLy8gZXh0cmFjdCBcIlJhd1R5cGVcIiBmcm9tIHN0cmluZ3MgbGlrZSBcIltvYmplY3QgUmF3VHlwZV1cIlxyXG4gICAgcmV0dXJuIHRvVHlwZVN0cmluZyh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xyXG59O1xyXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4gdG9UeXBlU3RyaW5nKHZhbCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xyXG5jb25zdCBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmXHJcbiAgICBrZXkgIT09ICdOYU4nICYmXHJcbiAgICBrZXlbMF0gIT09ICctJyAmJlxyXG4gICAgJycgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xyXG5jb25zdCBpc1Jlc2VydmVkUHJvcCA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcChcclxuLy8gdGhlIGxlYWRpbmcgY29tbWEgaXMgaW50ZW50aW9uYWwgc28gZW1wdHkgc3RyaW5nIFwiXCIgaXMgYWxzbyBpbmNsdWRlZFxyXG4nLGtleSxyZWYscmVmX2ZvcixyZWZfa2V5LCcgK1xyXG4gICAgJ29uVm5vZGVCZWZvcmVNb3VudCxvblZub2RlTW91bnRlZCwnICtcclxuICAgICdvblZub2RlQmVmb3JlVXBkYXRlLG9uVm5vZGVVcGRhdGVkLCcgK1xyXG4gICAgJ29uVm5vZGVCZWZvcmVVbm1vdW50LG9uVm5vZGVVbm1vdW50ZWQnKTtcclxuY29uc3QgY2FjaGVTdHJpbmdGdW5jdGlvbiA9IChmbikgPT4ge1xyXG4gICAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgcmV0dXJuICgoc3RyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcclxuICAgICAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBjYW1lbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIChfLCBjKSA9PiAoYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnKSk7XHJcbn0pO1xyXG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgaHlwaGVuYXRlID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKCkpO1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IGNhcGl0YWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKSk7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3QgdG9IYW5kbGVyS2V5ID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIgPyBgb24ke2NhcGl0YWxpemUoc3RyKX1gIDogYGApO1xyXG4vLyBjb21wYXJlIHdoZXRoZXIgYSB2YWx1ZSBoYXMgY2hhbmdlZCwgYWNjb3VudGluZyBmb3IgTmFOLlxyXG5jb25zdCBoYXNDaGFuZ2VkID0gKHZhbHVlLCBvbGRWYWx1ZSkgPT4gIU9iamVjdC5pcyh2YWx1ZSwgb2xkVmFsdWUpO1xyXG5jb25zdCBpbnZva2VBcnJheUZucyA9IChmbnMsIGFyZykgPT4ge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmbnNbaV0oYXJnKTtcclxuICAgIH1cclxufTtcclxuY29uc3QgZGVmID0gKG9iaiwga2V5LCB2YWx1ZSkgPT4ge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlXHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgdG9OdW1iZXIgPSAodmFsKSA9PiB7XHJcbiAgICBjb25zdCBuID0gcGFyc2VGbG9hdCh2YWwpO1xyXG4gICAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogbjtcclxufTtcclxubGV0IF9nbG9iYWxUaGlzO1xyXG5jb25zdCBnZXRHbG9iYWxUaGlzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChfZ2xvYmFsVGhpcyB8fFxyXG4gICAgICAgIChfZ2xvYmFsVGhpcyA9XHJcbiAgICAgICAgICAgIHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgPyBnbG9iYWxUaGlzXHJcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgID8gc2VsZlxyXG4gICAgICAgICAgICAgICAgICAgIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB3aW5kb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnbG9iYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pKTtcclxufTtcblxuZXhwb3J0IHsgRU1QVFlfQVJSLCBFTVBUWV9PQkosIE5PLCBOT09QLCBQYXRjaEZsYWdOYW1lcywgY2FtZWxpemUsIGNhcGl0YWxpemUsIGRlZiwgZXNjYXBlSHRtbCwgZXNjYXBlSHRtbENvbW1lbnQsIGV4dGVuZCwgZ2VuZXJhdGVDb2RlRnJhbWUsIGdldEdsb2JhbFRoaXMsIGhhc0NoYW5nZWQsIGhhc093biwgaHlwaGVuYXRlLCBpbmNsdWRlQm9vbGVhbkF0dHIsIGludm9rZUFycmF5Rm5zLCBpc0FycmF5LCBpc0Jvb2xlYW5BdHRyLCBpc0RhdGUsIGlzRnVuY3Rpb24sIGlzR2xvYmFsbHlXaGl0ZWxpc3RlZCwgaXNIVE1MVGFnLCBpc0ludGVnZXJLZXksIGlzS25vd25IdG1sQXR0ciwgaXNLbm93blN2Z0F0dHIsIGlzTWFwLCBpc01vZGVsTGlzdGVuZXIsIGlzTm9Vbml0TnVtZXJpY1N0eWxlUHJvcCwgaXNPYmplY3QsIGlzT24sIGlzUGxhaW5PYmplY3QsIGlzUHJvbWlzZSwgaXNSZXNlcnZlZFByb3AsIGlzU1NSU2FmZUF0dHJOYW1lLCBpc1NWR1RhZywgaXNTZXQsIGlzU3BlY2lhbEJvb2xlYW5BdHRyLCBpc1N0cmluZywgaXNTeW1ib2wsIGlzVm9pZFRhZywgbG9vc2VFcXVhbCwgbG9vc2VJbmRleE9mLCBtYWtlTWFwLCBub3JtYWxpemVDbGFzcywgbm9ybWFsaXplUHJvcHMsIG5vcm1hbGl6ZVN0eWxlLCBvYmplY3RUb1N0cmluZywgcGFyc2VTdHJpbmdTdHlsZSwgcHJvcHNUb0F0dHJNYXAsIHJlbW92ZSwgc2xvdEZsYWdzVGV4dCwgc3RyaW5naWZ5U3R5bGUsIHRvRGlzcGxheVN0cmluZywgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgdG9SYXdUeXBlLCB0b1R5cGVTdHJpbmcgfTtcbiIsImltcG9ydCB7IGV4dGVuZCwgaXNBcnJheSwgaXNNYXAsIGlzSW50ZWdlcktleSwgaXNTeW1ib2wsIGhhc093biwgaXNPYmplY3QsIGhhc0NoYW5nZWQsIG1ha2VNYXAsIGNhcGl0YWxpemUsIHRvUmF3VHlwZSwgZGVmLCBpc0Z1bmN0aW9uLCBOT09QIH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuXG5mdW5jdGlvbiB3YXJuKG1zZywgLi4uYXJncykge1xyXG4gICAgY29uc29sZS53YXJuKGBbVnVlIHdhcm5dICR7bXNnfWAsIC4uLmFyZ3MpO1xyXG59XG5cbmxldCBhY3RpdmVFZmZlY3RTY29wZTtcclxuY29uc3QgZWZmZWN0U2NvcGVTdGFjayA9IFtdO1xyXG5jbGFzcyBFZmZlY3RTY29wZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihkZXRhY2hlZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuY2xlYW51cHMgPSBbXTtcclxuICAgICAgICBpZiAoIWRldGFjaGVkICYmIGFjdGl2ZUVmZmVjdFNjb3BlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyZW50ID0gYWN0aXZlRWZmZWN0U2NvcGU7XHJcbiAgICAgICAgICAgIHRoaXMuaW5kZXggPVxyXG4gICAgICAgICAgICAgICAgKGFjdGl2ZUVmZmVjdFNjb3BlLnNjb3BlcyB8fCAoYWN0aXZlRWZmZWN0U2NvcGUuc2NvcGVzID0gW10pKS5wdXNoKHRoaXMpIC0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBydW4oZm4pIHtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbmFsbHkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vZmYoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgY2Fubm90IHJ1biBhbiBpbmFjdGl2ZSBlZmZlY3Qgc2NvcGUuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGVmZmVjdFNjb3BlU3RhY2sucHVzaCh0aGlzKTtcclxuICAgICAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9mZigpIHtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHtcclxuICAgICAgICAgICAgZWZmZWN0U2NvcGVTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUgPSBlZmZlY3RTY29wZVN0YWNrW2VmZmVjdFNjb3BlU3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RvcChmcm9tUGFyZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWZmZWN0cy5mb3JFYWNoKGUgPT4gZS5zdG9wKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFudXBzLmZvckVhY2goY2xlYW51cCA9PiBjbGVhbnVwKCkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zY29wZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NvcGVzLmZvckVhY2goZSA9PiBlLnN0b3AodHJ1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIG5lc3RlZCBzY29wZSwgZGVyZWZlcmVuY2UgZnJvbSBwYXJlbnQgdG8gYXZvaWQgbWVtb3J5IGxlYWtzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudCAmJiAhZnJvbVBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgLy8gb3B0aW1pemVkIE8oMSkgcmVtb3ZhbFxyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMucGFyZW50LnNjb3Blcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0ICYmIGxhc3QgIT09IHRoaXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5zY29wZXNbdGhpcy5pbmRleF0gPSBsYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3QuaW5kZXggPSB0aGlzLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGVmZmVjdFNjb3BlKGRldGFjaGVkKSB7XHJcbiAgICByZXR1cm4gbmV3IEVmZmVjdFNjb3BlKGRldGFjaGVkKTtcclxufVxyXG5mdW5jdGlvbiByZWNvcmRFZmZlY3RTY29wZShlZmZlY3QsIHNjb3BlKSB7XHJcbiAgICBzY29wZSA9IHNjb3BlIHx8IGFjdGl2ZUVmZmVjdFNjb3BlO1xyXG4gICAgaWYgKHNjb3BlICYmIHNjb3BlLmFjdGl2ZSkge1xyXG4gICAgICAgIHNjb3BlLmVmZmVjdHMucHVzaChlZmZlY3QpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldEN1cnJlbnRTY29wZSgpIHtcclxuICAgIHJldHVybiBhY3RpdmVFZmZlY3RTY29wZTtcclxufVxyXG5mdW5jdGlvbiBvblNjb3BlRGlzcG9zZShmbikge1xyXG4gICAgaWYgKGFjdGl2ZUVmZmVjdFNjb3BlKSB7XHJcbiAgICAgICAgYWN0aXZlRWZmZWN0U2NvcGUuY2xlYW51cHMucHVzaChmbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGBvblNjb3BlRGlzcG9zZSgpIGlzIGNhbGxlZCB3aGVuIHRoZXJlIGlzIG5vIGFjdGl2ZSBlZmZlY3Qgc2NvcGVgICtcclxuICAgICAgICAgICAgYCB0byBiZSBhc3NvY2lhdGVkIHdpdGguYCk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgY3JlYXRlRGVwID0gKGVmZmVjdHMpID0+IHtcclxuICAgIGNvbnN0IGRlcCA9IG5ldyBTZXQoZWZmZWN0cyk7XHJcbiAgICBkZXAudyA9IDA7XHJcbiAgICBkZXAubiA9IDA7XHJcbiAgICByZXR1cm4gZGVwO1xyXG59O1xyXG5jb25zdCB3YXNUcmFja2VkID0gKGRlcCkgPT4gKGRlcC53ICYgdHJhY2tPcEJpdCkgPiAwO1xyXG5jb25zdCBuZXdUcmFja2VkID0gKGRlcCkgPT4gKGRlcC5uICYgdHJhY2tPcEJpdCkgPiAwO1xyXG5jb25zdCBpbml0RGVwTWFya2VycyA9ICh7IGRlcHMgfSkgPT4ge1xyXG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRlcHNbaV0udyB8PSB0cmFja09wQml0OyAvLyBzZXQgd2FzIHRyYWNrZWRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGZpbmFsaXplRGVwTWFya2VycyA9IChlZmZlY3QpID0+IHtcclxuICAgIGNvbnN0IHsgZGVwcyB9ID0gZWZmZWN0O1xyXG4gICAgaWYgKGRlcHMubGVuZ3RoKSB7XHJcbiAgICAgICAgbGV0IHB0ciA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlcCA9IGRlcHNbaV07XHJcbiAgICAgICAgICAgIGlmICh3YXNUcmFja2VkKGRlcCkgJiYgIW5ld1RyYWNrZWQoZGVwKSkge1xyXG4gICAgICAgICAgICAgICAgZGVwLmRlbGV0ZShlZmZlY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVwc1twdHIrK10gPSBkZXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY2xlYXIgYml0c1xyXG4gICAgICAgICAgICBkZXAudyAmPSB+dHJhY2tPcEJpdDtcclxuICAgICAgICAgICAgZGVwLm4gJj0gfnRyYWNrT3BCaXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlcHMubGVuZ3RoID0gcHRyO1xyXG4gICAgfVxyXG59O1xuXG5jb25zdCB0YXJnZXRNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG4vLyBUaGUgbnVtYmVyIG9mIGVmZmVjdHMgY3VycmVudGx5IGJlaW5nIHRyYWNrZWQgcmVjdXJzaXZlbHkuXHJcbmxldCBlZmZlY3RUcmFja0RlcHRoID0gMDtcclxubGV0IHRyYWNrT3BCaXQgPSAxO1xyXG4vKipcclxuICogVGhlIGJpdHdpc2UgdHJhY2sgbWFya2VycyBzdXBwb3J0IGF0IG1vc3QgMzAgbGV2ZWxzIG9mIHJlY3Vyc2lvbi5cclxuICogVGhpcyB2YWx1ZSBpcyBjaG9zZW4gdG8gZW5hYmxlIG1vZGVybiBKUyBlbmdpbmVzIHRvIHVzZSBhIFNNSSBvbiBhbGwgcGxhdGZvcm1zLlxyXG4gKiBXaGVuIHJlY3Vyc2lvbiBkZXB0aCBpcyBncmVhdGVyLCBmYWxsIGJhY2sgdG8gdXNpbmcgYSBmdWxsIGNsZWFudXAuXHJcbiAqL1xyXG5jb25zdCBtYXhNYXJrZXJCaXRzID0gMzA7XHJcbmNvbnN0IGVmZmVjdFN0YWNrID0gW107XHJcbmxldCBhY3RpdmVFZmZlY3Q7XHJcbmNvbnN0IElURVJBVEVfS0VZID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdpdGVyYXRlJyA6ICcnKTtcclxuY29uc3QgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnTWFwIGtleSBpdGVyYXRlJyA6ICcnKTtcclxuY2xhc3MgUmVhY3RpdmVFZmZlY3Qge1xyXG4gICAgY29uc3RydWN0b3IoZm4sIHNjaGVkdWxlciA9IG51bGwsIHNjb3BlKSB7XHJcbiAgICAgICAgdGhpcy5mbiA9IGZuO1xyXG4gICAgICAgIHRoaXMuc2NoZWR1bGVyID0gc2NoZWR1bGVyO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmRlcHMgPSBbXTtcclxuICAgICAgICByZWNvcmRFZmZlY3RTY29wZSh0aGlzLCBzY29wZSk7XHJcbiAgICB9XHJcbiAgICBydW4oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWVmZmVjdFN0YWNrLmxlbmd0aCB8fCAhZWZmZWN0U3RhY2suaW5jbHVkZXModGhpcykpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGVmZmVjdFN0YWNrLnB1c2goKGFjdGl2ZUVmZmVjdCA9IHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIGVuYWJsZVRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja09wQml0ID0gMSA8PCArK2VmZmVjdFRyYWNrRGVwdGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWZmZWN0VHJhY2tEZXB0aCA8PSBtYXhNYXJrZXJCaXRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdERlcE1hcmtlcnModGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwRWZmZWN0KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIGlmIChlZmZlY3RUcmFja0RlcHRoIDw9IG1heE1hcmtlckJpdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaW5hbGl6ZURlcE1hcmtlcnModGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0cmFja09wQml0ID0gMSA8PCAtLWVmZmVjdFRyYWNrRGVwdGg7XHJcbiAgICAgICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3RTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlZmZlY3RTdGFjay5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVFZmZlY3QgPSBuID4gMCA/IGVmZmVjdFN0YWNrW24gLSAxXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGNsZWFudXBFZmZlY3QodGhpcyk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uU3RvcCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjbGVhbnVwRWZmZWN0KGVmZmVjdCkge1xyXG4gICAgY29uc3QgeyBkZXBzIH0gPSBlZmZlY3Q7XHJcbiAgICBpZiAoZGVwcy5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgZGVwc1tpXS5kZWxldGUoZWZmZWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVwcy5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGVmZmVjdChmbiwgb3B0aW9ucykge1xyXG4gICAgaWYgKGZuLmVmZmVjdCkge1xyXG4gICAgICAgIGZuID0gZm4uZWZmZWN0LmZuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgX2VmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChmbik7XHJcbiAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgIGV4dGVuZChfZWZmZWN0LCBvcHRpb25zKTtcclxuICAgICAgICBpZiAob3B0aW9ucy5zY29wZSlcclxuICAgICAgICAgICAgcmVjb3JkRWZmZWN0U2NvcGUoX2VmZmVjdCwgb3B0aW9ucy5zY29wZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMubGF6eSkge1xyXG4gICAgICAgIF9lZmZlY3QucnVuKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBydW5uZXIgPSBfZWZmZWN0LnJ1bi5iaW5kKF9lZmZlY3QpO1xyXG4gICAgcnVubmVyLmVmZmVjdCA9IF9lZmZlY3Q7XHJcbiAgICByZXR1cm4gcnVubmVyO1xyXG59XHJcbmZ1bmN0aW9uIHN0b3AocnVubmVyKSB7XHJcbiAgICBydW5uZXIuZWZmZWN0LnN0b3AoKTtcclxufVxyXG5sZXQgc2hvdWxkVHJhY2sgPSB0cnVlO1xyXG5jb25zdCB0cmFja1N0YWNrID0gW107XHJcbmZ1bmN0aW9uIHBhdXNlVHJhY2tpbmcoKSB7XHJcbiAgICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xyXG4gICAgc2hvdWxkVHJhY2sgPSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBlbmFibGVUcmFja2luZygpIHtcclxuICAgIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XHJcbiAgICBzaG91bGRUcmFjayA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gcmVzZXRUcmFja2luZygpIHtcclxuICAgIGNvbnN0IGxhc3QgPSB0cmFja1N0YWNrLnBvcCgpO1xyXG4gICAgc2hvdWxkVHJhY2sgPSBsYXN0ID09PSB1bmRlZmluZWQgPyB0cnVlIDogbGFzdDtcclxufVxyXG5mdW5jdGlvbiB0cmFjayh0YXJnZXQsIHR5cGUsIGtleSkge1xyXG4gICAgaWYgKCFpc1RyYWNraW5nKCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcclxuICAgIGlmICghZGVwc01hcCkge1xyXG4gICAgICAgIHRhcmdldE1hcC5zZXQodGFyZ2V0LCAoZGVwc01hcCA9IG5ldyBNYXAoKSkpO1xyXG4gICAgfVxyXG4gICAgbGV0IGRlcCA9IGRlcHNNYXAuZ2V0KGtleSk7XHJcbiAgICBpZiAoIWRlcCkge1xyXG4gICAgICAgIGRlcHNNYXAuc2V0KGtleSwgKGRlcCA9IGNyZWF0ZURlcCgpKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBldmVudEluZm8gPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICA/IHsgZWZmZWN0OiBhY3RpdmVFZmZlY3QsIHRhcmdldCwgdHlwZSwga2V5IH1cclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIHRyYWNrRWZmZWN0cyhkZXAsIGV2ZW50SW5mbyk7XHJcbn1cclxuZnVuY3Rpb24gaXNUcmFja2luZygpIHtcclxuICAgIHJldHVybiBzaG91bGRUcmFjayAmJiBhY3RpdmVFZmZlY3QgIT09IHVuZGVmaW5lZDtcclxufVxyXG5mdW5jdGlvbiB0cmFja0VmZmVjdHMoZGVwLCBkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvKSB7XHJcbiAgICBsZXQgc2hvdWxkVHJhY2sgPSBmYWxzZTtcclxuICAgIGlmIChlZmZlY3RUcmFja0RlcHRoIDw9IG1heE1hcmtlckJpdHMpIHtcclxuICAgICAgICBpZiAoIW5ld1RyYWNrZWQoZGVwKSkge1xyXG4gICAgICAgICAgICBkZXAubiB8PSB0cmFja09wQml0OyAvLyBzZXQgbmV3bHkgdHJhY2tlZFxyXG4gICAgICAgICAgICBzaG91bGRUcmFjayA9ICF3YXNUcmFja2VkKGRlcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gRnVsbCBjbGVhbnVwIG1vZGUuXHJcbiAgICAgICAgc2hvdWxkVHJhY2sgPSAhZGVwLmhhcyhhY3RpdmVFZmZlY3QpO1xyXG4gICAgfVxyXG4gICAgaWYgKHNob3VsZFRyYWNrKSB7XHJcbiAgICAgICAgZGVwLmFkZChhY3RpdmVFZmZlY3QpO1xyXG4gICAgICAgIGFjdGl2ZUVmZmVjdC5kZXBzLnB1c2goZGVwKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGFjdGl2ZUVmZmVjdC5vblRyYWNrKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUVmZmVjdC5vblRyYWNrKE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0OiBhY3RpdmVFZmZlY3RcclxuICAgICAgICAgICAgfSwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKHRhcmdldCwgdHlwZSwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIG9sZFRhcmdldCkge1xyXG4gICAgY29uc3QgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcclxuICAgIGlmICghZGVwc01hcCkge1xyXG4gICAgICAgIC8vIG5ldmVyIGJlZW4gdHJhY2tlZFxyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBkZXBzID0gW107XHJcbiAgICBpZiAodHlwZSA9PT0gXCJjbGVhclwiIC8qIENMRUFSICovKSB7XHJcbiAgICAgICAgLy8gY29sbGVjdGlvbiBiZWluZyBjbGVhcmVkXHJcbiAgICAgICAgLy8gdHJpZ2dlciBhbGwgZWZmZWN0cyBmb3IgdGFyZ2V0XHJcbiAgICAgICAgZGVwcyA9IFsuLi5kZXBzTWFwLnZhbHVlcygpXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGtleSA9PT0gJ2xlbmd0aCcgJiYgaXNBcnJheSh0YXJnZXQpKSB7XHJcbiAgICAgICAgZGVwc01hcC5mb3JFYWNoKChkZXAsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnbGVuZ3RoJyB8fCBrZXkgPj0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBzY2hlZHVsZSBydW5zIGZvciBTRVQgfCBBREQgfCBERUxFVEVcclxuICAgICAgICBpZiAoa2V5ICE9PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgZGVwcy5wdXNoKGRlcHNNYXAuZ2V0KGtleSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhbHNvIHJ1biBmb3IgaXRlcmF0aW9uIGtleSBvbiBBREQgfCBERUxFVEUgfCBNYXAuU0VUXHJcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhZGRcIiAvKiBBREQgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHMucHVzaChkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNJbnRlZ2VyS2V5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBuZXcgaW5kZXggYWRkZWQgdG8gYXJyYXkgLT4gbGVuZ3RoIGNoYW5nZXNcclxuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoJ2xlbmd0aCcpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVsZXRlXCIgLyogREVMRVRFICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwic2V0XCIgLyogU0VUICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXBzLnB1c2goZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGV2ZW50SW5mbyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgID8geyB0YXJnZXQsIHR5cGUsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlLCBvbGRUYXJnZXQgfVxyXG4gICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgaWYgKGRlcHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgaWYgKGRlcHNbMF0pIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlckVmZmVjdHMoZGVwc1swXSwgZXZlbnRJbmZvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKGRlcHNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgZGVwIG9mIGRlcHMpIHtcclxuICAgICAgICAgICAgaWYgKGRlcCkge1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0cy5wdXNoKC4uLmRlcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhjcmVhdGVEZXAoZWZmZWN0cyksIGV2ZW50SW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0cmlnZ2VyRWZmZWN0cyhjcmVhdGVEZXAoZWZmZWN0cykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyRWZmZWN0cyhkZXAsIGRlYnVnZ2VyRXZlbnRFeHRyYUluZm8pIHtcclxuICAgIC8vIHNwcmVhZCBpbnRvIGFycmF5IGZvciBzdGFiaWxpemF0aW9uXHJcbiAgICBmb3IgKGNvbnN0IGVmZmVjdCBvZiBpc0FycmF5KGRlcCkgPyBkZXAgOiBbLi4uZGVwXSkge1xyXG4gICAgICAgIGlmIChlZmZlY3QgIT09IGFjdGl2ZUVmZmVjdCB8fCBlZmZlY3QuYWxsb3dSZWN1cnNlKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZWZmZWN0Lm9uVHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgZWZmZWN0Lm9uVHJpZ2dlcihleHRlbmQoeyBlZmZlY3QgfSwgZGVidWdnZXJFdmVudEV4dHJhSW5mbykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlZmZlY3Quc2NoZWR1bGVyKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3Quc2NoZWR1bGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QucnVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuY29uc3QgaXNOb25UcmFja2FibGVLZXlzID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBfX3Byb3RvX18sX192X2lzUmVmLF9faXNWdWVgKTtcclxuY29uc3QgYnVpbHRJblN5bWJvbHMgPSBuZXcgU2V0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFN5bWJvbClcclxuICAgIC5tYXAoa2V5ID0+IFN5bWJvbFtrZXldKVxyXG4gICAgLmZpbHRlcihpc1N5bWJvbCkpO1xyXG5jb25zdCBnZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcigpO1xyXG5jb25zdCBzaGFsbG93R2V0ID0gLyojX19QVVJFX18qLyBjcmVhdGVHZXR0ZXIoZmFsc2UsIHRydWUpO1xyXG5jb25zdCByZWFkb25seUdldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlR2V0dGVyKHRydWUpO1xyXG5jb25zdCBzaGFsbG93UmVhZG9ubHlHZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUdldHRlcih0cnVlLCB0cnVlKTtcclxuY29uc3QgYXJyYXlJbnN0cnVtZW50YXRpb25zID0gLyojX19QVVJFX18qLyBjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMoKTtcclxuZnVuY3Rpb24gY3JlYXRlQXJyYXlJbnN0cnVtZW50YXRpb25zKCkge1xyXG4gICAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHt9O1xyXG4gICAgWydpbmNsdWRlcycsICdpbmRleE9mJywgJ2xhc3RJbmRleE9mJ10uZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IHRvUmF3KHRoaXMpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFjayhhcnIsIFwiZ2V0XCIgLyogR0VUICovLCBpICsgJycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHdlIHJ1biB0aGUgbWV0aG9kIHVzaW5nIHRoZSBvcmlnaW5hbCBhcmdzIGZpcnN0ICh3aGljaCBtYXkgYmUgcmVhY3RpdmUpXHJcbiAgICAgICAgICAgIGNvbnN0IHJlcyA9IGFycltrZXldKC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICBpZiAocmVzID09PSAtMSB8fCByZXMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGF0IGRpZG4ndCB3b3JrLCBydW4gaXQgYWdhaW4gdXNpbmcgcmF3IHZhbHVlcy5cclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJba2V5XSguLi5hcmdzLm1hcCh0b1JhdykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuICAgIFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAndW5zaGlmdCcsICdzcGxpY2UnXS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgaW5zdHJ1bWVudGF0aW9uc1trZXldID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAgICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSB0b1Jhdyh0aGlzKVtrZXldLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGluc3RydW1lbnRhdGlvbnM7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlR2V0dGVyKGlzUmVhZG9ubHkgPSBmYWxzZSwgc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcikge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzU2hhbGxvd1wiIC8qIElTX1NIQUxMT1cgKi8pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNoYWxsb3c7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgLyogUkFXICovICYmXHJcbiAgICAgICAgICAgIHJlY2VpdmVyID09PVxyXG4gICAgICAgICAgICAgICAgKGlzUmVhZG9ubHlcclxuICAgICAgICAgICAgICAgICAgICA/IHNoYWxsb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBzaGFsbG93UmVhZG9ubHlNYXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZWFkb25seU1hcFxyXG4gICAgICAgICAgICAgICAgICAgIDogc2hhbGxvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHNoYWxsb3dSZWFjdGl2ZU1hcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlYWN0aXZlTWFwKS5nZXQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0YXJnZXRJc0FycmF5ID0gaXNBcnJheSh0YXJnZXQpO1xyXG4gICAgICAgIGlmICghaXNSZWFkb25seSAmJiB0YXJnZXRJc0FycmF5ICYmIGhhc093bihhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KGFycmF5SW5zdHJ1bWVudGF0aW9ucywga2V5LCByZWNlaXZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IFJlZmxlY3QuZ2V0KHRhcmdldCwga2V5LCByZWNlaXZlcik7XHJcbiAgICAgICAgaWYgKGlzU3ltYm9sKGtleSkgPyBidWlsdEluU3ltYm9scy5oYXMoa2V5KSA6IGlzTm9uVHJhY2thYmxlS2V5cyhrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNSZWFkb25seSkge1xyXG4gICAgICAgICAgICB0cmFjayh0YXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhbGxvdykge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNSZWYocmVzKSkge1xyXG4gICAgICAgICAgICAvLyByZWYgdW53cmFwcGluZyAtIGRvZXMgbm90IGFwcGx5IGZvciBBcnJheSArIGludGVnZXIga2V5LlxyXG4gICAgICAgICAgICBjb25zdCBzaG91bGRVbndyYXAgPSAhdGFyZ2V0SXNBcnJheSB8fCAhaXNJbnRlZ2VyS2V5KGtleSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzaG91bGRVbndyYXAgPyByZXMudmFsdWUgOiByZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc09iamVjdChyZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgcmV0dXJuZWQgdmFsdWUgaW50byBhIHByb3h5IGFzIHdlbGwuIHdlIGRvIHRoZSBpc09iamVjdCBjaGVja1xyXG4gICAgICAgICAgICAvLyBoZXJlIHRvIGF2b2lkIGludmFsaWQgdmFsdWUgd2FybmluZy4gQWxzbyBuZWVkIHRvIGxhenkgYWNjZXNzIHJlYWRvbmx5XHJcbiAgICAgICAgICAgIC8vIGFuZCByZWFjdGl2ZSBoZXJlIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kuXHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5ID8gcmVhZG9ubHkocmVzKSA6IHJlYWN0aXZlKHJlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IHNldCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlU2V0dGVyKCk7XHJcbmNvbnN0IHNoYWxsb3dTZXQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZVNldHRlcih0cnVlKTtcclxuZnVuY3Rpb24gY3JlYXRlU2V0dGVyKHNoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSB7XHJcbiAgICAgICAgbGV0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XHJcbiAgICAgICAgaWYgKGlzUmVhZG9ubHkob2xkVmFsdWUpICYmIGlzUmVmKG9sZFZhbHVlKSAmJiAhaXNSZWYodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFzaGFsbG93ICYmICFpc1JlYWRvbmx5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAoIWlzU2hhbGxvdyh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB0b1JhdyhvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkgJiYgaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBoYWRLZXkgPSBpc0FycmF5KHRhcmdldCkgJiYgaXNJbnRlZ2VyS2V5KGtleSlcclxuICAgICAgICAgICAgPyBOdW1iZXIoa2V5KSA8IHRhcmdldC5sZW5ndGhcclxuICAgICAgICAgICAgOiBoYXNPd24odGFyZ2V0LCBrZXkpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3Quc2V0KHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpO1xyXG4gICAgICAgIC8vIGRvbid0IHRyaWdnZXIgaWYgdGFyZ2V0IGlzIHNvbWV0aGluZyB1cCBpbiB0aGUgcHJvdG90eXBlIGNoYWluIG9mIG9yaWdpbmFsXHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdG9SYXcocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAgICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiAvKiBBREQgKi8sIGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwic2V0XCIgLyogU0VUICovLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcclxuICAgIGNvbnN0IGhhZEtleSA9IGhhc093bih0YXJnZXQsIGtleSk7XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSk7XHJcbiAgICBpZiAocmVzdWx0ICYmIGhhZEtleSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiIC8qIERFTEVURSAqLywga2V5LCB1bmRlZmluZWQsIG9sZFZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gaGFzKHRhcmdldCwga2V5KSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSk7XHJcbiAgICBpZiAoIWlzU3ltYm9sKGtleSkgfHwgIWJ1aWx0SW5TeW1ib2xzLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgdHJhY2sodGFyZ2V0LCBcImhhc1wiIC8qIEhBUyAqLywga2V5KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gb3duS2V5cyh0YXJnZXQpIHtcclxuICAgIHRyYWNrKHRhcmdldCwgXCJpdGVyYXRlXCIgLyogSVRFUkFURSAqLywgaXNBcnJheSh0YXJnZXQpID8gJ2xlbmd0aCcgOiBJVEVSQVRFX0tFWSk7XHJcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XHJcbn1cclxuY29uc3QgbXV0YWJsZUhhbmRsZXJzID0ge1xyXG4gICAgZ2V0LFxyXG4gICAgc2V0LFxyXG4gICAgZGVsZXRlUHJvcGVydHksXHJcbiAgICBoYXMsXHJcbiAgICBvd25LZXlzXHJcbn07XHJcbmNvbnN0IHJlYWRvbmx5SGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IHJlYWRvbmx5R2V0LFxyXG4gICAgc2V0KHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFNldCBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0sXHJcbiAgICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBEZWxldGUgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdGFyZ2V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IHNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzID0gLyojX19QVVJFX18qLyBleHRlbmQoe30sIG11dGFibGVIYW5kbGVycywge1xyXG4gICAgZ2V0OiBzaGFsbG93R2V0LFxyXG4gICAgc2V0OiBzaGFsbG93U2V0XHJcbn0pO1xyXG4vLyBQcm9wcyBoYW5kbGVycyBhcmUgc3BlY2lhbCBpbiB0aGUgc2Vuc2UgdGhhdCBpdCBzaG91bGQgbm90IHVud3JhcCB0b3AtbGV2ZWxcclxuLy8gcmVmcyAoaW4gb3JkZXIgdG8gYWxsb3cgcmVmcyB0byBiZSBleHBsaWNpdGx5IHBhc3NlZCBkb3duKSwgYnV0IHNob3VsZFxyXG4vLyByZXRhaW4gdGhlIHJlYWN0aXZpdHkgb2YgdGhlIG5vcm1hbCByZWFkb25seSBvYmplY3QuXHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seUhhbmRsZXJzID0gLyojX19QVVJFX18qLyBleHRlbmQoe30sIHJlYWRvbmx5SGFuZGxlcnMsIHtcclxuICAgIGdldDogc2hhbGxvd1JlYWRvbmx5R2V0XHJcbn0pO1xuXG5jb25zdCB0b1NoYWxsb3cgPSAodmFsdWUpID0+IHZhbHVlO1xyXG5jb25zdCBnZXRQcm90byA9ICh2KSA9PiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHYpO1xyXG5mdW5jdGlvbiBnZXQkMSh0YXJnZXQsIGtleSwgaXNSZWFkb25seSA9IGZhbHNlLCBpc1NoYWxsb3cgPSBmYWxzZSkge1xyXG4gICAgLy8gIzE3NzI6IHJlYWRvbmx5KHJlYWN0aXZlKE1hcCkpIHNob3VsZCByZXR1cm4gcmVhZG9ubHkgKyByZWFjdGl2ZSB2ZXJzaW9uXHJcbiAgICAvLyBvZiB0aGUgdmFsdWVcclxuICAgIHRhcmdldCA9IHRhcmdldFtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dO1xyXG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcclxuICAgIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XHJcbiAgICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcclxuICAgICAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiIC8qIEdFVCAqLywgcmF3S2V5KTtcclxuICAgIGNvbnN0IHsgaGFzIH0gPSBnZXRQcm90byhyYXdUYXJnZXQpO1xyXG4gICAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcclxuICAgIGlmIChoYXMuY2FsbChyYXdUYXJnZXQsIGtleSkpIHtcclxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KGtleSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaGFzLmNhbGwocmF3VGFyZ2V0LCByYXdLZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0LmdldChyYXdLZXkpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRhcmdldCAhPT0gcmF3VGFyZ2V0KSB7XHJcbiAgICAgICAgLy8gIzM2MDIgcmVhZG9ubHkocmVhY3RpdmUoTWFwKSlcclxuICAgICAgICAvLyBlbnN1cmUgdGhhdCB0aGUgbmVzdGVkIHJlYWN0aXZlIGBNYXBgIGNhbiBkbyB0cmFja2luZyBmb3IgaXRzZWxmXHJcbiAgICAgICAgdGFyZ2V0LmdldChrZXkpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGhhcyQxKGtleSwgaXNSZWFkb25seSA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0aGlzW1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChrZXkgIT09IHJhd0tleSkge1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiAvKiBIQVMgKi8sIGtleSk7XHJcbiAgICB9XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaGFzXCIgLyogSEFTICovLCByYXdLZXkpO1xyXG4gICAgcmV0dXJuIGtleSA9PT0gcmF3S2V5XHJcbiAgICAgICAgPyB0YXJnZXQuaGFzKGtleSlcclxuICAgICAgICA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XHJcbn1cclxuZnVuY3Rpb24gc2l6ZSh0YXJnZXQsIGlzUmVhZG9ubHkgPSBmYWxzZSkge1xyXG4gICAgdGFyZ2V0ID0gdGFyZ2V0W1wiX192X3Jhd1wiIC8qIFJBVyAqL107XHJcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayh0b1Jhdyh0YXJnZXQpLCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XHJcbiAgICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCAnc2l6ZScsIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkKHZhbHVlKSB7XHJcbiAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xyXG4gICAgY29uc3QgcHJvdG8gPSBnZXRQcm90byh0YXJnZXQpO1xyXG4gICAgY29uc3QgaGFkS2V5ID0gcHJvdG8uaGFzLmNhbGwodGFyZ2V0LCB2YWx1ZSk7XHJcbiAgICBpZiAoIWhhZEtleSkge1xyXG4gICAgICAgIHRhcmdldC5hZGQodmFsdWUpO1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiIC8qIEFERCAqLywgdmFsdWUsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59XHJcbmZ1bmN0aW9uIHNldCQxKGtleSwgdmFsdWUpIHtcclxuICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XHJcbiAgICBjb25zdCB7IGhhcywgZ2V0IH0gPSBnZXRQcm90byh0YXJnZXQpO1xyXG4gICAgbGV0IGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAga2V5ID0gdG9SYXcoa2V5KTtcclxuICAgICAgICBoYWRLZXkgPSBoYXMuY2FsbCh0YXJnZXQsIGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhcywga2V5KTtcclxuICAgIH1cclxuICAgIGNvbnN0IG9sZFZhbHVlID0gZ2V0LmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgdGFyZ2V0LnNldChrZXksIHZhbHVlKTtcclxuICAgIGlmICghaGFkS2V5KSB7XHJcbiAgICAgICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIgLyogQUREICovLCBrZXksIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiIC8qIFNFVCAqLywga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn1cclxuZnVuY3Rpb24gZGVsZXRlRW50cnkoa2V5KSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IHsgaGFzLCBnZXQgfSA9IGdldFByb3RvKHRhcmdldCk7XHJcbiAgICBsZXQgaGFkS2V5ID0gaGFzLmNhbGwodGFyZ2V0LCBrZXkpO1xyXG4gICAgaWYgKCFoYWRLZXkpIHtcclxuICAgICAgICBrZXkgPSB0b1JhdyhrZXkpO1xyXG4gICAgICAgIGhhZEtleSA9IGhhcy5jYWxsKHRhcmdldCwga2V5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSBnZXQgPyBnZXQuY2FsbCh0YXJnZXQsIGtleSkgOiB1bmRlZmluZWQ7XHJcbiAgICAvLyBmb3J3YXJkIHRoZSBvcGVyYXRpb24gYmVmb3JlIHF1ZXVlaW5nIHJlYWN0aW9uc1xyXG4gICAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmRlbGV0ZShrZXkpO1xyXG4gICAgaWYgKGhhZEtleSkge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiIC8qIERFTEVURSAqLywga2V5LCB1bmRlZmluZWQsIG9sZFZhbHVlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuZnVuY3Rpb24gY2xlYXIoKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcclxuICAgIGNvbnN0IGhhZEl0ZW1zID0gdGFyZ2V0LnNpemUgIT09IDA7XHJcbiAgICBjb25zdCBvbGRUYXJnZXQgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICA/IGlzTWFwKHRhcmdldClcclxuICAgICAgICAgICAgPyBuZXcgTWFwKHRhcmdldClcclxuICAgICAgICAgICAgOiBuZXcgU2V0KHRhcmdldClcclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIC8vIGZvcndhcmQgdGhlIG9wZXJhdGlvbiBiZWZvcmUgcXVldWVpbmcgcmVhY3Rpb25zXHJcbiAgICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcclxuICAgIGlmIChoYWRJdGVtcykge1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImNsZWFyXCIgLyogQ0xFQVIgKi8sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbGRUYXJnZXQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHtcclxuICAgICAgICBjb25zdCBvYnNlcnZlZCA9IHRoaXM7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gb2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XHJcbiAgICAgICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiAvKiBJVEVSQVRFICovLCBJVEVSQVRFX0tFWSk7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGltcG9ydGFudDogbWFrZSBzdXJlIHRoZSBjYWxsYmFjayBpc1xyXG4gICAgICAgICAgICAvLyAxLiBpbnZva2VkIHdpdGggdGhlIHJlYWN0aXZlIG1hcCBhcyBgdGhpc2AgYW5kIDNyZCBhcmdcclxuICAgICAgICAgICAgLy8gMi4gdGhlIHZhbHVlIHJlY2VpdmVkIHNob3VsZCBiZSBhIGNvcnJlc3BvbmRpbmcgcmVhY3RpdmUvcmVhZG9ubHkuXHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHdyYXAodmFsdWUpLCB3cmFwKGtleSksIG9ic2VydmVkKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBpc1JlYWRvbmx5LCBpc1NoYWxsb3cpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgICAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldElzTWFwID0gaXNNYXAocmF3VGFyZ2V0KTtcclxuICAgICAgICBjb25zdCBpc1BhaXIgPSBtZXRob2QgPT09ICdlbnRyaWVzJyB8fCAobWV0aG9kID09PSBTeW1ib2wuaXRlcmF0b3IgJiYgdGFyZ2V0SXNNYXApO1xyXG4gICAgICAgIGNvbnN0IGlzS2V5T25seSA9IG1ldGhvZCA9PT0gJ2tleXMnICYmIHRhcmdldElzTWFwO1xyXG4gICAgICAgIGNvbnN0IGlubmVySXRlcmF0b3IgPSB0YXJnZXRbbWV0aG9kXSguLi5hcmdzKTtcclxuICAgICAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xyXG4gICAgICAgICFpc1JlYWRvbmx5ICYmXHJcbiAgICAgICAgICAgIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIgLyogSVRFUkFURSAqLywgaXNLZXlPbmx5ID8gTUFQX0tFWV9JVEVSQVRFX0tFWSA6IElURVJBVEVfS0VZKTtcclxuICAgICAgICAvLyByZXR1cm4gYSB3cmFwcGVkIGl0ZXJhdG9yIHdoaWNoIHJldHVybnMgb2JzZXJ2ZWQgdmVyc2lvbnMgb2YgdGhlXHJcbiAgICAgICAgLy8gdmFsdWVzIGVtaXR0ZWQgZnJvbSB0aGUgcmVhbCBpdGVyYXRvclxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIC8vIGl0ZXJhdG9yIHByb3RvY29sXHJcbiAgICAgICAgICAgIG5leHQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBpbm5lckl0ZXJhdG9yLm5leHQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlLCBkb25lIH1cclxuICAgICAgICAgICAgICAgICAgICA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGlzUGFpciA/IFt3cmFwKHZhbHVlWzBdKSwgd3JhcCh2YWx1ZVsxXSldIDogd3JhcCh2YWx1ZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmVcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxyXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUmVhZG9ubHlNZXRob2QodHlwZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBhcmdzWzBdID8gYG9uIGtleSBcIiR7YXJnc1swXX1cIiBgIDogYGA7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgJHtjYXBpdGFsaXplKHR5cGUpfSBvcGVyYXRpb24gJHtrZXl9ZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdG9SYXcodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHlwZSA9PT0gXCJkZWxldGVcIiAvKiBERUxFVEUgKi8gPyBmYWxzZSA6IHRoaXM7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKSB7XHJcbiAgICBjb25zdCBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyA9IHtcclxuICAgICAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzOiBoYXMkMSxcclxuICAgICAgICBhZGQsXHJcbiAgICAgICAgc2V0OiBzZXQkMSxcclxuICAgICAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxyXG4gICAgICAgIGNsZWFyLFxyXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIGZhbHNlKVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgICAgIGdldChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaXplKHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzOiBoYXMkMSxcclxuICAgICAgICBhZGQsXHJcbiAgICAgICAgc2V0OiBzZXQkMSxcclxuICAgICAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxyXG4gICAgICAgIGNsZWFyLFxyXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIHRydWUpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zID0ge1xyXG4gICAgICAgIGdldChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgdHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXQgc2l6ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNpemUodGhpcywgdHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXMoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBoYXMkMS5jYWxsKHRoaXMsIGtleSwgdHJ1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiYWRkXCIgLyogQUREICovKSxcclxuICAgICAgICBzZXQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwic2V0XCIgLyogU0VUICovKSxcclxuICAgICAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFwiZGVsZXRlXCIgLyogREVMRVRFICovKSxcclxuICAgICAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJjbGVhclwiIC8qIENMRUFSICovKSxcclxuICAgICAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKHRydWUsIGZhbHNlKVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMgPSB7XHJcbiAgICAgICAgZ2V0KGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhcyhrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhhcyQxLmNhbGwodGhpcywga2V5LCB0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJhZGRcIiAvKiBBREQgKi8pLFxyXG4gICAgICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJzZXRcIiAvKiBTRVQgKi8pLFxyXG4gICAgICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXCJkZWxldGVcIiAvKiBERUxFVEUgKi8pLFxyXG4gICAgICAgIGNsZWFyOiBjcmVhdGVSZWFkb25seU1ldGhvZChcImNsZWFyXCIgLyogQ0xFQVIgKi8pLFxyXG4gICAgICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgdHJ1ZSlcclxuICAgIH07XHJcbiAgICBjb25zdCBpdGVyYXRvck1ldGhvZHMgPSBbJ2tleXMnLCAndmFsdWVzJywgJ2VudHJpZXMnLCBTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaXRlcmF0b3JNZXRob2RzLmZvckVhY2gobWV0aG9kID0+IHtcclxuICAgICAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgICAgIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1ttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMsXHJcbiAgICAgICAgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zLFxyXG4gICAgICAgIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLFxyXG4gICAgICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNcclxuICAgIF07XHJcbn1cclxuY29uc3QgW211dGFibGVJbnN0cnVtZW50YXRpb25zLCByZWFkb25seUluc3RydW1lbnRhdGlvbnMsIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXSA9IC8qICNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKTtcclxuZnVuY3Rpb24gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGlzUmVhZG9ubHksIHNoYWxsb3cpIHtcclxuICAgIGNvbnN0IGluc3RydW1lbnRhdGlvbnMgPSBzaGFsbG93XHJcbiAgICAgICAgPyBpc1JlYWRvbmx5XHJcbiAgICAgICAgICAgID8gc2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uc1xyXG4gICAgICAgICAgICA6IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zXHJcbiAgICAgICAgOiBpc1JlYWRvbmx5XHJcbiAgICAgICAgICAgID8gcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXHJcbiAgICAgICAgICAgIDogbXV0YWJsZUluc3RydW1lbnRhdGlvbnM7XHJcbiAgICByZXR1cm4gKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4ge1xyXG4gICAgICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIiAvKiBJU19SRUFDVElWRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiIC8qIFJBVyAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXQoaGFzT3duKGluc3RydW1lbnRhdGlvbnMsIGtleSkgJiYga2V5IGluIHRhcmdldFxyXG4gICAgICAgICAgICA/IGluc3RydW1lbnRhdGlvbnNcclxuICAgICAgICAgICAgOiB0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xyXG4gICAgfTtcclxufVxyXG5jb25zdCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzID0ge1xyXG4gICAgZ2V0OiAvKiNfX1BVUkVfXyovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IHNoYWxsb3dDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XHJcbiAgICBnZXQ6IC8qI19fUFVSRV9fKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCB0cnVlKVxyXG59O1xyXG5jb25zdCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogLyojX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgZmFsc2UpXHJcbn07XHJcbmNvbnN0IHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcclxuICAgIGdldDogLyojX19QVVJFX18qLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgdHJ1ZSlcclxufTtcclxuZnVuY3Rpb24gY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMsIGtleSkge1xyXG4gICAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcclxuICAgIGlmIChyYXdLZXkgIT09IGtleSAmJiBoYXMuY2FsbCh0YXJnZXQsIHJhd0tleSkpIHtcclxuICAgICAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBSZWFjdGl2ZSAke3R5cGV9IGNvbnRhaW5zIGJvdGggdGhlIHJhdyBhbmQgcmVhY3RpdmUgYCArXHJcbiAgICAgICAgICAgIGB2ZXJzaW9ucyBvZiB0aGUgc2FtZSBvYmplY3Qke3R5cGUgPT09IGBNYXBgID8gYCBhcyBrZXlzYCA6IGBgfSwgYCArXHJcbiAgICAgICAgICAgIGB3aGljaCBjYW4gbGVhZCB0byBpbmNvbnNpc3RlbmNpZXMuIGAgK1xyXG4gICAgICAgICAgICBgQXZvaWQgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gdGhlIHJhdyBhbmQgcmVhY3RpdmUgdmVyc2lvbnMgYCArXHJcbiAgICAgICAgICAgIGBvZiBhbiBvYmplY3QgYW5kIG9ubHkgdXNlIHRoZSByZWFjdGl2ZSB2ZXJzaW9uIGlmIHBvc3NpYmxlLmApO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHJlYWN0aXZlTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3Qgc2hhbGxvd1JlYWN0aXZlTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgcmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBzaGFsbG93UmVhZG9ubHlNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiB0YXJnZXRUeXBlTWFwKHJhd1R5cGUpIHtcclxuICAgIHN3aXRjaCAocmF3VHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ09iamVjdCc6XHJcbiAgICAgICAgY2FzZSAnQXJyYXknOlxyXG4gICAgICAgICAgICByZXR1cm4gMSAvKiBDT01NT04gKi87XHJcbiAgICAgICAgY2FzZSAnTWFwJzpcclxuICAgICAgICBjYXNlICdTZXQnOlxyXG4gICAgICAgIGNhc2UgJ1dlYWtNYXAnOlxyXG4gICAgICAgIGNhc2UgJ1dlYWtTZXQnOlxyXG4gICAgICAgICAgICByZXR1cm4gMiAvKiBDT0xMRUNUSU9OICovO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHJldHVybiAwIC8qIElOVkFMSUQgKi87XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0VHlwZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlW1wiX192X3NraXBcIiAvKiBTS0lQICovXSB8fCAhT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSlcclxuICAgICAgICA/IDAgLyogSU5WQUxJRCAqL1xyXG4gICAgICAgIDogdGFyZ2V0VHlwZU1hcCh0b1Jhd1R5cGUodmFsdWUpKTtcclxufVxyXG5mdW5jdGlvbiByZWFjdGl2ZSh0YXJnZXQpIHtcclxuICAgIC8vIGlmIHRyeWluZyB0byBvYnNlcnZlIGEgcmVhZG9ubHkgcHJveHksIHJldHVybiB0aGUgcmVhZG9ubHkgdmVyc2lvbi5cclxuICAgIGlmIChpc1JlYWRvbmx5KHRhcmdldCkpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIG11dGFibGVIYW5kbGVycywgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycywgcmVhY3RpdmVNYXApO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm4gYSBzaGFsbG93bHktcmVhY3RpdmUgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290XHJcbiAqIGxldmVsIHByb3BlcnRpZXMgYXJlIHJlYWN0aXZlLiBJdCBhbHNvIGRvZXMgbm90IGF1dG8tdW53cmFwIHJlZnMgKGV2ZW4gYXQgdGhlXHJcbiAqIHJvb3QgbGV2ZWwpLlxyXG4gKi9cclxuZnVuY3Rpb24gc2hhbGxvd1JlYWN0aXZlKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgZmFsc2UsIHNoYWxsb3dSZWFjdGl2ZUhhbmRsZXJzLCBzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzLCBzaGFsbG93UmVhY3RpdmVNYXApO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcmVhZG9ubHkgY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LiBOb3RlIHRoZSByZXR1cm5lZCBjb3B5IGlzIG5vdFxyXG4gKiBtYWRlIHJlYWN0aXZlLCBidXQgYHJlYWRvbmx5YCBjYW4gYmUgY2FsbGVkIG9uIGFuIGFscmVhZHkgcmVhY3RpdmUgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gcmVhZG9ubHkodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCByZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgcmVhZG9ubHlNYXApO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcmVhY3RpdmUtY29weSBvZiB0aGUgb3JpZ2luYWwgb2JqZWN0LCB3aGVyZSBvbmx5IHRoZSByb290IGxldmVsXHJcbiAqIHByb3BlcnRpZXMgYXJlIHJlYWRvbmx5LCBhbmQgZG9lcyBOT1QgdW53cmFwIHJlZnMgbm9yIHJlY3Vyc2l2ZWx5IGNvbnZlcnRcclxuICogcmV0dXJuZWQgcHJvcGVydGllcy5cclxuICogVGhpcyBpcyB1c2VkIGZvciBjcmVhdGluZyB0aGUgcHJvcHMgcHJveHkgb2JqZWN0IGZvciBzdGF0ZWZ1bCBjb21wb25lbnRzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2hhbGxvd1JlYWRvbmx5KHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgdHJ1ZSwgc2hhbGxvd1JlYWRvbmx5SGFuZGxlcnMsIHNoYWxsb3dSZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgc2hhbGxvd1JlYWRvbmx5TWFwKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGlzUmVhZG9ubHksIGJhc2VIYW5kbGVycywgY29sbGVjdGlvbkhhbmRsZXJzLCBwcm94eU1hcCkge1xyXG4gICAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYHZhbHVlIGNhbm5vdCBiZSBtYWRlIHJlYWN0aXZlOiAke1N0cmluZyh0YXJnZXQpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gdGFyZ2V0IGlzIGFscmVhZHkgYSBQcm94eSwgcmV0dXJuIGl0LlxyXG4gICAgLy8gZXhjZXB0aW9uOiBjYWxsaW5nIHJlYWRvbmx5KCkgb24gYSByZWFjdGl2ZSBvYmplY3RcclxuICAgIGlmICh0YXJnZXRbXCJfX3ZfcmF3XCIgLyogUkFXICovXSAmJlxyXG4gICAgICAgICEoaXNSZWFkb25seSAmJiB0YXJnZXRbXCJfX3ZfaXNSZWFjdGl2ZVwiIC8qIElTX1JFQUNUSVZFICovXSkpIHtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG4gICAgfVxyXG4gICAgLy8gdGFyZ2V0IGFscmVhZHkgaGFzIGNvcnJlc3BvbmRpbmcgUHJveHlcclxuICAgIGNvbnN0IGV4aXN0aW5nUHJveHkgPSBwcm94eU1hcC5nZXQodGFyZ2V0KTtcclxuICAgIGlmIChleGlzdGluZ1Byb3h5KSB7XHJcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nUHJveHk7XHJcbiAgICB9XHJcbiAgICAvLyBvbmx5IGEgd2hpdGVsaXN0IG9mIHZhbHVlIHR5cGVzIGNhbiBiZSBvYnNlcnZlZC5cclxuICAgIGNvbnN0IHRhcmdldFR5cGUgPSBnZXRUYXJnZXRUeXBlKHRhcmdldCk7XHJcbiAgICBpZiAodGFyZ2V0VHlwZSA9PT0gMCAvKiBJTlZBTElEICovKSB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH1cclxuICAgIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KHRhcmdldCwgdGFyZ2V0VHlwZSA9PT0gMiAvKiBDT0xMRUNUSU9OICovID8gY29sbGVjdGlvbkhhbmRsZXJzIDogYmFzZUhhbmRsZXJzKTtcclxuICAgIHByb3h5TWFwLnNldCh0YXJnZXQsIHByb3h5KTtcclxuICAgIHJldHVybiBwcm94eTtcclxufVxyXG5mdW5jdGlvbiBpc1JlYWN0aXZlKHZhbHVlKSB7XHJcbiAgICBpZiAoaXNSZWFkb25seSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWFjdGl2ZSh2YWx1ZVtcIl9fdl9yYXdcIiAvKiBSQVcgKi9dKTtcclxuICAgIH1cclxuICAgIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZVtcIl9fdl9pc1JlYWN0aXZlXCIgLyogSVNfUkVBQ1RJVkUgKi9dKTtcclxufVxyXG5mdW5jdGlvbiBpc1JlYWRvbmx5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNSZWFkb25seVwiIC8qIElTX1JFQURPTkxZICovXSk7XHJcbn1cclxuZnVuY3Rpb24gaXNTaGFsbG93KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWVbXCJfX3ZfaXNTaGFsbG93XCIgLyogSVNfU0hBTExPVyAqL10pO1xyXG59XHJcbmZ1bmN0aW9uIGlzUHJveHkodmFsdWUpIHtcclxuICAgIHJldHVybiBpc1JlYWN0aXZlKHZhbHVlKSB8fCBpc1JlYWRvbmx5KHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xyXG4gICAgY29uc3QgcmF3ID0gb2JzZXJ2ZWQgJiYgb2JzZXJ2ZWRbXCJfX3ZfcmF3XCIgLyogUkFXICovXTtcclxuICAgIHJldHVybiByYXcgPyB0b1JhdyhyYXcpIDogb2JzZXJ2ZWQ7XHJcbn1cclxuZnVuY3Rpb24gbWFya1Jhdyh2YWx1ZSkge1xyXG4gICAgZGVmKHZhbHVlLCBcIl9fdl9za2lwXCIgLyogU0tJUCAqLywgdHJ1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuY29uc3QgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUodmFsdWUpIDogdmFsdWU7XHJcbmNvbnN0IHRvUmVhZG9ubHkgPSAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSA/IHJlYWRvbmx5KHZhbHVlKSA6IHZhbHVlO1xuXG5mdW5jdGlvbiB0cmFja1JlZlZhbHVlKHJlZikge1xyXG4gICAgaWYgKGlzVHJhY2tpbmcoKSkge1xyXG4gICAgICAgIHJlZiA9IHRvUmF3KHJlZik7XHJcbiAgICAgICAgaWYgKCFyZWYuZGVwKSB7XHJcbiAgICAgICAgICAgIHJlZi5kZXAgPSBjcmVhdGVEZXAoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB0cmFja0VmZmVjdHMocmVmLmRlcCwge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiByZWYsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcImdldFwiIC8qIEdFVCAqLyxcclxuICAgICAgICAgICAgICAgIGtleTogJ3ZhbHVlJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRyYWNrRWZmZWN0cyhyZWYuZGVwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdHJpZ2dlclJlZlZhbHVlKHJlZiwgbmV3VmFsKSB7XHJcbiAgICByZWYgPSB0b1JhdyhyZWYpO1xyXG4gICAgaWYgKHJlZi5kZXApIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHRyaWdnZXJFZmZlY3RzKHJlZi5kZXAsIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldDogcmVmLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzZXRcIiAvKiBTRVQgKi8sXHJcbiAgICAgICAgICAgICAgICBrZXk6ICd2YWx1ZScsXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdHJpZ2dlckVmZmVjdHMocmVmLmRlcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzUmVmKHIpIHtcclxuICAgIHJldHVybiBCb29sZWFuKHIgJiYgci5fX3ZfaXNSZWYgPT09IHRydWUpO1xyXG59XHJcbmZ1bmN0aW9uIHJlZih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJlZih2YWx1ZSwgZmFsc2UpO1xyXG59XHJcbmZ1bmN0aW9uIHNoYWxsb3dSZWYodmFsdWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVSZWYodmFsdWUsIHRydWUpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlZihyYXdWYWx1ZSwgc2hhbGxvdykge1xyXG4gICAgaWYgKGlzUmVmKHJhd1ZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiByYXdWYWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUmVmSW1wbChyYXdWYWx1ZSwgc2hhbGxvdyk7XHJcbn1cclxuY2xhc3MgUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgX192X2lzU2hhbGxvdykge1xyXG4gICAgICAgIHRoaXMuX192X2lzU2hhbGxvdyA9IF9fdl9pc1NoYWxsb3c7XHJcbiAgICAgICAgdGhpcy5kZXAgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3Jhd1ZhbHVlID0gX192X2lzU2hhbGxvdyA/IHZhbHVlIDogdG9SYXcodmFsdWUpO1xyXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gX192X2lzU2hhbGxvdyA/IHZhbHVlIDogdG9SZWFjdGl2ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgdHJhY2tSZWZWYWx1ZSh0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgbmV3VmFsID0gdGhpcy5fX3ZfaXNTaGFsbG93ID8gbmV3VmFsIDogdG9SYXcobmV3VmFsKTtcclxuICAgICAgICBpZiAoaGFzQ2hhbmdlZChuZXdWYWwsIHRoaXMuX3Jhd1ZhbHVlKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yYXdWYWx1ZSA9IG5ld1ZhbDtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aGlzLl9fdl9pc1NoYWxsb3cgPyBuZXdWYWwgOiB0b1JlYWN0aXZlKG5ld1ZhbCk7XHJcbiAgICAgICAgICAgIHRyaWdnZXJSZWZWYWx1ZSh0aGlzLCBuZXdWYWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyUmVmKHJlZikge1xyXG4gICAgdHJpZ2dlclJlZlZhbHVlKHJlZiwgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gcmVmLnZhbHVlIDogdm9pZCAwKTtcclxufVxyXG5mdW5jdGlvbiB1bnJlZihyZWYpIHtcclxuICAgIHJldHVybiBpc1JlZihyZWYpID8gcmVmLnZhbHVlIDogcmVmO1xyXG59XHJcbmNvbnN0IHNoYWxsb3dVbndyYXBIYW5kbGVycyA9IHtcclxuICAgIGdldDogKHRhcmdldCwga2V5LCByZWNlaXZlcikgPT4gdW5yZWYoUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSksXHJcbiAgICBzZXQ6ICh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcclxuICAgICAgICBpZiAoaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5zZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBwcm94eVJlZnMob2JqZWN0V2l0aFJlZnMpIHtcclxuICAgIHJldHVybiBpc1JlYWN0aXZlKG9iamVjdFdpdGhSZWZzKVxyXG4gICAgICAgID8gb2JqZWN0V2l0aFJlZnNcclxuICAgICAgICA6IG5ldyBQcm94eShvYmplY3RXaXRoUmVmcywgc2hhbGxvd1Vud3JhcEhhbmRsZXJzKTtcclxufVxyXG5jbGFzcyBDdXN0b21SZWZJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGZhY3RvcnkpIHtcclxuICAgICAgICB0aGlzLmRlcCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9fdl9pc1JlZiA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgeyBnZXQsIHNldCB9ID0gZmFjdG9yeSgoKSA9PiB0cmFja1JlZlZhbHVlKHRoaXMpLCAoKSA9PiB0cmlnZ2VyUmVmVmFsdWUodGhpcykpO1xyXG4gICAgICAgIHRoaXMuX2dldCA9IGdldDtcclxuICAgICAgICB0aGlzLl9zZXQgPSBzZXQ7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldCgpO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbCkge1xyXG4gICAgICAgIHRoaXMuX3NldChuZXdWYWwpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGN1c3RvbVJlZihmYWN0b3J5KSB7XHJcbiAgICByZXR1cm4gbmV3IEN1c3RvbVJlZkltcGwoZmFjdG9yeSk7XHJcbn1cclxuZnVuY3Rpb24gdG9SZWZzKG9iamVjdCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNQcm94eShvYmplY3QpKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGB0b1JlZnMoKSBleHBlY3RzIGEgcmVhY3RpdmUgb2JqZWN0IGJ1dCByZWNlaXZlZCBhIHBsYWluIG9uZS5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJldCA9IGlzQXJyYXkob2JqZWN0KSA/IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKSA6IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgcmV0W2tleV0gPSB0b1JlZihvYmplY3QsIGtleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XHJcbmNsYXNzIE9iamVjdFJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoX29iamVjdCwgX2tleSwgX2RlZmF1bHRWYWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX29iamVjdCA9IF9vYmplY3Q7XHJcbiAgICAgICAgdGhpcy5fa2V5ID0gX2tleTtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBfZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIHRoaXMuX192X2lzUmVmID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICBjb25zdCB2YWwgPSB0aGlzLl9vYmplY3RbdGhpcy5fa2V5XTtcclxuICAgICAgICByZXR1cm4gdmFsID09PSB1bmRlZmluZWQgPyB0aGlzLl9kZWZhdWx0VmFsdWUgOiB2YWw7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUobmV3VmFsKSB7XHJcbiAgICAgICAgdGhpcy5fb2JqZWN0W3RoaXMuX2tleV0gPSBuZXdWYWw7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdG9SZWYob2JqZWN0LCBrZXksIGRlZmF1bHRWYWx1ZSkge1xyXG4gICAgY29uc3QgdmFsID0gb2JqZWN0W2tleV07XHJcbiAgICByZXR1cm4gaXNSZWYodmFsKVxyXG4gICAgICAgID8gdmFsXHJcbiAgICAgICAgOiBuZXcgT2JqZWN0UmVmSW1wbChvYmplY3QsIGtleSwgZGVmYXVsdFZhbHVlKTtcclxufVxuXG5jbGFzcyBDb21wdXRlZFJlZkltcGwge1xyXG4gICAgY29uc3RydWN0b3IoZ2V0dGVyLCBfc2V0dGVyLCBpc1JlYWRvbmx5LCBpc1NTUikge1xyXG4gICAgICAgIHRoaXMuX3NldHRlciA9IF9zZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5kZXAgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChnZXR0ZXIsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdHJpZ2dlclJlZlZhbHVlKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5lZmZlY3QuY29tcHV0ZWQgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZWZmZWN0LmFjdGl2ZSA9IHRoaXMuX2NhY2hlYWJsZSA9ICFpc1NTUjtcclxuICAgICAgICB0aGlzW1wiX192X2lzUmVhZG9ubHlcIiAvKiBJU19SRUFET05MWSAqL10gPSBpc1JlYWRvbmx5O1xyXG4gICAgfVxyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIC8vIHRoZSBjb21wdXRlZCByZWYgbWF5IGdldCB3cmFwcGVkIGJ5IG90aGVyIHByb3hpZXMgZS5nLiByZWFkb25seSgpICMzMzc2XHJcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRvUmF3KHRoaXMpO1xyXG4gICAgICAgIHRyYWNrUmVmVmFsdWUoc2VsZik7XHJcbiAgICAgICAgaWYgKHNlbGYuX2RpcnR5IHx8ICFzZWxmLl9jYWNoZWFibGUpIHtcclxuICAgICAgICAgICAgc2VsZi5fZGlydHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5fdmFsdWUgPSBzZWxmLmVmZmVjdC5ydW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGYuX3ZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2V0IHZhbHVlKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fc2V0dGVyKG5ld1ZhbHVlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjb21wdXRlZChnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNTU1IgPSBmYWxzZSkge1xyXG4gICAgbGV0IGdldHRlcjtcclxuICAgIGxldCBzZXR0ZXI7XHJcbiAgICBjb25zdCBvbmx5R2V0dGVyID0gaXNGdW5jdGlvbihnZXR0ZXJPck9wdGlvbnMpO1xyXG4gICAgaWYgKG9ubHlHZXR0ZXIpIHtcclxuICAgICAgICBnZXR0ZXIgPSBnZXR0ZXJPck9wdGlvbnM7XHJcbiAgICAgICAgc2V0dGVyID0gKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgID8gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdXcml0ZSBvcGVyYXRpb24gZmFpbGVkOiBjb21wdXRlZCB2YWx1ZSBpcyByZWFkb25seScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDogTk9PUDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGdldHRlciA9IGdldHRlck9yT3B0aW9ucy5nZXQ7XHJcbiAgICAgICAgc2V0dGVyID0gZ2V0dGVyT3JPcHRpb25zLnNldDtcclxuICAgIH1cclxuICAgIGNvbnN0IGNSZWYgPSBuZXcgQ29tcHV0ZWRSZWZJbXBsKGdldHRlciwgc2V0dGVyLCBvbmx5R2V0dGVyIHx8ICFzZXR0ZXIsIGlzU1NSKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZGVidWdPcHRpb25zICYmICFpc1NTUikge1xyXG4gICAgICAgIGNSZWYuZWZmZWN0Lm9uVHJhY2sgPSBkZWJ1Z09wdGlvbnMub25UcmFjaztcclxuICAgICAgICBjUmVmLmVmZmVjdC5vblRyaWdnZXIgPSBkZWJ1Z09wdGlvbnMub25UcmlnZ2VyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNSZWY7XHJcbn1cblxudmFyIF9hO1xyXG5jb25zdCB0aWNrID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbmNvbnN0IHF1ZXVlID0gW107XHJcbmxldCBxdWV1ZWQgPSBmYWxzZTtcclxuY29uc3Qgc2NoZWR1bGVyID0gKGZuKSA9PiB7XHJcbiAgICBxdWV1ZS5wdXNoKGZuKTtcclxuICAgIGlmICghcXVldWVkKSB7XHJcbiAgICAgICAgcXVldWVkID0gdHJ1ZTtcclxuICAgICAgICB0aWNrLnRoZW4oZmx1c2gpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBmbHVzaCA9ICgpID0+IHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBxdWV1ZVtpXSgpO1xyXG4gICAgfVxyXG4gICAgcXVldWUubGVuZ3RoID0gMDtcclxuICAgIHF1ZXVlZCA9IGZhbHNlO1xyXG59O1xyXG5jbGFzcyBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihnZXR0ZXIpIHtcclxuICAgICAgICB0aGlzLmRlcCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLl9kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fX3ZfaXNSZWYgPSB0cnVlO1xyXG4gICAgICAgIHRoaXNbX2FdID0gdHJ1ZTtcclxuICAgICAgICBsZXQgY29tcGFyZVRhcmdldDtcclxuICAgICAgICBsZXQgaGFzQ29tcGFyZVRhcmdldCA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBzY2hlZHVsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVmZmVjdCA9IG5ldyBSZWFjdGl2ZUVmZmVjdChnZXR0ZXIsIChjb21wdXRlZFRyaWdnZXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGVwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcHV0ZWRUcmlnZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyZVRhcmdldCA9IHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0NvbXBhcmVUYXJnZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIXNjaGVkdWxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlVG9Db21wYXJlID0gaGFzQ29tcGFyZVRhcmdldCA/IGNvbXBhcmVUYXJnZXQgOiB0aGlzLl92YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0NvbXBhcmVUYXJnZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lZmZlY3QuYWN0aXZlICYmIHRoaXMuX2dldCgpICE9PSB2YWx1ZVRvQ29tcGFyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlclJlZlZhbHVlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gY2hhaW5lZCB1cHN0cmVhbSBjb21wdXRlZHMgYXJlIG5vdGlmaWVkIHN5bmNocm9ub3VzbHkgdG8gZW5zdXJlXHJcbiAgICAgICAgICAgICAgICAvLyB2YWx1ZSBpbnZhbGlkYXRpb24gaW4gY2FzZSBvZiBzeW5jIGFjY2Vzczsgbm9ybWFsIGVmZmVjdHMgYXJlXHJcbiAgICAgICAgICAgICAgICAvLyBkZWZlcnJlZCB0byBiZSB0cmlnZ2VyZWQgaW4gc2NoZWR1bGVyLlxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZGVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY29tcHV0ZWQgaW5zdGFuY2VvZiBEZWZlcnJlZENvbXB1dGVkUmVmSW1wbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNjaGVkdWxlcih0cnVlIC8qIGNvbXB1dGVkVHJpZ2dlciAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmVmZmVjdC5jb21wdXRlZCA9IHRoaXM7XHJcbiAgICB9XHJcbiAgICBfZ2V0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9kaXJ0eSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuX3ZhbHVlID0gdGhpcy5lZmZlY3QucnVuKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgdHJhY2tSZWZWYWx1ZSh0aGlzKTtcclxuICAgICAgICAvLyB0aGUgY29tcHV0ZWQgcmVmIG1heSBnZXQgd3JhcHBlZCBieSBvdGhlciBwcm94aWVzIGUuZy4gcmVhZG9ubHkoKSAjMzM3NlxyXG4gICAgICAgIHJldHVybiB0b1Jhdyh0aGlzKS5fZ2V0KCk7XHJcbiAgICB9XHJcbn1cclxuX2EgPSBcIl9fdl9pc1JlYWRvbmx5XCIgLyogSVNfUkVBRE9OTFkgKi87XHJcbmZ1bmN0aW9uIGRlZmVycmVkQ29tcHV0ZWQoZ2V0dGVyKSB7XHJcbiAgICByZXR1cm4gbmV3IERlZmVycmVkQ29tcHV0ZWRSZWZJbXBsKGdldHRlcik7XHJcbn1cblxuZXhwb3J0IHsgRWZmZWN0U2NvcGUsIElURVJBVEVfS0VZLCBSZWFjdGl2ZUVmZmVjdCwgY29tcHV0ZWQsIGN1c3RvbVJlZiwgZGVmZXJyZWRDb21wdXRlZCwgZWZmZWN0LCBlZmZlY3RTY29wZSwgZW5hYmxlVHJhY2tpbmcsIGdldEN1cnJlbnRTY29wZSwgaXNQcm94eSwgaXNSZWFjdGl2ZSwgaXNSZWFkb25seSwgaXNSZWYsIGlzU2hhbGxvdywgbWFya1Jhdywgb25TY29wZURpc3Bvc2UsIHBhdXNlVHJhY2tpbmcsIHByb3h5UmVmcywgcmVhY3RpdmUsIHJlYWRvbmx5LCByZWYsIHJlc2V0VHJhY2tpbmcsIHNoYWxsb3dSZWFjdGl2ZSwgc2hhbGxvd1JlYWRvbmx5LCBzaGFsbG93UmVmLCBzdG9wLCB0b1JhdywgdG9SZWYsIHRvUmVmcywgdHJhY2ssIHRyaWdnZXIsIHRyaWdnZXJSZWYsIHVucmVmIH07XG4iLCJpbXBvcnQgeyBwYXVzZVRyYWNraW5nLCByZXNldFRyYWNraW5nLCBpc1JlZiwgdG9SYXcsIGlzU2hhbGxvdyBhcyBpc1NoYWxsb3ckMSwgaXNSZWFjdGl2ZSwgUmVhY3RpdmVFZmZlY3QsIHJlZiwgcmVhY3RpdmUsIHNoYWxsb3dSZWFjdGl2ZSwgdHJpZ2dlciwgaXNQcm94eSwgc2hhbGxvd1JlYWRvbmx5LCB0cmFjaywgRWZmZWN0U2NvcGUsIG1hcmtSYXcsIHByb3h5UmVmcywgY29tcHV0ZWQgYXMgY29tcHV0ZWQkMSwgaXNSZWFkb25seSB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5leHBvcnQgeyBFZmZlY3RTY29wZSwgUmVhY3RpdmVFZmZlY3QsIGN1c3RvbVJlZiwgZWZmZWN0LCBlZmZlY3RTY29wZSwgZ2V0Q3VycmVudFNjb3BlLCBpc1Byb3h5LCBpc1JlYWN0aXZlLCBpc1JlYWRvbmx5LCBpc1JlZiwgaXNTaGFsbG93LCBtYXJrUmF3LCBvblNjb3BlRGlzcG9zZSwgcHJveHlSZWZzLCByZWFjdGl2ZSwgcmVhZG9ubHksIHJlZiwgc2hhbGxvd1JlYWN0aXZlLCBzaGFsbG93UmVhZG9ubHksIHNoYWxsb3dSZWYsIHN0b3AsIHRvUmF3LCB0b1JlZiwgdG9SZWZzLCB0cmlnZ2VyUmVmLCB1bnJlZiB9IGZyb20gJ0B2dWUvcmVhY3Rpdml0eSc7XG5pbXBvcnQgeyBpc1N0cmluZywgaXNGdW5jdGlvbiwgaXNQcm9taXNlLCBpc0FycmF5LCBOT09QLCBnZXRHbG9iYWxUaGlzLCBleHRlbmQsIEVNUFRZX09CSiwgdG9IYW5kbGVyS2V5LCB0b051bWJlciwgaHlwaGVuYXRlLCBjYW1lbGl6ZSwgaXNPbiwgaGFzT3duLCBpc01vZGVsTGlzdGVuZXIsIGhhc0NoYW5nZWQsIHJlbW92ZSwgaXNPYmplY3QsIGlzU2V0LCBpc01hcCwgaXNQbGFpbk9iamVjdCwgaW52b2tlQXJyYXlGbnMsIGRlZiwgaXNSZXNlcnZlZFByb3AsIEVNUFRZX0FSUiwgY2FwaXRhbGl6ZSwgdG9SYXdUeXBlLCBtYWtlTWFwLCBOTywgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVN0eWxlLCBpc0dsb2JhbGx5V2hpdGVsaXN0ZWQgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5leHBvcnQgeyBjYW1lbGl6ZSwgY2FwaXRhbGl6ZSwgbm9ybWFsaXplQ2xhc3MsIG5vcm1hbGl6ZVByb3BzLCBub3JtYWxpemVTdHlsZSwgdG9EaXNwbGF5U3RyaW5nLCB0b0hhbmRsZXJLZXkgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmNvbnN0IHN0YWNrID0gW107XHJcbmZ1bmN0aW9uIHB1c2hXYXJuaW5nQ29udGV4dCh2bm9kZSkge1xyXG4gICAgc3RhY2sucHVzaCh2bm9kZSk7XHJcbn1cclxuZnVuY3Rpb24gcG9wV2FybmluZ0NvbnRleHQoKSB7XHJcbiAgICBzdGFjay5wb3AoKTtcclxufVxyXG5mdW5jdGlvbiB3YXJuKG1zZywgLi4uYXJncykge1xyXG4gICAgLy8gYXZvaWQgcHJvcHMgZm9ybWF0dGluZyBvciB3YXJuIGhhbmRsZXIgdHJhY2tpbmcgZGVwcyB0aGF0IG1pZ2h0IGJlIG11dGF0ZWRcclxuICAgIC8vIGR1cmluZyBwYXRjaCwgbGVhZGluZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXHJcbiAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IHN0YWNrLmxlbmd0aCA/IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdLmNvbXBvbmVudCA6IG51bGw7XHJcbiAgICBjb25zdCBhcHBXYXJuSGFuZGxlciA9IGluc3RhbmNlICYmIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLndhcm5IYW5kbGVyO1xyXG4gICAgY29uc3QgdHJhY2UgPSBnZXRDb21wb25lbnRUcmFjZSgpO1xyXG4gICAgaWYgKGFwcFdhcm5IYW5kbGVyKSB7XHJcbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKGFwcFdhcm5IYW5kbGVyLCBpbnN0YW5jZSwgMTEgLyogQVBQX1dBUk5fSEFORExFUiAqLywgW1xyXG4gICAgICAgICAgICBtc2cgKyBhcmdzLmpvaW4oJycpLFxyXG4gICAgICAgICAgICBpbnN0YW5jZSAmJiBpbnN0YW5jZS5wcm94eSxcclxuICAgICAgICAgICAgdHJhY2VcclxuICAgICAgICAgICAgICAgIC5tYXAoKHsgdm5vZGUgfSkgPT4gYGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIHZub2RlLnR5cGUpfT5gKVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oJ1xcbicpLFxyXG4gICAgICAgICAgICB0cmFjZVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3Qgd2FybkFyZ3MgPSBbYFtWdWUgd2Fybl06ICR7bXNnfWAsIC4uLmFyZ3NdO1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xyXG4gICAgICAgIGlmICh0cmFjZS5sZW5ndGggJiZcclxuICAgICAgICAgICAgLy8gYXZvaWQgc3BhbW1pbmcgY29uc29sZSBkdXJpbmcgdGVzdHNcclxuICAgICAgICAgICAgIWZhbHNlKSB7XHJcbiAgICAgICAgICAgIHdhcm5BcmdzLnB1c2goYFxcbmAsIC4uLmZvcm1hdFRyYWNlKHRyYWNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUud2FybiguLi53YXJuQXJncyk7XHJcbiAgICB9XHJcbiAgICByZXNldFRyYWNraW5nKCk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50VHJhY2UoKSB7XHJcbiAgICBsZXQgY3VycmVudFZOb2RlID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcbiAgICBpZiAoIWN1cnJlbnRWTm9kZSkge1xyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIC8vIHdlIGNhbid0IGp1c3QgdXNlIHRoZSBzdGFjayBiZWNhdXNlIGl0IHdpbGwgYmUgaW5jb21wbGV0ZSBkdXJpbmcgdXBkYXRlc1xyXG4gICAgLy8gdGhhdCBkaWQgbm90IHN0YXJ0IGZyb20gdGhlIHJvb3QuIFJlLWNvbnN0cnVjdCB0aGUgcGFyZW50IGNoYWluIHVzaW5nXHJcbiAgICAvLyBpbnN0YW5jZSBwYXJlbnQgcG9pbnRlcnMuXHJcbiAgICBjb25zdCBub3JtYWxpemVkU3RhY2sgPSBbXTtcclxuICAgIHdoaWxlIChjdXJyZW50Vk5vZGUpIHtcclxuICAgICAgICBjb25zdCBsYXN0ID0gbm9ybWFsaXplZFN0YWNrWzBdO1xyXG4gICAgICAgIGlmIChsYXN0ICYmIGxhc3Qudm5vZGUgPT09IGN1cnJlbnRWTm9kZSkge1xyXG4gICAgICAgICAgICBsYXN0LnJlY3Vyc2VDb3VudCsrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplZFN0YWNrLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdm5vZGU6IGN1cnJlbnRWTm9kZSxcclxuICAgICAgICAgICAgICAgIHJlY3Vyc2VDb3VudDogMFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGFyZW50SW5zdGFuY2UgPSBjdXJyZW50Vk5vZGUuY29tcG9uZW50ICYmIGN1cnJlbnRWTm9kZS5jb21wb25lbnQucGFyZW50O1xyXG4gICAgICAgIGN1cnJlbnRWTm9kZSA9IHBhcmVudEluc3RhbmNlICYmIHBhcmVudEluc3RhbmNlLnZub2RlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRTdGFjaztcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBmb3JtYXRUcmFjZSh0cmFjZSkge1xyXG4gICAgY29uc3QgbG9ncyA9IFtdO1xyXG4gICAgdHJhY2UuZm9yRWFjaCgoZW50cnksIGkpID0+IHtcclxuICAgICAgICBsb2dzLnB1c2goLi4uKGkgPT09IDAgPyBbXSA6IFtgXFxuYF0pLCAuLi5mb3JtYXRUcmFjZUVudHJ5KGVudHJ5KSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBsb2dzO1xyXG59XHJcbmZ1bmN0aW9uIGZvcm1hdFRyYWNlRW50cnkoeyB2bm9kZSwgcmVjdXJzZUNvdW50IH0pIHtcclxuICAgIGNvbnN0IHBvc3RmaXggPSByZWN1cnNlQ291bnQgPiAwID8gYC4uLiAoJHtyZWN1cnNlQ291bnR9IHJlY3Vyc2l2ZSBjYWxscylgIDogYGA7XHJcbiAgICBjb25zdCBpc1Jvb3QgPSB2bm9kZS5jb21wb25lbnQgPyB2bm9kZS5jb21wb25lbnQucGFyZW50ID09IG51bGwgOiBmYWxzZTtcclxuICAgIGNvbnN0IG9wZW4gPSBgIGF0IDwke2Zvcm1hdENvbXBvbmVudE5hbWUodm5vZGUuY29tcG9uZW50LCB2bm9kZS50eXBlLCBpc1Jvb3QpfWA7XHJcbiAgICBjb25zdCBjbG9zZSA9IGA+YCArIHBvc3RmaXg7XHJcbiAgICByZXR1cm4gdm5vZGUucHJvcHNcclxuICAgICAgICA/IFtvcGVuLCAuLi5mb3JtYXRQcm9wcyh2bm9kZS5wcm9wcyksIGNsb3NlXVxyXG4gICAgICAgIDogW29wZW4gKyBjbG9zZV07XHJcbn1cclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gZm9ybWF0UHJvcHMocHJvcHMpIHtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcclxuICAgIGtleXMuc2xpY2UoMCwgMykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIHJlcy5wdXNoKC4uLmZvcm1hdFByb3Aoa2V5LCBwcm9wc1trZXldKSk7XHJcbiAgICB9KTtcclxuICAgIGlmIChrZXlzLmxlbmd0aCA+IDMpIHtcclxuICAgICAgICByZXMucHVzaChgIC4uLmApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBmb3JtYXRQcm9wKGtleSwgdmFsdWUsIHJhdykge1xyXG4gICAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiByYXcgPyB2YWx1ZSA6IFtgJHtrZXl9PSR7dmFsdWV9YF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XHJcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHxcclxuICAgICAgICB2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09JHt2YWx1ZX1gXTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzUmVmKHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlID0gZm9ybWF0UHJvcChrZXksIHRvUmF3KHZhbHVlLnZhbHVlKSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09UmVmPGAsIHZhbHVlLCBgPmBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4gW2Ake2tleX09Zm4ke3ZhbHVlLm5hbWUgPyBgPCR7dmFsdWUubmFtZX0+YCA6IGBgfWBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHJhdyA/IHZhbHVlIDogW2Ake2tleX09YCwgdmFsdWVdO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IEVycm9yVHlwZVN0cmluZ3MgPSB7XHJcbiAgICBbXCJzcFwiIC8qIFNFUlZFUl9QUkVGRVRDSCAqL106ICdzZXJ2ZXJQcmVmZXRjaCBob29rJyxcclxuICAgIFtcImJjXCIgLyogQkVGT1JFX0NSRUFURSAqL106ICdiZWZvcmVDcmVhdGUgaG9vaycsXHJcbiAgICBbXCJjXCIgLyogQ1JFQVRFRCAqL106ICdjcmVhdGVkIGhvb2snLFxyXG4gICAgW1wiYm1cIiAvKiBCRUZPUkVfTU9VTlQgKi9dOiAnYmVmb3JlTW91bnQgaG9vaycsXHJcbiAgICBbXCJtXCIgLyogTU9VTlRFRCAqL106ICdtb3VudGVkIGhvb2snLFxyXG4gICAgW1wiYnVcIiAvKiBCRUZPUkVfVVBEQVRFICovXTogJ2JlZm9yZVVwZGF0ZSBob29rJyxcclxuICAgIFtcInVcIiAvKiBVUERBVEVEICovXTogJ3VwZGF0ZWQnLFxyXG4gICAgW1wiYnVtXCIgLyogQkVGT1JFX1VOTU9VTlQgKi9dOiAnYmVmb3JlVW5tb3VudCBob29rJyxcclxuICAgIFtcInVtXCIgLyogVU5NT1VOVEVEICovXTogJ3VubW91bnRlZCBob29rJyxcclxuICAgIFtcImFcIiAvKiBBQ1RJVkFURUQgKi9dOiAnYWN0aXZhdGVkIGhvb2snLFxyXG4gICAgW1wiZGFcIiAvKiBERUFDVElWQVRFRCAqL106ICdkZWFjdGl2YXRlZCBob29rJyxcclxuICAgIFtcImVjXCIgLyogRVJST1JfQ0FQVFVSRUQgKi9dOiAnZXJyb3JDYXB0dXJlZCBob29rJyxcclxuICAgIFtcInJ0Y1wiIC8qIFJFTkRFUl9UUkFDS0VEICovXTogJ3JlbmRlclRyYWNrZWQgaG9vaycsXHJcbiAgICBbXCJydGdcIiAvKiBSRU5ERVJfVFJJR0dFUkVEICovXTogJ3JlbmRlclRyaWdnZXJlZCBob29rJyxcclxuICAgIFswIC8qIFNFVFVQX0ZVTkNUSU9OICovXTogJ3NldHVwIGZ1bmN0aW9uJyxcclxuICAgIFsxIC8qIFJFTkRFUl9GVU5DVElPTiAqL106ICdyZW5kZXIgZnVuY3Rpb24nLFxyXG4gICAgWzIgLyogV0FUQ0hfR0VUVEVSICovXTogJ3dhdGNoZXIgZ2V0dGVyJyxcclxuICAgIFszIC8qIFdBVENIX0NBTExCQUNLICovXTogJ3dhdGNoZXIgY2FsbGJhY2snLFxyXG4gICAgWzQgLyogV0FUQ0hfQ0xFQU5VUCAqL106ICd3YXRjaGVyIGNsZWFudXAgZnVuY3Rpb24nLFxyXG4gICAgWzUgLyogTkFUSVZFX0VWRU5UX0hBTkRMRVIgKi9dOiAnbmF0aXZlIGV2ZW50IGhhbmRsZXInLFxyXG4gICAgWzYgLyogQ09NUE9ORU5UX0VWRU5UX0hBTkRMRVIgKi9dOiAnY29tcG9uZW50IGV2ZW50IGhhbmRsZXInLFxyXG4gICAgWzcgLyogVk5PREVfSE9PSyAqL106ICd2bm9kZSBob29rJyxcclxuICAgIFs4IC8qIERJUkVDVElWRV9IT09LICovXTogJ2RpcmVjdGl2ZSBob29rJyxcclxuICAgIFs5IC8qIFRSQU5TSVRJT05fSE9PSyAqL106ICd0cmFuc2l0aW9uIGhvb2snLFxyXG4gICAgWzEwIC8qIEFQUF9FUlJPUl9IQU5ETEVSICovXTogJ2FwcCBlcnJvckhhbmRsZXInLFxyXG4gICAgWzExIC8qIEFQUF9XQVJOX0hBTkRMRVIgKi9dOiAnYXBwIHdhcm5IYW5kbGVyJyxcclxuICAgIFsxMiAvKiBGVU5DVElPTl9SRUYgKi9dOiAncmVmIGZ1bmN0aW9uJyxcclxuICAgIFsxMyAvKiBBU1lOQ19DT01QT05FTlRfTE9BREVSICovXTogJ2FzeW5jIGNvbXBvbmVudCBsb2FkZXInLFxyXG4gICAgWzE0IC8qIFNDSEVEVUxFUiAqL106ICdzY2hlZHVsZXIgZmx1c2guIFRoaXMgaXMgbGlrZWx5IGEgVnVlIGludGVybmFscyBidWcuICcgK1xyXG4gICAgICAgICdQbGVhc2Ugb3BlbiBhbiBpc3N1ZSBhdCBodHRwczovL25ldy1pc3N1ZS52dWVqcy5vcmcvP3JlcG89dnVlanMvY29yZSdcclxufTtcclxuZnVuY3Rpb24gY2FsbFdpdGhFcnJvckhhbmRsaW5nKGZuLCBpbnN0YW5jZSwgdHlwZSwgYXJncykge1xyXG4gICAgbGV0IHJlcztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmVzID0gYXJncyA/IGZuKC4uLmFyZ3MpIDogZm4oKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCB0eXBlKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcclxuICAgICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoZm4sIGluc3RhbmNlLCB0eXBlLCBhcmdzKTtcclxuICAgICAgICBpZiAocmVzICYmIGlzUHJvbWlzZShyZXMpKSB7XHJcbiAgICAgICAgICAgIHJlcy5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlRXJyb3IoZXJyLCBpbnN0YW5jZSwgdHlwZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdmFsdWVzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWVzLnB1c2goY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoZm5baV0sIGluc3RhbmNlLCB0eXBlLCBhcmdzKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWVzO1xyXG59XHJcbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIHR5cGUsIHRocm93SW5EZXYgPSB0cnVlKSB7XHJcbiAgICBjb25zdCBjb250ZXh0Vk5vZGUgPSBpbnN0YW5jZSA/IGluc3RhbmNlLnZub2RlIDogbnVsbDtcclxuICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGxldCBjdXIgPSBpbnN0YW5jZS5wYXJlbnQ7XHJcbiAgICAgICAgLy8gdGhlIGV4cG9zZWQgaW5zdGFuY2UgaXMgdGhlIHJlbmRlciBwcm94eSB0byBrZWVwIGl0IGNvbnNpc3RlbnQgd2l0aCAyLnhcclxuICAgICAgICBjb25zdCBleHBvc2VkSW5zdGFuY2UgPSBpbnN0YW5jZS5wcm94eTtcclxuICAgICAgICAvLyBpbiBwcm9kdWN0aW9uIHRoZSBob29rIHJlY2VpdmVzIG9ubHkgdGhlIGVycm9yIGNvZGVcclxuICAgICAgICBjb25zdCBlcnJvckluZm8gPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBFcnJvclR5cGVTdHJpbmdzW3R5cGVdIDogdHlwZTtcclxuICAgICAgICB3aGlsZSAoY3VyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ2FwdHVyZWRIb29rcyA9IGN1ci5lYztcclxuICAgICAgICAgICAgaWYgKGVycm9yQ2FwdHVyZWRIb29rcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlcnJvckNhcHR1cmVkSG9va3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYXB0dXJlZEhvb2tzW2ldKGVyciwgZXhwb3NlZEluc3RhbmNlLCBlcnJvckluZm8pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1ciA9IGN1ci5wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFwcC1sZXZlbCBoYW5kbGluZ1xyXG4gICAgICAgIGNvbnN0IGFwcEVycm9ySGFuZGxlciA9IGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtcclxuICAgICAgICBpZiAoYXBwRXJyb3JIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhhcHBFcnJvckhhbmRsZXIsIG51bGwsIDEwIC8qIEFQUF9FUlJPUl9IQU5ETEVSICovLCBbZXJyLCBleHBvc2VkSW5zdGFuY2UsIGVycm9ySW5mb10pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nRXJyb3IoZXJyLCB0eXBlLCBjb250ZXh0Vk5vZGUsIHRocm93SW5EZXYpO1xyXG59XHJcbmZ1bmN0aW9uIGxvZ0Vycm9yKGVyciwgdHlwZSwgY29udGV4dFZOb2RlLCB0aHJvd0luRGV2ID0gdHJ1ZSkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGluZm8gPSBFcnJvclR5cGVTdHJpbmdzW3R5cGVdO1xyXG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcclxuICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KGNvbnRleHRWTm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdhcm4oYFVuaGFuZGxlZCBlcnJvciR7aW5mbyA/IGAgZHVyaW5nIGV4ZWN1dGlvbiBvZiAke2luZm99YCA6IGBgfWApO1xyXG4gICAgICAgIGlmIChjb250ZXh0Vk5vZGUpIHtcclxuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3Jhc2ggaW4gZGV2IGJ5IGRlZmF1bHQgc28gaXQncyBtb3JlIG5vdGljZWFibGVcclxuICAgICAgICBpZiAodGhyb3dJbkRldikge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gcmVjb3ZlciBpbiBwcm9kIHRvIHJlZHVjZSB0aGUgaW1wYWN0IG9uIGVuZC11c2VyXHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfVxyXG59XG5cbmxldCBpc0ZsdXNoaW5nID0gZmFsc2U7XHJcbmxldCBpc0ZsdXNoUGVuZGluZyA9IGZhbHNlO1xyXG5jb25zdCBxdWV1ZSA9IFtdO1xyXG5sZXQgZmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHBlbmRpbmdQcmVGbHVzaENicyA9IFtdO1xyXG5sZXQgYWN0aXZlUHJlRmx1c2hDYnMgPSBudWxsO1xyXG5sZXQgcHJlRmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHBlbmRpbmdQb3N0Rmx1c2hDYnMgPSBbXTtcclxubGV0IGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XHJcbmxldCBwb3N0Rmx1c2hJbmRleCA9IDA7XHJcbmNvbnN0IHJlc29sdmVkUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5sZXQgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XHJcbmxldCBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IgPSBudWxsO1xyXG5jb25zdCBSRUNVUlNJT05fTElNSVQgPSAxMDA7XHJcbmZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XHJcbiAgICBjb25zdCBwID0gY3VycmVudEZsdXNoUHJvbWlzZSB8fCByZXNvbHZlZFByb21pc2U7XHJcbiAgICByZXR1cm4gZm4gPyBwLnRoZW4odGhpcyA/IGZuLmJpbmQodGhpcykgOiBmbikgOiBwO1xyXG59XHJcbi8vICMyNzY4XHJcbi8vIFVzZSBiaW5hcnktc2VhcmNoIHRvIGZpbmQgYSBzdWl0YWJsZSBwb3NpdGlvbiBpbiB0aGUgcXVldWUsXHJcbi8vIHNvIHRoYXQgdGhlIHF1ZXVlIG1haW50YWlucyB0aGUgaW5jcmVhc2luZyBvcmRlciBvZiBqb2IncyBpZCxcclxuLy8gd2hpY2ggY2FuIHByZXZlbnQgdGhlIGpvYiBmcm9tIGJlaW5nIHNraXBwZWQgYW5kIGFsc28gY2FuIGF2b2lkIHJlcGVhdGVkIHBhdGNoaW5nLlxyXG5mdW5jdGlvbiBmaW5kSW5zZXJ0aW9uSW5kZXgoaWQpIHtcclxuICAgIC8vIHRoZSBzdGFydCBpbmRleCBzaG91bGQgYmUgYGZsdXNoSW5kZXggKyAxYFxyXG4gICAgbGV0IHN0YXJ0ID0gZmx1c2hJbmRleCArIDE7XHJcbiAgICBsZXQgZW5kID0gcXVldWUubGVuZ3RoO1xyXG4gICAgd2hpbGUgKHN0YXJ0IDwgZW5kKSB7XHJcbiAgICAgICAgY29uc3QgbWlkZGxlID0gKHN0YXJ0ICsgZW5kKSA+Pj4gMTtcclxuICAgICAgICBjb25zdCBtaWRkbGVKb2JJZCA9IGdldElkKHF1ZXVlW21pZGRsZV0pO1xyXG4gICAgICAgIG1pZGRsZUpvYklkIDwgaWQgPyAoc3RhcnQgPSBtaWRkbGUgKyAxKSA6IChlbmQgPSBtaWRkbGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0YXJ0O1xyXG59XHJcbmZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xyXG4gICAgLy8gdGhlIGRlZHVwZSBzZWFyY2ggdXNlcyB0aGUgc3RhcnRJbmRleCBhcmd1bWVudCBvZiBBcnJheS5pbmNsdWRlcygpXHJcbiAgICAvLyBieSBkZWZhdWx0IHRoZSBzZWFyY2ggaW5kZXggaW5jbHVkZXMgdGhlIGN1cnJlbnQgam9iIHRoYXQgaXMgYmVpbmcgcnVuXHJcbiAgICAvLyBzbyBpdCBjYW5ub3QgcmVjdXJzaXZlbHkgdHJpZ2dlciBpdHNlbGYgYWdhaW4uXHJcbiAgICAvLyBpZiB0aGUgam9iIGlzIGEgd2F0Y2goKSBjYWxsYmFjaywgdGhlIHNlYXJjaCB3aWxsIHN0YXJ0IHdpdGggYSArMSBpbmRleCB0b1xyXG4gICAgLy8gYWxsb3cgaXQgcmVjdXJzaXZlbHkgdHJpZ2dlciBpdHNlbGYgLSBpdCBpcyB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvXHJcbiAgICAvLyBlbnN1cmUgaXQgZG9lc24ndCBlbmQgdXAgaW4gYW4gaW5maW5pdGUgbG9vcC5cclxuICAgIGlmICgoIXF1ZXVlLmxlbmd0aCB8fFxyXG4gICAgICAgICFxdWV1ZS5pbmNsdWRlcyhqb2IsIGlzRmx1c2hpbmcgJiYgam9iLmFsbG93UmVjdXJzZSA/IGZsdXNoSW5kZXggKyAxIDogZmx1c2hJbmRleCkpICYmXHJcbiAgICAgICAgam9iICE9PSBjdXJyZW50UHJlRmx1c2hQYXJlbnRKb2IpIHtcclxuICAgICAgICBpZiAoam9iLmlkID09IG51bGwpIHtcclxuICAgICAgICAgICAgcXVldWUucHVzaChqb2IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcXVldWUuc3BsaWNlKGZpbmRJbnNlcnRpb25JbmRleChqb2IuaWQpLCAwLCBqb2IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBxdWV1ZUZsdXNoKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcXVldWVGbHVzaCgpIHtcclxuICAgIGlmICghaXNGbHVzaGluZyAmJiAhaXNGbHVzaFBlbmRpbmcpIHtcclxuICAgICAgICBpc0ZsdXNoUGVuZGluZyA9IHRydWU7XHJcbiAgICAgICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IHJlc29sdmVkUHJvbWlzZS50aGVuKGZsdXNoSm9icyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaW52YWxpZGF0ZUpvYihqb2IpIHtcclxuICAgIGNvbnN0IGkgPSBxdWV1ZS5pbmRleE9mKGpvYik7XHJcbiAgICBpZiAoaSA+IGZsdXNoSW5kZXgpIHtcclxuICAgICAgICBxdWV1ZS5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcXVldWVDYihjYiwgYWN0aXZlUXVldWUsIHBlbmRpbmdRdWV1ZSwgaW5kZXgpIHtcclxuICAgIGlmICghaXNBcnJheShjYikpIHtcclxuICAgICAgICBpZiAoIWFjdGl2ZVF1ZXVlIHx8XHJcbiAgICAgICAgICAgICFhY3RpdmVRdWV1ZS5pbmNsdWRlcyhjYiwgY2IuYWxsb3dSZWN1cnNlID8gaW5kZXggKyAxIDogaW5kZXgpKSB7XHJcbiAgICAgICAgICAgIHBlbmRpbmdRdWV1ZS5wdXNoKGNiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBpZiBjYiBpcyBhbiBhcnJheSwgaXQgaXMgYSBjb21wb25lbnQgbGlmZWN5Y2xlIGhvb2sgd2hpY2ggY2FuIG9ubHkgYmVcclxuICAgICAgICAvLyB0cmlnZ2VyZWQgYnkgYSBqb2IsIHdoaWNoIGlzIGFscmVhZHkgZGVkdXBlZCBpbiB0aGUgbWFpbiBxdWV1ZSwgc29cclxuICAgICAgICAvLyB3ZSBjYW4gc2tpcCBkdXBsaWNhdGUgY2hlY2sgaGVyZSB0byBpbXByb3ZlIHBlcmZcclxuICAgICAgICBwZW5kaW5nUXVldWUucHVzaCguLi5jYik7XHJcbiAgICB9XHJcbiAgICBxdWV1ZUZsdXNoKCk7XHJcbn1cclxuZnVuY3Rpb24gcXVldWVQcmVGbHVzaENiKGNiKSB7XHJcbiAgICBxdWV1ZUNiKGNiLCBhY3RpdmVQcmVGbHVzaENicywgcGVuZGluZ1ByZUZsdXNoQ2JzLCBwcmVGbHVzaEluZGV4KTtcclxufVxyXG5mdW5jdGlvbiBxdWV1ZVBvc3RGbHVzaENiKGNiKSB7XHJcbiAgICBxdWV1ZUNiKGNiLCBhY3RpdmVQb3N0Rmx1c2hDYnMsIHBlbmRpbmdQb3N0Rmx1c2hDYnMsIHBvc3RGbHVzaEluZGV4KTtcclxufVxyXG5mdW5jdGlvbiBmbHVzaFByZUZsdXNoQ2JzKHNlZW4sIHBhcmVudEpvYiA9IG51bGwpIHtcclxuICAgIGlmIChwZW5kaW5nUHJlRmx1c2hDYnMubGVuZ3RoKSB7XHJcbiAgICAgICAgY3VycmVudFByZUZsdXNoUGFyZW50Sm9iID0gcGFyZW50Sm9iO1xyXG4gICAgICAgIGFjdGl2ZVByZUZsdXNoQ2JzID0gWy4uLm5ldyBTZXQocGVuZGluZ1ByZUZsdXNoQ2JzKV07XHJcbiAgICAgICAgcGVuZGluZ1ByZUZsdXNoQ2JzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAocHJlRmx1c2hJbmRleCA9IDA7IHByZUZsdXNoSW5kZXggPCBhY3RpdmVQcmVGbHVzaENicy5sZW5ndGg7IHByZUZsdXNoSW5kZXgrKykge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgYWN0aXZlUHJlRmx1c2hDYnNbcHJlRmx1c2hJbmRleF0pKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3RpdmVQcmVGbHVzaENic1twcmVGbHVzaEluZGV4XSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVQcmVGbHVzaENicyA9IG51bGw7XHJcbiAgICAgICAgcHJlRmx1c2hJbmRleCA9IDA7XHJcbiAgICAgICAgY3VycmVudFByZUZsdXNoUGFyZW50Sm9iID0gbnVsbDtcclxuICAgICAgICAvLyByZWN1cnNpdmVseSBmbHVzaCB1bnRpbCBpdCBkcmFpbnNcclxuICAgICAgICBmbHVzaFByZUZsdXNoQ2JzKHNlZW4sIHBhcmVudEpvYik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZmx1c2hQb3N0Rmx1c2hDYnMoc2Vlbikge1xyXG4gICAgaWYgKHBlbmRpbmdQb3N0Rmx1c2hDYnMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgZGVkdXBlZCA9IFsuLi5uZXcgU2V0KHBlbmRpbmdQb3N0Rmx1c2hDYnMpXTtcclxuICAgICAgICBwZW5kaW5nUG9zdEZsdXNoQ2JzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgLy8gIzE5NDcgYWxyZWFkeSBoYXMgYWN0aXZlIHF1ZXVlLCBuZXN0ZWQgZmx1c2hQb3N0Rmx1c2hDYnMgY2FsbFxyXG4gICAgICAgIGlmIChhY3RpdmVQb3N0Rmx1c2hDYnMpIHtcclxuICAgICAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnB1c2goLi4uZGVkdXBlZCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzID0gZGVkdXBlZDtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHNlZW4gPSBzZWVuIHx8IG5ldyBNYXAoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlUG9zdEZsdXNoQ2JzLnNvcnQoKGEsIGIpID0+IGdldElkKGEpIC0gZ2V0SWQoYikpO1xyXG4gICAgICAgIGZvciAocG9zdEZsdXNoSW5kZXggPSAwOyBwb3N0Rmx1c2hJbmRleCA8IGFjdGl2ZVBvc3RGbHVzaENicy5sZW5ndGg7IHBvc3RGbHVzaEluZGV4KyspIHtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGFjdGl2ZVBvc3RGbHVzaENic1twb3N0Rmx1c2hJbmRleF0pKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhY3RpdmVQb3N0Rmx1c2hDYnNbcG9zdEZsdXNoSW5kZXhdKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFjdGl2ZVBvc3RGbHVzaENicyA9IG51bGw7XHJcbiAgICAgICAgcG9zdEZsdXNoSW5kZXggPSAwO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGdldElkID0gKGpvYikgPT4gam9iLmlkID09IG51bGwgPyBJbmZpbml0eSA6IGpvYi5pZDtcclxuZnVuY3Rpb24gZmx1c2hKb2JzKHNlZW4pIHtcclxuICAgIGlzRmx1c2hQZW5kaW5nID0gZmFsc2U7XHJcbiAgICBpc0ZsdXNoaW5nID0gdHJ1ZTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBzZWVuID0gc2VlbiB8fCBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBmbHVzaFByZUZsdXNoQ2JzKHNlZW4pO1xyXG4gICAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXHJcbiAgICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcclxuICAgIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcclxuICAgIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZCBzbyBpdHMgcmVuZGVyIGVmZmVjdCB3aWxsIGhhdmUgc21hbGxlclxyXG4gICAgLy8gICAgcHJpb3JpdHkgbnVtYmVyKVxyXG4gICAgLy8gMi4gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB1cGRhdGUsXHJcbiAgICAvLyAgICBpdHMgdXBkYXRlIGNhbiBiZSBza2lwcGVkLlxyXG4gICAgcXVldWUuc29ydCgoYSwgYikgPT4gZ2V0SWQoYSkgLSBnZXRJZChiKSk7XHJcbiAgICAvLyBjb25kaXRpb25hbCB1c2FnZSBvZiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZSBtdXN0IGJlIGRldGVybWluZWQgb3V0IG9mXHJcbiAgICAvLyB0cnkgLi4uIGNhdGNoIGJsb2NrIHNpbmNlIFJvbGx1cCBieSBkZWZhdWx0IGRlLW9wdGltaXplcyB0cmVlc2hha2luZ1xyXG4gICAgLy8gaW5zaWRlIHRyeS1jYXRjaC4gVGhpcyBjYW4gbGVhdmUgYWxsIHdhcm5pbmcgY29kZSB1bnNoYWtlZC4gQWx0aG91Z2hcclxuICAgIC8vIHRoZXkgd291bGQgZ2V0IGV2ZW50dWFsbHkgc2hha2VuIGJ5IGEgbWluaWZpZXIgbGlrZSB0ZXJzZXIsIHNvbWUgbWluaWZpZXJzXHJcbiAgICAvLyB3b3VsZCBmYWlsIHRvIGRvIHRoYXQgKGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL2V2YW53L2VzYnVpbGQvaXNzdWVzLzE2MTApXHJcbiAgICBjb25zdCBjaGVjayA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgID8gKGpvYikgPT4gY2hlY2tSZWN1cnNpdmVVcGRhdGVzKHNlZW4sIGpvYilcclxuICAgICAgICA6IE5PT1A7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGZvciAoZmx1c2hJbmRleCA9IDA7IGZsdXNoSW5kZXggPCBxdWV1ZS5sZW5ndGg7IGZsdXNoSW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCBqb2IgPSBxdWV1ZVtmbHVzaEluZGV4XTtcclxuICAgICAgICAgICAgaWYgKGpvYiAmJiBqb2IuYWN0aXZlICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjaGVjayhqb2IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgcnVubmluZzpgLCBqb2IuaWQpXHJcbiAgICAgICAgICAgICAgICBjYWxsV2l0aEVycm9ySGFuZGxpbmcoam9iLCBudWxsLCAxNCAvKiBTQ0hFRFVMRVIgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgZmx1c2hJbmRleCA9IDA7XHJcbiAgICAgICAgcXVldWUubGVuZ3RoID0gMDtcclxuICAgICAgICBmbHVzaFBvc3RGbHVzaENicyhzZWVuKTtcclxuICAgICAgICBpc0ZsdXNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgY3VycmVudEZsdXNoUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgLy8gc29tZSBwb3N0Rmx1c2hDYiBxdWV1ZWQgam9icyFcclxuICAgICAgICAvLyBrZWVwIGZsdXNoaW5nIHVudGlsIGl0IGRyYWlucy5cclxuICAgICAgICBpZiAocXVldWUubGVuZ3RoIHx8XHJcbiAgICAgICAgICAgIHBlbmRpbmdQcmVGbHVzaENicy5sZW5ndGggfHxcclxuICAgICAgICAgICAgcGVuZGluZ1Bvc3RGbHVzaENicy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZmx1c2hKb2JzKHNlZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjaGVja1JlY3Vyc2l2ZVVwZGF0ZXMoc2VlbiwgZm4pIHtcclxuICAgIGlmICghc2Vlbi5oYXMoZm4pKSB7XHJcbiAgICAgICAgc2Vlbi5zZXQoZm4sIDEpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY291bnQgPSBzZWVuLmdldChmbik7XHJcbiAgICAgICAgaWYgKGNvdW50ID4gUkVDVVJTSU9OX0xJTUlUKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gZm4ub3duZXJJbnN0YW5jZTtcclxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGluc3RhbmNlICYmIGdldENvbXBvbmVudE5hbWUoaW5zdGFuY2UudHlwZSk7XHJcbiAgICAgICAgICAgIHdhcm4oYE1heGltdW0gcmVjdXJzaXZlIHVwZGF0ZXMgZXhjZWVkZWQke2NvbXBvbmVudE5hbWUgPyBgIGluIGNvbXBvbmVudCA8JHtjb21wb25lbnROYW1lfT5gIDogYGB9LiBgICtcclxuICAgICAgICAgICAgICAgIGBUaGlzIG1lYW5zIHlvdSBoYXZlIGEgcmVhY3RpdmUgZWZmZWN0IHRoYXQgaXMgbXV0YXRpbmcgaXRzIG93biBgICtcclxuICAgICAgICAgICAgICAgIGBkZXBlbmRlbmNpZXMgYW5kIHRodXMgcmVjdXJzaXZlbHkgdHJpZ2dlcmluZyBpdHNlbGYuIFBvc3NpYmxlIHNvdXJjZXMgYCArXHJcbiAgICAgICAgICAgICAgICBgaW5jbHVkZSBjb21wb25lbnQgdGVtcGxhdGUsIHJlbmRlciBmdW5jdGlvbiwgdXBkYXRlZCBob29rIG9yIGAgK1xyXG4gICAgICAgICAgICAgICAgYHdhdGNoZXIgc291cmNlIGZ1bmN0aW9uLmApO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlZW4uc2V0KGZuLCBjb3VudCArIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxubGV0IGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcclxuY29uc3QgaG1yRGlydHlDb21wb25lbnRzID0gbmV3IFNldCgpO1xyXG4vLyBFeHBvc2UgdGhlIEhNUiBydW50aW1lIG9uIHRoZSBnbG9iYWwgb2JqZWN0XHJcbi8vIFRoaXMgbWFrZXMgaXQgZW50aXJlbHkgdHJlZS1zaGFrYWJsZSB3aXRob3V0IHBvbGx1dGluZyB0aGUgZXhwb3J0cyBhbmQgbWFrZXNcclxuLy8gaXQgZWFzaWVyIHRvIGJlIHVzZWQgaW4gdG9vbGluZ3MgbGlrZSB2dWUtbG9hZGVyXHJcbi8vIE5vdGU6IGZvciBhIGNvbXBvbmVudCB0byBiZSBlbGlnaWJsZSBmb3IgSE1SIGl0IGFsc28gbmVlZHMgdGhlIF9faG1ySWQgb3B0aW9uXHJcbi8vIHRvIGJlIHNldCBzbyB0aGF0IGl0cyBpbnN0YW5jZXMgY2FuIGJlIHJlZ2lzdGVyZWQgLyByZW1vdmVkLlxyXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfSE1SX1JVTlRJTUVfXyA9IHtcclxuICAgICAgICBjcmVhdGVSZWNvcmQ6IHRyeVdyYXAoY3JlYXRlUmVjb3JkKSxcclxuICAgICAgICByZXJlbmRlcjogdHJ5V3JhcChyZXJlbmRlciksXHJcbiAgICAgICAgcmVsb2FkOiB0cnlXcmFwKHJlbG9hZClcclxuICAgIH07XHJcbn1cclxuY29uc3QgbWFwID0gbmV3IE1hcCgpO1xyXG5mdW5jdGlvbiByZWdpc3RlckhNUihpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgaWQgPSBpbnN0YW5jZS50eXBlLl9faG1ySWQ7XHJcbiAgICBsZXQgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZCkge1xyXG4gICAgICAgIGNyZWF0ZVJlY29yZChpZCwgaW5zdGFuY2UudHlwZSk7XHJcbiAgICAgICAgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICB9XHJcbiAgICByZWNvcmQuaW5zdGFuY2VzLmFkZChpbnN0YW5jZSk7XHJcbn1cclxuZnVuY3Rpb24gdW5yZWdpc3RlckhNUihpbnN0YW5jZSkge1xyXG4gICAgbWFwLmdldChpbnN0YW5jZS50eXBlLl9faG1ySWQpLmluc3RhbmNlcy5kZWxldGUoaW5zdGFuY2UpO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJlY29yZChpZCwgaW5pdGlhbERlZikge1xyXG4gICAgaWYgKG1hcC5oYXMoaWQpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgbWFwLnNldChpZCwge1xyXG4gICAgICAgIGluaXRpYWxEZWY6IG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluaXRpYWxEZWYpLFxyXG4gICAgICAgIGluc3RhbmNlczogbmV3IFNldCgpXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIGlzQ2xhc3NDb21wb25lbnQoY29tcG9uZW50KSA/IGNvbXBvbmVudC5fX3ZjY09wdHMgOiBjb21wb25lbnQ7XHJcbn1cclxuZnVuY3Rpb24gcmVyZW5kZXIoaWQsIG5ld1JlbmRlcikge1xyXG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIHVwZGF0ZSBpbml0aWFsIHJlY29yZCAoZm9yIG5vdC15ZXQtcmVuZGVyZWQgY29tcG9uZW50KVxyXG4gICAgcmVjb3JkLmluaXRpYWxEZWYucmVuZGVyID0gbmV3UmVuZGVyO1xyXG4gICAgWy4uLnJlY29yZC5pbnN0YW5jZXNdLmZvckVhY2goaW5zdGFuY2UgPT4ge1xyXG4gICAgICAgIGlmIChuZXdSZW5kZXIpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gbmV3UmVuZGVyO1xyXG4gICAgICAgICAgICBub3JtYWxpemVDbGFzc0NvbXBvbmVudChpbnN0YW5jZS50eXBlKS5yZW5kZXIgPSBuZXdSZW5kZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlckNhY2hlID0gW107XHJcbiAgICAgICAgLy8gdGhpcyBmbGFnIGZvcmNlcyBjaGlsZCBjb21wb25lbnRzIHdpdGggc2xvdCBjb250ZW50IHRvIHVwZGF0ZVxyXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGluc3RhbmNlLnVwZGF0ZSgpO1xyXG4gICAgICAgIGlzSG1yVXBkYXRpbmcgPSBmYWxzZTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHJlbG9hZChpZCwgbmV3Q29tcCkge1xyXG4gICAgY29uc3QgcmVjb3JkID0gbWFwLmdldChpZCk7XHJcbiAgICBpZiAoIXJlY29yZClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBuZXdDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQobmV3Q29tcCk7XHJcbiAgICAvLyB1cGRhdGUgaW5pdGlhbCBkZWYgKGZvciBub3QteWV0LXJlbmRlcmVkIGNvbXBvbmVudHMpXHJcbiAgICB1cGRhdGVDb21wb25lbnREZWYocmVjb3JkLmluaXRpYWxEZWYsIG5ld0NvbXApO1xyXG4gICAgLy8gY3JlYXRlIGEgc25hcHNob3Qgd2hpY2ggYXZvaWRzIHRoZSBzZXQgYmVpbmcgbXV0YXRlZCBkdXJpbmcgdXBkYXRlc1xyXG4gICAgY29uc3QgaW5zdGFuY2VzID0gWy4uLnJlY29yZC5pbnN0YW5jZXNdO1xyXG4gICAgZm9yIChjb25zdCBpbnN0YW5jZSBvZiBpbnN0YW5jZXMpIHtcclxuICAgICAgICBjb25zdCBvbGRDb21wID0gbm9ybWFsaXplQ2xhc3NDb21wb25lbnQoaW5zdGFuY2UudHlwZSk7XHJcbiAgICAgICAgaWYgKCFobXJEaXJ0eUNvbXBvbmVudHMuaGFzKG9sZENvbXApKSB7XHJcbiAgICAgICAgICAgIC8vIDEuIFVwZGF0ZSBleGlzdGluZyBjb21wIGRlZmluaXRpb24gdG8gbWF0Y2ggbmV3IG9uZVxyXG4gICAgICAgICAgICBpZiAob2xkQ29tcCAhPT0gcmVjb3JkLmluaXRpYWxEZWYpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudERlZihvbGRDb21wLCBuZXdDb21wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAyLiBtYXJrIGRlZmluaXRpb24gZGlydHkuIFRoaXMgZm9yY2VzIHRoZSByZW5kZXJlciB0byByZXBsYWNlIHRoZVxyXG4gICAgICAgICAgICAvLyBjb21wb25lbnQgb24gcGF0Y2guXHJcbiAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5hZGQob2xkQ29tcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDMuIGludmFsaWRhdGUgb3B0aW9ucyByZXNvbHV0aW9uIGNhY2hlXHJcbiAgICAgICAgaW5zdGFuY2UuYXBwQ29udGV4dC5vcHRpb25zQ2FjaGUuZGVsZXRlKGluc3RhbmNlLnR5cGUpO1xyXG4gICAgICAgIC8vIDQuIGFjdHVhbGx5IHVwZGF0ZVxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5jZVJlbG9hZCkge1xyXG4gICAgICAgICAgICAvLyBjdXN0b20gZWxlbWVudFxyXG4gICAgICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuYWRkKG9sZENvbXApO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5jZVJlbG9hZChuZXdDb21wLnN0eWxlcyk7XHJcbiAgICAgICAgICAgIGhtckRpcnR5Q29tcG9uZW50cy5kZWxldGUob2xkQ29tcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAvLyA0LiBGb3JjZSB0aGUgcGFyZW50IGluc3RhbmNlIHRvIHJlLXJlbmRlci4gVGhpcyB3aWxsIGNhdXNlIGFsbCB1cGRhdGVkXHJcbiAgICAgICAgICAgIC8vIGNvbXBvbmVudHMgdG8gYmUgdW5tb3VudGVkIGFuZCByZS1tb3VudGVkLiBRdWV1ZSB0aGUgdXBkYXRlIHNvIHRoYXQgd2VcclxuICAgICAgICAgICAgLy8gZG9uJ3QgZW5kIHVwIGZvcmNpbmcgdGhlIHNhbWUgcGFyZW50IHRvIHJlLXJlbmRlciBtdWx0aXBsZSB0aW1lcy5cclxuICAgICAgICAgICAgcXVldWVKb2IoaW5zdGFuY2UucGFyZW50LnVwZGF0ZSk7XHJcbiAgICAgICAgICAgIC8vIGluc3RhbmNlIGlzIHRoZSBpbm5lciBjb21wb25lbnQgb2YgYW4gYXN5bmMgY3VzdG9tIGVsZW1lbnRcclxuICAgICAgICAgICAgLy8gaW52b2tlIHRvIHJlc2V0IHN0eWxlc1xyXG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UucGFyZW50LnR5cGUuX19hc3luY0xvYWRlciAmJlxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UucGFyZW50LmNlUmVsb2FkKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQuY2VSZWxvYWQobmV3Q29tcC5zdHlsZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmFwcENvbnRleHQucmVsb2FkKSB7XHJcbiAgICAgICAgICAgIC8vIHJvb3QgaW5zdGFuY2UgbW91bnRlZCB2aWEgY3JlYXRlQXBwKCkgaGFzIGEgcmVsb2FkIG1ldGhvZFxyXG4gICAgICAgICAgICBpbnN0YW5jZS5hcHBDb250ZXh0LnJlbG9hZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAvLyByb290IGluc3RhbmNlIGluc2lkZSB0cmVlIGNyZWF0ZWQgdmlhIHJhdyByZW5kZXIoKS4gRm9yY2UgcmVsb2FkLlxyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1tITVJdIFJvb3Qgb3IgbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSBtb2RpZmllZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gNS4gbWFrZSBzdXJlIHRvIGNsZWFudXAgZGlydHkgaG1yIGNvbXBvbmVudHMgYWZ0ZXIgdXBkYXRlXHJcbiAgICBxdWV1ZVBvc3RGbHVzaENiKCgpID0+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIGluc3RhbmNlcykge1xyXG4gICAgICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuZGVsZXRlKG5vcm1hbGl6ZUNsYXNzQ29tcG9uZW50KGluc3RhbmNlLnR5cGUpKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnREZWYob2xkQ29tcCwgbmV3Q29tcCkge1xyXG4gICAgZXh0ZW5kKG9sZENvbXAsIG5ld0NvbXApO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2xkQ29tcCkge1xyXG4gICAgICAgIGlmIChrZXkgIT09ICdfX2ZpbGUnICYmICEoa2V5IGluIG5ld0NvbXApKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBvbGRDb21wW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHRyeVdyYXAoZm4pIHtcclxuICAgIHJldHVybiAoaWQsIGFyZykgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbihpZCwgYXJnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbSE1SXSBTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBgICtcclxuICAgICAgICAgICAgICAgIGBGdWxsIHJlbG9hZCByZXF1aXJlZC5gKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XG5cbmxldCBkZXZ0b29scztcclxubGV0IGJ1ZmZlciA9IFtdO1xyXG5sZXQgZGV2dG9vbHNOb3RJbnN0YWxsZWQgPSBmYWxzZTtcclxuZnVuY3Rpb24gZW1pdChldmVudCwgLi4uYXJncykge1xyXG4gICAgaWYgKGRldnRvb2xzKSB7XHJcbiAgICAgICAgZGV2dG9vbHMuZW1pdChldmVudCwgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghZGV2dG9vbHNOb3RJbnN0YWxsZWQpIHtcclxuICAgICAgICBidWZmZXIucHVzaCh7IGV2ZW50LCBhcmdzIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldERldnRvb2xzSG9vayhob29rLCB0YXJnZXQpIHtcclxuICAgIHZhciBfYSwgX2I7XHJcbiAgICBkZXZ0b29scyA9IGhvb2s7XHJcbiAgICBpZiAoZGV2dG9vbHMpIHtcclxuICAgICAgICBkZXZ0b29scy5lbmFibGVkID0gdHJ1ZTtcclxuICAgICAgICBidWZmZXIuZm9yRWFjaCgoeyBldmVudCwgYXJncyB9KSA9PiBkZXZ0b29scy5lbWl0KGV2ZW50LCAuLi5hcmdzKSk7XHJcbiAgICAgICAgYnVmZmVyID0gW107XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChcclxuICAgIC8vIGhhbmRsZSBsYXRlIGRldnRvb2xzIGluamVjdGlvbiAtIG9ubHkgZG8gdGhpcyBpZiB3ZSBhcmUgaW4gYW4gYWN0dWFsXHJcbiAgICAvLyBicm93c2VyIGVudmlyb25tZW50IHRvIGF2b2lkIHRoZSB0aW1lciBoYW5kbGUgc3RhbGxpbmcgdGVzdCBydW5uZXIgZXhpdFxyXG4gICAgLy8gKCM0ODE1KVxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xyXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAvLyBzb21lIGVudnMgbW9jayB3aW5kb3cgYnV0IG5vdCBmdWxseVxyXG4gICAgICAgIHdpbmRvdy5IVE1MRWxlbWVudCAmJlxyXG4gICAgICAgIC8vIGFsc28gZXhjbHVkZSBqc2RvbVxyXG4gICAgICAgICEoKF9iID0gKF9hID0gd2luZG93Lm5hdmlnYXRvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVzZXJBZ2VudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVzKCdqc2RvbScpKSkge1xyXG4gICAgICAgIGNvbnN0IHJlcGxheSA9ICh0YXJnZXQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXyA9XHJcbiAgICAgICAgICAgIHRhcmdldC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fIHx8IFtdKTtcclxuICAgICAgICByZXBsYXkucHVzaCgobmV3SG9vaykgPT4ge1xyXG4gICAgICAgICAgICBzZXREZXZ0b29sc0hvb2sobmV3SG9vaywgdGFyZ2V0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBjbGVhciBidWZmZXIgYWZ0ZXIgM3MgLSB0aGUgdXNlciBwcm9iYWJseSBkb2Vzbid0IGhhdmUgZGV2dG9vbHMgaW5zdGFsbGVkXHJcbiAgICAgICAgLy8gYXQgYWxsLCBhbmQga2VlcGluZyB0aGUgYnVmZmVyIHdpbGwgY2F1c2UgbWVtb3J5IGxlYWtzICgjNDczOClcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFkZXZ0b29scykge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX18gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZGV2dG9vbHNOb3RJbnN0YWxsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAzMDAwKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIG5vbi1icm93c2VyIGVudiwgYXNzdW1lIG5vdCBpbnN0YWxsZWRcclxuICAgICAgICBkZXZ0b29sc05vdEluc3RhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgYnVmZmVyID0gW107XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZGV2dG9vbHNJbml0QXBwKGFwcCwgdmVyc2lvbikge1xyXG4gICAgZW1pdChcImFwcDppbml0XCIgLyogQVBQX0lOSVQgKi8sIGFwcCwgdmVyc2lvbiwge1xyXG4gICAgICAgIEZyYWdtZW50LFxyXG4gICAgICAgIFRleHQsXHJcbiAgICAgICAgQ29tbWVudCxcclxuICAgICAgICBTdGF0aWNcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGRldnRvb2xzVW5tb3VudEFwcChhcHApIHtcclxuICAgIGVtaXQoXCJhcHA6dW5tb3VudFwiIC8qIEFQUF9VTk1PVU5UICovLCBhcHApO1xyXG59XHJcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50QWRkZWQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDphZGRlZFwiIC8qIENPTVBPTkVOVF9BRERFRCAqLyk7XHJcbmNvbnN0IGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZCA9IFxyXG4vKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzQ29tcG9uZW50SG9vayhcImNvbXBvbmVudDp1cGRhdGVkXCIgLyogQ09NUE9ORU5UX1VQREFURUQgKi8pO1xyXG5jb25zdCBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQgPSBcclxuLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc0NvbXBvbmVudEhvb2soXCJjb21wb25lbnQ6cmVtb3ZlZFwiIC8qIENPTVBPTkVOVF9SRU1PVkVEICovKTtcclxuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNDb21wb25lbnRIb29rKGhvb2spIHtcclxuICAgIHJldHVybiAoY29tcG9uZW50KSA9PiB7XHJcbiAgICAgICAgZW1pdChob29rLCBjb21wb25lbnQuYXBwQ29udGV4dC5hcHAsIGNvbXBvbmVudC51aWQsIGNvbXBvbmVudC5wYXJlbnQgPyBjb21wb25lbnQucGFyZW50LnVpZCA6IHVuZGVmaW5lZCwgY29tcG9uZW50KTtcclxuICAgIH07XHJcbn1cclxuY29uc3QgZGV2dG9vbHNQZXJmU3RhcnQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZURldnRvb2xzUGVyZm9ybWFuY2VIb29rKFwicGVyZjpzdGFydFwiIC8qIFBFUkZPUk1BTkNFX1NUQVJUICovKTtcclxuY29uc3QgZGV2dG9vbHNQZXJmRW5kID0gLyojX19QVVJFX18qLyBjcmVhdGVEZXZ0b29sc1BlcmZvcm1hbmNlSG9vayhcInBlcmY6ZW5kXCIgLyogUEVSRk9STUFOQ0VfRU5EICovKTtcclxuZnVuY3Rpb24gY3JlYXRlRGV2dG9vbHNQZXJmb3JtYW5jZUhvb2soaG9vaykge1xyXG4gICAgcmV0dXJuIChjb21wb25lbnQsIHR5cGUsIHRpbWUpID0+IHtcclxuICAgICAgICBlbWl0KGhvb2ssIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LnVpZCwgY29tcG9uZW50LCB0eXBlLCB0aW1lKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZGV2dG9vbHNDb21wb25lbnRFbWl0KGNvbXBvbmVudCwgZXZlbnQsIHBhcmFtcykge1xyXG4gICAgZW1pdChcImNvbXBvbmVudDplbWl0XCIgLyogQ09NUE9ORU5UX0VNSVQgKi8sIGNvbXBvbmVudC5hcHBDb250ZXh0LmFwcCwgY29tcG9uZW50LCBldmVudCwgcGFyYW1zKTtcclxufVxuXG5mdW5jdGlvbiBlbWl0JDEoaW5zdGFuY2UsIGV2ZW50LCAuLi5yYXdBcmdzKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IGluc3RhbmNlLnZub2RlLnByb3BzIHx8IEVNUFRZX09CSjtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBjb25zdCB7IGVtaXRzT3B0aW9ucywgcHJvcHNPcHRpb25zOiBbcHJvcHNPcHRpb25zXSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgaWYgKGVtaXRzT3B0aW9ucykge1xyXG4gICAgICAgICAgICBpZiAoIShldmVudCBpbiBlbWl0c09wdGlvbnMpICYmXHJcbiAgICAgICAgICAgICAgICAhKGZhbHNlICkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvcHNPcHRpb25zIHx8ICEodG9IYW5kbGVyS2V5KGV2ZW50KSBpbiBwcm9wc09wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGVtaXR0ZWQgZXZlbnQgXCIke2V2ZW50fVwiIGJ1dCBpdCBpcyBuZWl0aGVyIGRlY2xhcmVkIGluIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgdGhlIGVtaXRzIG9wdGlvbiBub3IgYXMgYW4gXCIke3RvSGFuZGxlcktleShldmVudCl9XCIgcHJvcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IGVtaXRzT3B0aW9uc1tldmVudF07XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih2YWxpZGF0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IHZhbGlkYXRvciguLi5yYXdBcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSW52YWxpZCBldmVudCBhcmd1bWVudHM6IGV2ZW50IHZhbGlkYXRpb24gZmFpbGVkIGZvciBldmVudCBcIiR7ZXZlbnR9XCIuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGFyZ3MgPSByYXdBcmdzO1xyXG4gICAgY29uc3QgaXNNb2RlbExpc3RlbmVyID0gZXZlbnQuc3RhcnRzV2l0aCgndXBkYXRlOicpO1xyXG4gICAgLy8gZm9yIHYtbW9kZWwgdXBkYXRlOnh4eCBldmVudHMsIGFwcGx5IG1vZGlmaWVycyBvbiBhcmdzXHJcbiAgICBjb25zdCBtb2RlbEFyZyA9IGlzTW9kZWxMaXN0ZW5lciAmJiBldmVudC5zbGljZSg3KTtcclxuICAgIGlmIChtb2RlbEFyZyAmJiBtb2RlbEFyZyBpbiBwcm9wcykge1xyXG4gICAgICAgIGNvbnN0IG1vZGlmaWVyc0tleSA9IGAke21vZGVsQXJnID09PSAnbW9kZWxWYWx1ZScgPyAnbW9kZWwnIDogbW9kZWxBcmd9TW9kaWZpZXJzYDtcclxuICAgICAgICBjb25zdCB7IG51bWJlciwgdHJpbSB9ID0gcHJvcHNbbW9kaWZpZXJzS2V5XSB8fCBFTVBUWV9PQko7XHJcbiAgICAgICAgaWYgKHRyaW0pIHtcclxuICAgICAgICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKGEgPT4gYS50cmltKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChudW1iZXIpIHtcclxuICAgICAgICAgICAgYXJncyA9IHJhd0FyZ3MubWFwKHRvTnVtYmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIGRldnRvb2xzQ29tcG9uZW50RW1pdChpbnN0YW5jZSwgZXZlbnQsIGFyZ3MpO1xyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHByb3BzW3RvSGFuZGxlcktleShsb3dlckNhc2VFdmVudCldKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYEV2ZW50IFwiJHtsb3dlckNhc2VFdmVudH1cIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBgICtcclxuICAgICAgICAgICAgICAgIGAke2Zvcm1hdENvbXBvbmVudE5hbWUoaW5zdGFuY2UsIGluc3RhbmNlLnR5cGUpfSBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXCIke2V2ZW50fVwiLiBgICtcclxuICAgICAgICAgICAgICAgIGBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBgICtcclxuICAgICAgICAgICAgICAgIGB2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gYCArXHJcbiAgICAgICAgICAgICAgICBgWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXCIke2h5cGhlbmF0ZShldmVudCl9XCIgaW5zdGVhZCBvZiBcIiR7ZXZlbnR9XCIuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IGhhbmRsZXJOYW1lO1xyXG4gICAgbGV0IGhhbmRsZXIgPSBwcm9wc1soaGFuZGxlck5hbWUgPSB0b0hhbmRsZXJLZXkoZXZlbnQpKV0gfHxcclxuICAgICAgICAvLyBhbHNvIHRyeSBjYW1lbENhc2UgZXZlbnQgaGFuZGxlciAoIzIyNDkpXHJcbiAgICAgICAgcHJvcHNbKGhhbmRsZXJOYW1lID0gdG9IYW5kbGVyS2V5KGNhbWVsaXplKGV2ZW50KSkpXTtcclxuICAgIC8vIGZvciB2LW1vZGVsIHVwZGF0ZTp4eHggZXZlbnRzLCBhbHNvIHRyaWdnZXIga2ViYWItY2FzZSBlcXVpdmFsZW50XHJcbiAgICAvLyBmb3IgcHJvcHMgcGFzc2VkIHZpYSBrZWJhYi1jYXNlXHJcbiAgICBpZiAoIWhhbmRsZXIgJiYgaXNNb2RlbExpc3RlbmVyKSB7XHJcbiAgICAgICAgaGFuZGxlciA9IHByb3BzWyhoYW5kbGVyTmFtZSA9IHRvSGFuZGxlcktleShoeXBoZW5hdGUoZXZlbnQpKSldO1xyXG4gICAgfVxyXG4gICAgaWYgKGhhbmRsZXIpIHtcclxuICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhoYW5kbGVyLCBpbnN0YW5jZSwgNiAvKiBDT01QT05FTlRfRVZFTlRfSEFORExFUiAqLywgYXJncyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBvbmNlSGFuZGxlciA9IHByb3BzW2hhbmRsZXJOYW1lICsgYE9uY2VgXTtcclxuICAgIGlmIChvbmNlSGFuZGxlcikge1xyXG4gICAgICAgIGlmICghaW5zdGFuY2UuZW1pdHRlZCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5lbWl0dGVkID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluc3RhbmNlLmVtaXR0ZWRbaGFuZGxlck5hbWVdKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2UuZW1pdHRlZFtoYW5kbGVyTmFtZV0gPSB0cnVlO1xyXG4gICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKG9uY2VIYW5kbGVyLCBpbnN0YW5jZSwgNiAvKiBDT01QT05FTlRfRVZFTlRfSEFORExFUiAqLywgYXJncyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplRW1pdHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xyXG4gICAgY29uc3QgY2FjaGUgPSBhcHBDb250ZXh0LmVtaXRzQ2FjaGU7XHJcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoY29tcCk7XHJcbiAgICBpZiAoY2FjaGVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmF3ID0gY29tcC5lbWl0cztcclxuICAgIGxldCBub3JtYWxpemVkID0ge307XHJcbiAgICAvLyBhcHBseSBtaXhpbi9leHRlbmRzIHByb3BzXHJcbiAgICBsZXQgaGFzRXh0ZW5kcyA9IGZhbHNlO1xyXG4gICAgaWYgKF9fVlVFX09QVElPTlNfQVBJX18gJiYgIWlzRnVuY3Rpb24oY29tcCkpIHtcclxuICAgICAgICBjb25zdCBleHRlbmRFbWl0cyA9IChyYXcpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZEZyb21FeHRlbmQgPSBub3JtYWxpemVFbWl0c09wdGlvbnMocmF3LCBhcHBDb250ZXh0LCB0cnVlKTtcclxuICAgICAgICAgICAgaWYgKG5vcm1hbGl6ZWRGcm9tRXh0ZW5kKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGV4dGVuZChub3JtYWxpemVkLCBub3JtYWxpemVkRnJvbUV4dGVuZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICghYXNNaXhpbiAmJiBhcHBDb250ZXh0Lm1peGlucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgYXBwQ29udGV4dC5taXhpbnMuZm9yRWFjaChleHRlbmRFbWl0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb21wLmV4dGVuZHMpIHtcclxuICAgICAgICAgICAgZXh0ZW5kRW1pdHMoY29tcC5leHRlbmRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXAubWl4aW5zKSB7XHJcbiAgICAgICAgICAgIGNvbXAubWl4aW5zLmZvckVhY2goZXh0ZW5kRW1pdHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghcmF3ICYmICFoYXNFeHRlbmRzKSB7XHJcbiAgICAgICAgY2FjaGUuc2V0KGNvbXAsIG51bGwpO1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xyXG4gICAgICAgIHJhdy5mb3JFYWNoKGtleSA9PiAobm9ybWFsaXplZFtrZXldID0gbnVsbCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZXh0ZW5kKG5vcm1hbGl6ZWQsIHJhdyk7XHJcbiAgICB9XHJcbiAgICBjYWNoZS5zZXQoY29tcCwgbm9ybWFsaXplZCk7XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZDtcclxufVxyXG4vLyBDaGVjayBpZiBhbiBpbmNvbWluZyBwcm9wIGtleSBpcyBhIGRlY2xhcmVkIGVtaXQgZXZlbnQgbGlzdGVuZXIuXHJcbi8vIGUuZy4gV2l0aCBgZW1pdHM6IHsgY2xpY2s6IG51bGwgfWAsIHByb3BzIG5hbWVkIGBvbkNsaWNrYCBhbmQgYG9uY2xpY2tgIGFyZVxyXG4vLyBib3RoIGNvbnNpZGVyZWQgbWF0Y2hlZCBsaXN0ZW5lcnMuXHJcbmZ1bmN0aW9uIGlzRW1pdExpc3RlbmVyKG9wdGlvbnMsIGtleSkge1xyXG4gICAgaWYgKCFvcHRpb25zIHx8ICFpc09uKGtleSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBrZXkgPSBrZXkuc2xpY2UoMikucmVwbGFjZSgvT25jZSQvLCAnJyk7XHJcbiAgICByZXR1cm4gKGhhc093bihvcHRpb25zLCBrZXlbMF0udG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgxKSkgfHxcclxuICAgICAgICBoYXNPd24ob3B0aW9ucywgaHlwaGVuYXRlKGtleSkpIHx8XHJcbiAgICAgICAgaGFzT3duKG9wdGlvbnMsIGtleSkpO1xyXG59XG5cbi8qKlxyXG4gKiBtYXJrIHRoZSBjdXJyZW50IHJlbmRlcmluZyBpbnN0YW5jZSBmb3IgYXNzZXQgcmVzb2x1dGlvbiAoZS5nLlxyXG4gKiByZXNvbHZlQ29tcG9uZW50LCByZXNvbHZlRGlyZWN0aXZlKSBkdXJpbmcgcmVuZGVyXHJcbiAqL1xyXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcclxubGV0IGN1cnJlbnRTY29wZUlkID0gbnVsbDtcclxuLyoqXHJcbiAqIE5vdGU6IHJlbmRlcmluZyBjYWxscyBtYXliZSBuZXN0ZWQuIFRoZSBmdW5jdGlvbiByZXR1cm5zIHRoZSBwYXJlbnQgcmVuZGVyaW5nXHJcbiAqIGluc3RhbmNlIGlmIHByZXNlbnQsIHdoaWNoIHNob3VsZCBiZSByZXN0b3JlZCBhZnRlciB0aGUgcmVuZGVyIGlzIGRvbmU6XHJcbiAqXHJcbiAqIGBgYGpzXHJcbiAqIGNvbnN0IHByZXYgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaSlcclxuICogLy8gLi4ucmVuZGVyXHJcbiAqIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2KVxyXG4gKiBgYGBcclxuICovXHJcbmZ1bmN0aW9uIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgcHJldiA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgY3VycmVudFNjb3BlSWQgPSAoaW5zdGFuY2UgJiYgaW5zdGFuY2UudHlwZS5fX3Njb3BlSWQpIHx8IG51bGw7XHJcbiAgICByZXR1cm4gcHJldjtcclxufVxyXG4vKipcclxuICogU2V0IHNjb3BlIGlkIHdoZW4gY3JlYXRpbmcgaG9pc3RlZCB2bm9kZXMuXHJcbiAqIEBwcml2YXRlIGNvbXBpbGVyIGhlbHBlclxyXG4gKi9cclxuZnVuY3Rpb24gcHVzaFNjb3BlSWQoaWQpIHtcclxuICAgIGN1cnJlbnRTY29wZUlkID0gaWQ7XHJcbn1cclxuLyoqXHJcbiAqIFRlY2huaWNhbGx5IHdlIG5vIGxvbmdlciBuZWVkIHRoaXMgYWZ0ZXIgMy4wLjggYnV0IHdlIG5lZWQgdG8ga2VlcCB0aGUgc2FtZVxyXG4gKiBBUEkgZm9yIGJhY2t3YXJkcyBjb21wYXQgdy8gY29kZSBnZW5lcmF0ZWQgYnkgY29tcGlsZXJzLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcG9wU2NvcGVJZCgpIHtcclxuICAgIGN1cnJlbnRTY29wZUlkID0gbnVsbDtcclxufVxyXG4vKipcclxuICogT25seSBmb3IgYmFja3dhcmRzIGNvbXBhdFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuY29uc3Qgd2l0aFNjb3BlSWQgPSAoX2lkKSA9PiB3aXRoQ3R4O1xyXG4vKipcclxuICogV3JhcCBhIHNsb3QgZnVuY3Rpb24gdG8gbWVtb2l6ZSBjdXJyZW50IHJlbmRlcmluZyBpbnN0YW5jZVxyXG4gKiBAcHJpdmF0ZSBjb21waWxlciBoZWxwZXJcclxuICovXHJcbmZ1bmN0aW9uIHdpdGhDdHgoZm4sIGN0eCA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSwgaXNOb25TY29wZWRTbG90IC8vIGZhbHNlIG9ubHlcclxuKSB7XHJcbiAgICBpZiAoIWN0eClcclxuICAgICAgICByZXR1cm4gZm47XHJcbiAgICAvLyBhbHJlYWR5IG5vcm1hbGl6ZWRcclxuICAgIGlmIChmbi5fbikge1xyXG4gICAgICAgIHJldHVybiBmbjtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlbmRlckZuV2l0aENvbnRleHQgPSAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIC8vIElmIGEgdXNlciBjYWxscyBhIGNvbXBpbGVkIHNsb3QgaW5zaWRlIGEgdGVtcGxhdGUgZXhwcmVzc2lvbiAoIzE3NDUpLCBpdFxyXG4gICAgICAgIC8vIGNhbiBtZXNzIHVwIGJsb2NrIHRyYWNraW5nLCBzbyBieSBkZWZhdWx0IHdlIGRpc2FibGUgYmxvY2sgdHJhY2tpbmcgYW5kXHJcbiAgICAgICAgLy8gZm9yY2UgYmFpbCBvdXQgd2hlbiBpbnZva2luZyBhIGNvbXBpbGVkIHNsb3QgKGluZGljYXRlZCBieSB0aGUgLl9kIGZsYWcpLlxyXG4gICAgICAgIC8vIFRoaXMgaXNuJ3QgbmVjZXNzYXJ5IGlmIHJlbmRlcmluZyBhIGNvbXBpbGVkIGA8c2xvdD5gLCBzbyB3ZSBmbGlwIHRoZVxyXG4gICAgICAgIC8vIC5fZCBmbGFnIG9mZiB3aGVuIGludm9raW5nIHRoZSB3cmFwcGVkIGZuIGluc2lkZSBgcmVuZGVyU2xvdGAuXHJcbiAgICAgICAgaWYgKHJlbmRlckZuV2l0aENvbnRleHQuX2QpIHtcclxuICAgICAgICAgICAgc2V0QmxvY2tUcmFja2luZygtMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHByZXZJbnN0YW5jZSA9IHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShjdHgpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGZuKC4uLmFyZ3MpO1xyXG4gICAgICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2SW5zdGFuY2UpO1xyXG4gICAgICAgIGlmIChyZW5kZXJGbldpdGhDb250ZXh0Ll9kKSB7XHJcbiAgICAgICAgICAgIHNldEJsb2NrVHJhY2tpbmcoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgIGRldnRvb2xzQ29tcG9uZW50VXBkYXRlZChjdHgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfTtcclxuICAgIC8vIG1hcmsgbm9ybWFsaXplZCB0byBhdm9pZCBkdXBsaWNhdGVkIHdyYXBwaW5nXHJcbiAgICByZW5kZXJGbldpdGhDb250ZXh0Ll9uID0gdHJ1ZTtcclxuICAgIC8vIG1hcmsgdGhpcyBhcyBjb21waWxlZCBieSBkZWZhdWx0XHJcbiAgICAvLyB0aGlzIGlzIHVzZWQgaW4gdm5vZGUudHMgLT4gbm9ybWFsaXplQ2hpbGRyZW4oKSB0byBzZXQgdGhlIHNsb3RcclxuICAgIC8vIHJlbmRlcmluZyBmbGFnLlxyXG4gICAgcmVuZGVyRm5XaXRoQ29udGV4dC5fYyA9IHRydWU7XHJcbiAgICAvLyBkaXNhYmxlIGJsb2NrIHRyYWNraW5nIGJ5IGRlZmF1bHRcclxuICAgIHJlbmRlckZuV2l0aENvbnRleHQuX2QgPSB0cnVlO1xyXG4gICAgcmV0dXJuIHJlbmRlckZuV2l0aENvbnRleHQ7XHJcbn1cblxuLyoqXHJcbiAqIGRldiBvbmx5IGZsYWcgdG8gdHJhY2sgd2hldGhlciAkYXR0cnMgd2FzIHVzZWQgZHVyaW5nIHJlbmRlci5cclxuICogSWYgJGF0dHJzIHdhcyB1c2VkIGR1cmluZyByZW5kZXIgdGhlbiB0aGUgd2FybmluZyBmb3IgZmFpbGVkIGF0dHJzXHJcbiAqIGZhbGx0aHJvdWdoIGNhbiBiZSBzdXBwcmVzc2VkLlxyXG4gKi9cclxubGV0IGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcclxuZnVuY3Rpb24gbWFya0F0dHJzQWNjZXNzZWQoKSB7XHJcbiAgICBhY2Nlc3NlZEF0dHJzID0gdHJ1ZTtcclxufVxyXG5mdW5jdGlvbiByZW5kZXJDb21wb25lbnRSb290KGluc3RhbmNlKSB7XHJcbiAgICBjb25zdCB7IHR5cGU6IENvbXBvbmVudCwgdm5vZGUsIHByb3h5LCB3aXRoUHJveHksIHByb3BzLCBwcm9wc09wdGlvbnM6IFtwcm9wc09wdGlvbnNdLCBzbG90cywgYXR0cnMsIGVtaXQsIHJlbmRlciwgcmVuZGVyQ2FjaGUsIGRhdGEsIHNldHVwU3RhdGUsIGN0eCwgaW5oZXJpdEF0dHJzIH0gPSBpbnN0YW5jZTtcclxuICAgIGxldCByZXN1bHQ7XHJcbiAgICBsZXQgZmFsbHRocm91Z2hBdHRycztcclxuICAgIGNvbnN0IHByZXYgPSBzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UoaW5zdGFuY2UpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGFjY2Vzc2VkQXR0cnMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgIC8vIHdpdGhQcm94eSBpcyBhIHByb3h5IHdpdGggYSBkaWZmZXJlbnQgYGhhc2AgdHJhcCBvbmx5IGZvclxyXG4gICAgICAgICAgICAvLyBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrLlxyXG4gICAgICAgICAgICBjb25zdCBwcm94eVRvVXNlID0gd2l0aFByb3h5IHx8IHByb3h5O1xyXG4gICAgICAgICAgICByZXN1bHQgPSBub3JtYWxpemVWTm9kZShyZW5kZXIuY2FsbChwcm94eVRvVXNlLCBwcm94eVRvVXNlLCByZW5kZXJDYWNoZSwgcHJvcHMsIHNldHVwU3RhdGUsIGRhdGEsIGN0eCkpO1xyXG4gICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gYXR0cnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsXHJcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlciA9IENvbXBvbmVudDtcclxuICAgICAgICAgICAgLy8gaW4gZGV2LCBtYXJrIGF0dHJzIGFjY2Vzc2VkIGlmIG9wdGlvbmFsIHByb3BzIChhdHRycyA9PT0gcHJvcHMpXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgYXR0cnMgPT09IHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJrQXR0cnNBY2Nlc3NlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5vcm1hbGl6ZVZOb2RlKHJlbmRlci5sZW5ndGggPiAxXHJcbiAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcywgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldCBhdHRycygpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXR0cnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIDogeyBhdHRycywgc2xvdHMsIGVtaXQgfSlcclxuICAgICAgICAgICAgICAgIDogcmVuZGVyKHByb3BzLCBudWxsIC8qIHdlIGtub3cgaXQgZG9lc24ndCBuZWVkIGl0ICovKSk7XHJcbiAgICAgICAgICAgIGZhbGx0aHJvdWdoQXR0cnMgPSBDb21wb25lbnQucHJvcHNcclxuICAgICAgICAgICAgICAgID8gYXR0cnNcclxuICAgICAgICAgICAgICAgIDogZ2V0RnVuY3Rpb25hbEZhbGx0aHJvdWdoKGF0dHJzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgYmxvY2tTdGFjay5sZW5ndGggPSAwO1xyXG4gICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDEgLyogUkVOREVSX0ZVTkNUSU9OICovKTtcclxuICAgICAgICByZXN1bHQgPSBjcmVhdGVWTm9kZShDb21tZW50KTtcclxuICAgIH1cclxuICAgIC8vIGF0dHIgbWVyZ2luZ1xyXG4gICAgLy8gaW4gZGV2IG1vZGUsIGNvbW1lbnRzIGFyZSBwcmVzZXJ2ZWQsIGFuZCBpdCdzIHBvc3NpYmxlIGZvciBhIHRlbXBsYXRlXHJcbiAgICAvLyB0byBoYXZlIGNvbW1lbnRzIGFsb25nIHNpZGUgdGhlIHJvb3QgZWxlbWVudCB3aGljaCBtYWtlcyBpdCBhIGZyYWdtZW50XHJcbiAgICBsZXQgcm9vdCA9IHJlc3VsdDtcclxuICAgIGxldCBzZXRSb290ID0gdW5kZWZpbmVkO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgIHJlc3VsdC5wYXRjaEZsYWcgPiAwICYmXHJcbiAgICAgICAgcmVzdWx0LnBhdGNoRmxhZyAmIDIwNDggLyogREVWX1JPT1RfRlJBR01FTlQgKi8pIHtcclxuICAgICAgICBbcm9vdCwgc2V0Um9vdF0gPSBnZXRDaGlsZFJvb3QocmVzdWx0KTtcclxuICAgIH1cclxuICAgIGlmIChmYWxsdGhyb3VnaEF0dHJzICYmIGluaGVyaXRBdHRycyAhPT0gZmFsc2UpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmFsbHRocm91Z2hBdHRycyk7XHJcbiAgICAgICAgY29uc3QgeyBzaGFwZUZsYWcgfSA9IHJvb3Q7XHJcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAoMSAvKiBFTEVNRU5UICovIHwgNiAvKiBDT01QT05FTlQgKi8pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcHNPcHRpb25zICYmIGtleXMuc29tZShpc01vZGVsTGlzdGVuZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSB2LW1vZGVsIGxpc3RlbmVyIChvblVwZGF0ZTp4eHgpIGhhcyBhIGNvcnJlc3BvbmRpbmcgZGVjbGFyZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBwcm9wLCBpdCBpbmRpY2F0ZXMgdGhpcyBjb21wb25lbnQgZXhwZWN0cyB0byBoYW5kbGUgdi1tb2RlbCBhbmRcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdCBzaG91bGQgbm90IGZhbGx0aHJvdWdoLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbGF0ZWQ6ICMxNTQzLCAjMTY0MywgIzE5ODlcclxuICAgICAgICAgICAgICAgICAgICBmYWxsdGhyb3VnaEF0dHJzID0gZmlsdGVyTW9kZWxMaXN0ZW5lcnMoZmFsbHRocm91Z2hBdHRycywgcHJvcHNPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJvb3QgPSBjbG9uZVZOb2RlKHJvb3QsIGZhbGx0aHJvdWdoQXR0cnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhYWNjZXNzZWRBdHRycyAmJiByb290LnR5cGUgIT09IENvbW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsbEF0dHJzID0gT2JqZWN0LmtleXMoYXR0cnMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnRBdHRycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXh0cmFBdHRycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhbGxBdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBhbGxBdHRyc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSB2LW1vZGVsIGhhbmRsZXJzIHdoZW4gdGhleSBmYWlsIHRvIGZhbGx0aHJvdWdoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNNb2RlbExpc3RlbmVyKGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBgb25gLCBsb3dlcmNhc2UgZmlyc3QgbGV0dGVyIHRvIHJlZmxlY3QgZXZlbnQgY2FzaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhY2N1cmF0ZWx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEF0dHJzLnB1c2goa2V5WzJdLnRvTG93ZXJDYXNlKCkgKyBrZXkuc2xpY2UoMykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYUF0dHJzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXh0cmFBdHRycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBFeHRyYW5lb3VzIG5vbi1wcm9wcyBhdHRyaWJ1dGVzIChgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7ZXh0cmFBdHRycy5qb2luKCcsICcpfSkgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50QXR0cnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRXh0cmFuZW91cyBub24tZW1pdHMgZXZlbnQgbGlzdGVuZXJzIChgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7ZXZlbnRBdHRycy5qb2luKCcsICcpfSkgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGB3ZXJlIHBhc3NlZCB0byBjb21wb25lbnQgYnV0IGNvdWxkIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGluaGVyaXRlZCBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGJlY2F1c2UgY29tcG9uZW50IHJlbmRlcnMgZnJhZ21lbnQgb3IgdGV4dCByb290IG5vZGVzLiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYElmIHRoZSBsaXN0ZW5lciBpcyBpbnRlbmRlZCB0byBiZSBhIGNvbXBvbmVudCBjdXN0b20gZXZlbnQgbGlzdGVuZXIgb25seSwgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBkZWNsYXJlIGl0IHVzaW5nIHRoZSBcImVtaXRzXCIgb3B0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gaW5oZXJpdCBkaXJlY3RpdmVzXHJcbiAgICBpZiAodm5vZGUuZGlycykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcclxuICAgICAgICAgICAgd2FybihgUnVudGltZSBkaXJlY3RpdmUgdXNlZCBvbiBjb21wb25lbnQgd2l0aCBub24tZWxlbWVudCByb290IG5vZGUuIGAgK1xyXG4gICAgICAgICAgICAgICAgYFRoZSBkaXJlY3RpdmVzIHdpbGwgbm90IGZ1bmN0aW9uIGFzIGludGVuZGVkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByb290LmRpcnMgPSByb290LmRpcnMgPyByb290LmRpcnMuY29uY2F0KHZub2RlLmRpcnMpIDogdm5vZGUuZGlycztcclxuICAgIH1cclxuICAgIC8vIGluaGVyaXQgdHJhbnNpdGlvbiBkYXRhXHJcbiAgICBpZiAodm5vZGUudHJhbnNpdGlvbikge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzRWxlbWVudFJvb3Qocm9vdCkpIHtcclxuICAgICAgICAgICAgd2FybihgQ29tcG9uZW50IGluc2lkZSA8VHJhbnNpdGlvbj4gcmVuZGVycyBub24tZWxlbWVudCByb290IG5vZGUgYCArXHJcbiAgICAgICAgICAgICAgICBgdGhhdCBjYW5ub3QgYmUgYW5pbWF0ZWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJvb3QudHJhbnNpdGlvbiA9IHZub2RlLnRyYW5zaXRpb247XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldFJvb3QpIHtcclxuICAgICAgICBzZXRSb290KHJvb3QpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmVzdWx0ID0gcm9vdDtcclxuICAgIH1cclxuICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZShwcmV2KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqIEluIGRldiBtb2RlLCB0ZW1wbGF0ZSByb290IGxldmVsIGNvbW1lbnRzIGFyZSByZW5kZXJlZCwgd2hpY2ggdHVybnMgdGhlXHJcbiAqIHRlbXBsYXRlIGludG8gYSBmcmFnbWVudCByb290LCBidXQgd2UgbmVlZCB0byBsb2NhdGUgdGhlIHNpbmdsZSBlbGVtZW50XHJcbiAqIHJvb3QgZm9yIGF0dHJzIGFuZCBzY29wZSBpZCBwcm9jZXNzaW5nLlxyXG4gKi9cclxuY29uc3QgZ2V0Q2hpbGRSb290ID0gKHZub2RlKSA9PiB7XHJcbiAgICBjb25zdCByYXdDaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xyXG4gICAgY29uc3QgZHluYW1pY0NoaWxkcmVuID0gdm5vZGUuZHluYW1pY0NoaWxkcmVuO1xyXG4gICAgY29uc3QgY2hpbGRSb290ID0gZmlsdGVyU2luZ2xlUm9vdChyYXdDaGlsZHJlbik7XHJcbiAgICBpZiAoIWNoaWxkUm9vdCkge1xyXG4gICAgICAgIHJldHVybiBbdm5vZGUsIHVuZGVmaW5lZF07XHJcbiAgICB9XHJcbiAgICBjb25zdCBpbmRleCA9IHJhd0NoaWxkcmVuLmluZGV4T2YoY2hpbGRSb290KTtcclxuICAgIGNvbnN0IGR5bmFtaWNJbmRleCA9IGR5bmFtaWNDaGlsZHJlbiA/IGR5bmFtaWNDaGlsZHJlbi5pbmRleE9mKGNoaWxkUm9vdCkgOiAtMTtcclxuICAgIGNvbnN0IHNldFJvb3QgPSAodXBkYXRlZFJvb3QpID0+IHtcclxuICAgICAgICByYXdDaGlsZHJlbltpbmRleF0gPSB1cGRhdGVkUm9vdDtcclxuICAgICAgICBpZiAoZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmIChkeW5hbWljSW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuW2R5bmFtaWNJbmRleF0gPSB1cGRhdGVkUm9vdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh1cGRhdGVkUm9vdC5wYXRjaEZsYWcgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5keW5hbWljQ2hpbGRyZW4gPSBbLi4uZHluYW1pY0NoaWxkcmVuLCB1cGRhdGVkUm9vdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFtub3JtYWxpemVWTm9kZShjaGlsZFJvb3QpLCBzZXRSb290XTtcclxufTtcclxuZnVuY3Rpb24gZmlsdGVyU2luZ2xlUm9vdChjaGlsZHJlbikge1xyXG4gICAgbGV0IHNpbmdsZVJvb3Q7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICBpZiAoaXNWTm9kZShjaGlsZCkpIHtcclxuICAgICAgICAgICAgLy8gaWdub3JlIHVzZXIgY29tbWVudFxyXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSAhPT0gQ29tbWVudCB8fCBjaGlsZC5jaGlsZHJlbiA9PT0gJ3YtaWYnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2luZ2xlUm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhcyBtb3JlIHRoYW4gMSBub24tY29tbWVudCBjaGlsZCwgcmV0dXJuIG5vd1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZVJvb3QgPSBjaGlsZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzaW5nbGVSb290O1xyXG59XHJcbmNvbnN0IGdldEZ1bmN0aW9uYWxGYWxsdGhyb3VnaCA9IChhdHRycykgPT4ge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2NsYXNzJyB8fCBrZXkgPT09ICdzdHlsZScgfHwgaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgIChyZXMgfHwgKHJlcyA9IHt9KSlba2V5XSA9IGF0dHJzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufTtcclxuY29uc3QgZmlsdGVyTW9kZWxMaXN0ZW5lcnMgPSAoYXR0cnMsIHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJzKSB7XHJcbiAgICAgICAgaWYgKCFpc01vZGVsTGlzdGVuZXIoa2V5KSB8fCAhKGtleS5zbGljZSg5KSBpbiBwcm9wcykpIHtcclxuICAgICAgICAgICAgcmVzW2tleV0gPSBhdHRyc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn07XHJcbmNvbnN0IGlzRWxlbWVudFJvb3QgPSAodm5vZGUpID0+IHtcclxuICAgIHJldHVybiAodm5vZGUuc2hhcGVGbGFnICYgKDYgLyogQ09NUE9ORU5UICovIHwgMSAvKiBFTEVNRU5UICovKSB8fFxyXG4gICAgICAgIHZub2RlLnR5cGUgPT09IENvbW1lbnQgLy8gcG90ZW50aWFsIHYtaWYgYnJhbmNoIHN3aXRjaFxyXG4gICAgKTtcclxufTtcclxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlQ29tcG9uZW50KHByZXZWTm9kZSwgbmV4dFZOb2RlLCBvcHRpbWl6ZWQpIHtcclxuICAgIGNvbnN0IHsgcHJvcHM6IHByZXZQcm9wcywgY2hpbGRyZW46IHByZXZDaGlsZHJlbiwgY29tcG9uZW50IH0gPSBwcmV2Vk5vZGU7XHJcbiAgICBjb25zdCB7IHByb3BzOiBuZXh0UHJvcHMsIGNoaWxkcmVuOiBuZXh0Q2hpbGRyZW4sIHBhdGNoRmxhZyB9ID0gbmV4dFZOb2RlO1xyXG4gICAgY29uc3QgZW1pdHMgPSBjb21wb25lbnQuZW1pdHNPcHRpb25zO1xyXG4gICAgLy8gUGFyZW50IGNvbXBvbmVudCdzIHJlbmRlciBmdW5jdGlvbiB3YXMgaG90LXVwZGF0ZWQuIFNpbmNlIHRoaXMgbWF5IGhhdmVcclxuICAgIC8vIGNhdXNlZCB0aGUgY2hpbGQgY29tcG9uZW50J3Mgc2xvdHMgY29udGVudCB0byBoYXZlIGNoYW5nZWQsIHdlIG5lZWQgdG9cclxuICAgIC8vIGZvcmNlIHRoZSBjaGlsZCB0byB1cGRhdGUgYXMgd2VsbC5cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgKHByZXZDaGlsZHJlbiB8fCBuZXh0Q2hpbGRyZW4pICYmIGlzSG1yVXBkYXRpbmcpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIGZvcmNlIGNoaWxkIHVwZGF0ZSBmb3IgcnVudGltZSBkaXJlY3RpdmUgb3IgdHJhbnNpdGlvbiBvbiBjb21wb25lbnQgdm5vZGUuXHJcbiAgICBpZiAobmV4dFZOb2RlLmRpcnMgfHwgbmV4dFZOb2RlLnRyYW5zaXRpb24pIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpbWl6ZWQgJiYgcGF0Y2hGbGFnID49IDApIHtcclxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgMTAyNCAvKiBEWU5BTUlDX1NMT1RTICovKSB7XHJcbiAgICAgICAgICAgIC8vIHNsb3QgY29udGVudCB0aGF0IHJlZmVyZW5jZXMgdmFsdWVzIHRoYXQgbWlnaHQgaGF2ZSBjaGFuZ2VkLFxyXG4gICAgICAgICAgICAvLyBlLmcuIGluIGEgdi1mb3JcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgJiAxNiAvKiBGVUxMX1BST1BTICovKSB7XHJcbiAgICAgICAgICAgIGlmICghcHJldlByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISFuZXh0UHJvcHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJlc2VuY2Ugb2YgdGhpcyBmbGFnIGluZGljYXRlcyBwcm9wcyBhcmUgYWx3YXlzIG5vbi1udWxsXHJcbiAgICAgICAgICAgIHJldHVybiBoYXNQcm9wc0NoYW5nZWQocHJldlByb3BzLCBuZXh0UHJvcHMsIGVtaXRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGF0Y2hGbGFnICYgOCAvKiBQUk9QUyAqLykge1xyXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljUHJvcHMgPSBuZXh0Vk5vZGUuZHluYW1pY1Byb3BzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGR5bmFtaWNQcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZHluYW1pY1Byb3BzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRQcm9wc1trZXldICE9PSBwcmV2UHJvcHNba2V5XSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICFpc0VtaXRMaXN0ZW5lcihlbWl0cywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gdGhpcyBwYXRoIGlzIG9ubHkgdGFrZW4gYnkgbWFudWFsbHkgd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zXHJcbiAgICAgICAgLy8gc28gcHJlc2VuY2Ugb2YgYW55IGNoaWxkcmVuIGxlYWRzIHRvIGEgZm9yY2VkIHVwZGF0ZVxyXG4gICAgICAgIGlmIChwcmV2Q2hpbGRyZW4gfHwgbmV4dENoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGlmICghbmV4dENoaWxkcmVuIHx8ICFuZXh0Q2hpbGRyZW4uJHN0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXZQcm9wcyA9PT0gbmV4dFByb3BzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFwcmV2UHJvcHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhbmV4dFByb3BzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW5leHRQcm9wcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGhhc1Byb3BzQ2hhbmdlZChwcmV2UHJvcHMsIG5leHRQcm9wcywgZW1pdHNPcHRpb25zKSB7XHJcbiAgICBjb25zdCBuZXh0S2V5cyA9IE9iamVjdC5rZXlzKG5leHRQcm9wcyk7XHJcbiAgICBpZiAobmV4dEtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcmV2UHJvcHMpLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0S2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IG5leHRLZXlzW2ldO1xyXG4gICAgICAgIGlmIChuZXh0UHJvcHNba2V5XSAhPT0gcHJldlByb3BzW2tleV0gJiZcclxuICAgICAgICAgICAgIWlzRW1pdExpc3RlbmVyKGVtaXRzT3B0aW9ucywga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gdXBkYXRlSE9DSG9zdEVsKHsgdm5vZGUsIHBhcmVudCB9LCBlbCAvLyBIb3N0Tm9kZVxyXG4pIHtcclxuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XHJcbiAgICAgICAgKHZub2RlID0gcGFyZW50LnZub2RlKS5lbCA9IGVsO1xyXG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgaXNTdXNwZW5zZSA9ICh0eXBlKSA9PiB0eXBlLl9faXNTdXNwZW5zZTtcclxuLy8gU3VzcGVuc2UgZXhwb3NlcyBhIGNvbXBvbmVudC1saWtlIEFQSSwgYW5kIGlzIHRyZWF0ZWQgbGlrZSBhIGNvbXBvbmVudFxyXG4vLyBpbiB0aGUgY29tcGlsZXIsIGJ1dCBpbnRlcm5hbGx5IGl0J3MgYSBzcGVjaWFsIGJ1aWx0LWluIHR5cGUgdGhhdCBob29rc1xyXG4vLyBkaXJlY3RseSBpbnRvIHRoZSByZW5kZXJlci5cclxuY29uc3QgU3VzcGVuc2VJbXBsID0ge1xyXG4gICAgbmFtZTogJ1N1c3BlbnNlJyxcclxuICAgIC8vIEluIG9yZGVyIHRvIG1ha2UgU3VzcGVuc2UgdHJlZS1zaGFrYWJsZSwgd2UgbmVlZCB0byBhdm9pZCBpbXBvcnRpbmcgaXRcclxuICAgIC8vIGRpcmVjdGx5IGluIHRoZSByZW5kZXJlci4gVGhlIHJlbmRlcmVyIGNoZWNrcyBmb3IgdGhlIF9faXNTdXNwZW5zZSBmbGFnXHJcbiAgICAvLyBvbiBhIHZub2RlJ3MgdHlwZSBhbmQgY2FsbHMgdGhlIGBwcm9jZXNzYCBtZXRob2QsIHBhc3NpbmcgaW4gcmVuZGVyZXJcclxuICAgIC8vIGludGVybmFscy5cclxuICAgIF9faXNTdXNwZW5zZTogdHJ1ZSxcclxuICAgIHByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBcclxuICAgIC8vIHBsYXRmb3JtLXNwZWNpZmljIGltcGwgcGFzc2VkIGZyb20gcmVuZGVyZXJcclxuICAgIHJlbmRlcmVySW50ZXJuYWxzKSB7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgbW91bnRTdXNwZW5zZShuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGF0Y2hTdXNwZW5zZShuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBoeWRyYXRlOiBoeWRyYXRlU3VzcGVuc2UsXHJcbiAgICBjcmVhdGU6IGNyZWF0ZVN1c3BlbnNlQm91bmRhcnksXHJcbiAgICBub3JtYWxpemU6IG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW5cclxufTtcclxuLy8gRm9yY2UtY2FzdGVkIHB1YmxpYyB0eXBpbmcgZm9yIGggYW5kIFRTWCBwcm9wcyBpbmZlcmVuY2VcclxuY29uc3QgU3VzcGVuc2UgPSAoU3VzcGVuc2VJbXBsICk7XHJcbmZ1bmN0aW9uIHRyaWdnZXJFdmVudCh2bm9kZSwgbmFtZSkge1xyXG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lciA9IHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzW25hbWVdO1xyXG4gICAgaWYgKGlzRnVuY3Rpb24oZXZlbnRMaXN0ZW5lcikpIHtcclxuICAgICAgICBldmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbW91bnRTdXNwZW5zZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMpIHtcclxuICAgIGNvbnN0IHsgcDogcGF0Y2gsIG86IHsgY3JlYXRlRWxlbWVudCB9IH0gPSByZW5kZXJlckludGVybmFscztcclxuICAgIGNvbnN0IGhpZGRlbkNvbnRhaW5lciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSAodm5vZGUuc3VzcGVuc2UgPSBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnRTdXNwZW5zZSwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGhpZGRlbkNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzKSk7XHJcbiAgICAvLyBzdGFydCBtb3VudGluZyB0aGUgY29udGVudCBzdWJ0cmVlIGluIGFuIG9mZi1kb20gY29udGFpbmVyXHJcbiAgICBwYXRjaChudWxsLCAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IHZub2RlLnNzQ29udGVudCksIGhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcyk7XHJcbiAgICAvLyBub3cgY2hlY2sgaWYgd2UgaGF2ZSBlbmNvdW50ZXJlZCBhbnkgYXN5bmMgZGVwc1xyXG4gICAgaWYgKHN1c3BlbnNlLmRlcHMgPiAwKSB7XHJcbiAgICAgICAgLy8gaGFzIGFzeW5jXHJcbiAgICAgICAgLy8gaW52b2tlIEBmYWxsYmFjayBldmVudFxyXG4gICAgICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgJ29uUGVuZGluZycpO1xyXG4gICAgICAgIHRyaWdnZXJFdmVudCh2bm9kZSwgJ29uRmFsbGJhY2snKTtcclxuICAgICAgICAvLyBtb3VudCB0aGUgZmFsbGJhY2sgdHJlZVxyXG4gICAgICAgIHBhdGNoKG51bGwsIHZub2RlLnNzRmFsbGJhY2ssIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XHJcbiAgICAgICAgaXNTVkcsIHNsb3RTY29wZUlkcyk7XHJcbiAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCB2bm9kZS5zc0ZhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIFN1c3BlbnNlIGhhcyBubyBhc3luYyBkZXBzLiBKdXN0IHJlc29sdmUuXHJcbiAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHBhdGNoU3VzcGVuc2UobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHsgcDogcGF0Y2gsIHVtOiB1bm1vdW50LCBvOiB7IGNyZWF0ZUVsZW1lbnQgfSB9KSB7XHJcbiAgICBjb25zdCBzdXNwZW5zZSA9IChuMi5zdXNwZW5zZSA9IG4xLnN1c3BlbnNlKTtcclxuICAgIHN1c3BlbnNlLnZub2RlID0gbjI7XHJcbiAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgY29uc3QgbmV3QnJhbmNoID0gbjIuc3NDb250ZW50O1xyXG4gICAgY29uc3QgbmV3RmFsbGJhY2sgPSBuMi5zc0ZhbGxiYWNrO1xyXG4gICAgY29uc3QgeyBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIGlzSW5GYWxsYmFjaywgaXNIeWRyYXRpbmcgfSA9IHN1c3BlbnNlO1xyXG4gICAgaWYgKHBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xyXG4gICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBwZW5kaW5nQnJhbmNoKSkge1xyXG4gICAgICAgICAgICAvLyBzYW1lIHJvb3QgdHlwZSBidXQgY29udGVudCBtYXkgaGF2ZSBjaGFuZ2VkLlxyXG4gICAgICAgICAgICBwYXRjaChwZW5kaW5nQnJhbmNoLCBuZXdCcmFuY2gsIHN1c3BlbnNlLmhpZGRlbkNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLmRlcHMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzSW5GYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBzZXRBY3RpdmVCcmFuY2goc3VzcGVuc2UsIG5ld0ZhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9nZ2xlZCBiZWZvcmUgcGVuZGluZyB0cmVlIGlzIHJlc29sdmVkXHJcbiAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCsrO1xyXG4gICAgICAgICAgICBpZiAoaXNIeWRyYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRvZ2dsZWQgYmVmb3JlIGh5ZHJhdGlvbiBpcyBmaW5pc2hlZCwgdGhlIGN1cnJlbnQgRE9NIHRyZWUgaXNcclxuICAgICAgICAgICAgICAgIC8vIG5vIGxvbmdlciB2YWxpZC4gc2V0IGl0IGFzIHRoZSBhY3RpdmUgYnJhbmNoIHNvIGl0IHdpbGwgYmUgdW5tb3VudGVkXHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHJlc29sdmVkXHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5pc0h5ZHJhdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UuYWN0aXZlQnJhbmNoID0gcGVuZGluZ0JyYW5jaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQocGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaW5jcmVtZW50IHBlbmRpbmcgSUQuIHRoaXMgaXMgdXNlZCB0byBpbnZhbGlkYXRlIGFzeW5jIGNhbGxiYWNrc1xyXG4gICAgICAgICAgICAvLyByZXNldCBzdXNwZW5zZSBzdGF0ZVxyXG4gICAgICAgICAgICBzdXNwZW5zZS5kZXBzID0gMDtcclxuICAgICAgICAgICAgLy8gZGlzY2FyZCBlZmZlY3RzIGZyb20gcGVuZGluZyBicmFuY2hcclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAvLyBkaXNjYXJkIHByZXZpb3VzIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgaWYgKGlzSW5GYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBpbiBmYWxsYmFjayBzdGF0ZVxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdGYWxsYmFjaywgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgbnVsbCwgLy8gZmFsbGJhY2sgdHJlZSB3aWxsIG5vdCBoYXZlIHN1c3BlbnNlIGNvbnRleHRcclxuICAgICAgICAgICAgICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgbmV3RmFsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0b2dnbGVkIFwiYmFja1wiIHRvIGN1cnJlbnQgYWN0aXZlIGJyYW5jaFxyXG4gICAgICAgICAgICAgICAgcGF0Y2goYWN0aXZlQnJhbmNoLCBuZXdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgLy8gZm9yY2UgcmVzb2x2ZVxyXG4gICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHN3aXRjaGVkIHRvIGEgM3JkIGJyYW5jaFxyXG4gICAgICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3VzcGVuc2UuZGVwcyA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3VzcGVuc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUJyYW5jaCAmJiBpc1NhbWVWTm9kZVR5cGUobmV3QnJhbmNoLCBhY3RpdmVCcmFuY2gpKSB7XHJcbiAgICAgICAgICAgIC8vIHJvb3QgZGlkIG5vdCBjaGFuZ2UsIGp1c3Qgbm9ybWFsIHBhdGNoXHJcbiAgICAgICAgICAgIHBhdGNoKGFjdGl2ZUJyYW5jaCwgbmV3QnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBuZXdCcmFuY2gpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcm9vdCBub2RlIHRvZ2dsZWRcclxuICAgICAgICAgICAgLy8gaW52b2tlIEBwZW5kaW5nIGV2ZW50XHJcbiAgICAgICAgICAgIHRyaWdnZXJFdmVudChuMiwgJ29uUGVuZGluZycpO1xyXG4gICAgICAgICAgICAvLyBtb3VudCBwZW5kaW5nIGJyYW5jaCBpbiBvZmYtZG9tIGNvbnRhaW5lclxyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoID0gbmV3QnJhbmNoO1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5wZW5kaW5nSWQrKztcclxuICAgICAgICAgICAgcGF0Y2gobnVsbCwgbmV3QnJhbmNoLCBzdXNwZW5zZS5oaWRkZW5Db250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgc3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5kZXBzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIGluY29taW5nIGJyYW5jaCBoYXMgbm8gYXN5bmMgZGVwcywgcmVzb2x2ZSBub3cuXHJcbiAgICAgICAgICAgICAgICBzdXNwZW5zZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRpbWVvdXQsIHBlbmRpbmdJZCB9ID0gc3VzcGVuc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdJZCA9PT0gcGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRpbWVvdXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5mYWxsYmFjayhuZXdGYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxubGV0IGhhc1dhcm5lZCA9IGZhbHNlO1xyXG5mdW5jdGlvbiBjcmVhdGVTdXNwZW5zZUJvdW5kYXJ5KHZub2RlLCBwYXJlbnQsIHBhcmVudENvbXBvbmVudCwgY29udGFpbmVyLCBoaWRkZW5Db250YWluZXIsIGFuY2hvciwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgaXNIeWRyYXRpbmcgPSBmYWxzZSkge1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFmYWxzZSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgaGFzV2FybmVkID0gdHJ1ZTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlIGBjb25zb2xlLmluZm9gIGNhbm5vdCBiZSBudWxsIGVycm9yXHJcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oYDxTdXNwZW5zZT4gaXMgYW4gZXhwZXJpbWVudGFsIGZlYXR1cmUgYW5kIGl0cyBBUEkgd2lsbCBsaWtlbHkgY2hhbmdlLmApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBwOiBwYXRjaCwgbTogbW92ZSwgdW06IHVubW91bnQsIG46IG5leHQsIG86IHsgcGFyZW50Tm9kZSwgcmVtb3ZlIH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xyXG4gICAgY29uc3QgdGltZW91dCA9IHRvTnVtYmVyKHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnRpbWVvdXQpO1xyXG4gICAgY29uc3Qgc3VzcGVuc2UgPSB7XHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgcGFyZW50LFxyXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcclxuICAgICAgICBpc1NWRyxcclxuICAgICAgICBjb250YWluZXIsXHJcbiAgICAgICAgaGlkZGVuQ29udGFpbmVyLFxyXG4gICAgICAgIGFuY2hvcixcclxuICAgICAgICBkZXBzOiAwLFxyXG4gICAgICAgIHBlbmRpbmdJZDogMCxcclxuICAgICAgICB0aW1lb3V0OiB0eXBlb2YgdGltZW91dCA9PT0gJ251bWJlcicgPyB0aW1lb3V0IDogLTEsXHJcbiAgICAgICAgYWN0aXZlQnJhbmNoOiBudWxsLFxyXG4gICAgICAgIHBlbmRpbmdCcmFuY2g6IG51bGwsXHJcbiAgICAgICAgaXNJbkZhbGxiYWNrOiB0cnVlLFxyXG4gICAgICAgIGlzSHlkcmF0aW5nLFxyXG4gICAgICAgIGlzVW5tb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBlZmZlY3RzOiBbXSxcclxuICAgICAgICByZXNvbHZlKHJlc3VtZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVzdW1lICYmICFzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzdXNwZW5zZS5yZXNvbHZlKCkgaXMgY2FsbGVkIHdpdGhvdXQgYSBwZW5kaW5nIGJyYW5jaC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5zZS5pc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgc3VzcGVuc2UucmVzb2x2ZSgpIGlzIGNhbGxlZCBvbiBhbiBhbHJlYWR5IHVubW91bnRlZCBzdXNwZW5zZSBib3VuZGFyeS5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB7IHZub2RlLCBhY3RpdmVCcmFuY2gsIHBlbmRpbmdCcmFuY2gsIHBlbmRpbmdJZCwgZWZmZWN0cywgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICBpZiAoc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmlzSHlkcmF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIXJlc3VtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGFjdGl2ZUJyYW5jaCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdCcmFuY2gudHJhbnNpdGlvbi5tb2RlID09PSAnb3V0LWluJztcclxuICAgICAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlQnJhbmNoLnRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdJZCA9PT0gc3VzcGVuc2UucGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlKHBlbmRpbmdCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIEVOVEVSICovKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGlzIGluaXRpYWwgYW5jaG9yIG9uIG1vdW50XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBhbmNob3IgfSA9IHN1c3BlbnNlO1xyXG4gICAgICAgICAgICAgICAgLy8gdW5tb3VudCBjdXJyZW50IGFjdGl2ZSB0cmVlXHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQnJhbmNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZhbGxiYWNrIHRyZWUgd2FzIG1vdW50ZWQsIGl0IG1heSBoYXZlIGJlZW4gbW92ZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBhcyBwYXJ0IG9mIGEgcGFyZW50IHN1c3BlbnNlLiBnZXQgdGhlIGxhdGVzdCBhbmNob3IgZm9yIGluc2VydGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcclxuICAgICAgICAgICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBzdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRlbGF5RW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGNvbnRlbnQgZnJvbSBvZmYtZG9tIGNvbnRhaW5lciB0byBhY3R1YWwgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZShwZW5kaW5nQnJhbmNoLCBjb250YWluZXIsIGFuY2hvciwgMCAvKiBFTlRFUiAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBwZW5kaW5nQnJhbmNoKTtcclxuICAgICAgICAgICAgc3VzcGVuc2UucGVuZGluZ0JyYW5jaCA9IG51bGw7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmlzSW5GYWxsYmFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAvLyBmbHVzaCBidWZmZXJlZCBlZmZlY3RzXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgcGVuZGluZyBwYXJlbnQgc3VzcGVuc2VcclxuICAgICAgICAgICAgbGV0IHBhcmVudCA9IHN1c3BlbnNlLnBhcmVudDtcclxuICAgICAgICAgICAgbGV0IGhhc1VucmVzb2x2ZWRBbmNlc3RvciA9IGZhbHNlO1xyXG4gICAgICAgICAgICB3aGlsZSAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50LnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBhIHBlbmRpbmcgcGFyZW50IHN1c3BlbnNlLCBtZXJnZSBidWZmZXJlZCBwb3N0IGpvYnNcclxuICAgICAgICAgICAgICAgICAgICAvLyBpbnRvIHRoYXQgcGFyZW50XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LmVmZmVjdHMucHVzaCguLi5lZmZlY3RzKTtcclxuICAgICAgICAgICAgICAgICAgICBoYXNVbnJlc29sdmVkQW5jZXN0b3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBubyBwZW5kaW5nIHBhcmVudCBzdXNwZW5zZSwgZmx1c2ggYWxsIGpvYnNcclxuICAgICAgICAgICAgaWYgKCFoYXNVbnJlc29sdmVkQW5jZXN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZWZmZWN0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBpbnZva2UgQHJlc29sdmUgZXZlbnRcclxuICAgICAgICAgICAgdHJpZ2dlckV2ZW50KHZub2RlLCAnb25SZXNvbHZlJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWxsYmFjayhmYWxsYmFja1ZOb2RlKSB7XHJcbiAgICAgICAgICAgIGlmICghc3VzcGVuc2UucGVuZGluZ0JyYW5jaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdm5vZGUsIGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBjb250YWluZXIsIGlzU1ZHIH0gPSBzdXNwZW5zZTtcclxuICAgICAgICAgICAgLy8gaW52b2tlIEBmYWxsYmFjayBldmVudFxyXG4gICAgICAgICAgICB0cmlnZ2VyRXZlbnQodm5vZGUsICdvbkZhbGxiYWNrJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IG5leHQoYWN0aXZlQnJhbmNoKTtcclxuICAgICAgICAgICAgY29uc3QgbW91bnRGYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghc3VzcGVuc2UuaXNJbkZhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gbW91bnQgdGhlIGZhbGxiYWNrIHRyZWVcclxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIGZhbGxiYWNrVk5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIG51bGwsIC8vIGZhbGxiYWNrIHRyZWUgd2lsbCBub3QgaGF2ZSBzdXNwZW5zZSBjb250ZXh0XHJcbiAgICAgICAgICAgICAgICBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgc2V0QWN0aXZlQnJhbmNoKHN1c3BlbnNlLCBmYWxsYmFja1ZOb2RlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgZGVsYXlFbnRlciA9IGZhbGxiYWNrVk5vZGUudHJhbnNpdGlvbiAmJiBmYWxsYmFja1ZOb2RlLnRyYW5zaXRpb24ubW9kZSA9PT0gJ291dC1pbic7XHJcbiAgICAgICAgICAgIGlmIChkZWxheUVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVCcmFuY2gudHJhbnNpdGlvbi5hZnRlckxlYXZlID0gbW91bnRGYWxsYmFjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdXNwZW5zZS5pc0luRmFsbGJhY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyB1bm1vdW50IGN1cnJlbnQgYWN0aXZlIGJyYW5jaFxyXG4gICAgICAgICAgICB1bm1vdW50KGFjdGl2ZUJyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBudWxsLCAvLyBubyBzdXNwZW5zZSBzbyB1bm1vdW50IGhvb2tzIGZpcmUgbm93XHJcbiAgICAgICAgICAgIHRydWUgLy8gc2hvdWxkUmVtb3ZlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmICghZGVsYXlFbnRlcikge1xyXG4gICAgICAgICAgICAgICAgbW91bnRGYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb3ZlKGNvbnRhaW5lciwgYW5jaG9yLCB0eXBlKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCAmJlxyXG4gICAgICAgICAgICAgICAgbW92ZShzdXNwZW5zZS5hY3RpdmVCcmFuY2gsIGNvbnRhaW5lciwgYW5jaG9yLCB0eXBlKTtcclxuICAgICAgICAgICAgc3VzcGVuc2UuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmV4dCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCAmJiBuZXh0KHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWdpc3RlckRlcChpbnN0YW5jZSwgc2V0dXBSZW5kZXJFZmZlY3QpIHtcclxuICAgICAgICAgICAgY29uc3QgaXNJblBlbmRpbmdTdXNwZW5zZSA9ICEhc3VzcGVuc2UucGVuZGluZ0JyYW5jaDtcclxuICAgICAgICAgICAgaWYgKGlzSW5QZW5kaW5nU3VzcGVuc2UpIHtcclxuICAgICAgICAgICAgICAgIHN1c3BlbnNlLmRlcHMrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBoeWRyYXRlZEVsID0gaW5zdGFuY2Uudm5vZGUuZWw7XHJcbiAgICAgICAgICAgIGluc3RhbmNlXHJcbiAgICAgICAgICAgICAgICAuYXN5bmNEZXAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVyciwgaW5zdGFuY2UsIDAgLyogU0VUVVBfRlVOQ1RJT04gKi8pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oYXN5bmNTZXR1cFJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXRyeSB3aGVuIHRoZSBzZXR1cCgpIHByb21pc2UgcmVzb2x2ZXMuXHJcbiAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGhhdmUgYmVlbiB1bm1vdW50ZWQgYmVmb3JlIHJlc29sdmUuXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UuaXNVbm1vdW50ZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnBlbmRpbmdJZCAhPT0gaW5zdGFuY2Uuc3VzcGVuc2VJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHJldHJ5IGZyb20gdGhpcyBjb21wb25lbnRcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyB2bm9kZSB9ID0gaW5zdGFuY2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGhhbmRsZVNldHVwUmVzdWx0KGluc3RhbmNlLCBhc3luY1NldHVwUmVzdWx0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaHlkcmF0ZWRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZub2RlIG1heSBoYXZlIGJlZW4gcmVwbGFjZWQgaWYgYW4gdXBkYXRlIGhhcHBlbmVkIGJlZm9yZSB0aGVcclxuICAgICAgICAgICAgICAgICAgICAvLyBhc3luYyBkZXAgaXMgcmVzb2x2ZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuZWwgPSBoeWRyYXRlZEVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxhY2Vob2xkZXIgPSAhaHlkcmF0ZWRFbCAmJiBpbnN0YW5jZS5zdWJUcmVlLmVsO1xyXG4gICAgICAgICAgICAgICAgc2V0dXBSZW5kZXJFZmZlY3QoaW5zdGFuY2UsIHZub2RlLCBcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBvbmVudCBtYXkgaGF2ZSBiZWVuIG1vdmVkIGJlZm9yZSByZXNvbHZlLlxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBub3QgYSBoeWRyYXRpb24sIGluc3RhbmNlLnN1YlRyZWUgd2lsbCBiZSB0aGUgY29tbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gcGxhY2Vob2xkZXIuXHJcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlKGh5ZHJhdGVkRWwgfHwgaW5zdGFuY2Uuc3ViVHJlZS5lbCksIFxyXG4gICAgICAgICAgICAgICAgLy8gYW5jaG9yIHdpbGwgbm90IGJlIHVzZWQgaWYgdGhpcyBpcyBoeWRyYXRpb24sIHNvIG9ubHkgbmVlZCB0b1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc2lkZXIgdGhlIGNvbW1lbnQgcGxhY2Vob2xkZXIgY2FzZS5cclxuICAgICAgICAgICAgICAgIGh5ZHJhdGVkRWwgPyBudWxsIDogbmV4dChpbnN0YW5jZS5zdWJUcmVlKSwgc3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlaG9sZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKHBsYWNlaG9sZGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVwZGF0ZUhPQ0hvc3RFbChpbnN0YW5jZSwgdm5vZGUuZWwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBvbmx5IGRlY3JlYXNlIGRlcHMgY291bnQgaWYgc3VzcGVuc2UgaXMgbm90IGFscmVhZHkgcmVzb2x2ZWRcclxuICAgICAgICAgICAgICAgIGlmIChpc0luUGVuZGluZ1N1c3BlbnNlICYmIC0tc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSkge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5pc1VubW91bnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChzdXNwZW5zZS5hY3RpdmVCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UuYWN0aXZlQnJhbmNoLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2gpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBzdXNwZW5zZTtcclxufVxyXG5mdW5jdGlvbiBoeWRyYXRlU3VzcGVuc2Uobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgcmVuZGVyZXJJbnRlcm5hbHMsIGh5ZHJhdGVOb2RlKSB7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxuICAgIGNvbnN0IHN1c3BlbnNlID0gKHZub2RlLnN1c3BlbnNlID0gY3JlYXRlU3VzcGVuc2VCb3VuZGFyeSh2bm9kZSwgcGFyZW50U3VzcGVuc2UsIHBhcmVudENvbXBvbmVudCwgbm9kZS5wYXJlbnROb2RlLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgbnVsbCwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCByZW5kZXJlckludGVybmFscywgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pKTtcclxuICAgIC8vIHRoZXJlIGFyZSB0d28gcG9zc2libGUgc2NlbmFyaW9zIGZvciBzZXJ2ZXItcmVuZGVyZWQgc3VzcGVuc2U6XHJcbiAgICAvLyAtIHN1Y2Nlc3M6IHNzciBjb250ZW50IHNob3VsZCBiZSBmdWxseSByZXNvbHZlZFxyXG4gICAgLy8gLSBmYWlsdXJlOiBzc3IgY29udGVudCBzaG91bGQgYmUgdGhlIGZhbGxiYWNrIGJyYW5jaC5cclxuICAgIC8vIGhvd2V2ZXIsIG9uIHRoZSBjbGllbnQgd2UgZG9uJ3QgcmVhbGx5IGtub3cgaWYgaXQgaGFzIGZhaWxlZCBvciBub3RcclxuICAgIC8vIGF0dGVtcHQgdG8gaHlkcmF0ZSB0aGUgRE9NIGFzc3VtaW5nIGl0IGhhcyBzdWNjZWVkZWQsIGJ1dCB3ZSBzdGlsbFxyXG4gICAgLy8gbmVlZCB0byBjb25zdHJ1Y3QgYSBzdXNwZW5zZSBib3VuZGFyeSBmaXJzdFxyXG4gICAgY29uc3QgcmVzdWx0ID0gaHlkcmF0ZU5vZGUobm9kZSwgKHN1c3BlbnNlLnBlbmRpbmdCcmFuY2ggPSB2bm9kZS5zc0NvbnRlbnQpLCBwYXJlbnRDb21wb25lbnQsIHN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICBpZiAoc3VzcGVuc2UuZGVwcyA9PT0gMCkge1xyXG4gICAgICAgIHN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN1c3BlbnNlQ2hpbGRyZW4odm5vZGUpIHtcclxuICAgIGNvbnN0IHsgc2hhcGVGbGFnLCBjaGlsZHJlbiB9ID0gdm5vZGU7XHJcbiAgICBjb25zdCBpc1Nsb3RDaGlsZHJlbiA9IHNoYXBlRmxhZyAmIDMyIC8qIFNMT1RTX0NISUxEUkVOICovO1xyXG4gICAgdm5vZGUuc3NDb250ZW50ID0gbm9ybWFsaXplU3VzcGVuc2VTbG90KGlzU2xvdENoaWxkcmVuID8gY2hpbGRyZW4uZGVmYXVsdCA6IGNoaWxkcmVuKTtcclxuICAgIHZub2RlLnNzRmFsbGJhY2sgPSBpc1Nsb3RDaGlsZHJlblxyXG4gICAgICAgID8gbm9ybWFsaXplU3VzcGVuc2VTbG90KGNoaWxkcmVuLmZhbGxiYWNrKVxyXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplU3VzcGVuc2VTbG90KHMpIHtcclxuICAgIGxldCBibG9jaztcclxuICAgIGlmIChpc0Z1bmN0aW9uKHMpKSB7XHJcbiAgICAgICAgY29uc3QgdHJhY2tCbG9jayA9IGlzQmxvY2tUcmVlRW5hYmxlZCAmJiBzLl9jO1xyXG4gICAgICAgIGlmICh0cmFja0Jsb2NrKSB7XHJcbiAgICAgICAgICAgIC8vIGRpc2FibGVUcmFja2luZzogZmFsc2VcclxuICAgICAgICAgICAgLy8gYWxsb3cgYmxvY2sgdHJhY2tpbmcgZm9yIGNvbXBpbGVkIHNsb3RzXHJcbiAgICAgICAgICAgIC8vIChzZWUgLi9jb21wb25lbnRSZW5kZXJDb250ZXh0LnRzKVxyXG4gICAgICAgICAgICBzLl9kID0gZmFsc2U7XHJcbiAgICAgICAgICAgIG9wZW5CbG9jaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzID0gcygpO1xyXG4gICAgICAgIGlmICh0cmFja0Jsb2NrKSB7XHJcbiAgICAgICAgICAgIHMuX2QgPSB0cnVlO1xyXG4gICAgICAgICAgICBibG9jayA9IGN1cnJlbnRCbG9jaztcclxuICAgICAgICAgICAgY2xvc2VCbG9jaygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpc0FycmF5KHMpKSB7XHJcbiAgICAgICAgY29uc3Qgc2luZ2xlQ2hpbGQgPSBmaWx0ZXJTaW5nbGVSb290KHMpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXNpbmdsZUNoaWxkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYDxTdXNwZW5zZT4gc2xvdHMgZXhwZWN0IGEgc2luZ2xlIHJvb3Qgbm9kZS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcyA9IHNpbmdsZUNoaWxkO1xyXG4gICAgfVxyXG4gICAgcyA9IG5vcm1hbGl6ZVZOb2RlKHMpO1xyXG4gICAgaWYgKGJsb2NrICYmICFzLmR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgIHMuZHluYW1pY0NoaWxkcmVuID0gYmxvY2suZmlsdGVyKGMgPT4gYyAhPT0gcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcztcclxufVxyXG5mdW5jdGlvbiBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZShmbiwgc3VzcGVuc2UpIHtcclxuICAgIGlmIChzdXNwZW5zZSAmJiBzdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoZm4pKSB7XHJcbiAgICAgICAgICAgIHN1c3BlbnNlLmVmZmVjdHMucHVzaCguLi5mbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzdXNwZW5zZS5lZmZlY3RzLnB1c2goZm4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHF1ZXVlUG9zdEZsdXNoQ2IoZm4pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldEFjdGl2ZUJyYW5jaChzdXNwZW5zZSwgYnJhbmNoKSB7XHJcbiAgICBzdXNwZW5zZS5hY3RpdmVCcmFuY2ggPSBicmFuY2g7XHJcbiAgICBjb25zdCB7IHZub2RlLCBwYXJlbnRDb21wb25lbnQgfSA9IHN1c3BlbnNlO1xyXG4gICAgY29uc3QgZWwgPSAodm5vZGUuZWwgPSBicmFuY2guZWwpO1xyXG4gICAgLy8gaW4gY2FzZSBzdXNwZW5zZSBpcyB0aGUgcm9vdCBub2RlIG9mIGEgY29tcG9uZW50LFxyXG4gICAgLy8gcmVjdXJzaXZlbHkgdXBkYXRlIHRoZSBIT0MgZWxcclxuICAgIGlmIChwYXJlbnRDb21wb25lbnQgJiYgcGFyZW50Q29tcG9uZW50LnN1YlRyZWUgPT09IHZub2RlKSB7XHJcbiAgICAgICAgcGFyZW50Q29tcG9uZW50LnZub2RlLmVsID0gZWw7XHJcbiAgICAgICAgdXBkYXRlSE9DSG9zdEVsKHBhcmVudENvbXBvbmVudCwgZWwpO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIHByb3ZpZGUoa2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKCFjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHByb3ZpZGUoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGxldCBwcm92aWRlcyA9IGN1cnJlbnRJbnN0YW5jZS5wcm92aWRlcztcclxuICAgICAgICAvLyBieSBkZWZhdWx0IGFuIGluc3RhbmNlIGluaGVyaXRzIGl0cyBwYXJlbnQncyBwcm92aWRlcyBvYmplY3RcclxuICAgICAgICAvLyBidXQgd2hlbiBpdCBuZWVkcyB0byBwcm92aWRlIHZhbHVlcyBvZiBpdHMgb3duLCBpdCBjcmVhdGVzIGl0c1xyXG4gICAgICAgIC8vIG93biBwcm92aWRlcyBvYmplY3QgdXNpbmcgcGFyZW50IHByb3ZpZGVzIG9iamVjdCBhcyBwcm90b3R5cGUuXHJcbiAgICAgICAgLy8gdGhpcyB3YXkgaW4gYGluamVjdGAgd2UgY2FuIHNpbXBseSBsb29rIHVwIGluamVjdGlvbnMgZnJvbSBkaXJlY3RcclxuICAgICAgICAvLyBwYXJlbnQgYW5kIGxldCB0aGUgcHJvdG90eXBlIGNoYWluIGRvIHRoZSB3b3JrLlxyXG4gICAgICAgIGNvbnN0IHBhcmVudFByb3ZpZGVzID0gY3VycmVudEluc3RhbmNlLnBhcmVudCAmJiBjdXJyZW50SW5zdGFuY2UucGFyZW50LnByb3ZpZGVzO1xyXG4gICAgICAgIGlmIChwYXJlbnRQcm92aWRlcyA9PT0gcHJvdmlkZXMpIHtcclxuICAgICAgICAgICAgcHJvdmlkZXMgPSBjdXJyZW50SW5zdGFuY2UucHJvdmlkZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFByb3ZpZGVzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVFMgZG9lc24ndCBhbGxvdyBzeW1ib2wgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgIHByb3ZpZGVzW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbmplY3Qoa2V5LCBkZWZhdWx0VmFsdWUsIHRyZWF0RGVmYXVsdEFzRmFjdG9yeSA9IGZhbHNlKSB7XHJcbiAgICAvLyBmYWxsYmFjayB0byBgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlYCBzbyB0aGF0IHRoaXMgY2FuIGJlIGNhbGxlZCBpblxyXG4gICAgLy8gYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2UgfHwgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgLy8gIzI0MDBcclxuICAgICAgICAvLyB0byBzdXBwb3J0IGBhcHAudXNlYCBwbHVnaW5zLFxyXG4gICAgICAgIC8vIGZhbGxiYWNrIHRvIGFwcENvbnRleHQncyBgcHJvdmlkZXNgIGlmIHRoZSBpbnN0YW5jZSBpcyBhdCByb290XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXMgPSBpbnN0YW5jZS5wYXJlbnQgPT0gbnVsbFxyXG4gICAgICAgICAgICA/IGluc3RhbmNlLnZub2RlLmFwcENvbnRleHQgJiYgaW5zdGFuY2Uudm5vZGUuYXBwQ29udGV4dC5wcm92aWRlc1xyXG4gICAgICAgICAgICA6IGluc3RhbmNlLnBhcmVudC5wcm92aWRlcztcclxuICAgICAgICBpZiAocHJvdmlkZXMgJiYga2V5IGluIHByb3ZpZGVzKSB7XHJcbiAgICAgICAgICAgIC8vIFRTIGRvZXNuJ3QgYWxsb3cgc3ltYm9sIGFzIGluZGV4IHR5cGVcclxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmVhdERlZmF1bHRBc0ZhY3RvcnkgJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpXHJcbiAgICAgICAgICAgICAgICA/IGRlZmF1bHRWYWx1ZS5jYWxsKGluc3RhbmNlLnByb3h5KVxyXG4gICAgICAgICAgICAgICAgOiBkZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBpbmplY3Rpb24gXCIke1N0cmluZyhrZXkpfVwiIG5vdCBmb3VuZC5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICB3YXJuKGBpbmplY3QoKSBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBzZXR1cCgpIG9yIGZ1bmN0aW9uYWwgY29tcG9uZW50cy5gKTtcclxuICAgIH1cclxufVxuXG4vLyBTaW1wbGUgZWZmZWN0LlxyXG5mdW5jdGlvbiB3YXRjaEVmZmVjdChlZmZlY3QsIG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBkb1dhdGNoKGVmZmVjdCwgbnVsbCwgb3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gd2F0Y2hQb3N0RWZmZWN0KGVmZmVjdCwgb3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGRvV2F0Y2goZWZmZWN0LCBudWxsLCAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgPyBPYmplY3QuYXNzaWduKG9wdGlvbnMgfHwge30sIHsgZmx1c2g6ICdwb3N0JyB9KVxyXG4gICAgICAgIDogeyBmbHVzaDogJ3Bvc3QnIH0pKTtcclxufVxyXG5mdW5jdGlvbiB3YXRjaFN5bmNFZmZlY3QoZWZmZWN0LCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gZG9XYXRjaChlZmZlY3QsIG51bGwsICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICA/IE9iamVjdC5hc3NpZ24ob3B0aW9ucyB8fCB7fSwgeyBmbHVzaDogJ3N5bmMnIH0pXHJcbiAgICAgICAgOiB7IGZsdXNoOiAnc3luYycgfSkpO1xyXG59XHJcbi8vIGluaXRpYWwgdmFsdWUgZm9yIHdhdGNoZXJzIHRvIHRyaWdnZXIgb24gdW5kZWZpbmVkIGluaXRpYWwgdmFsdWVzXHJcbmNvbnN0IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA9IHt9O1xyXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiB3YXRjaChzb3VyY2UsIGNiLCBvcHRpb25zKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc0Z1bmN0aW9uKGNiKSkge1xyXG4gICAgICAgIHdhcm4oYFxcYHdhdGNoKGZuLCBvcHRpb25zPylcXGAgc2lnbmF0dXJlIGhhcyBiZWVuIG1vdmVkIHRvIGEgc2VwYXJhdGUgQVBJLiBgICtcclxuICAgICAgICAgICAgYFVzZSBcXGB3YXRjaEVmZmVjdChmbiwgb3B0aW9ucz8pXFxgIGluc3RlYWQuIFxcYHdhdGNoXFxgIG5vdyBvbmx5IGAgK1xyXG4gICAgICAgICAgICBgc3VwcG9ydHMgXFxgd2F0Y2goc291cmNlLCBjYiwgb3B0aW9ucz8pIHNpZ25hdHVyZS5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkb1dhdGNoKHNvdXJjZSwgY2IsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIGRvV2F0Y2goc291cmNlLCBjYiwgeyBpbW1lZGlhdGUsIGRlZXAsIGZsdXNoLCBvblRyYWNrLCBvblRyaWdnZXIgfSA9IEVNUFRZX09CSikge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhY2IpIHtcclxuICAgICAgICBpZiAoaW1tZWRpYXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgd2Fybihgd2F0Y2goKSBcImltbWVkaWF0ZVwiIG9wdGlvbiBpcyBvbmx5IHJlc3BlY3RlZCB3aGVuIHVzaW5nIHRoZSBgICtcclxuICAgICAgICAgICAgICAgIGB3YXRjaChzb3VyY2UsIGNhbGxiYWNrLCBvcHRpb25zPykgc2lnbmF0dXJlLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVlcCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYHdhdGNoKCkgXCJkZWVwXCIgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgdGhlIGAgK1xyXG4gICAgICAgICAgICAgICAgYHdhdGNoKHNvdXJjZSwgY2FsbGJhY2ssIG9wdGlvbnM/KSBzaWduYXR1cmUuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgd2FybkludmFsaWRTb3VyY2UgPSAocykgPT4ge1xyXG4gICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggc291cmNlOiBgLCBzLCBgQSB3YXRjaCBzb3VyY2UgY2FuIG9ubHkgYmUgYSBnZXR0ZXIvZWZmZWN0IGZ1bmN0aW9uLCBhIHJlZiwgYCArXHJcbiAgICAgICAgICAgIGBhIHJlYWN0aXZlIG9iamVjdCwgb3IgYW4gYXJyYXkgb2YgdGhlc2UgdHlwZXMuYCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50SW5zdGFuY2U7XHJcbiAgICBsZXQgZ2V0dGVyO1xyXG4gICAgbGV0IGZvcmNlVHJpZ2dlciA9IGZhbHNlO1xyXG4gICAgbGV0IGlzTXVsdGlTb3VyY2UgPSBmYWxzZTtcclxuICAgIGlmIChpc1JlZihzb3VyY2UpKSB7XHJcbiAgICAgICAgZ2V0dGVyID0gKCkgPT4gc291cmNlLnZhbHVlO1xyXG4gICAgICAgIGZvcmNlVHJpZ2dlciA9IGlzU2hhbGxvdyQxKHNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1JlYWN0aXZlKHNvdXJjZSkpIHtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2U7XHJcbiAgICAgICAgZGVlcCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcclxuICAgICAgICBpc011bHRpU291cmNlID0gdHJ1ZTtcclxuICAgICAgICBmb3JjZVRyaWdnZXIgPSBzb3VyY2Uuc29tZShpc1JlYWN0aXZlKTtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiBzb3VyY2UubWFwKHMgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNSZWYocykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzLnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUmVhY3RpdmUocykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmF2ZXJzZShzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbFdpdGhFcnJvckhhbmRsaW5nKHMsIGluc3RhbmNlLCAyIC8qIFdBVENIX0dFVFRFUiAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uocyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oc291cmNlKSkge1xyXG4gICAgICAgIGlmIChjYikge1xyXG4gICAgICAgICAgICAvLyBnZXR0ZXIgd2l0aCBjYlxyXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc291cmNlLCBpbnN0YW5jZSwgMiAvKiBXQVRDSF9HRVRURVIgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbm8gY2IgLT4gc2ltcGxlIGVmZmVjdFxyXG4gICAgICAgICAgICBnZXR0ZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaXNVbm1vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhzb3VyY2UsIGluc3RhbmNlLCAzIC8qIFdBVENIX0NBTExCQUNLICovLCBbb25DbGVhbnVwXSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZ2V0dGVyID0gTk9PUDtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybkludmFsaWRTb3VyY2Uoc291cmNlKTtcclxuICAgIH1cclxuICAgIGlmIChjYiAmJiBkZWVwKSB7XHJcbiAgICAgICAgY29uc3QgYmFzZUdldHRlciA9IGdldHRlcjtcclxuICAgICAgICBnZXR0ZXIgPSAoKSA9PiB0cmF2ZXJzZShiYXNlR2V0dGVyKCkpO1xyXG4gICAgfVxyXG4gICAgbGV0IGNsZWFudXA7XHJcbiAgICBsZXQgb25DbGVhbnVwID0gKGZuKSA9PiB7XHJcbiAgICAgICAgY2xlYW51cCA9IGVmZmVjdC5vblN0b3AgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoRXJyb3JIYW5kbGluZyhmbiwgaW5zdGFuY2UsIDQgLyogV0FUQ0hfQ0xFQU5VUCAqLyk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICAvLyBpbiBTU1IgdGhlcmUgaXMgbm8gbmVlZCB0byBzZXR1cCBhbiBhY3R1YWwgZWZmZWN0LCBhbmQgaXQgc2hvdWxkIGJlIG5vb3BcclxuICAgIC8vIHVubGVzcyBpdCdzIGVhZ2VyXHJcbiAgICBpZiAoaXNJblNTUkNvbXBvbmVudFNldHVwKSB7XHJcbiAgICAgICAgLy8gd2Ugd2lsbCBhbHNvIG5vdCBjYWxsIHRoZSBpbnZhbGlkYXRlIGNhbGxiYWNrICgrIHJ1bm5lciBpcyBub3Qgc2V0IHVwKVxyXG4gICAgICAgIG9uQ2xlYW51cCA9IE5PT1A7XHJcbiAgICAgICAgaWYgKCFjYikge1xyXG4gICAgICAgICAgICBnZXR0ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGNiLCBpbnN0YW5jZSwgMyAvKiBXQVRDSF9DQUxMQkFDSyAqLywgW1xyXG4gICAgICAgICAgICAgICAgZ2V0dGVyKCksXHJcbiAgICAgICAgICAgICAgICBpc011bHRpU291cmNlID8gW10gOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBvbkNsZWFudXBcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBOT09QO1xyXG4gICAgfVxyXG4gICAgbGV0IG9sZFZhbHVlID0gaXNNdWx0aVNvdXJjZSA/IFtdIDogSU5JVElBTF9XQVRDSEVSX1ZBTFVFO1xyXG4gICAgY29uc3Qgam9iID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICghZWZmZWN0LmFjdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjYikge1xyXG4gICAgICAgICAgICAvLyB3YXRjaChzb3VyY2UsIGNiKVxyXG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGVmZmVjdC5ydW4oKTtcclxuICAgICAgICAgICAgaWYgKGRlZXAgfHxcclxuICAgICAgICAgICAgICAgIGZvcmNlVHJpZ2dlciB8fFxyXG4gICAgICAgICAgICAgICAgKGlzTXVsdGlTb3VyY2VcclxuICAgICAgICAgICAgICAgICAgICA/IG5ld1ZhbHVlLnNvbWUoKHYsIGkpID0+IGhhc0NoYW5nZWQodiwgb2xkVmFsdWVbaV0pKVxyXG4gICAgICAgICAgICAgICAgICAgIDogaGFzQ2hhbmdlZChuZXdWYWx1ZSwgb2xkVmFsdWUpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGZhbHNlICApKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjbGVhbnVwIGJlZm9yZSBydW5uaW5nIGNiIGFnYWluXHJcbiAgICAgICAgICAgICAgICBpZiAoY2xlYW51cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGNiLCBpbnN0YW5jZSwgMyAvKiBXQVRDSF9DQUxMQkFDSyAqLywgW1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhc3MgdW5kZWZpbmVkIGFzIHRoZSBvbGQgdmFsdWUgd2hlbiBpdCdzIGNoYW5nZWQgZm9yIHRoZSBmaXJzdCB0aW1lXHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPT09IElOSVRJQUxfV0FUQ0hFUl9WQUxVRSA/IHVuZGVmaW5lZCA6IG9sZFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xlYW51cFxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB3YXRjaEVmZmVjdFxyXG4gICAgICAgICAgICBlZmZlY3QucnVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGltcG9ydGFudDogbWFyayB0aGUgam9iIGFzIGEgd2F0Y2hlciBjYWxsYmFjayBzbyB0aGF0IHNjaGVkdWxlciBrbm93c1xyXG4gICAgLy8gaXQgaXMgYWxsb3dlZCB0byBzZWxmLXRyaWdnZXIgKCMxNzI3KVxyXG4gICAgam9iLmFsbG93UmVjdXJzZSA9ICEhY2I7XHJcbiAgICBsZXQgc2NoZWR1bGVyO1xyXG4gICAgaWYgKGZsdXNoID09PSAnc3luYycpIHtcclxuICAgICAgICBzY2hlZHVsZXIgPSBqb2I7IC8vIHRoZSBzY2hlZHVsZXIgZnVuY3Rpb24gZ2V0cyBjYWxsZWQgZGlyZWN0bHlcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGZsdXNoID09PSAncG9zdCcpIHtcclxuICAgICAgICBzY2hlZHVsZXIgPSAoKSA9PiBxdWV1ZVBvc3RSZW5kZXJFZmZlY3Qoam9iLCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5zdXNwZW5zZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBkZWZhdWx0OiAncHJlJ1xyXG4gICAgICAgIHNjaGVkdWxlciA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZSB8fCBpbnN0YW5jZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUHJlRmx1c2hDYihqb2IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gd2l0aCAncHJlJyBvcHRpb24sIHRoZSBmaXJzdCBjYWxsIG11c3QgaGFwcGVuIGJlZm9yZVxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIHNvIGl0IGlzIGNhbGxlZCBzeW5jaHJvbm91c2x5LlxyXG4gICAgICAgICAgICAgICAgam9iKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGdldHRlciwgc2NoZWR1bGVyKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBlZmZlY3Qub25UcmFjayA9IG9uVHJhY2s7XHJcbiAgICAgICAgZWZmZWN0Lm9uVHJpZ2dlciA9IG9uVHJpZ2dlcjtcclxuICAgIH1cclxuICAgIC8vIGluaXRpYWwgcnVuXHJcbiAgICBpZiAoY2IpIHtcclxuICAgICAgICBpZiAoaW1tZWRpYXRlKSB7XHJcbiAgICAgICAgICAgIGpvYigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2xkVmFsdWUgPSBlZmZlY3QucnVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZmx1c2ggPT09ICdwb3N0Jykge1xyXG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChlZmZlY3QucnVuLmJpbmQoZWZmZWN0KSwgaW5zdGFuY2UgJiYgaW5zdGFuY2Uuc3VzcGVuc2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZWZmZWN0LnJ1bigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBlZmZlY3Quc3RvcCgpO1xyXG4gICAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5zY29wZSkge1xyXG4gICAgICAgICAgICByZW1vdmUoaW5zdGFuY2Uuc2NvcGUuZWZmZWN0cywgZWZmZWN0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHRoaXMuJHdhdGNoXHJcbmZ1bmN0aW9uIGluc3RhbmNlV2F0Y2goc291cmNlLCB2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgY29uc3QgcHVibGljVGhpcyA9IHRoaXMucHJveHk7XHJcbiAgICBjb25zdCBnZXR0ZXIgPSBpc1N0cmluZyhzb3VyY2UpXHJcbiAgICAgICAgPyBzb3VyY2UuaW5jbHVkZXMoJy4nKVxyXG4gICAgICAgICAgICA/IGNyZWF0ZVBhdGhHZXR0ZXIocHVibGljVGhpcywgc291cmNlKVxyXG4gICAgICAgICAgICA6ICgpID0+IHB1YmxpY1RoaXNbc291cmNlXVxyXG4gICAgICAgIDogc291cmNlLmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcyk7XHJcbiAgICBsZXQgY2I7XHJcbiAgICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICBjYiA9IHZhbHVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2IgPSB2YWx1ZS5oYW5kbGVyO1xyXG4gICAgICAgIG9wdGlvbnMgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGN1ciA9IGN1cnJlbnRJbnN0YW5jZTtcclxuICAgIHNldEN1cnJlbnRJbnN0YW5jZSh0aGlzKTtcclxuICAgIGNvbnN0IHJlcyA9IGRvV2F0Y2goZ2V0dGVyLCBjYi5iaW5kKHB1YmxpY1RoaXMpLCBvcHRpb25zKTtcclxuICAgIGlmIChjdXIpIHtcclxuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3VyKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVBhdGhHZXR0ZXIoY3R4LCBwYXRoKSB7XHJcbiAgICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGN1ciA9IGN0eDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aCAmJiBjdXI7IGkrKykge1xyXG4gICAgICAgICAgICBjdXIgPSBjdXJbc2VnbWVudHNbaV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY3VyO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmF2ZXJzZSh2YWx1ZSwgc2Vlbikge1xyXG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWVbXCJfX3Zfc2tpcFwiIC8qIFNLSVAgKi9dKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgc2VlbiA9IHNlZW4gfHwgbmV3IFNldCgpO1xyXG4gICAgaWYgKHNlZW4uaGFzKHZhbHVlKSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIHNlZW4uYWRkKHZhbHVlKTtcclxuICAgIGlmIChpc1JlZih2YWx1ZSkpIHtcclxuICAgICAgICB0cmF2ZXJzZSh2YWx1ZS52YWx1ZSwgc2Vlbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWVbaV0sIHNlZW4pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSB8fCBpc01hcCh2YWx1ZSkpIHtcclxuICAgICAgICB2YWx1ZS5mb3JFYWNoKCh2KSA9PiB7XHJcbiAgICAgICAgICAgIHRyYXZlcnNlKHYsIHNlZW4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cmF2ZXJzZSh2YWx1ZVtrZXldLCBzZWVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cblxuZnVuY3Rpb24gdXNlVHJhbnNpdGlvblN0YXRlKCkge1xyXG4gICAgY29uc3Qgc3RhdGUgPSB7XHJcbiAgICAgICAgaXNNb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBpc0xlYXZpbmc6IGZhbHNlLFxyXG4gICAgICAgIGlzVW5tb3VudGluZzogZmFsc2UsXHJcbiAgICAgICAgbGVhdmluZ1ZOb2RlczogbmV3IE1hcCgpXHJcbiAgICB9O1xyXG4gICAgb25Nb3VudGVkKCgpID0+IHtcclxuICAgICAgICBzdGF0ZS5pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICBvbkJlZm9yZVVubW91bnQoKCkgPT4ge1xyXG4gICAgICAgIHN0YXRlLmlzVW5tb3VudGluZyA9IHRydWU7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzdGF0ZTtcclxufVxyXG5jb25zdCBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvciA9IFtGdW5jdGlvbiwgQXJyYXldO1xyXG5jb25zdCBCYXNlVHJhbnNpdGlvbkltcGwgPSB7XHJcbiAgICBuYW1lOiBgQmFzZVRyYW5zaXRpb25gLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBtb2RlOiBTdHJpbmcsXHJcbiAgICAgICAgYXBwZWFyOiBCb29sZWFuLFxyXG4gICAgICAgIHBlcnNpc3RlZDogQm9vbGVhbixcclxuICAgICAgICAvLyBlbnRlclxyXG4gICAgICAgIG9uQmVmb3JlRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uRW50ZXI6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uQWZ0ZXJFbnRlcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25FbnRlckNhbmNlbGxlZDogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgLy8gbGVhdmVcclxuICAgICAgICBvbkJlZm9yZUxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkxlYXZlOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFmdGVyTGVhdmU6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIG9uTGVhdmVDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yLFxyXG4gICAgICAgIC8vIGFwcGVhclxyXG4gICAgICAgIG9uQmVmb3JlQXBwZWFyOiBUcmFuc2l0aW9uSG9va1ZhbGlkYXRvcixcclxuICAgICAgICBvbkFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BZnRlckFwcGVhcjogVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IsXHJcbiAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQ6IFRyYW5zaXRpb25Ib29rVmFsaWRhdG9yXHJcbiAgICB9LFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcclxuICAgICAgICBsZXQgcHJldlRyYW5zaXRpb25LZXk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBzbG90cy5kZWZhdWx0ICYmIGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCksIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgd2FybignPHRyYW5zaXRpb24+IGNhbiBvbmx5IGJlIHVzZWQgb24gYSBzaW5nbGUgZWxlbWVudCBvciBjb21wb25lbnQuIFVzZSAnICtcclxuICAgICAgICAgICAgICAgICAgICAnPHRyYW5zaXRpb24tZ3JvdXA+IGZvciBsaXN0cy4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0aGVyZSdzIG5vIG5lZWQgdG8gdHJhY2sgcmVhY3Rpdml0eSBmb3IgdGhlc2UgcHJvcHMgc28gdXNlIHRoZSByYXdcclxuICAgICAgICAgICAgLy8gcHJvcHMgZm9yIGEgYml0IGJldHRlciBwZXJmXHJcbiAgICAgICAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCB7IG1vZGUgfSA9IHJhd1Byb3BzO1xyXG4gICAgICAgICAgICAvLyBjaGVjayBtb2RlXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIG1vZGUgJiZcclxuICAgICAgICAgICAgICAgIG1vZGUgIT09ICdpbi1vdXQnICYmIG1vZGUgIT09ICdvdXQtaW4nICYmIG1vZGUgIT09ICdkZWZhdWx0Jykge1xyXG4gICAgICAgICAgICAgICAgd2FybihgaW52YWxpZCA8dHJhbnNpdGlvbj4gbW9kZTogJHttb2RlfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQgY2hpbGRyZW4gaGFzIGEgZ3VhcmFudGVlZCBsZW5ndGggb2YgMS5cclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzTGVhdmluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGluIHRoZSBjYXNlIG9mIDx0cmFuc2l0aW9uPjxrZWVwLWFsaXZlLz48L3RyYW5zaXRpb24+LCB3ZSBuZWVkIHRvXHJcbiAgICAgICAgICAgIC8vIGNvbXBhcmUgdGhlIHR5cGUgb2YgdGhlIGtlcHQtYWxpdmUgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgIGNvbnN0IGlubmVyQ2hpbGQgPSBnZXRLZWVwQWxpdmVDaGlsZChjaGlsZCk7XHJcbiAgICAgICAgICAgIGlmICghaW5uZXJDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVtcHR5UGxhY2Vob2xkZXIoY2hpbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGVudGVySG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGlubmVyQ2hpbGQsIHJhd1Byb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoaW5uZXJDaGlsZCwgZW50ZXJIb29rcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9sZENoaWxkID0gaW5zdGFuY2Uuc3ViVHJlZTtcclxuICAgICAgICAgICAgY29uc3Qgb2xkSW5uZXJDaGlsZCA9IG9sZENoaWxkICYmIGdldEtlZXBBbGl2ZUNoaWxkKG9sZENoaWxkKTtcclxuICAgICAgICAgICAgbGV0IHRyYW5zaXRpb25LZXlDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgZ2V0VHJhbnNpdGlvbktleSB9ID0gaW5uZXJDaGlsZC50eXBlO1xyXG4gICAgICAgICAgICBpZiAoZ2V0VHJhbnNpdGlvbktleSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gZ2V0VHJhbnNpdGlvbktleSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZUcmFuc2l0aW9uS2V5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2VHJhbnNpdGlvbktleSA9IGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtleSAhPT0gcHJldlRyYW5zaXRpb25LZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2VHJhbnNpdGlvbktleSA9IGtleTtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uS2V5Q2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gaGFuZGxlIG1vZGVcclxuICAgICAgICAgICAgaWYgKG9sZElubmVyQ2hpbGQgJiZcclxuICAgICAgICAgICAgICAgIG9sZElubmVyQ2hpbGQudHlwZSAhPT0gQ29tbWVudCAmJlxyXG4gICAgICAgICAgICAgICAgKCFpc1NhbWVWTm9kZVR5cGUoaW5uZXJDaGlsZCwgb2xkSW5uZXJDaGlsZCkgfHwgdHJhbnNpdGlvbktleUNoYW5nZWQpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nSG9va3MgPSByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKG9sZElubmVyQ2hpbGQsIHJhd1Byb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIG9sZCB0cmVlJ3MgaG9va3MgaW4gY2FzZSBvZiBkeW5hbWljIHRyYW5zaXRpb25cclxuICAgICAgICAgICAgICAgIHNldFRyYW5zaXRpb25Ib29rcyhvbGRJbm5lckNoaWxkLCBsZWF2aW5nSG9va3MpO1xyXG4gICAgICAgICAgICAgICAgLy8gc3dpdGNoaW5nIGJldHdlZW4gZGlmZmVyZW50IHZpZXdzXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYXZpbmdIb29rcy5hZnRlckxlYXZlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5pc0xlYXZpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW1wdHlQbGFjZWhvbGRlcihjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0JyAmJiBpbm5lckNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWF2aW5nSG9va3MuZGVsYXlMZWF2ZSA9IChlbCwgZWFybHlSZW1vdmUsIGRlbGF5ZWRMZWF2ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCBvbGRJbm5lckNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlW1N0cmluZyhvbGRJbm5lckNoaWxkLmtleSldID0gb2xkSW5uZXJDaGlsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWFybHkgcmVtb3ZhbCBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhcmx5UmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBlbnRlckhvb2tzLmRlbGF5ZWRMZWF2ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJIb29rcy5kZWxheWVkTGVhdmUgPSBkZWxheWVkTGVhdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufTtcclxuLy8gZXhwb3J0IHRoZSBwdWJsaWMgdHlwZSBmb3IgaC90c3ggaW5mZXJlbmNlXHJcbi8vIGFsc28gdG8gYXZvaWQgaW5saW5lIGltcG9ydCgpIGluIGdlbmVyYXRlZCBkLnRzIGZpbGVzXHJcbmNvbnN0IEJhc2VUcmFuc2l0aW9uID0gQmFzZVRyYW5zaXRpb25JbXBsO1xyXG5mdW5jdGlvbiBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSkge1xyXG4gICAgY29uc3QgeyBsZWF2aW5nVk5vZGVzIH0gPSBzdGF0ZTtcclxuICAgIGxldCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBsZWF2aW5nVk5vZGVzLmdldCh2bm9kZS50eXBlKTtcclxuICAgIGlmICghbGVhdmluZ1ZOb2Rlc0NhY2hlKSB7XHJcbiAgICAgICAgbGVhdmluZ1ZOb2Rlc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICBsZWF2aW5nVk5vZGVzLnNldCh2bm9kZS50eXBlLCBsZWF2aW5nVk5vZGVzQ2FjaGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxlYXZpbmdWTm9kZXNDYWNoZTtcclxufVxyXG4vLyBUaGUgdHJhbnNpdGlvbiBob29rcyBhcmUgYXR0YWNoZWQgdG8gdGhlIHZub2RlIGFzIHZub2RlLnRyYW5zaXRpb25cclxuLy8gYW5kIHdpbGwgYmUgY2FsbGVkIGF0IGFwcHJvcHJpYXRlIHRpbWluZyBpbiB0aGUgcmVuZGVyZXIuXHJcbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHsgYXBwZWFyLCBtb2RlLCBwZXJzaXN0ZWQgPSBmYWxzZSwgb25CZWZvcmVFbnRlciwgb25FbnRlciwgb25BZnRlckVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkJlZm9yZUxlYXZlLCBvbkxlYXZlLCBvbkFmdGVyTGVhdmUsIG9uTGVhdmVDYW5jZWxsZWQsIG9uQmVmb3JlQXBwZWFyLCBvbkFwcGVhciwgb25BZnRlckFwcGVhciwgb25BcHBlYXJDYW5jZWxsZWQgfSA9IHByb3BzO1xyXG4gICAgY29uc3Qga2V5ID0gU3RyaW5nKHZub2RlLmtleSk7XHJcbiAgICBjb25zdCBsZWF2aW5nVk5vZGVzQ2FjaGUgPSBnZXRMZWF2aW5nTm9kZXNGb3JUeXBlKHN0YXRlLCB2bm9kZSk7XHJcbiAgICBjb25zdCBjYWxsSG9vayA9IChob29rLCBhcmdzKSA9PiB7XHJcbiAgICAgICAgaG9vayAmJlxyXG4gICAgICAgICAgICBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCBpbnN0YW5jZSwgOSAvKiBUUkFOU0lUSU9OX0hPT0sgKi8sIGFyZ3MpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGhvb2tzID0ge1xyXG4gICAgICAgIG1vZGUsXHJcbiAgICAgICAgcGVyc2lzdGVkLFxyXG4gICAgICAgIGJlZm9yZUVudGVyKGVsKSB7XHJcbiAgICAgICAgICAgIGxldCBob29rID0gb25CZWZvcmVFbnRlcjtcclxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBob29rID0gb25CZWZvcmVBcHBlYXIgfHwgb25CZWZvcmVFbnRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmb3Igc2FtZSBlbGVtZW50ICh2LXNob3cpXHJcbiAgICAgICAgICAgIGlmIChlbC5fbGVhdmVDYikge1xyXG4gICAgICAgICAgICAgICAgZWwuX2xlYXZlQ2IodHJ1ZSAvKiBjYW5jZWxsZWQgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGZvciB0b2dnbGVkIGVsZW1lbnQgd2l0aCBzYW1lIGtleSAodi1pZilcclxuICAgICAgICAgICAgY29uc3QgbGVhdmluZ1ZOb2RlID0gbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XHJcbiAgICAgICAgICAgIGlmIChsZWF2aW5nVk5vZGUgJiZcclxuICAgICAgICAgICAgICAgIGlzU2FtZVZOb2RlVHlwZSh2bm9kZSwgbGVhdmluZ1ZOb2RlKSAmJlxyXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmb3JjZSBlYXJseSByZW1vdmFsIChub3QgY2FuY2VsbGVkKVxyXG4gICAgICAgICAgICAgICAgbGVhdmluZ1ZOb2RlLmVsLl9sZWF2ZUNiKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FsbEhvb2soaG9vaywgW2VsXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnRlcihlbCkge1xyXG4gICAgICAgICAgICBsZXQgaG9vayA9IG9uRW50ZXI7XHJcbiAgICAgICAgICAgIGxldCBhZnRlckhvb2sgPSBvbkFmdGVyRW50ZXI7XHJcbiAgICAgICAgICAgIGxldCBjYW5jZWxIb29rID0gb25FbnRlckNhbmNlbGxlZDtcclxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcHBlYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBob29rID0gb25BcHBlYXIgfHwgb25FbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBhZnRlckhvb2sgPSBvbkFmdGVyQXBwZWFyIHx8IG9uQWZ0ZXJFbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxIb29rID0gb25BcHBlYXJDYW5jZWxsZWQgfHwgb25FbnRlckNhbmNlbGxlZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2VudGVyQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbEhvb2soY2FuY2VsSG9vaywgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhhZnRlckhvb2ssIFtlbF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGhvb2tzLmRlbGF5ZWRMZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLmRlbGF5ZWRMZWF2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWwuX2VudGVyQ2IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoaG9vaykge1xyXG4gICAgICAgICAgICAgICAgaG9vayhlbCwgZG9uZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaG9vay5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGVhdmUoZWwsIHJlbW92ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBTdHJpbmcodm5vZGUua2V5KTtcclxuICAgICAgICAgICAgaWYgKGVsLl9lbnRlckNiKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5fZW50ZXJDYih0cnVlIC8qIGNhbmNlbGxlZCAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXRlLmlzVW5tb3VudGluZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhbGxIb29rKG9uQmVmb3JlTGVhdmUsIFtlbF0pO1xyXG4gICAgICAgICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZWwuX2xlYXZlQ2IgPSAoY2FuY2VsbGVkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChjYW5jZWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsSG9vayhvbkxlYXZlQ2FuY2VsbGVkLCBbZWxdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxIb29rKG9uQWZ0ZXJMZWF2ZSwgW2VsXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbC5fbGVhdmVDYiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGlmIChsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9PT0gdm5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbGVhdmluZ1ZOb2Rlc0NhY2hlW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsZWF2aW5nVk5vZGVzQ2FjaGVba2V5XSA9IHZub2RlO1xyXG4gICAgICAgICAgICBpZiAob25MZWF2ZSkge1xyXG4gICAgICAgICAgICAgICAgb25MZWF2ZShlbCwgZG9uZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob25MZWF2ZS5sZW5ndGggPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xvbmUodm5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVUcmFuc2l0aW9uSG9va3Modm5vZGUsIHByb3BzLCBzdGF0ZSwgaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gaG9va3M7XHJcbn1cclxuLy8gdGhlIHBsYWNlaG9sZGVyIHJlYWxseSBvbmx5IGhhbmRsZXMgb25lIHNwZWNpYWwgY2FzZTogS2VlcEFsaXZlXHJcbi8vIGluIHRoZSBjYXNlIG9mIGEgS2VlcEFsaXZlIGluIGEgbGVhdmUgcGhhc2Ugd2UgbmVlZCB0byByZXR1cm4gYSBLZWVwQWxpdmVcclxuLy8gcGxhY2Vob2xkZXIgd2l0aCBlbXB0eSBjb250ZW50IHRvIGF2b2lkIHRoZSBLZWVwQWxpdmUgaW5zdGFuY2UgZnJvbSBiZWluZ1xyXG4vLyB1bm1vdW50ZWQuXHJcbmZ1bmN0aW9uIGVtcHR5UGxhY2Vob2xkZXIodm5vZGUpIHtcclxuICAgIGlmIChpc0tlZXBBbGl2ZSh2bm9kZSkpIHtcclxuICAgICAgICB2bm9kZSA9IGNsb25lVk5vZGUodm5vZGUpO1xyXG4gICAgICAgIHZub2RlLmNoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICByZXR1cm4gdm5vZGU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0S2VlcEFsaXZlQ2hpbGQodm5vZGUpIHtcclxuICAgIHJldHVybiBpc0tlZXBBbGl2ZSh2bm9kZSlcclxuICAgICAgICA/IHZub2RlLmNoaWxkcmVuXHJcbiAgICAgICAgICAgID8gdm5vZGUuY2hpbGRyZW5bMF1cclxuICAgICAgICAgICAgOiB1bmRlZmluZWRcclxuICAgICAgICA6IHZub2RlO1xyXG59XHJcbmZ1bmN0aW9uIHNldFRyYW5zaXRpb25Ib29rcyh2bm9kZSwgaG9va3MpIHtcclxuICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLyAmJiB2bm9kZS5jb21wb25lbnQpIHtcclxuICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3Modm5vZGUuY29tcG9uZW50LnN1YlRyZWUsIGhvb2tzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgIHZub2RlLnNzQ29udGVudC50cmFuc2l0aW9uID0gaG9va3MuY2xvbmUodm5vZGUuc3NDb250ZW50KTtcclxuICAgICAgICB2bm9kZS5zc0ZhbGxiYWNrLnRyYW5zaXRpb24gPSBob29rcy5jbG9uZSh2bm9kZS5zc0ZhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZub2RlLnRyYW5zaXRpb24gPSBob29rcztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4oY2hpbGRyZW4sIGtlZXBDb21tZW50ID0gZmFsc2UpIHtcclxuICAgIGxldCByZXQgPSBbXTtcclxuICAgIGxldCBrZXllZEZyYWdtZW50Q291bnQgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgLy8gaGFuZGxlIGZyYWdtZW50IGNoaWxkcmVuIGNhc2UsIGUuZy4gdi1mb3JcclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgaWYgKGNoaWxkLnBhdGNoRmxhZyAmIDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLylcclxuICAgICAgICAgICAgICAgIGtleWVkRnJhZ21lbnRDb3VudCsrO1xyXG4gICAgICAgICAgICByZXQgPSByZXQuY29uY2F0KGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihjaGlsZC5jaGlsZHJlbiwga2VlcENvbW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29tbWVudCBwbGFjZWhvbGRlcnMgc2hvdWxkIGJlIHNraXBwZWQsIGUuZy4gdi1pZlxyXG4gICAgICAgIGVsc2UgaWYgKGtlZXBDb21tZW50IHx8IGNoaWxkLnR5cGUgIT09IENvbW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0LnB1c2goY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vICMxMTI2IGlmIGEgdHJhbnNpdGlvbiBjaGlsZHJlbiBsaXN0IGNvbnRhaW5zIG11bHRpcGxlIHN1YiBmcmFnbWVudHMsIHRoZXNlXHJcbiAgICAvLyBmcmFnbWVudHMgd2lsbCBiZSBtZXJnZWQgaW50byBhIGZsYXQgY2hpbGRyZW4gYXJyYXkuIFNpbmNlIGVhY2ggdi1mb3JcclxuICAgIC8vIGZyYWdtZW50IG1heSBjb250YWluIGRpZmZlcmVudCBzdGF0aWMgYmluZGluZ3MgaW5zaWRlLCB3ZSBuZWVkIHRvIGRlLW9wXHJcbiAgICAvLyB0aGVzZSBjaGlsZHJlbiB0byBmb3JjZSBmdWxsIGRpZmZzIHRvIGVuc3VyZSBjb3JyZWN0IGJlaGF2aW9yLlxyXG4gICAgaWYgKGtleWVkRnJhZ21lbnRDb3VudCA+IDEpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJldC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICByZXRbaV0ucGF0Y2hGbGFnID0gLTIgLyogQkFJTCAqLztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbi8vIGltcGxlbWVudGF0aW9uLCBjbG9zZSB0byBuby1vcFxyXG5mdW5jdGlvbiBkZWZpbmVDb21wb25lbnQob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob3B0aW9ucykgPyB7IHNldHVwOiBvcHRpb25zLCBuYW1lOiBvcHRpb25zLm5hbWUgfSA6IG9wdGlvbnM7XHJcbn1cblxuY29uc3QgaXNBc3luY1dyYXBwZXIgPSAoaSkgPT4gISFpLnR5cGUuX19hc3luY0xvYWRlcjtcclxuZnVuY3Rpb24gZGVmaW5lQXN5bmNDb21wb25lbnQoc291cmNlKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihzb3VyY2UpKSB7XHJcbiAgICAgICAgc291cmNlID0geyBsb2FkZXI6IHNvdXJjZSB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBsb2FkZXIsIGxvYWRpbmdDb21wb25lbnQsIGVycm9yQ29tcG9uZW50LCBkZWxheSA9IDIwMCwgdGltZW91dCwgLy8gdW5kZWZpbmVkID0gbmV2ZXIgdGltZXMgb3V0XHJcbiAgICBzdXNwZW5zaWJsZSA9IHRydWUsIG9uRXJyb3I6IHVzZXJPbkVycm9yIH0gPSBzb3VyY2U7XHJcbiAgICBsZXQgcGVuZGluZ1JlcXVlc3QgPSBudWxsO1xyXG4gICAgbGV0IHJlc29sdmVkQ29tcDtcclxuICAgIGxldCByZXRyaWVzID0gMDtcclxuICAgIGNvbnN0IHJldHJ5ID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHJpZXMrKztcclxuICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGxvYWQoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBsb2FkID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCB0aGlzUmVxdWVzdDtcclxuICAgICAgICByZXR1cm4gKHBlbmRpbmdSZXF1ZXN0IHx8XHJcbiAgICAgICAgICAgICh0aGlzUmVxdWVzdCA9IHBlbmRpbmdSZXF1ZXN0ID1cclxuICAgICAgICAgICAgICAgIGxvYWRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gZXJyIGluc3RhbmNlb2YgRXJyb3IgPyBlcnIgOiBuZXcgRXJyb3IoU3RyaW5nKGVycikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyT25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlclJldHJ5ID0gKCkgPT4gcmVzb2x2ZShyZXRyeSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJGYWlsID0gKCkgPT4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyT25FcnJvcihlcnIsIHVzZXJSZXRyeSwgdXNlckZhaWwsIHJldHJpZXMgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAudGhlbigoY29tcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUmVxdWVzdCAhPT0gcGVuZGluZ1JlcXVlc3QgJiYgcGVuZGluZ1JlcXVlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBlbmRpbmdSZXF1ZXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFjb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oYEFzeW5jIGNvbXBvbmVudCBsb2FkZXIgcmVzb2x2ZWQgdG8gdW5kZWZpbmVkLiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBJZiB5b3UgYXJlIHVzaW5nIHJldHJ5KCksIG1ha2Ugc3VyZSB0byByZXR1cm4gaXRzIHJldHVybiB2YWx1ZS5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW50ZXJvcCBtb2R1bGUgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChjb21wLl9fZXNNb2R1bGUgfHwgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjb21wICYmICFpc09iamVjdChjb21wKSAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYXN5bmMgY29tcG9uZW50IGxvYWQgcmVzdWx0OiAke2NvbXB9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkQ29tcCA9IGNvbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXA7XHJcbiAgICAgICAgICAgICAgICB9KSkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBkZWZpbmVDb21wb25lbnQoe1xyXG4gICAgICAgIG5hbWU6ICdBc3luY0NvbXBvbmVudFdyYXBwZXInLFxyXG4gICAgICAgIF9fYXN5bmNMb2FkZXI6IGxvYWQsXHJcbiAgICAgICAgZ2V0IF9fYXN5bmNSZXNvbHZlZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkQ29tcDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldHVwKCkge1xyXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGN1cnJlbnRJbnN0YW5jZTtcclxuICAgICAgICAgICAgLy8gYWxyZWFkeSByZXNvbHZlZFxyXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWRDb21wKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKHJlc29sdmVkQ29tcCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG9uRXJyb3IgPSAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwZW5kaW5nUmVxdWVzdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIsIGluc3RhbmNlLCAxMyAvKiBBU1lOQ19DT01QT05FTlRfTE9BREVSICovLCAhZXJyb3JDb21wb25lbnQgLyogZG8gbm90IHRocm93IGluIGRldiBpZiB1c2VyIHByb3ZpZGVkIGVycm9yIGNvbXBvbmVudCAqLyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIHN1c3BlbnNlLWNvbnRyb2xsZWQgb3IgU1NSLlxyXG4gICAgICAgICAgICBpZiAoKHN1c3BlbnNpYmxlICYmIGluc3RhbmNlLnN1c3BlbnNlKSB8fFxyXG4gICAgICAgICAgICAgICAgKGlzSW5TU1JDb21wb25lbnRTZXR1cCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2FkKClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihjb21wID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gY3JlYXRlSW5uZXJDb21wKGNvbXAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBlcnJvckNvbXBvbmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGxvYWRlZCA9IHJlZihmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gcmVmKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ZWQgPSByZWYoISFkZWxheSk7XHJcbiAgICAgICAgICAgIGlmIChkZWxheSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsYXllZC52YWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbG9hZGVkLnZhbHVlICYmICFlcnJvci52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYEFzeW5jIGNvbXBvbmVudCB0aW1lZCBvdXQgYWZ0ZXIgJHt0aW1lb3V0fW1zLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxvYWQoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbG9hZGVkLnZhbHVlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5wYXJlbnQgJiYgaXNLZWVwQWxpdmUoaW5zdGFuY2UucGFyZW50LnZub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHBhcmVudCBpcyBrZWVwLWFsaXZlLCBmb3JjZSB1cGRhdGUgc28gdGhlIGxvYWRlZCBjb21wb25lbnQnc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5hbWUgaXMgdGFrZW4gaW50byBhY2NvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVKb2IoaW5zdGFuY2UucGFyZW50LnVwZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyKTtcclxuICAgICAgICAgICAgICAgIGVycm9yLnZhbHVlID0gZXJyO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChsb2FkZWQudmFsdWUgJiYgcmVzb2x2ZWRDb21wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUlubmVyQ29tcChyZXNvbHZlZENvbXAsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVycm9yLnZhbHVlICYmIGVycm9yQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKGVycm9yQ29tcG9uZW50LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvci52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobG9hZGluZ0NvbXBvbmVudCAmJiAhZGVsYXllZC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZShsb2FkaW5nQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbm5lckNvbXAoY29tcCwgeyB2bm9kZTogeyByZWYsIHByb3BzLCBjaGlsZHJlbiB9IH0pIHtcclxuICAgIGNvbnN0IHZub2RlID0gY3JlYXRlVk5vZGUoY29tcCwgcHJvcHMsIGNoaWxkcmVuKTtcclxuICAgIC8vIGVuc3VyZSBpbm5lciBjb21wb25lbnQgaW5oZXJpdHMgdGhlIGFzeW5jIHdyYXBwZXIncyByZWYgb3duZXJcclxuICAgIHZub2RlLnJlZiA9IHJlZjtcclxuICAgIHJldHVybiB2bm9kZTtcclxufVxuXG5jb25zdCBpc0tlZXBBbGl2ZSA9ICh2bm9kZSkgPT4gdm5vZGUudHlwZS5fX2lzS2VlcEFsaXZlO1xyXG5jb25zdCBLZWVwQWxpdmVJbXBsID0ge1xyXG4gICAgbmFtZTogYEtlZXBBbGl2ZWAsXHJcbiAgICAvLyBNYXJrZXIgZm9yIHNwZWNpYWwgaGFuZGxpbmcgaW5zaWRlIHRoZSByZW5kZXJlci4gV2UgYXJlIG5vdCB1c2luZyBhID09PVxyXG4gICAgLy8gY2hlY2sgZGlyZWN0bHkgb24gS2VlcEFsaXZlIGluIHRoZSByZW5kZXJlciwgYmVjYXVzZSBpbXBvcnRpbmcgaXQgZGlyZWN0bHlcclxuICAgIC8vIHdvdWxkIHByZXZlbnQgaXQgZnJvbSBiZWluZyB0cmVlLXNoYWtlbi5cclxuICAgIF9faXNLZWVwQWxpdmU6IHRydWUsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIGluY2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxyXG4gICAgICAgIGV4Y2x1ZGU6IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldLFxyXG4gICAgICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxyXG4gICAgfSxcclxuICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgICAgIC8vIEtlZXBBbGl2ZSBjb21tdW5pY2F0ZXMgd2l0aCB0aGUgaW5zdGFudGlhdGVkIHJlbmRlcmVyIHZpYSB0aGVcclxuICAgICAgICAvLyBjdHggd2hlcmUgdGhlIHJlbmRlcmVyIHBhc3NlcyBpbiBpdHMgaW50ZXJuYWxzLFxyXG4gICAgICAgIC8vIGFuZCB0aGUgS2VlcEFsaXZlIGluc3RhbmNlIGV4cG9zZXMgYWN0aXZhdGUvZGVhY3RpdmF0ZSBpbXBsZW1lbnRhdGlvbnMuXHJcbiAgICAgICAgLy8gVGhlIHdob2xlIHBvaW50IG9mIHRoaXMgaXMgdG8gYXZvaWQgaW1wb3J0aW5nIEtlZXBBbGl2ZSBkaXJlY3RseSBpbiB0aGVcclxuICAgICAgICAvLyByZW5kZXJlciB0byBmYWNpbGl0YXRlIHRyZWUtc2hha2luZy5cclxuICAgICAgICBjb25zdCBzaGFyZWRDb250ZXh0ID0gaW5zdGFuY2UuY3R4O1xyXG4gICAgICAgIC8vIGlmIHRoZSBpbnRlcm5hbCByZW5kZXJlciBpcyBub3QgcmVnaXN0ZXJlZCwgaXQgaW5kaWNhdGVzIHRoYXQgdGhpcyBpcyBzZXJ2ZXItc2lkZSByZW5kZXJpbmcsXHJcbiAgICAgICAgLy8gZm9yIEtlZXBBbGl2ZSwgd2UganVzdCBuZWVkIHRvIHJlbmRlciBpdHMgY2hpbGRyZW5cclxuICAgICAgICBpZiAoIXNoYXJlZENvbnRleHQucmVuZGVyZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNsb3RzLmRlZmF1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgbGV0IGN1cnJlbnQgPSBudWxsO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLl9fdl9jYWNoZSA9IGNhY2hlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXJlbnRTdXNwZW5zZSA9IGluc3RhbmNlLnN1c3BlbnNlO1xyXG4gICAgICAgIGNvbnN0IHsgcmVuZGVyZXI6IHsgcDogcGF0Y2gsIG06IG1vdmUsIHVtOiBfdW5tb3VudCwgbzogeyBjcmVhdGVFbGVtZW50IH0gfSB9ID0gc2hhcmVkQ29udGV4dDtcclxuICAgICAgICBjb25zdCBzdG9yYWdlQ29udGFpbmVyID0gY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgc2hhcmVkQ29udGV4dC5hY3RpdmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgIG1vdmUodm5vZGUsIGNvbnRhaW5lciwgYW5jaG9yLCAwIC8qIEVOVEVSICovLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIC8vIGluIGNhc2UgcHJvcHMgaGF2ZSBjaGFuZ2VkXHJcbiAgICAgICAgICAgIHBhdGNoKGluc3RhbmNlLnZub2RlLCB2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHZub2RlLnNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UuYSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2bm9kZUhvb2sgPSB2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy5vblZub2RlTW91bnRlZDtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZUhvb2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGNvbXBvbmVudHMgdHJlZVxyXG4gICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRBZGRlZChpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNoYXJlZENvbnRleHQuZGVhY3RpdmF0ZSA9ICh2bm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudDtcclxuICAgICAgICAgICAgbW92ZSh2bm9kZSwgc3RvcmFnZUNvbnRhaW5lciwgbnVsbCwgMSAvKiBMRUFWRSAqLywgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLmRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoaW5zdGFuY2UuZGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGVIb29rID0gdm5vZGUucHJvcHMgJiYgdm5vZGUucHJvcHMub25Wbm9kZVVubW91bnRlZDtcclxuICAgICAgICAgICAgICAgIGlmICh2bm9kZUhvb2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBpbnN0YW5jZS5wYXJlbnQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLmlzRGVhY3RpdmF0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgY29tcG9uZW50cyB0cmVlXHJcbiAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZnVuY3Rpb24gdW5tb3VudCh2bm9kZSkge1xyXG4gICAgICAgICAgICAvLyByZXNldCB0aGUgc2hhcGVGbGFnIHNvIGl0IGNhbiBiZSBwcm9wZXJseSB1bm1vdW50ZWRcclxuICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xyXG4gICAgICAgICAgICBfdW5tb3VudCh2bm9kZSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcHJ1bmVDYWNoZShmaWx0ZXIpIHtcclxuICAgICAgICAgICAgY2FjaGUuZm9yRWFjaCgodm5vZGUsIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUodm5vZGUudHlwZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmFtZSAmJiAoIWZpbHRlciB8fCAhZmlsdGVyKG5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShrZXkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5KGtleSkge1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5KTtcclxuICAgICAgICAgICAgaWYgKCFjdXJyZW50IHx8IGNhY2hlZC50eXBlICE9PSBjdXJyZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGFjdGl2ZSBpbnN0YW5jZSBzaG91bGQgbm8gbG9uZ2VyIGJlIGtlcHQtYWxpdmUuXHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1bm1vdW50IGl0IG5vdyBidXQgaXQgbWlnaHQgYmUgbGF0ZXIsIHNvIHJlc2V0IGl0cyBmbGFnIG5vdy5cclxuICAgICAgICAgICAgICAgIHJlc2V0U2hhcGVGbGFnKGN1cnJlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhY2hlLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICBrZXlzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwcnVuZSBjYWNoZSBvbiBpbmNsdWRlL2V4Y2x1ZGUgcHJvcCBjaGFuZ2VcclxuICAgICAgICB3YXRjaCgoKSA9PiBbcHJvcHMuaW5jbHVkZSwgcHJvcHMuZXhjbHVkZV0sIChbaW5jbHVkZSwgZXhjbHVkZV0pID0+IHtcclxuICAgICAgICAgICAgaW5jbHVkZSAmJiBwcnVuZUNhY2hlKG5hbWUgPT4gbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSk7XHJcbiAgICAgICAgICAgIGV4Y2x1ZGUgJiYgcHJ1bmVDYWNoZShuYW1lID0+ICFtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKTtcclxuICAgICAgICB9LCBcclxuICAgICAgICAvLyBwcnVuZSBwb3N0LXJlbmRlciBhZnRlciBgY3VycmVudGAgaGFzIGJlZW4gdXBkYXRlZFxyXG4gICAgICAgIHsgZmx1c2g6ICdwb3N0JywgZGVlcDogdHJ1ZSB9KTtcclxuICAgICAgICAvLyBjYWNoZSBzdWIgdHJlZSBhZnRlciByZW5kZXJcclxuICAgICAgICBsZXQgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcclxuICAgICAgICBjb25zdCBjYWNoZVN1YnRyZWUgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGZpeCAjMTYyMSwgdGhlIHBlbmRpbmdDYWNoZUtleSBjb3VsZCBiZSAwXHJcbiAgICAgICAgICAgIGlmIChwZW5kaW5nQ2FjaGVLZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuc2V0KHBlbmRpbmdDYWNoZUtleSwgZ2V0SW5uZXJDaGlsZChpbnN0YW5jZS5zdWJUcmVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIG9uTW91bnRlZChjYWNoZVN1YnRyZWUpO1xyXG4gICAgICAgIG9uVXBkYXRlZChjYWNoZVN1YnRyZWUpO1xyXG4gICAgICAgIG9uQmVmb3JlVW5tb3VudCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNhY2hlLmZvckVhY2goY2FjaGVkID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgc3ViVHJlZSwgc3VzcGVuc2UgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHN1YlRyZWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlZC50eXBlID09PSB2bm9kZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3VycmVudCBpbnN0YW5jZSB3aWxsIGJlIHVubW91bnRlZCBhcyBwYXJ0IG9mIGtlZXAtYWxpdmUncyB1bm1vdW50XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRTaGFwZUZsYWcodm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpbnZva2UgaXRzIGRlYWN0aXZhdGVkIGhvb2sgaGVyZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhID0gdm5vZGUuY29tcG9uZW50LmRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkYSwgc3VzcGVuc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVubW91bnQoY2FjaGVkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgcGVuZGluZ0NhY2hlS2V5ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCFzbG90cy5kZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHNsb3RzLmRlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgcmF3Vk5vZGUgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBLZWVwQWxpdmUgc2hvdWxkIGNvbnRhaW4gZXhhY3RseSBvbmUgY29tcG9uZW50IGNoaWxkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hpbGRyZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzVk5vZGUocmF3Vk5vZGUpIHx8XHJcbiAgICAgICAgICAgICAgICAoIShyYXdWTm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLykgJiZcclxuICAgICAgICAgICAgICAgICAgICAhKHJhd1ZOb2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykpKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByYXdWTm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdm5vZGUgPSBnZXRJbm5lckNoaWxkKHJhd1ZOb2RlKTtcclxuICAgICAgICAgICAgY29uc3QgY29tcCA9IHZub2RlLnR5cGU7XHJcbiAgICAgICAgICAgIC8vIGZvciBhc3luYyBjb21wb25lbnRzLCBuYW1lIGNoZWNrIHNob3VsZCBiZSBiYXNlZCBpbiBpdHMgbG9hZGVkXHJcbiAgICAgICAgICAgIC8vIGlubmVyIGNvbXBvbmVudCBpZiBhdmFpbGFibGVcclxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoaXNBc3luY1dyYXBwZXIodm5vZGUpXHJcbiAgICAgICAgICAgICAgICA/IHZub2RlLnR5cGUuX19hc3luY1Jlc29sdmVkIHx8IHt9XHJcbiAgICAgICAgICAgICAgICA6IGNvbXApO1xyXG4gICAgICAgICAgICBjb25zdCB7IGluY2x1ZGUsIGV4Y2x1ZGUsIG1heCB9ID0gcHJvcHM7XHJcbiAgICAgICAgICAgIGlmICgoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxyXG4gICAgICAgICAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHZub2RlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHZub2RlLmtleSA9PSBudWxsID8gY29tcCA6IHZub2RlLmtleTtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGVkVk5vZGUgPSBjYWNoZS5nZXQoa2V5KTtcclxuICAgICAgICAgICAgLy8gY2xvbmUgdm5vZGUgaWYgaXQncyByZXVzZWQgYmVjYXVzZSB3ZSBhcmUgZ29pbmcgdG8gbXV0YXRlIGl0XHJcbiAgICAgICAgICAgIGlmICh2bm9kZS5lbCkge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUgPSBjbG9uZVZOb2RlKHZub2RlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyYXdWTm9kZS5zaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICByYXdWTm9kZS5zc0NvbnRlbnQgPSB2bm9kZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyAjMTUxMyBpdCdzIHBvc3NpYmxlIGZvciB0aGUgcmV0dXJuZWQgdm5vZGUgdG8gYmUgY2xvbmVkIGR1ZSB0byBhdHRyXHJcbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoIG9yIHNjb3BlSWQsIHNvIHRoZSB2bm9kZSBoZXJlIG1heSBub3QgYmUgdGhlIGZpbmFsIHZub2RlXHJcbiAgICAgICAgICAgIC8vIHRoYXQgaXMgbW91bnRlZC4gSW5zdGVhZCBvZiBjYWNoaW5nIGl0IGRpcmVjdGx5LCB3ZSBzdG9yZSB0aGUgcGVuZGluZ1xyXG4gICAgICAgICAgICAvLyBrZXkgYW5kIGNhY2hlIGBpbnN0YW5jZS5zdWJUcmVlYCAodGhlIG5vcm1hbGl6ZWQgdm5vZGUpIGluXHJcbiAgICAgICAgICAgIC8vIGJlZm9yZU1vdW50L2JlZm9yZVVwZGF0ZSBob29rcy5cclxuICAgICAgICAgICAgcGVuZGluZ0NhY2hlS2V5ID0ga2V5O1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkVk5vZGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvcHkgb3ZlciBtb3VudGVkIHN0YXRlXHJcbiAgICAgICAgICAgICAgICB2bm9kZS5lbCA9IGNhY2hlZFZOb2RlLmVsO1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuY29tcG9uZW50ID0gY2FjaGVkVk5vZGUuY29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKHZub2RlLnRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNpdmVseSB1cGRhdGUgdHJhbnNpdGlvbiBob29rcyBvbiBzdWJUcmVlXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKHZub2RlLCB2bm9kZS50cmFuc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGF2b2lkIHZub2RlIGJlaW5nIG1vdW50ZWQgYXMgZnJlc2hcclxuICAgICAgICAgICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi87XHJcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHRoaXMga2V5IHRoZSBmcmVzaGVzdFxyXG4gICAgICAgICAgICAgICAga2V5cy5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgICAgIGtleXMuYWRkKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBrZXlzLmFkZChrZXkpO1xyXG4gICAgICAgICAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XHJcbiAgICAgICAgICAgICAgICBpZiAobWF4ICYmIGtleXMuc2l6ZSA+IHBhcnNlSW50KG1heCwgMTApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGtleXMudmFsdWVzKCkubmV4dCgpLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhdm9pZCB2bm9kZSBiZWluZyB1bm1vdW50ZWRcclxuICAgICAgICAgICAgdm5vZGUuc2hhcGVGbGFnIHw9IDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi87XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSB2bm9kZTtcclxuICAgICAgICAgICAgcmV0dXJuIHJhd1ZOb2RlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XHJcbi8vIGV4cG9ydCB0aGUgcHVibGljIHR5cGUgZm9yIGgvdHN4IGluZmVyZW5jZVxyXG4vLyBhbHNvIHRvIGF2b2lkIGlubGluZSBpbXBvcnQoKSBpbiBnZW5lcmF0ZWQgZC50cyBmaWxlc1xyXG5jb25zdCBLZWVwQWxpdmUgPSBLZWVwQWxpdmVJbXBsO1xyXG5mdW5jdGlvbiBtYXRjaGVzKHBhdHRlcm4sIG5hbWUpIHtcclxuICAgIGlmIChpc0FycmF5KHBhdHRlcm4pKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdHRlcm4uc29tZSgocCkgPT4gbWF0Y2hlcyhwLCBuYW1lKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1N0cmluZyhwYXR0ZXJuKSkge1xyXG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5jbHVkZXMobmFtZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwYXR0ZXJuLnRlc3QpIHtcclxuICAgICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpO1xyXG4gICAgfVxyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBvbkFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcclxuICAgIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImFcIiAvKiBBQ1RJVkFURUQgKi8sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gb25EZWFjdGl2YXRlZChob29rLCB0YXJnZXQpIHtcclxuICAgIHJlZ2lzdGVyS2VlcEFsaXZlSG9vayhob29rLCBcImRhXCIgLyogREVBQ1RJVkFURUQgKi8sIHRhcmdldCk7XHJcbn1cclxuZnVuY3Rpb24gcmVnaXN0ZXJLZWVwQWxpdmVIb29rKGhvb2ssIHR5cGUsIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgLy8gY2FjaGUgdGhlIGRlYWN0aXZhdGUgYnJhbmNoIGNoZWNrIHdyYXBwZXIgZm9yIGluamVjdGVkIGhvb2tzIHNvIHRoZSBzYW1lXHJcbiAgICAvLyBob29rIGNhbiBiZSBwcm9wZXJseSBkZWR1cGVkIGJ5IHRoZSBzY2hlZHVsZXIuIFwiX193ZGNcIiBzdGFuZHMgZm9yIFwid2l0aFxyXG4gICAgLy8gZGVhY3RpdmF0aW9uIGNoZWNrXCIuXHJcbiAgICBjb25zdCB3cmFwcGVkSG9vayA9IGhvb2suX193ZGMgfHxcclxuICAgICAgICAoaG9vay5fX3dkYyA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gb25seSBmaXJlIHRoZSBob29rIGlmIHRoZSB0YXJnZXQgaW5zdGFuY2UgaXMgTk9UIGluIGEgZGVhY3RpdmF0ZWQgYnJhbmNoLlxyXG4gICAgICAgICAgICBsZXQgY3VycmVudCA9IHRhcmdldDtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50LmlzRGVhY3RpdmF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGhvb2soKTtcclxuICAgICAgICB9KTtcclxuICAgIGluamVjdEhvb2sodHlwZSwgd3JhcHBlZEhvb2ssIHRhcmdldCk7XHJcbiAgICAvLyBJbiBhZGRpdGlvbiB0byByZWdpc3RlcmluZyBpdCBvbiB0aGUgdGFyZ2V0IGluc3RhbmNlLCB3ZSB3YWxrIHVwIHRoZSBwYXJlbnRcclxuICAgIC8vIGNoYWluIGFuZCByZWdpc3RlciBpdCBvbiBhbGwgYW5jZXN0b3IgaW5zdGFuY2VzIHRoYXQgYXJlIGtlZXAtYWxpdmUgcm9vdHMuXHJcbiAgICAvLyBUaGlzIGF2b2lkcyB0aGUgbmVlZCB0byB3YWxrIHRoZSBlbnRpcmUgY29tcG9uZW50IHRyZWUgd2hlbiBpbnZva2luZyB0aGVzZVxyXG4gICAgLy8gaG9va3MsIGFuZCBtb3JlIGltcG9ydGFudGx5LCBhdm9pZHMgdGhlIG5lZWQgdG8gdHJhY2sgY2hpbGQgY29tcG9uZW50cyBpblxyXG4gICAgLy8gYXJyYXlzLlxyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50ID0gdGFyZ2V0LnBhcmVudDtcclxuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiBjdXJyZW50LnBhcmVudCkge1xyXG4gICAgICAgICAgICBpZiAoaXNLZWVwQWxpdmUoY3VycmVudC5wYXJlbnQudm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmplY3RUb0tlZXBBbGl2ZVJvb3Qod3JhcHBlZEhvb2ssIHR5cGUsIHRhcmdldCwgY3VycmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpbmplY3RUb0tlZXBBbGl2ZVJvb3QoaG9vaywgdHlwZSwgdGFyZ2V0LCBrZWVwQWxpdmVSb290KSB7XHJcbiAgICAvLyBpbmplY3RIb29rIHdyYXBzIHRoZSBvcmlnaW5hbCBmb3IgZXJyb3IgaGFuZGxpbmcsIHNvIG1ha2Ugc3VyZSB0byByZW1vdmVcclxuICAgIC8vIHRoZSB3cmFwcGVkIHZlcnNpb24uXHJcbiAgICBjb25zdCBpbmplY3RlZCA9IGluamVjdEhvb2sodHlwZSwgaG9vaywga2VlcEFsaXZlUm9vdCwgdHJ1ZSAvKiBwcmVwZW5kICovKTtcclxuICAgIG9uVW5tb3VudGVkKCgpID0+IHtcclxuICAgICAgICByZW1vdmUoa2VlcEFsaXZlUm9vdFt0eXBlXSwgaW5qZWN0ZWQpO1xyXG4gICAgfSwgdGFyZ2V0KTtcclxufVxyXG5mdW5jdGlvbiByZXNldFNoYXBlRmxhZyh2bm9kZSkge1xyXG4gICAgbGV0IHNoYXBlRmxhZyA9IHZub2RlLnNoYXBlRmxhZztcclxuICAgIGlmIChzaGFwZUZsYWcgJiAyNTYgLyogQ09NUE9ORU5UX1NIT1VMRF9LRUVQX0FMSVZFICovKSB7XHJcbiAgICAgICAgc2hhcGVGbGFnIC09IDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi87XHJcbiAgICB9XHJcbiAgICBpZiAoc2hhcGVGbGFnICYgNTEyIC8qIENPTVBPTkVOVF9LRVBUX0FMSVZFICovKSB7XHJcbiAgICAgICAgc2hhcGVGbGFnIC09IDUxMiAvKiBDT01QT05FTlRfS0VQVF9BTElWRSAqLztcclxuICAgIH1cclxuICAgIHZub2RlLnNoYXBlRmxhZyA9IHNoYXBlRmxhZztcclxufVxyXG5mdW5jdGlvbiBnZXRJbm5lckNoaWxkKHZub2RlKSB7XHJcbiAgICByZXR1cm4gdm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovID8gdm5vZGUuc3NDb250ZW50IDogdm5vZGU7XHJcbn1cblxuZnVuY3Rpb24gaW5qZWN0SG9vayh0eXBlLCBob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UsIHByZXBlbmQgPSBmYWxzZSkge1xyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IGhvb2tzID0gdGFyZ2V0W3R5cGVdIHx8ICh0YXJnZXRbdHlwZV0gPSBbXSk7XHJcbiAgICAgICAgLy8gY2FjaGUgdGhlIGVycm9yIGhhbmRsaW5nIHdyYXBwZXIgZm9yIGluamVjdGVkIGhvb2tzIHNvIHRoZSBzYW1lIGhvb2tcclxuICAgICAgICAvLyBjYW4gYmUgcHJvcGVybHkgZGVkdXBlZCBieSB0aGUgc2NoZWR1bGVyLiBcIl9fd2VoXCIgc3RhbmRzIGZvciBcIndpdGggZXJyb3JcclxuICAgICAgICAvLyBoYW5kbGluZ1wiLlxyXG4gICAgICAgIGNvbnN0IHdyYXBwZWRIb29rID0gaG9vay5fX3dlaCB8fFxyXG4gICAgICAgICAgICAoaG9vay5fX3dlaCA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmlzVW5tb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gZGlzYWJsZSB0cmFja2luZyBpbnNpZGUgYWxsIGxpZmVjeWNsZSBob29rc1xyXG4gICAgICAgICAgICAgICAgLy8gc2luY2UgdGhleSBjYW4gcG90ZW50aWFsbHkgYmUgY2FsbGVkIGluc2lkZSBlZmZlY3RzLlxyXG4gICAgICAgICAgICAgICAgcGF1c2VUcmFja2luZygpO1xyXG4gICAgICAgICAgICAgICAgLy8gU2V0IGN1cnJlbnRJbnN0YW5jZSBkdXJpbmcgaG9vayBpbnZvY2F0aW9uLlxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBhc3N1bWVzIHRoZSBob29rIGRvZXMgbm90IHN5bmNocm9ub3VzbHkgdHJpZ2dlciBvdGhlciBob29rcywgd2hpY2hcclxuICAgICAgICAgICAgICAgIC8vIGNhbiBvbmx5IGJlIGZhbHNlIHdoZW4gdGhlIHVzZXIgZG9lcyBzb21ldGhpbmcgcmVhbGx5IGZ1bmt5LlxyXG4gICAgICAgICAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKHRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZyhob29rLCB0YXJnZXQsIHR5cGUsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICAgICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwcmVwZW5kKSB7XHJcbiAgICAgICAgICAgIGhvb2tzLnVuc2hpZnQod3JhcHBlZEhvb2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaG9va3MucHVzaCh3cmFwcGVkSG9vayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3cmFwcGVkSG9vaztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGNvbnN0IGFwaU5hbWUgPSB0b0hhbmRsZXJLZXkoRXJyb3JUeXBlU3RyaW5nc1t0eXBlXS5yZXBsYWNlKC8gaG9vayQvLCAnJykpO1xyXG4gICAgICAgIHdhcm4oYCR7YXBpTmFtZX0gaXMgY2FsbGVkIHdoZW4gdGhlcmUgaXMgbm8gYWN0aXZlIGNvbXBvbmVudCBpbnN0YW5jZSB0byBiZSBgICtcclxuICAgICAgICAgICAgYGFzc29jaWF0ZWQgd2l0aC4gYCArXHJcbiAgICAgICAgICAgIGBMaWZlY3ljbGUgaW5qZWN0aW9uIEFQSXMgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgZXhlY3V0aW9uIG9mIHNldHVwKCkuYCArXHJcbiAgICAgICAgICAgIChgIElmIHlvdSBhcmUgdXNpbmcgYXN5bmMgc2V0dXAoKSwgbWFrZSBzdXJlIHRvIHJlZ2lzdGVyIGxpZmVjeWNsZSBgICtcclxuICAgICAgICAgICAgICAgICAgICBgaG9va3MgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdCBzdGF0ZW1lbnQuYFxyXG4gICAgICAgICAgICAgICAgKSk7XHJcbiAgICB9XHJcbn1cclxuY29uc3QgY3JlYXRlSG9vayA9IChsaWZlY3ljbGUpID0+IChob29rLCB0YXJnZXQgPSBjdXJyZW50SW5zdGFuY2UpID0+IFxyXG4vLyBwb3N0LWNyZWF0ZSBsaWZlY3ljbGUgcmVnaXN0cmF0aW9ucyBhcmUgbm9vcHMgZHVyaW5nIFNTUiAoZXhjZXB0IGZvciBzZXJ2ZXJQcmVmZXRjaClcclxuKCFpc0luU1NSQ29tcG9uZW50U2V0dXAgfHwgbGlmZWN5Y2xlID09PSBcInNwXCIgLyogU0VSVkVSX1BSRUZFVENIICovKSAmJlxyXG4gICAgaW5qZWN0SG9vayhsaWZlY3ljbGUsIGhvb2ssIHRhcmdldCk7XHJcbmNvbnN0IG9uQmVmb3JlTW91bnQgPSBjcmVhdGVIb29rKFwiYm1cIiAvKiBCRUZPUkVfTU9VTlQgKi8pO1xyXG5jb25zdCBvbk1vdW50ZWQgPSBjcmVhdGVIb29rKFwibVwiIC8qIE1PVU5URUQgKi8pO1xyXG5jb25zdCBvbkJlZm9yZVVwZGF0ZSA9IGNyZWF0ZUhvb2soXCJidVwiIC8qIEJFRk9SRV9VUERBVEUgKi8pO1xyXG5jb25zdCBvblVwZGF0ZWQgPSBjcmVhdGVIb29rKFwidVwiIC8qIFVQREFURUQgKi8pO1xyXG5jb25zdCBvbkJlZm9yZVVubW91bnQgPSBjcmVhdGVIb29rKFwiYnVtXCIgLyogQkVGT1JFX1VOTU9VTlQgKi8pO1xyXG5jb25zdCBvblVubW91bnRlZCA9IGNyZWF0ZUhvb2soXCJ1bVwiIC8qIFVOTU9VTlRFRCAqLyk7XHJcbmNvbnN0IG9uU2VydmVyUHJlZmV0Y2ggPSBjcmVhdGVIb29rKFwic3BcIiAvKiBTRVJWRVJfUFJFRkVUQ0ggKi8pO1xyXG5jb25zdCBvblJlbmRlclRyaWdnZXJlZCA9IGNyZWF0ZUhvb2soXCJydGdcIiAvKiBSRU5ERVJfVFJJR0dFUkVEICovKTtcclxuY29uc3Qgb25SZW5kZXJUcmFja2VkID0gY3JlYXRlSG9vayhcInJ0Y1wiIC8qIFJFTkRFUl9UUkFDS0VEICovKTtcclxuZnVuY3Rpb24gb25FcnJvckNhcHR1cmVkKGhvb2ssIHRhcmdldCA9IGN1cnJlbnRJbnN0YW5jZSkge1xyXG4gICAgaW5qZWN0SG9vayhcImVjXCIgLyogRVJST1JfQ0FQVFVSRUQgKi8sIGhvb2ssIHRhcmdldCk7XHJcbn1cblxuZnVuY3Rpb24gY3JlYXRlRHVwbGljYXRlQ2hlY2tlcigpIHtcclxuICAgIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHJldHVybiAodHlwZSwga2V5KSA9PiB7XHJcbiAgICAgICAgaWYgKGNhY2hlW2tleV0pIHtcclxuICAgICAgICAgICAgd2FybihgJHt0eXBlfSBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiAke2NhY2hlW2tleV19LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5sZXQgc2hvdWxkQ2FjaGVBY2Nlc3MgPSB0cnVlO1xyXG5mdW5jdGlvbiBhcHBseU9wdGlvbnMoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlTWVyZ2VkT3B0aW9ucyhpbnN0YW5jZSk7XHJcbiAgICBjb25zdCBwdWJsaWNUaGlzID0gaW5zdGFuY2UucHJveHk7XHJcbiAgICBjb25zdCBjdHggPSBpbnN0YW5jZS5jdHg7XHJcbiAgICAvLyBkbyBub3QgY2FjaGUgcHJvcGVydHkgYWNjZXNzIG9uIHB1YmxpYyBwcm94eSBkdXJpbmcgc3RhdGUgaW5pdGlhbGl6YXRpb25cclxuICAgIHNob3VsZENhY2hlQWNjZXNzID0gZmFsc2U7XHJcbiAgICAvLyBjYWxsIGJlZm9yZUNyZWF0ZSBmaXJzdCBiZWZvcmUgYWNjZXNzaW5nIG90aGVyIG9wdGlvbnMgc2luY2VcclxuICAgIC8vIHRoZSBob29rIG1heSBtdXRhdGUgcmVzb2x2ZWQgb3B0aW9ucyAoIzI3OTEpXHJcbiAgICBpZiAob3B0aW9ucy5iZWZvcmVDcmVhdGUpIHtcclxuICAgICAgICBjYWxsSG9vayhvcHRpb25zLmJlZm9yZUNyZWF0ZSwgaW5zdGFuY2UsIFwiYmNcIiAvKiBCRUZPUkVfQ1JFQVRFICovKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgXHJcbiAgICAvLyBzdGF0ZVxyXG4gICAgZGF0YTogZGF0YU9wdGlvbnMsIGNvbXB1dGVkOiBjb21wdXRlZE9wdGlvbnMsIG1ldGhvZHMsIHdhdGNoOiB3YXRjaE9wdGlvbnMsIHByb3ZpZGU6IHByb3ZpZGVPcHRpb25zLCBpbmplY3Q6IGluamVjdE9wdGlvbnMsIFxyXG4gICAgLy8gbGlmZWN5Y2xlXHJcbiAgICBjcmVhdGVkLCBiZWZvcmVNb3VudCwgbW91bnRlZCwgYmVmb3JlVXBkYXRlLCB1cGRhdGVkLCBhY3RpdmF0ZWQsIGRlYWN0aXZhdGVkLCBiZWZvcmVEZXN0cm95LCBiZWZvcmVVbm1vdW50LCBkZXN0cm95ZWQsIHVubW91bnRlZCwgcmVuZGVyLCByZW5kZXJUcmFja2VkLCByZW5kZXJUcmlnZ2VyZWQsIGVycm9yQ2FwdHVyZWQsIHNlcnZlclByZWZldGNoLCBcclxuICAgIC8vIHB1YmxpYyBBUElcclxuICAgIGV4cG9zZSwgaW5oZXJpdEF0dHJzLCBcclxuICAgIC8vIGFzc2V0c1xyXG4gICAgY29tcG9uZW50cywgZGlyZWN0aXZlcywgZmlsdGVycyB9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGNyZWF0ZUR1cGxpY2F0ZUNoZWNrZXIoKSA6IG51bGw7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgY29uc3QgW3Byb3BzT3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XHJcbiAgICAgICAgaWYgKHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIlByb3BzXCIgLyogUFJPUFMgKi8sIGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBvcHRpb25zIGluaXRpYWxpemF0aW9uIG9yZGVyICh0byBiZSBjb25zaXN0ZW50IHdpdGggVnVlIDIpOlxyXG4gICAgLy8gLSBwcm9wcyAoYWxyZWFkeSBkb25lIG91dHNpZGUgb2YgdGhpcyBmdW5jdGlvbilcclxuICAgIC8vIC0gaW5qZWN0XHJcbiAgICAvLyAtIG1ldGhvZHNcclxuICAgIC8vIC0gZGF0YSAoZGVmZXJyZWQgc2luY2UgaXQgcmVsaWVzIG9uIGB0aGlzYCBhY2Nlc3MpXHJcbiAgICAvLyAtIGNvbXB1dGVkXHJcbiAgICAvLyAtIHdhdGNoIChkZWZlcnJlZCBzaW5jZSBpdCByZWxpZXMgb24gYHRoaXNgIGFjY2VzcylcclxuICAgIGlmIChpbmplY3RPcHRpb25zKSB7XHJcbiAgICAgICAgcmVzb2x2ZUluamVjdGlvbnMoaW5qZWN0T3B0aW9ucywgY3R4LCBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMsIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnVud3JhcEluamVjdGVkUmVmKTtcclxuICAgIH1cclxuICAgIGlmIChtZXRob2RzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbWV0aG9kcykge1xyXG4gICAgICAgICAgICBjb25zdCBtZXRob2RIYW5kbGVyID0gbWV0aG9kc1trZXldO1xyXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihtZXRob2RIYW5kbGVyKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSW4gZGV2IG1vZGUsIHdlIHVzZSB0aGUgYGNyZWF0ZVJlbmRlckNvbnRleHRgIGZ1bmN0aW9uIHRvIGRlZmluZVxyXG4gICAgICAgICAgICAgICAgLy8gbWV0aG9kcyB0byB0aGUgcHJveHkgdGFyZ2V0LCBhbmQgdGhvc2UgYXJlIHJlYWQtb25seSBidXRcclxuICAgICAgICAgICAgICAgIC8vIHJlY29uZmlndXJhYmxlLCBzbyBpdCBuZWVkcyB0byBiZSByZWRlZmluZWQgaGVyZVxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsIGtleSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbWV0aG9kSGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjdHhba2V5XSA9IG1ldGhvZEhhbmRsZXIuYmluZChwdWJsaWNUaGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJNZXRob2RzXCIgLyogTUVUSE9EUyAqLywga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYE1ldGhvZCBcIiR7a2V5fVwiIGhhcyB0eXBlIFwiJHt0eXBlb2YgbWV0aG9kSGFuZGxlcn1cIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P2ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGRhdGFPcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaXNGdW5jdGlvbihkYXRhT3B0aW9ucykpIHtcclxuICAgICAgICAgICAgd2FybihgVGhlIGRhdGEgb3B0aW9uIG11c3QgYmUgYSBmdW5jdGlvbi4gYCArXHJcbiAgICAgICAgICAgICAgICBgUGxhaW4gb2JqZWN0IHVzYWdlIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBkYXRhT3B0aW9ucy5jYWxsKHB1YmxpY1RoaXMsIHB1YmxpY1RoaXMpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNQcm9taXNlKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYGRhdGEoKSByZXR1cm5lZCBhIFByb21pc2UgLSBub3RlIGRhdGEoKSBjYW5ub3QgYmUgYXN5bmM7IElmIHlvdSBgICtcclxuICAgICAgICAgICAgICAgIGBpbnRlbmQgdG8gcGVyZm9ybSBkYXRhIGZldGNoaW5nIGJlZm9yZSBjb21wb25lbnQgcmVuZGVycywgdXNlIGAgK1xyXG4gICAgICAgICAgICAgICAgYGFzeW5jIHNldHVwKCkgKyA8U3VzcGVuc2U+LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBkYXRhKCkgc2hvdWxkIHJldHVybiBhbiBvYmplY3QuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5kYXRhID0gcmVhY3RpdmUoZGF0YSk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGVja0R1cGxpY2F0ZVByb3BlcnRpZXMoXCJEYXRhXCIgLyogREFUQSAqLywga2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBleHBvc2UgZGF0YSBvbiBjdHggZHVyaW5nIGRldlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlbMF0gIT09ICckJyAmJiBrZXlbMF0gIT09ICdfJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGRhdGFba2V5XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBzdGF0ZSBpbml0aWFsaXphdGlvbiBjb21wbGV0ZSBhdCB0aGlzIHBvaW50IC0gc3RhcnQgY2FjaGluZyBhY2Nlc3NcclxuICAgIHNob3VsZENhY2hlQWNjZXNzID0gdHJ1ZTtcclxuICAgIGlmIChjb21wdXRlZE9wdGlvbnMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBjb21wdXRlZE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29uc3Qgb3B0ID0gY29tcHV0ZWRPcHRpb25zW2tleV07XHJcbiAgICAgICAgICAgIGNvbnN0IGdldCA9IGlzRnVuY3Rpb24ob3B0KVxyXG4gICAgICAgICAgICAgICAgPyBvcHQuYmluZChwdWJsaWNUaGlzLCBwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICAgICAgOiBpc0Z1bmN0aW9uKG9wdC5nZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgPyBvcHQuZ2V0LmJpbmQocHVibGljVGhpcywgcHVibGljVGhpcylcclxuICAgICAgICAgICAgICAgICAgICA6IE5PT1A7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZ2V0ID09PSBOT09QKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBDb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIGhhcyBubyBnZXR0ZXIuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgc2V0ID0gIWlzRnVuY3Rpb24ob3B0KSAmJiBpc0Z1bmN0aW9uKG9wdC5zZXQpXHJcbiAgICAgICAgICAgICAgICA/IG9wdC5zZXQuYmluZChwdWJsaWNUaGlzKVxyXG4gICAgICAgICAgICAgICAgOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgICAgICAgICA/ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgV3JpdGUgb3BlcmF0aW9uIGZhaWxlZDogY29tcHV0ZWQgcHJvcGVydHkgXCIke2tleX1cIiBpcyByZWFkb25seS5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgOiBOT09QO1xyXG4gICAgICAgICAgICBjb25zdCBjID0gY29tcHV0ZWQoe1xyXG4gICAgICAgICAgICAgICAgZ2V0LFxyXG4gICAgICAgICAgICAgICAgc2V0XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGMudmFsdWUsXHJcbiAgICAgICAgICAgICAgICBzZXQ6IHYgPT4gKGMudmFsdWUgPSB2KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzKFwiQ29tcHV0ZWRcIiAvKiBDT01QVVRFRCAqLywga2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh3YXRjaE9wdGlvbnMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB3YXRjaE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY3JlYXRlV2F0Y2hlcih3YXRjaE9wdGlvbnNba2V5XSwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChwcm92aWRlT3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVzID0gaXNGdW5jdGlvbihwcm92aWRlT3B0aW9ucylcclxuICAgICAgICAgICAgPyBwcm92aWRlT3B0aW9ucy5jYWxsKHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgIDogcHJvdmlkZU9wdGlvbnM7XHJcbiAgICAgICAgUmVmbGVjdC5vd25LZXlzKHByb3ZpZGVzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgIHByb3ZpZGUoa2V5LCBwcm92aWRlc1trZXldKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChjcmVhdGVkKSB7XHJcbiAgICAgICAgY2FsbEhvb2soY3JlYXRlZCwgaW5zdGFuY2UsIFwiY1wiIC8qIENSRUFURUQgKi8pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJMaWZlY3ljbGVIb29rKHJlZ2lzdGVyLCBob29rKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoaG9vaykpIHtcclxuICAgICAgICAgICAgaG9vay5mb3JFYWNoKF9ob29rID0+IHJlZ2lzdGVyKF9ob29rLmJpbmQocHVibGljVGhpcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaG9vaykge1xyXG4gICAgICAgICAgICByZWdpc3Rlcihob29rLmJpbmQocHVibGljVGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZU1vdW50LCBiZWZvcmVNb3VudCk7XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25Nb3VudGVkLCBtb3VudGVkKTtcclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkJlZm9yZVVwZGF0ZSwgYmVmb3JlVXBkYXRlKTtcclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVwZGF0ZWQsIHVwZGF0ZWQpO1xyXG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uQWN0aXZhdGVkLCBhY3RpdmF0ZWQpO1xyXG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uRGVhY3RpdmF0ZWQsIGRlYWN0aXZhdGVkKTtcclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvbkVycm9yQ2FwdHVyZWQsIGVycm9yQ2FwdHVyZWQpO1xyXG4gICAgcmVnaXN0ZXJMaWZlY3ljbGVIb29rKG9uUmVuZGVyVHJhY2tlZCwgcmVuZGVyVHJhY2tlZCk7XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25SZW5kZXJUcmlnZ2VyZWQsIHJlbmRlclRyaWdnZXJlZCk7XHJcbiAgICByZWdpc3RlckxpZmVjeWNsZUhvb2sob25CZWZvcmVVbm1vdW50LCBiZWZvcmVVbm1vdW50KTtcclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblVubW91bnRlZCwgdW5tb3VudGVkKTtcclxuICAgIHJlZ2lzdGVyTGlmZWN5Y2xlSG9vayhvblNlcnZlclByZWZldGNoLCBzZXJ2ZXJQcmVmZXRjaCk7XHJcbiAgICBpZiAoaXNBcnJheShleHBvc2UpKSB7XHJcbiAgICAgICAgaWYgKGV4cG9zZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgZXhwb3NlZCA9IGluc3RhbmNlLmV4cG9zZWQgfHwgKGluc3RhbmNlLmV4cG9zZWQgPSB7fSk7XHJcbiAgICAgICAgICAgIGV4cG9zZS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3NlZCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBwdWJsaWNUaGlzW2tleV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0OiB2YWwgPT4gKHB1YmxpY1RoaXNba2V5XSA9IHZhbClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIWluc3RhbmNlLmV4cG9zZWQpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZXhwb3NlZCA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG9wdGlvbnMgdGhhdCBhcmUgaGFuZGxlZCB3aGVuIGNyZWF0aW5nIHRoZSBpbnN0YW5jZSBidXQgYWxzbyBuZWVkIHRvIGJlXHJcbiAgICAvLyBhcHBsaWVkIGZyb20gbWl4aW5zXHJcbiAgICBpZiAocmVuZGVyICYmIGluc3RhbmNlLnJlbmRlciA9PT0gTk9PUCkge1xyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlciA9IHJlbmRlcjtcclxuICAgIH1cclxuICAgIGlmIChpbmhlcml0QXR0cnMgIT0gbnVsbCkge1xyXG4gICAgICAgIGluc3RhbmNlLmluaGVyaXRBdHRycyA9IGluaGVyaXRBdHRycztcclxuICAgIH1cclxuICAgIC8vIGFzc2V0IG9wdGlvbnMuXHJcbiAgICBpZiAoY29tcG9uZW50cylcclxuICAgICAgICBpbnN0YW5jZS5jb21wb25lbnRzID0gY29tcG9uZW50cztcclxuICAgIGlmIChkaXJlY3RpdmVzKVxyXG4gICAgICAgIGluc3RhbmNlLmRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzO1xyXG59XHJcbmZ1bmN0aW9uIHJlc29sdmVJbmplY3Rpb25zKGluamVjdE9wdGlvbnMsIGN0eCwgY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzID0gTk9PUCwgdW53cmFwUmVmID0gZmFsc2UpIHtcclxuICAgIGlmIChpc0FycmF5KGluamVjdE9wdGlvbnMpKSB7XHJcbiAgICAgICAgaW5qZWN0T3B0aW9ucyA9IG5vcm1hbGl6ZUluamVjdChpbmplY3RPcHRpb25zKTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga2V5IGluIGluamVjdE9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBvcHQgPSBpbmplY3RPcHRpb25zW2tleV07XHJcbiAgICAgICAgbGV0IGluamVjdGVkO1xyXG4gICAgICAgIGlmIChpc09iamVjdChvcHQpKSB7XHJcbiAgICAgICAgICAgIGlmICgnZGVmYXVsdCcgaW4gb3B0KSB7XHJcbiAgICAgICAgICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXksIG9wdC5kZWZhdWx0LCB0cnVlIC8qIHRyZWF0IGRlZmF1bHQgZnVuY3Rpb24gYXMgZmFjdG9yeSAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQuZnJvbSB8fCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpbmplY3RlZCA9IGluamVjdChvcHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNSZWYoaW5qZWN0ZWQpKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gcmVtb3ZlIHRoZSBjaGVjayBpbiAzLjNcclxuICAgICAgICAgICAgaWYgKHVud3JhcFJlZikge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGN0eCwga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiAoKSA9PiBpbmplY3RlZC52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBzZXQ6IHYgPT4gKGluamVjdGVkLnZhbHVlID0gdilcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYGluamVjdGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYSByZWYgYW5kIHdpbGwgYmUgYXV0by11bndyYXBwZWQgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBhbmQgbm8gbG9uZ2VyIG5lZWRzIFxcYC52YWx1ZVxcYCBpbiB0aGUgbmV4dCBtaW5vciByZWxlYXNlLiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYFRvIG9wdC1pbiB0byB0aGUgbmV3IGJlaGF2aW9yIG5vdywgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBzZXQgXFxgYXBwLmNvbmZpZy51bndyYXBJbmplY3RlZFJlZiA9IHRydWVcXGAgKHRoaXMgY29uZmlnIGlzIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgdGVtcG9yYXJ5IGFuZCB3aWxsIG5vdCBiZSBuZWVkZWQgaW4gdGhlIGZ1dHVyZS4pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IGluamVjdGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjdHhba2V5XSA9IGluamVjdGVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIGNoZWNrRHVwbGljYXRlUHJvcGVydGllcyhcIkluamVjdFwiIC8qIElOSkVDVCAqLywga2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY2FsbEhvb2soaG9vaywgaW5zdGFuY2UsIHR5cGUpIHtcclxuICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKGlzQXJyYXkoaG9vaylcclxuICAgICAgICA/IGhvb2subWFwKGggPT4gaC5iaW5kKGluc3RhbmNlLnByb3h5KSlcclxuICAgICAgICA6IGhvb2suYmluZChpbnN0YW5jZS5wcm94eSksIGluc3RhbmNlLCB0eXBlKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyKHJhdywgY3R4LCBwdWJsaWNUaGlzLCBrZXkpIHtcclxuICAgIGNvbnN0IGdldHRlciA9IGtleS5pbmNsdWRlcygnLicpXHJcbiAgICAgICAgPyBjcmVhdGVQYXRoR2V0dGVyKHB1YmxpY1RoaXMsIGtleSlcclxuICAgICAgICA6ICgpID0+IHB1YmxpY1RoaXNba2V5XTtcclxuICAgIGlmIChpc1N0cmluZyhyYXcpKSB7XHJcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGN0eFtyYXddO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgIHdhdGNoKGdldHRlciwgaGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3fVwiYCwgaGFuZGxlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNGdW5jdGlvbihyYXcpKSB7XHJcbiAgICAgICAgd2F0Y2goZ2V0dGVyLCByYXcuYmluZChwdWJsaWNUaGlzKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChyYXcpKSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkocmF3KSkge1xyXG4gICAgICAgICAgICByYXcuZm9yRWFjaChyID0+IGNyZWF0ZVdhdGNoZXIociwgY3R4LCBwdWJsaWNUaGlzLCBrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBpc0Z1bmN0aW9uKHJhdy5oYW5kbGVyKVxyXG4gICAgICAgICAgICAgICAgPyByYXcuaGFuZGxlci5iaW5kKHB1YmxpY1RoaXMpXHJcbiAgICAgICAgICAgICAgICA6IGN0eFtyYXcuaGFuZGxlcl07XHJcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXRjaChnZXR0ZXIsIGhhbmRsZXIsIHJhdyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBJbnZhbGlkIHdhdGNoIGhhbmRsZXIgc3BlY2lmaWVkIGJ5IGtleSBcIiR7cmF3LmhhbmRsZXJ9XCJgLCBoYW5kbGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oYEludmFsaWQgd2F0Y2ggb3B0aW9uOiBcIiR7a2V5fVwiYCwgcmF3KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmVzb2x2ZSBtZXJnZWQgb3B0aW9ucyBhbmQgY2FjaGUgaXQgb24gdGhlIGNvbXBvbmVudC5cclxuICogVGhpcyBpcyBkb25lIG9ubHkgb25jZSBwZXItY29tcG9uZW50IHNpbmNlIHRoZSBtZXJnaW5nIGRvZXMgbm90IGludm9sdmVcclxuICogaW5zdGFuY2VzLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGJhc2UgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgY29uc3QgeyBtaXhpbnMsIGV4dGVuZHM6IGV4dGVuZHNPcHRpb25zIH0gPSBiYXNlO1xyXG4gICAgY29uc3QgeyBtaXhpbnM6IGdsb2JhbE1peGlucywgb3B0aW9uc0NhY2hlOiBjYWNoZSwgY29uZmlnOiB7IG9wdGlvbk1lcmdlU3RyYXRlZ2llcyB9IH0gPSBpbnN0YW5jZS5hcHBDb250ZXh0O1xyXG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGJhc2UpO1xyXG4gICAgbGV0IHJlc29sdmVkO1xyXG4gICAgaWYgKGNhY2hlZCkge1xyXG4gICAgICAgIHJlc29sdmVkID0gY2FjaGVkO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIWdsb2JhbE1peGlucy5sZW5ndGggJiYgIW1peGlucyAmJiAhZXh0ZW5kc09wdGlvbnMpIHtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlc29sdmVkID0gYmFzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXNvbHZlZCA9IHt9O1xyXG4gICAgICAgIGlmIChnbG9iYWxNaXhpbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbE1peGlucy5mb3JFYWNoKG0gPT4gbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBtLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMsIHRydWUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbWVyZ2VPcHRpb25zKHJlc29sdmVkLCBiYXNlLCBvcHRpb25NZXJnZVN0cmF0ZWdpZXMpO1xyXG4gICAgfVxyXG4gICAgY2FjaGUuc2V0KGJhc2UsIHJlc29sdmVkKTtcclxuICAgIHJldHVybiByZXNvbHZlZDtcclxufVxyXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnModG8sIGZyb20sIHN0cmF0cywgYXNNaXhpbiA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCB7IG1peGlucywgZXh0ZW5kczogZXh0ZW5kc09wdGlvbnMgfSA9IGZyb207XHJcbiAgICBpZiAoZXh0ZW5kc09wdGlvbnMpIHtcclxuICAgICAgICBtZXJnZU9wdGlvbnModG8sIGV4dGVuZHNPcHRpb25zLCBzdHJhdHMsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1peGlucykge1xyXG4gICAgICAgIG1peGlucy5mb3JFYWNoKChtKSA9PiBtZXJnZU9wdGlvbnModG8sIG0sIHN0cmF0cywgdHJ1ZSkpO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xyXG4gICAgICAgIGlmIChhc01peGluICYmIGtleSA9PT0gJ2V4cG9zZScpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBcImV4cG9zZVwiIG9wdGlvbiBpcyBpZ25vcmVkIHdoZW4gZGVjbGFyZWQgaW4gbWl4aW5zIG9yIGV4dGVuZHMuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBJdCBzaG91bGQgb25seSBiZSBkZWNsYXJlZCBpbiB0aGUgYmFzZSBjb21wb25lbnQgaXRzZWxmLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qgc3RyYXQgPSBpbnRlcm5hbE9wdGlvbk1lcmdlU3RyYXRzW2tleV0gfHwgKHN0cmF0cyAmJiBzdHJhdHNba2V5XSk7XHJcbiAgICAgICAgICAgIHRvW2tleV0gPSBzdHJhdCA/IHN0cmF0KHRvW2tleV0sIGZyb21ba2V5XSkgOiBmcm9tW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvO1xyXG59XHJcbmNvbnN0IGludGVybmFsT3B0aW9uTWVyZ2VTdHJhdHMgPSB7XHJcbiAgICBkYXRhOiBtZXJnZURhdGFGbixcclxuICAgIHByb3BzOiBtZXJnZU9iamVjdE9wdGlvbnMsXHJcbiAgICBlbWl0czogbWVyZ2VPYmplY3RPcHRpb25zLFxyXG4gICAgLy8gb2JqZWN0c1xyXG4gICAgbWV0aG9kczogbWVyZ2VPYmplY3RPcHRpb25zLFxyXG4gICAgY29tcHV0ZWQ6IG1lcmdlT2JqZWN0T3B0aW9ucyxcclxuICAgIC8vIGxpZmVjeWNsZVxyXG4gICAgYmVmb3JlQ3JlYXRlOiBtZXJnZUFzQXJyYXksXHJcbiAgICBjcmVhdGVkOiBtZXJnZUFzQXJyYXksXHJcbiAgICBiZWZvcmVNb3VudDogbWVyZ2VBc0FycmF5LFxyXG4gICAgbW91bnRlZDogbWVyZ2VBc0FycmF5LFxyXG4gICAgYmVmb3JlVXBkYXRlOiBtZXJnZUFzQXJyYXksXHJcbiAgICB1cGRhdGVkOiBtZXJnZUFzQXJyYXksXHJcbiAgICBiZWZvcmVEZXN0cm95OiBtZXJnZUFzQXJyYXksXHJcbiAgICBiZWZvcmVVbm1vdW50OiBtZXJnZUFzQXJyYXksXHJcbiAgICBkZXN0cm95ZWQ6IG1lcmdlQXNBcnJheSxcclxuICAgIHVubW91bnRlZDogbWVyZ2VBc0FycmF5LFxyXG4gICAgYWN0aXZhdGVkOiBtZXJnZUFzQXJyYXksXHJcbiAgICBkZWFjdGl2YXRlZDogbWVyZ2VBc0FycmF5LFxyXG4gICAgZXJyb3JDYXB0dXJlZDogbWVyZ2VBc0FycmF5LFxyXG4gICAgc2VydmVyUHJlZmV0Y2g6IG1lcmdlQXNBcnJheSxcclxuICAgIC8vIGFzc2V0c1xyXG4gICAgY29tcG9uZW50czogbWVyZ2VPYmplY3RPcHRpb25zLFxyXG4gICAgZGlyZWN0aXZlczogbWVyZ2VPYmplY3RPcHRpb25zLFxyXG4gICAgLy8gd2F0Y2hcclxuICAgIHdhdGNoOiBtZXJnZVdhdGNoT3B0aW9ucyxcclxuICAgIC8vIHByb3ZpZGUgLyBpbmplY3RcclxuICAgIHByb3ZpZGU6IG1lcmdlRGF0YUZuLFxyXG4gICAgaW5qZWN0OiBtZXJnZUluamVjdFxyXG59O1xyXG5mdW5jdGlvbiBtZXJnZURhdGFGbih0bywgZnJvbSkge1xyXG4gICAgaWYgKCFmcm9tKSB7XHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0bykge1xyXG4gICAgICAgIHJldHVybiBmcm9tO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbigpIHtcclxuICAgICAgICByZXR1cm4gKGV4dGVuZCkoaXNGdW5jdGlvbih0bykgPyB0by5jYWxsKHRoaXMsIHRoaXMpIDogdG8sIGlzRnVuY3Rpb24oZnJvbSkgPyBmcm9tLmNhbGwodGhpcywgdGhpcykgOiBmcm9tKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VJbmplY3QodG8sIGZyb20pIHtcclxuICAgIHJldHVybiBtZXJnZU9iamVjdE9wdGlvbnMobm9ybWFsaXplSW5qZWN0KHRvKSwgbm9ybWFsaXplSW5qZWN0KGZyb20pKTtcclxufVxyXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QocmF3KSB7XHJcbiAgICBpZiAoaXNBcnJheShyYXcpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0ge307XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzW3Jhd1tpXV0gPSByYXdbaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmF3O1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlQXNBcnJheSh0bywgZnJvbSkge1xyXG4gICAgcmV0dXJuIHRvID8gWy4uLm5ldyBTZXQoW10uY29uY2F0KHRvLCBmcm9tKSldIDogZnJvbTtcclxufVxyXG5mdW5jdGlvbiBtZXJnZU9iamVjdE9wdGlvbnModG8sIGZyb20pIHtcclxuICAgIHJldHVybiB0byA/IGV4dGVuZChleHRlbmQoT2JqZWN0LmNyZWF0ZShudWxsKSwgdG8pLCBmcm9tKSA6IGZyb207XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VXYXRjaE9wdGlvbnModG8sIGZyb20pIHtcclxuICAgIGlmICghdG8pXHJcbiAgICAgICAgcmV0dXJuIGZyb207XHJcbiAgICBpZiAoIWZyb20pXHJcbiAgICAgICAgcmV0dXJuIHRvO1xyXG4gICAgY29uc3QgbWVyZ2VkID0gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHRvKTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcclxuICAgICAgICBtZXJnZWRba2V5XSA9IG1lcmdlQXNBcnJheSh0b1trZXldLCBmcm9tW2tleV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1lcmdlZDtcclxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBpc1N0YXRlZnVsLCAvLyByZXN1bHQgb2YgYml0d2lzZSBmbGFnIGNvbXBhcmlzb25cclxuaXNTU1IgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgcHJvcHMgPSB7fTtcclxuICAgIGNvbnN0IGF0dHJzID0ge307XHJcbiAgICBkZWYoYXR0cnMsIEludGVybmFsT2JqZWN0S2V5LCAxKTtcclxuICAgIGluc3RhbmNlLnByb3BzRGVmYXVsdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgc2V0RnVsbFByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcHJvcHMsIGF0dHJzKTtcclxuICAgIC8vIGVuc3VyZSBhbGwgZGVjbGFyZWQgcHJvcCBrZXlzIGFyZSBwcmVzZW50XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5wcm9wc09wdGlvbnNbMF0pIHtcclxuICAgICAgICBpZiAoIShrZXkgaW4gcHJvcHMpKSB7XHJcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gdmFsaWRhdGlvblxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMgfHwge30sIHByb3BzLCBpbnN0YW5jZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNTdGF0ZWZ1bCkge1xyXG4gICAgICAgIC8vIHN0YXRlZnVsXHJcbiAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBpc1NTUiA/IHByb3BzIDogc2hhbGxvd1JlYWN0aXZlKHByb3BzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICghaW5zdGFuY2UudHlwZS5wcm9wcykge1xyXG4gICAgICAgICAgICAvLyBmdW5jdGlvbmFsIHcvIG9wdGlvbmFsIHByb3BzLCBwcm9wcyA9PT0gYXR0cnNcclxuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBhdHRycztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bmN0aW9uYWwgdy8gZGVjbGFyZWQgcHJvcHNcclxuICAgICAgICAgICAgaW5zdGFuY2UucHJvcHMgPSBwcm9wcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbnN0YW5jZS5hdHRycyA9IGF0dHJzO1xyXG59XHJcbmZ1bmN0aW9uIHVwZGF0ZVByb3BzKGluc3RhbmNlLCByYXdQcm9wcywgcmF3UHJldlByb3BzLCBvcHRpbWl6ZWQpIHtcclxuICAgIGNvbnN0IHsgcHJvcHMsIGF0dHJzLCB2bm9kZTogeyBwYXRjaEZsYWcgfSB9ID0gaW5zdGFuY2U7XHJcbiAgICBjb25zdCByYXdDdXJyZW50UHJvcHMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICBjb25zdCBbb3B0aW9uc10gPSBpbnN0YW5jZS5wcm9wc09wdGlvbnM7XHJcbiAgICBsZXQgaGFzQXR0cnNDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICBpZiAoXHJcbiAgICAvLyBhbHdheXMgZm9yY2UgZnVsbCBkaWZmIGluIGRldlxyXG4gICAgLy8gLSAjMTk0MiBpZiBobXIgaXMgZW5hYmxlZCB3aXRoIHNmYyBjb21wb25lbnRcclxuICAgIC8vIC0gdml0ZSM4NzIgbm9uLXNmYyBjb21wb25lbnQgdXNlZCBieSBzZmMgY29tcG9uZW50XHJcbiAgICAhKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgIChpbnN0YW5jZS50eXBlLl9faG1ySWQgfHxcclxuICAgICAgICAgICAgKGluc3RhbmNlLnBhcmVudCAmJiBpbnN0YW5jZS5wYXJlbnQudHlwZS5fX2htcklkKSkpICYmXHJcbiAgICAgICAgKG9wdGltaXplZCB8fCBwYXRjaEZsYWcgPiAwKSAmJlxyXG4gICAgICAgICEocGF0Y2hGbGFnICYgMTYgLyogRlVMTF9QUk9QUyAqLykpIHtcclxuICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCAvKiBQUk9QUyAqLykge1xyXG4gICAgICAgICAgICAvLyBDb21waWxlci1nZW5lcmF0ZWQgcHJvcHMgJiBubyBrZXlzIGNoYW5nZSwganVzdCBzZXQgdGhlIHVwZGF0ZWRcclxuICAgICAgICAgICAgLy8gdGhlIHByb3BzLlxyXG4gICAgICAgICAgICBjb25zdCBwcm9wc1RvVXBkYXRlID0gaW5zdGFuY2Uudm5vZGUuZHluYW1pY1Byb3BzO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzVG9VcGRhdGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBwcm9wc1RvVXBkYXRlW2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gUFJPUFMgZmxhZyBndWFyYW50ZWVzIHJhd1Byb3BzIHRvIGJlIG5vbi1udWxsXHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJhd1Byb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGF0dHIgLyBwcm9wcyBzZXBhcmF0aW9uIHdhcyBkb25lIG9uIGluaXQgYW5kIHdpbGwgYmUgY29uc2lzdGVudFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgY29kZSBwYXRoLCBzbyBqdXN0IGNoZWNrIGlmIGF0dHJzIGhhdmUgaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc093bihhdHRycywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IGF0dHJzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW2NhbWVsaXplZEtleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywgY2FtZWxpemVkS2V5LCB2YWx1ZSwgaW5zdGFuY2UsIGZhbHNlIC8qIGlzQWJzZW50ICovKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IGF0dHJzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNBdHRyc0NoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIGZ1bGwgcHJvcHMgdXBkYXRlLlxyXG4gICAgICAgIGlmIChzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpKSB7XHJcbiAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluIGNhc2Ugb2YgZHluYW1pYyBwcm9wcywgY2hlY2sgaWYgd2UgbmVlZCB0byBkZWxldGUga2V5cyBmcm9tXHJcbiAgICAgICAgLy8gdGhlIHByb3BzIG9iamVjdFxyXG4gICAgICAgIGxldCBrZWJhYktleTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdDdXJyZW50UHJvcHMpIHtcclxuICAgICAgICAgICAgaWYgKCFyYXdQcm9wcyB8fFxyXG4gICAgICAgICAgICAgICAgLy8gZm9yIGNhbWVsQ2FzZVxyXG4gICAgICAgICAgICAgICAgKCFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoZSBvcmlnaW5hbCBwcm9wcyB3YXMgcGFzc2VkIGluIGFzIGtlYmFiLWNhc2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbmQgY29udmVydGVkIHRvIGNhbWVsQ2FzZSAoIzk1NSlcclxuICAgICAgICAgICAgICAgICAgICAoKGtlYmFiS2V5ID0gaHlwaGVuYXRlKGtleSkpID09PSBrZXkgfHwgIWhhc093bihyYXdQcm9wcywga2ViYWJLZXkpKSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhd1ByZXZQcm9wcyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgY2FtZWxDYXNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChyYXdQcmV2UHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3Iga2ViYWItY2FzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3UHJldlByb3BzW2tlYmFiS2V5XSAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1trZXldID0gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCByYXdDdXJyZW50UHJvcHMsIGtleSwgdW5kZWZpbmVkLCBpbnN0YW5jZSwgdHJ1ZSAvKiBpc0Fic2VudCAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgZnVuY3Rpb25hbCBjb21wb25lbnQgdy9vIHByb3BzIGRlY2xhcmF0aW9uLCBwcm9wcyBhbmRcclxuICAgICAgICAvLyBhdHRycyBwb2ludCB0byB0aGUgc2FtZSBvYmplY3Qgc28gaXQgc2hvdWxkIGFscmVhZHkgaGF2ZSBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgICAgaWYgKGF0dHJzICE9PSByYXdDdXJyZW50UHJvcHMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmF3UHJvcHMgfHxcclxuICAgICAgICAgICAgICAgICAgICAoIWhhc093bihyYXdQcm9wcywga2V5KSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoIWZhbHNlICkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGF0dHJzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzQXR0cnNDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHRyaWdnZXIgdXBkYXRlcyBmb3IgJGF0dHJzIGluIGNhc2UgaXQncyB1c2VkIGluIGNvbXBvbmVudCBzbG90c1xyXG4gICAgaWYgKGhhc0F0dHJzQ2hhbmdlZCkge1xyXG4gICAgICAgIHRyaWdnZXIoaW5zdGFuY2UsIFwic2V0XCIgLyogU0VUICovLCAnJGF0dHJzJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgdmFsaWRhdGVQcm9wcyhyYXdQcm9wcyB8fCB7fSwgcHJvcHMsIGluc3RhbmNlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBzZXRGdWxsUHJvcHMoaW5zdGFuY2UsIHJhd1Byb3BzLCBwcm9wcywgYXR0cnMpIHtcclxuICAgIGNvbnN0IFtvcHRpb25zLCBuZWVkQ2FzdEtleXNdID0gaW5zdGFuY2UucHJvcHNPcHRpb25zO1xyXG4gICAgbGV0IGhhc0F0dHJzQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgbGV0IHJhd0Nhc3RWYWx1ZXM7XHJcbiAgICBpZiAocmF3UHJvcHMpIHtcclxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gcmF3UHJvcHMpIHtcclxuICAgICAgICAgICAgLy8ga2V5LCByZWYgYXJlIHJlc2VydmVkIGFuZCBuZXZlciBwYXNzZWQgZG93blxyXG4gICAgICAgICAgICBpZiAoaXNSZXNlcnZlZFByb3Aoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByYXdQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAvLyBwcm9wIG9wdGlvbiBuYW1lcyBhcmUgY2FtZWxpemVkIGR1cmluZyBub3JtYWxpemF0aW9uLCBzbyB0byBzdXBwb3J0XHJcbiAgICAgICAgICAgIC8vIGtlYmFiIC0+IGNhbWVsIGNvbnZlcnNpb24gaGVyZSB3ZSBuZWVkIHRvIGNhbWVsaXplIHRoZSBrZXkuXHJcbiAgICAgICAgICAgIGxldCBjYW1lbEtleTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgaGFzT3duKG9wdGlvbnMsIChjYW1lbEtleSA9IGNhbWVsaXplKGtleSkpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuZWVkQ2FzdEtleXMgfHwgIW5lZWRDYXN0S2V5cy5pbmNsdWRlcyhjYW1lbEtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wc1tjYW1lbEtleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIChyYXdDYXN0VmFsdWVzIHx8IChyYXdDYXN0VmFsdWVzID0ge30pKVtjYW1lbEtleV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghaXNFbWl0TGlzdGVuZXIoaW5zdGFuY2UuZW1pdHNPcHRpb25zLCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gYXR0cnMpIHx8IHZhbHVlICE9PSBhdHRyc1trZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cnNba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0F0dHJzQ2hhbmdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAobmVlZENhc3RLZXlzKSB7XHJcbiAgICAgICAgY29uc3QgcmF3Q3VycmVudFByb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgICAgIGNvbnN0IGNhc3RWYWx1ZXMgPSByYXdDYXN0VmFsdWVzIHx8IEVNUFRZX09CSjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5lZWRDYXN0S2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBuZWVkQ2FzdEtleXNbaV07XHJcbiAgICAgICAgICAgIHByb3BzW2tleV0gPSByZXNvbHZlUHJvcFZhbHVlKG9wdGlvbnMsIHJhd0N1cnJlbnRQcm9wcywga2V5LCBjYXN0VmFsdWVzW2tleV0sIGluc3RhbmNlLCAhaGFzT3duKGNhc3RWYWx1ZXMsIGtleSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBoYXNBdHRyc0NoYW5nZWQ7XHJcbn1cclxuZnVuY3Rpb24gcmVzb2x2ZVByb3BWYWx1ZShvcHRpb25zLCBwcm9wcywga2V5LCB2YWx1ZSwgaW5zdGFuY2UsIGlzQWJzZW50KSB7XHJcbiAgICBjb25zdCBvcHQgPSBvcHRpb25zW2tleV07XHJcbiAgICBpZiAob3B0ICE9IG51bGwpIHtcclxuICAgICAgICBjb25zdCBoYXNEZWZhdWx0ID0gaGFzT3duKG9wdCwgJ2RlZmF1bHQnKTtcclxuICAgICAgICAvLyBkZWZhdWx0IHZhbHVlc1xyXG4gICAgICAgIGlmIChoYXNEZWZhdWx0ICYmIHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gb3B0LmRlZmF1bHQ7XHJcbiAgICAgICAgICAgIGlmIChvcHQudHlwZSAhPT0gRnVuY3Rpb24gJiYgaXNGdW5jdGlvbihkZWZhdWx0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHByb3BzRGVmYXVsdHMgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbiBwcm9wc0RlZmF1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcm9wc0RlZmF1bHRzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcHJvcHNEZWZhdWx0c1trZXldID0gZGVmYXVsdFZhbHVlLmNhbGwobnVsbCwgcHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBib29sZWFuIGNhc3RpbmdcclxuICAgICAgICBpZiAob3B0WzAgLyogc2hvdWxkQ2FzdCAqL10pIHtcclxuICAgICAgICAgICAgaWYgKGlzQWJzZW50ICYmICFoYXNEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdFsxIC8qIHNob3VsZENhc3RUcnVlICovXSAmJlxyXG4gICAgICAgICAgICAgICAgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHNPcHRpb25zKGNvbXAsIGFwcENvbnRleHQsIGFzTWl4aW4gPSBmYWxzZSkge1xyXG4gICAgY29uc3QgY2FjaGUgPSBhcHBDb250ZXh0LnByb3BzQ2FjaGU7XHJcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoY29tcCk7XHJcbiAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcclxuICAgIH1cclxuICAgIGNvbnN0IHJhdyA9IGNvbXAucHJvcHM7XHJcbiAgICBjb25zdCBub3JtYWxpemVkID0ge307XHJcbiAgICBjb25zdCBuZWVkQ2FzdEtleXMgPSBbXTtcclxuICAgIC8vIGFwcGx5IG1peGluL2V4dGVuZHMgcHJvcHNcclxuICAgIGxldCBoYXNFeHRlbmRzID0gZmFsc2U7XHJcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhaXNGdW5jdGlvbihjb21wKSkge1xyXG4gICAgICAgIGNvbnN0IGV4dGVuZFByb3BzID0gKHJhdykgPT4ge1xyXG4gICAgICAgICAgICBoYXNFeHRlbmRzID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3QgW3Byb3BzLCBrZXlzXSA9IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyhyYXcsIGFwcENvbnRleHQsIHRydWUpO1xyXG4gICAgICAgICAgICBleHRlbmQobm9ybWFsaXplZCwgcHJvcHMpO1xyXG4gICAgICAgICAgICBpZiAoa2V5cylcclxuICAgICAgICAgICAgICAgIG5lZWRDYXN0S2V5cy5wdXNoKC4uLmtleXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCFhc01peGluICYmIGFwcENvbnRleHQubWl4aW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhcHBDb250ZXh0Lm1peGlucy5mb3JFYWNoKGV4dGVuZFByb3BzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNvbXAuZXh0ZW5kcykge1xyXG4gICAgICAgICAgICBleHRlbmRQcm9wcyhjb21wLmV4dGVuZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY29tcC5taXhpbnMpIHtcclxuICAgICAgICAgICAgY29tcC5taXhpbnMuZm9yRWFjaChleHRlbmRQcm9wcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFyYXcgJiYgIWhhc0V4dGVuZHMpIHtcclxuICAgICAgICBjYWNoZS5zZXQoY29tcCwgRU1QVFlfQVJSKTtcclxuICAgICAgICByZXR1cm4gRU1QVFlfQVJSO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXJyYXkocmF3KSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzU3RyaW5nKHJhd1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYHByb3BzIG11c3QgYmUgc3RyaW5ncyB3aGVuIHVzaW5nIGFycmF5IHN5bnRheC5gLCByYXdbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShyYXdbaV0pO1xyXG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFtub3JtYWxpemVkS2V5XSA9IEVNUFRZX09CSjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHJhdykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWlzT2JqZWN0KHJhdykpIHtcclxuICAgICAgICAgICAgd2FybihgaW52YWxpZCBwcm9wcyBvcHRpb25zYCwgcmF3KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmF3KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRLZXkgPSBjYW1lbGl6ZShrZXkpO1xyXG4gICAgICAgICAgICBpZiAodmFsaWRhdGVQcm9wTmFtZShub3JtYWxpemVkS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0ID0gcmF3W2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gKG5vcm1hbGl6ZWRbbm9ybWFsaXplZEtleV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIGlzQXJyYXkob3B0KSB8fCBpc0Z1bmN0aW9uKG9wdCkgPyB7IHR5cGU6IG9wdCB9IDogb3B0KTtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BbMCAvKiBzaG91bGRDYXN0ICovXSA9IGJvb2xlYW5JbmRleCA+IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BbMSAvKiBzaG91bGRDYXN0VHJ1ZSAqL10gPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHByb3AgbmVlZHMgYm9vbGVhbiBjYXN0aW5nIG9yIGRlZmF1bHQgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9vbGVhbkluZGV4ID4gLTEgfHwgaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZENhc3RLZXlzLnB1c2gobm9ybWFsaXplZEtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzID0gW25vcm1hbGl6ZWQsIG5lZWRDYXN0S2V5c107XHJcbiAgICBjYWNoZS5zZXQoY29tcCwgcmVzKTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wTmFtZShrZXkpIHtcclxuICAgIGlmIChrZXlbMF0gIT09ICckJykge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FybihgSW52YWxpZCBwcm9wIG5hbWU6IFwiJHtrZXl9XCIgaXMgYSByZXNlcnZlZCBwcm9wZXJ0eS5gKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG4vLyB1c2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgdHlwZSBjb25zdHJ1Y3RvcnNcclxuLy8gc28gdGhhdCBpdCB3b3JrcyBhY3Jvc3Mgdm1zIC8gaWZyYW1lcy5cclxuZnVuY3Rpb24gZ2V0VHlwZShjdG9yKSB7XHJcbiAgICBjb25zdCBtYXRjaCA9IGN0b3IgJiYgY3Rvci50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xyXG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBjdG9yID09PSBudWxsID8gJ251bGwnIDogJyc7XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lVHlwZShhLCBiKSB7XHJcbiAgICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKTtcclxufVxyXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXgodHlwZSwgZXhwZWN0ZWRUeXBlcykge1xyXG4gICAgaWYgKGlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcclxuICAgICAgICByZXR1cm4gZXhwZWN0ZWRUeXBlcy5maW5kSW5kZXgodCA9PiBpc1NhbWVUeXBlKHQsIHR5cGUpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzRnVuY3Rpb24oZXhwZWN0ZWRUeXBlcykpIHtcclxuICAgICAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMTtcclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMocmF3UHJvcHMsIHByb3BzLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgcmVzb2x2ZWRWYWx1ZXMgPSB0b1Jhdyhwcm9wcyk7XHJcbiAgICBjb25zdCBvcHRpb25zID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdO1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIGxldCBvcHQgPSBvcHRpb25zW2tleV07XHJcbiAgICAgICAgaWYgKG9wdCA9PSBudWxsKVxyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB2YWxpZGF0ZVByb3Aoa2V5LCByZXNvbHZlZFZhbHVlc1trZXldLCBvcHQsICFoYXNPd24ocmF3UHJvcHMsIGtleSkgJiYgIWhhc093bihyYXdQcm9wcywgaHlwaGVuYXRlKGtleSkpKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcChuYW1lLCB2YWx1ZSwgcHJvcCwgaXNBYnNlbnQpIHtcclxuICAgIGNvbnN0IHsgdHlwZSwgcmVxdWlyZWQsIHZhbGlkYXRvciB9ID0gcHJvcDtcclxuICAgIC8vIHJlcXVpcmVkIVxyXG4gICAgaWYgKHJlcXVpcmVkICYmIGlzQWJzZW50KSB7XHJcbiAgICAgICAgd2FybignTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gbWlzc2luZyBidXQgb3B0aW9uYWxcclxuICAgIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gdHlwZSBjaGVja1xyXG4gICAgaWYgKHR5cGUgIT0gbnVsbCAmJiB0eXBlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCB0eXBlcyA9IGlzQXJyYXkodHlwZSkgPyB0eXBlIDogW3R5cGVdO1xyXG4gICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZXMgPSBbXTtcclxuICAgICAgICAvLyB2YWx1ZSBpcyB2YWxpZCBhcyBsb25nIGFzIG9uZSBvZiB0aGUgc3BlY2lmaWVkIHR5cGVzIG1hdGNoXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlcy5sZW5ndGggJiYgIWlzVmFsaWQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB7IHZhbGlkLCBleHBlY3RlZFR5cGUgfSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVzW2ldKTtcclxuICAgICAgICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGV4cGVjdGVkVHlwZSB8fCAnJyk7XHJcbiAgICAgICAgICAgIGlzVmFsaWQgPSB2YWxpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjdXN0b20gdmFsaWRhdG9yXHJcbiAgICBpZiAodmFsaWRhdG9yICYmICF2YWxpZGF0b3IodmFsdWUpKSB7XHJcbiAgICAgICAgd2FybignSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGlzU2ltcGxlVHlwZSA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnU3RyaW5nLE51bWJlcixCb29sZWFuLEZ1bmN0aW9uLFN5bWJvbCxCaWdJbnQnKTtcclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlKSB7XHJcbiAgICBsZXQgdmFsaWQ7XHJcbiAgICBjb25zdCBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xyXG4gICAgaWYgKGlzU2ltcGxlVHlwZShleHBlY3RlZFR5cGUpKSB7XHJcbiAgICAgICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZTtcclxuICAgICAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXHJcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XHJcbiAgICAgICAgdmFsaWQgPSBpc09iamVjdCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcclxuICAgICAgICB2YWxpZCA9IGlzQXJyYXkodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnbnVsbCcpIHtcclxuICAgICAgICB2YWxpZCA9IHZhbHVlID09PSBudWxsO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkLFxyXG4gICAgICAgIGV4cGVjdGVkVHlwZVxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xyXG4gICAgbGV0IG1lc3NhZ2UgPSBgSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIiR7bmFtZX1cIi5gICtcclxuICAgICAgICBgIEV4cGVjdGVkICR7ZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignIHwgJyl9YDtcclxuICAgIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XHJcbiAgICBjb25zdCByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xyXG4gICAgY29uc3QgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XHJcbiAgICBjb25zdCByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcclxuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxyXG4gICAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXHJcbiAgICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcclxuICAgICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xyXG4gICAgICAgIG1lc3NhZ2UgKz0gYCB3aXRoIHZhbHVlICR7ZXhwZWN0ZWRWYWx1ZX1gO1xyXG4gICAgfVxyXG4gICAgbWVzc2FnZSArPSBgLCBnb3QgJHtyZWNlaXZlZFR5cGV9IGA7XHJcbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcclxuICAgIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xyXG4gICAgICAgIG1lc3NhZ2UgKz0gYHdpdGggdmFsdWUgJHtyZWNlaXZlZFZhbHVlfS5gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1lc3NhZ2U7XHJcbn1cclxuLyoqXHJcbiAqIGRldiBvbmx5XHJcbiAqL1xyXG5mdW5jdGlvbiBzdHlsZVZhbHVlKHZhbHVlLCB0eXBlKSB7XHJcbiAgICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gYFwiJHt2YWx1ZX1cImA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xyXG4gICAgICAgIHJldHVybiBgJHtOdW1iZXIodmFsdWUpfWA7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYCR7dmFsdWV9YDtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogZGV2IG9ubHlcclxuICovXHJcbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSh0eXBlKSB7XHJcbiAgICBjb25zdCBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcclxuICAgIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZWxlbSA9PiB0eXBlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW0pO1xyXG59XHJcbi8qKlxyXG4gKiBkZXYgb25seVxyXG4gKi9cclxuZnVuY3Rpb24gaXNCb29sZWFuKC4uLmFyZ3MpIHtcclxuICAgIHJldHVybiBhcmdzLnNvbWUoZWxlbSA9PiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJyk7XHJcbn1cblxuY29uc3QgaXNJbnRlcm5hbEtleSA9IChrZXkpID0+IGtleVswXSA9PT0gJ18nIHx8IGtleSA9PT0gJyRzdGFibGUnO1xyXG5jb25zdCBub3JtYWxpemVTbG90VmFsdWUgPSAodmFsdWUpID0+IGlzQXJyYXkodmFsdWUpXHJcbiAgICA/IHZhbHVlLm1hcChub3JtYWxpemVWTm9kZSlcclxuICAgIDogW25vcm1hbGl6ZVZOb2RlKHZhbHVlKV07XHJcbmNvbnN0IG5vcm1hbGl6ZVNsb3QgPSAoa2V5LCByYXdTbG90LCBjdHgpID0+IHtcclxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB3aXRoQ3R4KCguLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjdXJyZW50SW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgd2FybihgU2xvdCBcIiR7a2V5fVwiIGludm9rZWQgb3V0c2lkZSBvZiB0aGUgcmVuZGVyIGZ1bmN0aW9uOiBgICtcclxuICAgICAgICAgICAgICAgIGB0aGlzIHdpbGwgbm90IHRyYWNrIGRlcGVuZGVuY2llcyB1c2VkIGluIHRoZSBzbG90LiBgICtcclxuICAgICAgICAgICAgICAgIGBJbnZva2UgdGhlIHNsb3QgZnVuY3Rpb24gaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24gaW5zdGVhZC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNsb3RWYWx1ZShyYXdTbG90KC4uLmFyZ3MpKTtcclxuICAgIH0sIGN0eCk7XHJcbiAgICBub3JtYWxpemVkLl9jID0gZmFsc2U7XHJcbiAgICByZXR1cm4gbm9ybWFsaXplZDtcclxufTtcclxuY29uc3Qgbm9ybWFsaXplT2JqZWN0U2xvdHMgPSAocmF3U2xvdHMsIHNsb3RzLCBpbnN0YW5jZSkgPT4ge1xyXG4gICAgY29uc3QgY3R4ID0gcmF3U2xvdHMuX2N0eDtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Nsb3RzKSB7XHJcbiAgICAgICAgaWYgKGlzSW50ZXJuYWxLZXkoa2V5KSlcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSByYXdTbG90c1trZXldO1xyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBzbG90c1trZXldID0gbm9ybWFsaXplU2xvdChrZXksIHZhbHVlLCBjdHgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICEoZmFsc2UgKSkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgTm9uLWZ1bmN0aW9uIHZhbHVlIGVuY291bnRlcmVkIGZvciBzbG90IFwiJHtrZXl9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplU2xvdFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgc2xvdHNba2V5XSA9ICgpID0+IG5vcm1hbGl6ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5jb25zdCBub3JtYWxpemVWTm9kZVNsb3RzID0gKGluc3RhbmNlLCBjaGlsZHJlbikgPT4ge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICFpc0tlZXBBbGl2ZShpbnN0YW5jZS52bm9kZSkgJiZcclxuICAgICAgICAhKGZhbHNlICkpIHtcclxuICAgICAgICB3YXJuKGBOb24tZnVuY3Rpb24gdmFsdWUgZW5jb3VudGVyZWQgZm9yIGRlZmF1bHQgc2xvdC4gYCArXHJcbiAgICAgICAgICAgIGBQcmVmZXIgZnVuY3Rpb24gc2xvdHMgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5gKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVTbG90VmFsdWUoY2hpbGRyZW4pO1xyXG4gICAgaW5zdGFuY2Uuc2xvdHMuZGVmYXVsdCA9ICgpID0+IG5vcm1hbGl6ZWQ7XHJcbn07XHJcbmNvbnN0IGluaXRTbG90cyA9IChpbnN0YW5jZSwgY2hpbGRyZW4pID0+IHtcclxuICAgIGlmIChpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiAzMiAvKiBTTE9UU19DSElMRFJFTiAqLykge1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSBjaGlsZHJlbi5fO1xyXG4gICAgICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgICAgIC8vIHVzZXJzIGNhbiBnZXQgdGhlIHNoYWxsb3cgcmVhZG9ubHkgdmVyc2lvbiBvZiB0aGUgc2xvdHMgb2JqZWN0IHRocm91Z2ggYHRoaXMuJHNsb3RzYCxcclxuICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIGF2b2lkIHRoZSBwcm94eSBvYmplY3QgcG9sbHV0aW5nIHRoZSBzbG90cyBvZiB0aGUgaW50ZXJuYWwgaW5zdGFuY2VcclxuICAgICAgICAgICAgaW5zdGFuY2Uuc2xvdHMgPSB0b1JhdyhjaGlsZHJlbik7XHJcbiAgICAgICAgICAgIC8vIG1ha2UgY29tcGlsZXIgbWFya2VyIG5vbi1lbnVtZXJhYmxlXHJcbiAgICAgICAgICAgIGRlZihjaGlsZHJlbiwgJ18nLCB0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCAoaW5zdGFuY2Uuc2xvdHMgPSB7fSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGluc3RhbmNlLnNsb3RzID0ge307XHJcbiAgICAgICAgaWYgKGNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZVZOb2RlU2xvdHMoaW5zdGFuY2UsIGNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkZWYoaW5zdGFuY2Uuc2xvdHMsIEludGVybmFsT2JqZWN0S2V5LCAxKTtcclxufTtcclxuY29uc3QgdXBkYXRlU2xvdHMgPSAoaW5zdGFuY2UsIGNoaWxkcmVuLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgIGNvbnN0IHsgdm5vZGUsIHNsb3RzIH0gPSBpbnN0YW5jZTtcclxuICAgIGxldCBuZWVkRGVsZXRpb25DaGVjayA9IHRydWU7XHJcbiAgICBsZXQgZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0ID0gRU1QVFlfT0JKO1xyXG4gICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDMyIC8qIFNMT1RTX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IGNoaWxkcmVuLl87XHJcbiAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgLy8gY29tcGlsZWQgc2xvdHMuXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgICAgICAgICAgLy8gUGFyZW50IHdhcyBITVIgdXBkYXRlZCBzbyBzbG90IGNvbnRlbnQgbWF5IGhhdmUgY2hhbmdlZC5cclxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIHVwZGF0ZSBzbG90cyBhbmQgbWFyayBpbnN0YW5jZSBmb3IgaG1yIGFzIHdlbGxcclxuICAgICAgICAgICAgICAgIGV4dGVuZChzbG90cywgY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGltaXplZCAmJiB0eXBlID09PSAxIC8qIFNUQUJMRSAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gY29tcGlsZWQgQU5EIHN0YWJsZS5cclxuICAgICAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gdXBkYXRlLCBhbmQgc2tpcCBzdGFsZSBzbG90cyByZW1vdmFsLlxyXG4gICAgICAgICAgICAgICAgbmVlZERlbGV0aW9uQ2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGVkIGJ1dCBkeW5hbWljICh2LWlmL3YtZm9yIG9uIHNsb3RzKSAtIHVwZGF0ZSBzbG90cywgYnV0IHNraXBcclxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6YXRpb24uXHJcbiAgICAgICAgICAgICAgICBleHRlbmQoc2xvdHMsIGNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIC8vICMyODkzXHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHJlbmRlcmluZyB0aGUgb3B0aW1pemVkIHNsb3RzIGJ5IG1hbnVhbGx5IHdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9uLFxyXG4gICAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBkZWxldGUgdGhlIGBzbG90cy5fYCBmbGFnIGlmIG5lY2Vzc2FyeSB0byBtYWtlIHN1YnNlcXVlbnQgdXBkYXRlcyByZWxpYWJsZSxcclxuICAgICAgICAgICAgICAgIC8vIGkuZS4gbGV0IHRoZSBgcmVuZGVyU2xvdGAgY3JlYXRlIHRoZSBiYWlsZWQgRnJhZ21lbnRcclxuICAgICAgICAgICAgICAgIGlmICghb3B0aW1pemVkICYmIHR5cGUgPT09IDEgLyogU1RBQkxFICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNsb3RzLl87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5lZWREZWxldGlvbkNoZWNrID0gIWNoaWxkcmVuLiRzdGFibGU7XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZU9iamVjdFNsb3RzKGNoaWxkcmVuLCBzbG90cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IGNoaWxkcmVuO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgICAvLyBub24gc2xvdCBvYmplY3QgY2hpbGRyZW4gKGRpcmVjdCB2YWx1ZSkgcGFzc2VkIHRvIGEgY29tcG9uZW50XHJcbiAgICAgICAgbm9ybWFsaXplVk5vZGVTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xyXG4gICAgICAgIGRlbGV0aW9uQ29tcGFyaXNvblRhcmdldCA9IHsgZGVmYXVsdDogMSB9O1xyXG4gICAgfVxyXG4gICAgLy8gZGVsZXRlIHN0YWxlIHNsb3RzXHJcbiAgICBpZiAobmVlZERlbGV0aW9uQ2hlY2spIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xyXG4gICAgICAgICAgICBpZiAoIWlzSW50ZXJuYWxLZXkoa2V5KSAmJiAhKGtleSBpbiBkZWxldGlvbkNvbXBhcmlzb25UYXJnZXQpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgc2xvdHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcblxuLyoqXHJcblJ1bnRpbWUgaGVscGVyIGZvciBhcHBseWluZyBkaXJlY3RpdmVzIHRvIGEgdm5vZGUuIEV4YW1wbGUgdXNhZ2U6XHJcblxuY29uc3QgY29tcCA9IHJlc29sdmVDb21wb25lbnQoJ2NvbXAnKVxyXG5jb25zdCBmb28gPSByZXNvbHZlRGlyZWN0aXZlKCdmb28nKVxyXG5jb25zdCBiYXIgPSByZXNvbHZlRGlyZWN0aXZlKCdiYXInKVxyXG5cbnJldHVybiB3aXRoRGlyZWN0aXZlcyhoKGNvbXApLCBbXHJcbiAgW2ZvbywgdGhpcy54XSxcclxuICBbYmFyLCB0aGlzLnldXHJcbl0pXHJcbiovXHJcbmNvbnN0IGlzQnVpbHRJbkRpcmVjdGl2ZSA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnYmluZCxjbG9hayxlbHNlLWlmLGVsc2UsZm9yLGh0bWwsaWYsbW9kZWwsb24sb25jZSxwcmUsc2hvdyxzbG90LHRleHQsbWVtbycpO1xyXG5mdW5jdGlvbiB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSkge1xyXG4gICAgaWYgKGlzQnVpbHRJbkRpcmVjdGl2ZShuYW1lKSkge1xyXG4gICAgICAgIHdhcm4oJ0RvIG5vdCB1c2UgYnVpbHQtaW4gZGlyZWN0aXZlIGlkcyBhcyBjdXN0b20gZGlyZWN0aXZlIGlkOiAnICsgbmFtZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFkZHMgZGlyZWN0aXZlcyB0byBhIFZOb2RlLlxyXG4gKi9cclxuZnVuY3Rpb24gd2l0aERpcmVjdGl2ZXModm5vZGUsIGRpcmVjdGl2ZXMpIHtcclxuICAgIGNvbnN0IGludGVybmFsSW5zdGFuY2UgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XHJcbiAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGB3aXRoRGlyZWN0aXZlcyBjYW4gb25seSBiZSB1c2VkIGluc2lkZSByZW5kZXIgZnVuY3Rpb25zLmApO1xyXG4gICAgICAgIHJldHVybiB2bm9kZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGluc3RhbmNlID0gaW50ZXJuYWxJbnN0YW5jZS5wcm94eTtcclxuICAgIGNvbnN0IGJpbmRpbmdzID0gdm5vZGUuZGlycyB8fCAodm5vZGUuZGlycyA9IFtdKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyZWN0aXZlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBbZGlyLCB2YWx1ZSwgYXJnLCBtb2RpZmllcnMgPSBFTVBUWV9PQkpdID0gZGlyZWN0aXZlc1tpXTtcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihkaXIpKSB7XHJcbiAgICAgICAgICAgIGRpciA9IHtcclxuICAgICAgICAgICAgICAgIG1vdW50ZWQ6IGRpcixcclxuICAgICAgICAgICAgICAgIHVwZGF0ZWQ6IGRpclxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlyLmRlZXApIHtcclxuICAgICAgICAgICAgdHJhdmVyc2UodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBiaW5kaW5ncy5wdXNoKHtcclxuICAgICAgICAgICAgZGlyLFxyXG4gICAgICAgICAgICBpbnN0YW5jZSxcclxuICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgIG9sZFZhbHVlOiB2b2lkIDAsXHJcbiAgICAgICAgICAgIGFyZyxcclxuICAgICAgICAgICAgbW9kaWZpZXJzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn1cclxuZnVuY3Rpb24gaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgcHJldlZOb2RlLCBpbnN0YW5jZSwgbmFtZSkge1xyXG4gICAgY29uc3QgYmluZGluZ3MgPSB2bm9kZS5kaXJzO1xyXG4gICAgY29uc3Qgb2xkQmluZGluZ3MgPSBwcmV2Vk5vZGUgJiYgcHJldlZOb2RlLmRpcnM7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmRpbmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgYmluZGluZyA9IGJpbmRpbmdzW2ldO1xyXG4gICAgICAgIGlmIChvbGRCaW5kaW5ncykge1xyXG4gICAgICAgICAgICBiaW5kaW5nLm9sZFZhbHVlID0gb2xkQmluZGluZ3NbaV0udmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBob29rID0gYmluZGluZy5kaXJbbmFtZV07XHJcbiAgICAgICAgaWYgKGhvb2spIHtcclxuICAgICAgICAgICAgLy8gZGlzYWJsZSB0cmFja2luZyBpbnNpZGUgYWxsIGxpZmVjeWNsZSBob29rc1xyXG4gICAgICAgICAgICAvLyBzaW5jZSB0aGV5IGNhbiBwb3RlbnRpYWxseSBiZSBjYWxsZWQgaW5zaWRlIGVmZmVjdHMuXHJcbiAgICAgICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICAgICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDggLyogRElSRUNUSVZFX0hPT0sgKi8sIFtcclxuICAgICAgICAgICAgICAgIHZub2RlLmVsLFxyXG4gICAgICAgICAgICAgICAgYmluZGluZyxcclxuICAgICAgICAgICAgICAgIHZub2RlLFxyXG4gICAgICAgICAgICAgICAgcHJldlZOb2RlXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFwcENvbnRleHQoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFwcDogbnVsbCxcclxuICAgICAgICBjb25maWc6IHtcclxuICAgICAgICAgICAgaXNOYXRpdmVUYWc6IE5PLFxyXG4gICAgICAgICAgICBwZXJmb3JtYW5jZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGdsb2JhbFByb3BlcnRpZXM6IHt9LFxyXG4gICAgICAgICAgICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IHt9LFxyXG4gICAgICAgICAgICBlcnJvckhhbmRsZXI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgd2FybkhhbmRsZXI6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgY29tcGlsZXJPcHRpb25zOiB7fVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWl4aW5zOiBbXSxcclxuICAgICAgICBjb21wb25lbnRzOiB7fSxcclxuICAgICAgICBkaXJlY3RpdmVzOiB7fSxcclxuICAgICAgICBwcm92aWRlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcclxuICAgICAgICBvcHRpb25zQ2FjaGU6IG5ldyBXZWFrTWFwKCksXHJcbiAgICAgICAgcHJvcHNDYWNoZTogbmV3IFdlYWtNYXAoKSxcclxuICAgICAgICBlbWl0c0NhY2hlOiBuZXcgV2Vha01hcCgpXHJcbiAgICB9O1xyXG59XHJcbmxldCB1aWQgPSAwO1xyXG5mdW5jdGlvbiBjcmVhdGVBcHBBUEkocmVuZGVyLCBoeWRyYXRlKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQXBwKHJvb3RDb21wb25lbnQsIHJvb3RQcm9wcyA9IG51bGwpIHtcclxuICAgICAgICBpZiAocm9vdFByb3BzICE9IG51bGwgJiYgIWlzT2JqZWN0KHJvb3RQcm9wcykpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYHJvb3QgcHJvcHMgcGFzc2VkIHRvIGFwcC5tb3VudCgpIG11c3QgYmUgYW4gb2JqZWN0LmApO1xyXG4gICAgICAgICAgICByb290UHJvcHMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQXBwQ29udGV4dCgpO1xyXG4gICAgICAgIGNvbnN0IGluc3RhbGxlZFBsdWdpbnMgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgbGV0IGlzTW91bnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IGFwcCA9IChjb250ZXh0LmFwcCA9IHtcclxuICAgICAgICAgICAgX3VpZDogdWlkKyssXHJcbiAgICAgICAgICAgIF9jb21wb25lbnQ6IHJvb3RDb21wb25lbnQsXHJcbiAgICAgICAgICAgIF9wcm9wczogcm9vdFByb3BzLFxyXG4gICAgICAgICAgICBfY29udGFpbmVyOiBudWxsLFxyXG4gICAgICAgICAgICBfY29udGV4dDogY29udGV4dCxcclxuICAgICAgICAgICAgX2luc3RhbmNlOiBudWxsLFxyXG4gICAgICAgICAgICB2ZXJzaW9uLFxyXG4gICAgICAgICAgICBnZXQgY29uZmlnKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQuY29uZmlnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQgY29uZmlnKHYpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBhcHAuY29uZmlnIGNhbm5vdCBiZSByZXBsYWNlZC4gTW9kaWZ5IGluZGl2aWR1YWwgb3B0aW9ucyBpbnN0ZWFkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1c2UocGx1Z2luLCAuLi5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5oYXMocGx1Z2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGBQbHVnaW4gaGFzIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRhcmdldCBhcHAuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwbHVnaW4gJiYgaXNGdW5jdGlvbihwbHVnaW4uaW5zdGFsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKGFwcCwgLi4ub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHBsdWdpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWRQbHVnaW5zLmFkZChwbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbihhcHAsIC4uLm9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQSBwbHVnaW4gbXVzdCBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhbiBvYmplY3Qgd2l0aCBhbiBcImluc3RhbGxcIiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYGZ1bmN0aW9uLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWl4aW4obWl4aW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChfX1ZVRV9PUFRJT05TX0FQSV9fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0Lm1peGlucy5pbmNsdWRlcyhtaXhpbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5taXhpbnMucHVzaChtaXhpbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKCdNaXhpbiBoYXMgYWxyZWFkeSBiZWVuIGFwcGxpZWQgdG8gdGFyZ2V0IGFwcCcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1peGluLm5hbWUgPyBgOiAke21peGluLm5hbWV9YCA6ICcnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignTWl4aW5zIGFyZSBvbmx5IGF2YWlsYWJsZSBpbiBidWlsZHMgc3VwcG9ydGluZyBPcHRpb25zIEFQSScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lLCBjb250ZXh0LmNvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNvbXBvbmVudHNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYENvbXBvbmVudCBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuY29tcG9uZW50c1tuYW1lXSA9IGNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZURpcmVjdGl2ZU5hbWUobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRpcmVjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpcmVjdGl2ZXNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oYERpcmVjdGl2ZSBcIiR7bmFtZX1cIiBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgaW4gdGFyZ2V0IGFwcC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuZGlyZWN0aXZlc1tuYW1lXSA9IGRpcmVjdGl2ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcHA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1vdW50KHJvb3RDb250YWluZXIsIGlzSHlkcmF0ZSwgaXNTVkcpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNNb3VudGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShyb290Q29tcG9uZW50LCByb290UHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0b3JlIGFwcCBjb250ZXh0IG9uIHRoZSByb290IFZOb2RlLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBiZSBzZXQgb24gdGhlIHJvb3QgaW5zdGFuY2Ugb24gaW5pdGlhbCBtb3VudC5cclxuICAgICAgICAgICAgICAgICAgICB2bm9kZS5hcHBDb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBITVIgcm9vdCByZWxvYWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVsb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyKGNsb25lVk5vZGUodm5vZGUpLCByb290Q29udGFpbmVyLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0h5ZHJhdGUgJiYgaHlkcmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoeWRyYXRlKHZub2RlLCByb290Q29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcih2bm9kZSwgcm9vdENvbnRhaW5lciwgaXNTVkcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcC5fY29udGFpbmVyID0gcm9vdENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICByb290Q29udGFpbmVyLl9fdnVlX2FwcF9fID0gYXBwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5faW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldnRvb2xzSW5pdEFwcChhcHAsIHZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RXhwb3NlUHJveHkodm5vZGUuY29tcG9uZW50KSB8fCB2bm9kZS5jb21wb25lbnQucHJveHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBBcHAgaGFzIGFscmVhZHkgYmVlbiBtb3VudGVkLlxcbmAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgSWYgeW91IHdhbnQgdG8gcmVtb3VudCB0aGUgc2FtZSBhcHAsIG1vdmUgeW91ciBhcHAgY3JlYXRpb24gbG9naWMgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpbnRvIGEgZmFjdG9yeSBmdW5jdGlvbiBhbmQgY3JlYXRlIGZyZXNoIGFwcCBpbnN0YW5jZXMgZm9yIGVhY2ggYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBtb3VudCAtIGUuZy4gXFxgY29uc3QgY3JlYXRlTXlBcHAgPSAoKSA9PiBjcmVhdGVBcHAoQXBwKVxcYGApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1bm1vdW50KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTW91bnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcihudWxsLCBhcHAuX2NvbnRhaW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLl9pbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldnRvb2xzVW5tb3VudEFwcChhcHApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgYXBwLl9jb250YWluZXIuX192dWVfYXBwX187XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGBDYW5ub3QgdW5tb3VudCBhbiBhcHAgdGhhdCBpcyBub3QgbW91bnRlZC5gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJvdmlkZShrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBjb250ZXh0LnByb3ZpZGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgQXBwIGFscmVhZHkgcHJvdmlkZXMgcHJvcGVydHkgd2l0aCBrZXkgXCIke1N0cmluZyhrZXkpfVwiLiBgICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYEl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gd2l0aCB0aGUgbmV3IHZhbHVlLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gVHlwZVNjcmlwdCBkb2Vzbid0IGFsbG93IHN5bWJvbHMgYXMgaW5kZXggdHlwZVxyXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8yNDU4N1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5wcm92aWRlc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYXBwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGFwcDtcclxuICAgIH07XHJcbn1cblxuLyoqXHJcbiAqIEZ1bmN0aW9uIGZvciBoYW5kbGluZyBhIHRlbXBsYXRlIHJlZlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0UmVmKHJhd1JlZiwgb2xkUmF3UmVmLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIGlzVW5tb3VudCA9IGZhbHNlKSB7XHJcbiAgICBpZiAoaXNBcnJheShyYXdSZWYpKSB7XHJcbiAgICAgICAgcmF3UmVmLmZvckVhY2goKHIsIGkpID0+IHNldFJlZihyLCBvbGRSYXdSZWYgJiYgKGlzQXJyYXkob2xkUmF3UmVmKSA/IG9sZFJhd1JlZltpXSA6IG9sZFJhd1JlZiksIHBhcmVudFN1c3BlbnNlLCB2bm9kZSwgaXNVbm1vdW50KSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzQXN5bmNXcmFwcGVyKHZub2RlKSAmJiAhaXNVbm1vdW50KSB7XHJcbiAgICAgICAgLy8gd2hlbiBtb3VudGluZyBhc3luYyBjb21wb25lbnRzLCBub3RoaW5nIG5lZWRzIHRvIGJlIGRvbmUsXHJcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgdGVtcGxhdGUgcmVmIGlzIGZvcndhcmRlZCB0byBpbm5lciBjb21wb25lbnRcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCByZWZWYWx1ZSA9IHZub2RlLnNoYXBlRmxhZyAmIDQgLyogU1RBVEVGVUxfQ09NUE9ORU5UICovXHJcbiAgICAgICAgPyBnZXRFeHBvc2VQcm94eSh2bm9kZS5jb21wb25lbnQpIHx8IHZub2RlLmNvbXBvbmVudC5wcm94eVxyXG4gICAgICAgIDogdm5vZGUuZWw7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGlzVW5tb3VudCA/IG51bGwgOiByZWZWYWx1ZTtcclxuICAgIGNvbnN0IHsgaTogb3duZXIsIHI6IHJlZiB9ID0gcmF3UmVmO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhb3duZXIpIHtcclxuICAgICAgICB3YXJuKGBNaXNzaW5nIHJlZiBvd25lciBjb250ZXh0LiByZWYgY2Fubm90IGJlIHVzZWQgb24gaG9pc3RlZCB2bm9kZXMuIGAgK1xyXG4gICAgICAgICAgICBgQSB2bm9kZSB3aXRoIHJlZiBtdXN0IGJlIGNyZWF0ZWQgaW5zaWRlIHRoZSByZW5kZXIgZnVuY3Rpb24uYCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgb2xkUmVmID0gb2xkUmF3UmVmICYmIG9sZFJhd1JlZi5yO1xyXG4gICAgY29uc3QgcmVmcyA9IG93bmVyLnJlZnMgPT09IEVNUFRZX09CSiA/IChvd25lci5yZWZzID0ge30pIDogb3duZXIucmVmcztcclxuICAgIGNvbnN0IHNldHVwU3RhdGUgPSBvd25lci5zZXR1cFN0YXRlO1xyXG4gICAgLy8gZHluYW1pYyByZWYgY2hhbmdlZC4gdW5zZXQgb2xkIHJlZlxyXG4gICAgaWYgKG9sZFJlZiAhPSBudWxsICYmIG9sZFJlZiAhPT0gcmVmKSB7XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG9sZFJlZikpIHtcclxuICAgICAgICAgICAgcmVmc1tvbGRSZWZdID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKGhhc093bihzZXR1cFN0YXRlLCBvbGRSZWYpKSB7XHJcbiAgICAgICAgICAgICAgICBzZXR1cFN0YXRlW29sZFJlZl0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzUmVmKG9sZFJlZikpIHtcclxuICAgICAgICAgICAgb2xkUmVmLnZhbHVlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaXNGdW5jdGlvbihyZWYpKSB7XHJcbiAgICAgICAgY2FsbFdpdGhFcnJvckhhbmRsaW5nKHJlZiwgb3duZXIsIDEyIC8qIEZVTkNUSU9OX1JFRiAqLywgW3ZhbHVlLCByZWZzXSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBfaXNTdHJpbmcgPSBpc1N0cmluZyhyZWYpO1xyXG4gICAgICAgIGNvbnN0IF9pc1JlZiA9IGlzUmVmKHJlZik7XHJcbiAgICAgICAgaWYgKF9pc1N0cmluZyB8fCBfaXNSZWYpIHtcclxuICAgICAgICAgICAgY29uc3QgZG9TZXQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmF3UmVmLmYpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IF9pc1N0cmluZyA/IHJlZnNbcmVmXSA6IHJlZi52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNVbm1vdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQXJyYXkoZXhpc3RpbmcpICYmIHJlbW92ZShleGlzdGluZywgcmVmVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGV4aXN0aW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9pc1N0cmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnNbcmVmXSA9IFtyZWZWYWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWYudmFsdWUgPSBbcmVmVmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYXdSZWYuaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmc1tyYXdSZWYua10gPSByZWYudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoIWV4aXN0aW5nLmluY2x1ZGVzKHJlZlZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcucHVzaChyZWZWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfaXNTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWZzW3JlZl0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duKHNldHVwU3RhdGUsIHJlZikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0dXBTdGF0ZVtyZWZdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWYocmVmKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZi52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdSZWYuaylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmc1tyYXdSZWYua10gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgdGVtcGxhdGUgcmVmIHR5cGU6JywgcmVmLCBgKCR7dHlwZW9mIHJlZn0pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZG9TZXQuaWQgPSAtMTtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChkb1NldCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZG9TZXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybignSW52YWxpZCB0ZW1wbGF0ZSByZWYgdHlwZTonLCByZWYsIGAoJHt0eXBlb2YgcmVmfSlgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxubGV0IGhhc01pc21hdGNoID0gZmFsc2U7XHJcbmNvbnN0IGlzU1ZHQ29udGFpbmVyID0gKGNvbnRhaW5lcikgPT4gL3N2Zy8udGVzdChjb250YWluZXIubmFtZXNwYWNlVVJJKSAmJiBjb250YWluZXIudGFnTmFtZSAhPT0gJ2ZvcmVpZ25PYmplY3QnO1xyXG5jb25zdCBpc0NvbW1lbnQgPSAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBDT01NRU5UICovO1xyXG4vLyBOb3RlOiBoeWRyYXRpb24gaXMgRE9NLXNwZWNpZmljXHJcbi8vIEJ1dCB3ZSBoYXZlIHRvIHBsYWNlIGl0IGluIGNvcmUgZHVlIHRvIHRpZ2h0IGNvdXBsaW5nIHdpdGggY29yZSAtIHNwbGl0dGluZ1xyXG4vLyBpdCBvdXQgY3JlYXRlcyBhIHRvbiBvZiB1bm5lY2Vzc2FyeSBjb21wbGV4aXR5LlxyXG4vLyBIeWRyYXRpb24gYWxzbyBkZXBlbmRzIG9uIHNvbWUgcmVuZGVyZXIgaW50ZXJuYWwgbG9naWMgd2hpY2ggbmVlZHMgdG8gYmVcclxuLy8gcGFzc2VkIGluIHZpYSBhcmd1bWVudHMuXHJcbmZ1bmN0aW9uIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyhyZW5kZXJlckludGVybmFscykge1xyXG4gICAgY29uc3QgeyBtdDogbW91bnRDb21wb25lbnQsIHA6IHBhdGNoLCBvOiB7IHBhdGNoUHJvcCwgbmV4dFNpYmxpbmcsIHBhcmVudE5vZGUsIHJlbW92ZSwgaW5zZXJ0LCBjcmVhdGVDb21tZW50IH0gfSA9IHJlbmRlcmVySW50ZXJuYWxzO1xyXG4gICAgY29uc3QgaHlkcmF0ZSA9ICh2bm9kZSwgY29udGFpbmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXIuaGFzQ2hpbGROb2RlcygpKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBoeWRyYXRlIGV4aXN0aW5nIG1hcmt1cCBidXQgY29udGFpbmVyIGlzIGVtcHR5LiBgICtcclxuICAgICAgICAgICAgICAgICAgICBgUGVyZm9ybWluZyBmdWxsIG1vdW50IGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIpO1xyXG4gICAgICAgICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhhc01pc21hdGNoID0gZmFsc2U7XHJcbiAgICAgICAgaHlkcmF0ZU5vZGUoY29udGFpbmVyLmZpcnN0Q2hpbGQsIHZub2RlLCBudWxsLCBudWxsLCBudWxsKTtcclxuICAgICAgICBmbHVzaFBvc3RGbHVzaENicygpO1xyXG4gICAgICAgIGlmIChoYXNNaXNtYXRjaCAmJiAhZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gdGhpcyBlcnJvciBzaG91bGQgc2hvdyB1cCBpbiBwcm9kdWN0aW9uXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEh5ZHJhdGlvbiBjb21wbGV0ZWQgYnV0IGNvbnRhaW5zIG1pc21hdGNoZXMuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IGh5ZHJhdGVOb2RlID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCA9IGZhbHNlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNGcmFnbWVudFN0YXJ0ID0gaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gJ1snO1xyXG4gICAgICAgIGNvbnN0IG9uTWlzbWF0Y2ggPSAoKSA9PiBoYW5kbGVNaXNtYXRjaChub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBpc0ZyYWdtZW50U3RhcnQpO1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcmVmLCBzaGFwZUZsYWcgfSA9IHZub2RlO1xyXG4gICAgICAgIGNvbnN0IGRvbVR5cGUgPSBub2RlLm5vZGVUeXBlO1xyXG4gICAgICAgIHZub2RlLmVsID0gbm9kZTtcclxuICAgICAgICBsZXQgbmV4dE5vZGUgPSBudWxsO1xyXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFRleHQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMyAvKiBURVhUICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5kYXRhICE9PSB2bm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIHRleHQgbWlzbWF0Y2g6YCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbi0gQ2xpZW50OiAke0pTT04uc3RyaW5naWZ5KG5vZGUuZGF0YSl9YCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbi0gU2VydmVyOiAke0pTT04uc3RyaW5naWZ5KHZub2RlLmNoaWxkcmVuKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gdm5vZGUuY2hpbGRyZW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tZW50OlxyXG4gICAgICAgICAgICAgICAgaWYgKGRvbVR5cGUgIT09IDggLyogQ09NTUVOVCAqLyB8fCBpc0ZyYWdtZW50U3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG9uTWlzbWF0Y2goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTdGF0aWM6XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9tVHlwZSAhPT0gMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkZXRlcm1pbmUgYW5jaG9yLCBhZG9wdCBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdGF0aWMgdm5vZGUgaGFzIGl0cyBjb250ZW50IHN0cmlwcGVkIGR1cmluZyBidWlsZCxcclxuICAgICAgICAgICAgICAgICAgICAvLyBhZG9wdCBpdCBmcm9tIHRoZSBzZXJ2ZXItcmVuZGVyZWQgSFRNTC5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZWVkVG9BZG9wdENvbnRlbnQgPSAhdm5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdm5vZGUuc3RhdGljQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZFRvQWRvcHRDb250ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUuY2hpbGRyZW4gKz0gbmV4dE5vZGUub3V0ZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gdm5vZGUuc3RhdGljQ291bnQgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bm9kZS5hbmNob3IgPSBuZXh0Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHRTaWJsaW5nKG5leHROb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHROb2RlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgRnJhZ21lbnQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzRnJhZ21lbnRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gb25NaXNtYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBoeWRyYXRlRnJhZ21lbnQobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSAxIC8qIEVMRU1FTlQgKi8gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm5vZGUudHlwZS50b0xvd2VyQ2FzZSgpICE9PVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGh5ZHJhdGVFbGVtZW50KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHNldHRpbmcgdXAgdGhlIHJlbmRlciBlZmZlY3QsIGlmIHRoZSBpbml0aWFsIHZub2RlIGFscmVhZHlcclxuICAgICAgICAgICAgICAgICAgICAvLyBoYXMgLmVsIHNldCwgdGhlIGNvbXBvbmVudCB3aWxsIHBlcmZvcm0gaHlkcmF0aW9uIGluc3RlYWQgb2YgbW91bnRcclxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBpdHMgc3ViLXRyZWUuXHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGUuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHBhcmVudE5vZGUobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDb21wb25lbnQodm5vZGUsIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSwgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgbWF5IGJlIGFzeW5jLCBzbyBpbiB0aGUgY2FzZSBvZiBmcmFnbWVudHMgd2UgY2Fubm90IHJlbHlcclxuICAgICAgICAgICAgICAgICAgICAvLyBvbiBjb21wb25lbnQncyByZW5kZXJlZCBvdXRwdXQgdG8gZGV0ZXJtaW5lIHRoZSBlbmQgb2YgdGhlIGZyYWdtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5zdGVhZCwgd2UgZG8gYSBsb29rYWhlYWQgdG8gZmluZCB0aGUgZW5kIGFuY2hvciBub2RlLlxyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gaXNGcmFnbWVudFN0YXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbG9jYXRlQ2xvc2luZ0FzeW5jQW5jaG9yKG5vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIzM3ODdcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBjb21wb25lbnQgaXMgYXN5bmMsIGl0IG1heSBnZXQgbW92ZWQgLyB1bm1vdW50ZWQgYmVmb3JlIGl0c1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlubmVyIGNvbXBvbmVudCBpcyBsb2FkZWQsIHNvIHdlIG5lZWQgdG8gZ2l2ZSBpdCBhIHBsYWNlaG9sZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgdGhhdCBtYXRjaGVzIGl0cyBhZG9wdGVkIERPTS5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXIodm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdWJUcmVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGcmFnbWVudFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUcmVlID0gY3JlYXRlVk5vZGUoRnJhZ21lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZS5hbmNob3IgPSBuZXh0Tm9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gbmV4dE5vZGUucHJldmlvdXNTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBjb250YWluZXIubGFzdENoaWxkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5ub2RlVHlwZSA9PT0gMyA/IGNyZWF0ZVRleHRWTm9kZSgnJykgOiBjcmVhdGVWTm9kZSgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViVHJlZS5lbCA9IG5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZub2RlLmNvbXBvbmVudC5zdWJUcmVlID0gc3ViVHJlZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb21UeXBlICE9PSA4IC8qIENPTU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBvbk1pc21hdGNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IHZub2RlLnR5cGUuaHlkcmF0ZShub2RlLCB2bm9kZSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlQ2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gdm5vZGUudHlwZS5oeWRyYXRlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWR0NvbnRhaW5lcihwYXJlbnROb2RlKG5vZGUpKSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIHJlbmRlcmVySW50ZXJuYWxzLCBoeWRyYXRlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKCdJbnZhbGlkIEhvc3RWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dE5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUVsZW1lbnQgPSAoZWwsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIG9wdGltaXplZCA9IG9wdGltaXplZCB8fCAhIXZub2RlLmR5bmFtaWNDaGlsZHJlbjtcclxuICAgICAgICBjb25zdCB7IHR5cGUsIHByb3BzLCBwYXRjaEZsYWcsIHNoYXBlRmxhZywgZGlycyB9ID0gdm5vZGU7XHJcbiAgICAgICAgLy8gIzQwMDYgZm9yIGZvcm0gZWxlbWVudHMgd2l0aCBub24tc3RyaW5nIHYtbW9kZWwgdmFsdWUgYmluZGluZ3NcclxuICAgICAgICAvLyBlLmcuIDxvcHRpb24gOnZhbHVlPVwib2JqXCI+LCA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgOnRydWUtdmFsdWU9XCIxXCI+XHJcbiAgICAgICAgY29uc3QgZm9yY2VQYXRjaFZhbHVlID0gKHR5cGUgPT09ICdpbnB1dCcgJiYgZGlycykgfHwgdHlwZSA9PT0gJ29wdGlvbic7XHJcbiAgICAgICAgLy8gc2tpcCBwcm9wcyAmIGNoaWxkcmVuIGlmIHRoaXMgaXMgaG9pc3RlZCBzdGF0aWMgbm9kZXNcclxuICAgICAgICBpZiAoZm9yY2VQYXRjaFZhbHVlIHx8IHBhdGNoRmxhZyAhPT0gLTEgLyogSE9JU1RFRCAqLykge1xyXG4gICAgICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAnY3JlYXRlZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgICAgIGlmIChwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlUGF0Y2hWYWx1ZSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICFvcHRpbWl6ZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaEZsYWcgJiAoMTYgLyogRlVMTF9QUk9QUyAqLyB8IDMyIC8qIEhZRFJBVEVfRVZFTlRTICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZm9yY2VQYXRjaFZhbHVlICYmIGtleS5lbmRzV2l0aCgndmFsdWUnKSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpc09uKGtleSkgJiYgIWlzUmVzZXJ2ZWRQcm9wKGtleSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsIGtleSwgbnVsbCwgcHJvcHNba2V5XSwgZmFsc2UsIHVuZGVmaW5lZCwgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzLm9uQ2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBGYXN0IHBhdGggZm9yIGNsaWNrIGxpc3RlbmVycyAod2hpY2ggaXMgbW9zdCBvZnRlbikgdG8gYXZvaWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBpdGVyYXRpbmcgdGhyb3VnaCBwcm9wcy5cclxuICAgICAgICAgICAgICAgICAgICBwYXRjaFByb3AoZWwsICdvbkNsaWNrJywgbnVsbCwgcHJvcHMub25DbGljaywgZmFsc2UsIHVuZGVmaW5lZCwgcGFyZW50Q29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB2bm9kZSAvIGRpcmVjdGl2ZSBob29rc1xyXG4gICAgICAgICAgICBsZXQgdm5vZGVIb29rcztcclxuICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2tzID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xyXG4gICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9va3MsIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVNb3VudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgodm5vZGVIb29rcyA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSB8fCBkaXJzKSB7XHJcbiAgICAgICAgICAgICAgICBxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdm5vZGVIb29rcyAmJiBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rcywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlycyAmJiBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdtb3VudGVkJyk7XHJcbiAgICAgICAgICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY2hpbGRyZW5cclxuICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovICYmXHJcbiAgICAgICAgICAgICAgICAvLyBza2lwIGlmIGVsZW1lbnQgaGFzIGlubmVySFRNTCAvIHRleHRDb250ZW50XHJcbiAgICAgICAgICAgICAgICAhKHByb3BzICYmIChwcm9wcy5pbm5lckhUTUwgfHwgcHJvcHMudGV4dENvbnRlbnQpKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSBoeWRyYXRlQ2hpbGRyZW4oZWwuZmlyc3RDaGlsZCwgdm5vZGUsIGVsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaGFzV2FybmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFoYXNXYXJuZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9PjogYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgc2VydmVyIHJlbmRlcmVkIGVsZW1lbnQgY29udGFpbnMgbW9yZSBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNXYXJuZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgU1NSZWQgRE9NIGNvbnRhaW5zIG1vcmUgbm9kZXMgdGhhbiBpdCBzaG91bGQuIFJlbW92ZSB0aGVtLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1ciA9IG5leHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IG5leHQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlKGN1cik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgOCAvKiBURVhUX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwudGV4dENvbnRlbnQgIT09IHZub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBIeWRyYXRpb24gdGV4dCBjb250ZW50IG1pc21hdGNoIGluIDwke3Zub2RlLnR5cGV9PjpcXG5gICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtIENsaWVudDogJHtlbC50ZXh0Q29udGVudH1cXG5gICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAtIFNlcnZlcjogJHt2bm9kZS5jaGlsZHJlbn1gKTtcclxuICAgICAgICAgICAgICAgICAgICBlbC50ZXh0Q29udGVudCA9IHZub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbC5uZXh0U2libGluZztcclxuICAgIH07XHJcbiAgICBjb25zdCBoeWRyYXRlQ2hpbGRyZW4gPSAobm9kZSwgcGFyZW50Vk5vZGUsIGNvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBvcHRpbWl6ZWQgPSBvcHRpbWl6ZWQgfHwgISFwYXJlbnRWTm9kZS5keW5hbWljQ2hpbGRyZW47XHJcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBwYXJlbnRWTm9kZS5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCBsID0gY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIGxldCBoYXNXYXJuZWQgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB2bm9kZSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgPyBjaGlsZHJlbltpXVxyXG4gICAgICAgICAgICAgICAgOiAoY2hpbGRyZW5baV0gPSBub3JtYWxpemVWTm9kZShjaGlsZHJlbltpXSkpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IGh5ZHJhdGVOb2RlKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodm5vZGUudHlwZSA9PT0gVGV4dCAmJiAhdm5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaGFzTWlzbWF0Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaGFzV2FybmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIGNoaWxkcmVuIG1pc21hdGNoIGluIDwke2NvbnRhaW5lci50YWdOYW1lLnRvTG93ZXJDYXNlKCl9PjogYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBzZXJ2ZXIgcmVuZGVyZWQgZWxlbWVudCBjb250YWlucyBmZXdlciBjaGlsZCBub2RlcyB0aGFuIGNsaWVudCB2ZG9tLmApO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1dhcm5lZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgU1NSZWQgRE9NIGRpZG4ndCBjb250YWluIGVub3VnaCBub2Rlcy4gTW91bnQgdGhlIG1pc3Npbmcgb25lcy5cclxuICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIHZub2RlLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHQ29udGFpbmVyKGNvbnRhaW5lciksIHNsb3RTY29wZUlkcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaHlkcmF0ZUZyYWdtZW50ID0gKG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgc2xvdFNjb3BlSWRzOiBmcmFnbWVudFNsb3RTY29wZUlkcyB9ID0gdm5vZGU7XHJcbiAgICAgICAgaWYgKGZyYWdtZW50U2xvdFNjb3BlSWRzKSB7XHJcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkc1xyXG4gICAgICAgICAgICAgICAgPyBzbG90U2NvcGVJZHMuY29uY2F0KGZyYWdtZW50U2xvdFNjb3BlSWRzKVxyXG4gICAgICAgICAgICAgICAgOiBmcmFnbWVudFNsb3RTY29wZUlkcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcclxuICAgICAgICBjb25zdCBuZXh0ID0gaHlkcmF0ZUNoaWxkcmVuKG5leHRTaWJsaW5nKG5vZGUpLCB2bm9kZSwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgaWYgKG5leHQgJiYgaXNDb21tZW50KG5leHQpICYmIG5leHQuZGF0YSA9PT0gJ10nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZygodm5vZGUuYW5jaG9yID0gbmV4dCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZnJhZ21lbnQgZGlkbid0IGh5ZHJhdGUgc3VjY2Vzc2Z1bGx5LCBzaW5jZSB3ZSBkaWRuJ3QgZ2V0IGEgZW5kIGFuY2hvclxyXG4gICAgICAgICAgICAvLyBiYWNrLiBUaGlzIHNob3VsZCBoYXZlIGxlZCB0byBub2RlL2NoaWxkcmVuIG1pc21hdGNoIHdhcm5pbmdzLlxyXG4gICAgICAgICAgICBoYXNNaXNtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBhbmNob3IgaXMgbWlzc2luZywgd2UgbmVlZCB0byBjcmVhdGUgb25lIGFuZCBpbnNlcnQgaXRcclxuICAgICAgICAgICAgaW5zZXJ0KCh2bm9kZS5hbmNob3IgPSBjcmVhdGVDb21tZW50KGBdYCkpLCBjb250YWluZXIsIG5leHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgaGFuZGxlTWlzbWF0Y2ggPSAobm9kZSwgdm5vZGUsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgaXNGcmFnbWVudCkgPT4ge1xyXG4gICAgICAgIGhhc01pc21hdGNoID0gdHJ1ZTtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybihgSHlkcmF0aW9uIG5vZGUgbWlzbWF0Y2g6XFxuLSBDbGllbnQgdm5vZGU6YCwgdm5vZGUudHlwZSwgYFxcbi0gU2VydmVyIHJlbmRlcmVkIERPTTpgLCBub2RlLCBub2RlLm5vZGVUeXBlID09PSAzIC8qIFRFWFQgKi9cclxuICAgICAgICAgICAgICAgID8gYCh0ZXh0KWBcclxuICAgICAgICAgICAgICAgIDogaXNDb21tZW50KG5vZGUpICYmIG5vZGUuZGF0YSA9PT0gJ1snXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgKHN0YXJ0IG9mIGZyYWdtZW50KWBcclxuICAgICAgICAgICAgICAgICAgICA6IGBgKTtcclxuICAgICAgICB2bm9kZS5lbCA9IG51bGw7XHJcbiAgICAgICAgaWYgKGlzRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGV4Y2Vzc2l2ZSBmcmFnbWVudCBub2Rlc1xyXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3Iobm9kZSk7XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0ICE9PSBlbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmUobmV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBuZXh0ID0gbmV4dFNpYmxpbmcobm9kZSk7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gcGFyZW50Tm9kZShub2RlKTtcclxuICAgICAgICByZW1vdmUobm9kZSk7XHJcbiAgICAgICAgcGF0Y2gobnVsbCwgdm5vZGUsIGNvbnRhaW5lciwgbmV4dCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkdDb250YWluZXIoY29udGFpbmVyKSwgc2xvdFNjb3BlSWRzKTtcclxuICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgIH07XHJcbiAgICBjb25zdCBsb2NhdGVDbG9zaW5nQXN5bmNBbmNob3IgPSAobm9kZSkgPT4ge1xyXG4gICAgICAgIGxldCBtYXRjaCA9IDA7XHJcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSAmJiBpc0NvbW1lbnQobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmRhdGEgPT09ICdbJylcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaCsrO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZGF0YSA9PT0gJ10nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0U2libGluZyhub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoLS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBub2RlO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdO1xyXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAqL1xyXG5sZXQgc3VwcG9ydGVkO1xyXG5sZXQgcGVyZjtcclxuZnVuY3Rpb24gc3RhcnRNZWFzdXJlKGluc3RhbmNlLCB0eXBlKSB7XHJcbiAgICBpZiAoaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWcucGVyZm9ybWFuY2UgJiYgaXNTdXBwb3J0ZWQoKSkge1xyXG4gICAgICAgIHBlcmYubWFyayhgdnVlLSR7dHlwZX0tJHtpbnN0YW5jZS51aWR9YCk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIGRldnRvb2xzUGVyZlN0YXJ0KGluc3RhbmNlLCB0eXBlLCBzdXBwb3J0ZWQgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZW5kTWVhc3VyZShpbnN0YW5jZSwgdHlwZSkge1xyXG4gICAgaWYgKGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnLnBlcmZvcm1hbmNlICYmIGlzU3VwcG9ydGVkKCkpIHtcclxuICAgICAgICBjb25zdCBzdGFydFRhZyA9IGB2dWUtJHt0eXBlfS0ke2luc3RhbmNlLnVpZH1gO1xyXG4gICAgICAgIGNvbnN0IGVuZFRhZyA9IHN0YXJ0VGFnICsgYDplbmRgO1xyXG4gICAgICAgIHBlcmYubWFyayhlbmRUYWcpO1xyXG4gICAgICAgIHBlcmYubWVhc3VyZShgPCR7Zm9ybWF0Q29tcG9uZW50TmFtZShpbnN0YW5jZSwgaW5zdGFuY2UudHlwZSl9PiAke3R5cGV9YCwgc3RhcnRUYWcsIGVuZFRhZyk7XHJcbiAgICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcclxuICAgICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcclxuICAgIH1cclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgZGV2dG9vbHNQZXJmRW5kKGluc3RhbmNlLCB0eXBlLCBzdXBwb3J0ZWQgPyBwZXJmLm5vdygpIDogRGF0ZS5ub3coKSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XHJcbiAgICBpZiAoc3VwcG9ydGVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gc3VwcG9ydGVkO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wZXJmb3JtYW5jZSkge1xyXG4gICAgICAgIHN1cHBvcnRlZCA9IHRydWU7XHJcbiAgICAgICAgcGVyZiA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHN1cHBvcnRlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1cHBvcnRlZDtcclxufVxuXG4vKipcclxuICogVGhpcyBpcyBvbmx5IGNhbGxlZCBpbiBlc20tYnVuZGxlciBidWlsZHMuXHJcbiAqIEl0IGlzIGNhbGxlZCB3aGVuIGEgcmVuZGVyZXIgaXMgY3JlYXRlZCwgaW4gYGJhc2VDcmVhdGVSZW5kZXJlcmAgc28gdGhhdFxyXG4gKiBpbXBvcnRpbmcgcnVudGltZS1jb3JlIGlzIHNpZGUtZWZmZWN0cyBmcmVlLlxyXG4gKlxyXG4gKiBpc3RhbmJ1bC1pZ25vcmUtbmV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaW5pdEZlYXR1cmVGbGFncygpIHtcclxuICAgIGNvbnN0IG5lZWRXYXJuID0gW107XHJcbiAgICBpZiAodHlwZW9mIF9fVlVFX09QVElPTlNfQVBJX18gIT09ICdib29sZWFuJykge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuZWVkV2Fybi5wdXNoKGBfX1ZVRV9PUFRJT05TX0FQSV9fYCk7XHJcbiAgICAgICAgZ2V0R2xvYmFsVGhpcygpLl9fVlVFX09QVElPTlNfQVBJX18gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBfX1ZVRV9QUk9EX0RFVlRPT0xTX18gIT09ICdib29sZWFuJykge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBuZWVkV2Fybi5wdXNoKGBfX1ZVRV9QUk9EX0RFVlRPT0xTX19gKTtcclxuICAgICAgICBnZXRHbG9iYWxUaGlzKCkuX19WVUVfUFJPRF9ERVZUT09MU19fID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG5lZWRXYXJuLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IG11bHRpID0gbmVlZFdhcm4ubGVuZ3RoID4gMTtcclxuICAgICAgICBjb25zb2xlLndhcm4oYEZlYXR1cmUgZmxhZyR7bXVsdGkgPyBgc2AgOiBgYH0gJHtuZWVkV2Fybi5qb2luKCcsICcpfSAke211bHRpID8gYGFyZWAgOiBgaXNgfSBub3QgZXhwbGljaXRseSBkZWZpbmVkLiBZb3UgYXJlIHJ1bm5pbmcgdGhlIGVzbS1idW5kbGVyIGJ1aWxkIG9mIFZ1ZSwgYCArXHJcbiAgICAgICAgICAgIGB3aGljaCBleHBlY3RzIHRoZXNlIGNvbXBpbGUtdGltZSBmZWF0dXJlIGZsYWdzIHRvIGJlIGdsb2JhbGx5IGluamVjdGVkIGAgK1xyXG4gICAgICAgICAgICBgdmlhIHRoZSBidW5kbGVyIGNvbmZpZyBpbiBvcmRlciB0byBnZXQgYmV0dGVyIHRyZWUtc2hha2luZyBpbiB0aGUgYCArXHJcbiAgICAgICAgICAgIGBwcm9kdWN0aW9uIGJ1bmRsZS5cXG5cXG5gICtcclxuICAgICAgICAgICAgYEZvciBtb3JlIGRldGFpbHMsIHNlZSBodHRwczovL2xpbmsudnVlanMub3JnL2ZlYXR1cmUtZmxhZ3MuYCk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgcXVldWVQb3N0UmVuZGVyRWZmZWN0ID0gcXVldWVFZmZlY3RXaXRoU3VzcGVuc2VcclxuICAgIDtcclxuLyoqXHJcbiAqIFRoZSBjcmVhdGVSZW5kZXJlciBmdW5jdGlvbiBhY2NlcHRzIHR3byBnZW5lcmljIGFyZ3VtZW50czpcclxuICogSG9zdE5vZGUgYW5kIEhvc3RFbGVtZW50LCBjb3JyZXNwb25kaW5nIHRvIE5vZGUgYW5kIEVsZW1lbnQgdHlwZXMgaW4gdGhlXHJcbiAqIGhvc3QgZW52aXJvbm1lbnQuIEZvciBleGFtcGxlLCBmb3IgcnVudGltZS1kb20sIEhvc3ROb2RlIHdvdWxkIGJlIHRoZSBET01cclxuICogYE5vZGVgIGludGVyZmFjZSBhbmQgSG9zdEVsZW1lbnQgd291bGQgYmUgdGhlIERPTSBgRWxlbWVudGAgaW50ZXJmYWNlLlxyXG4gKlxyXG4gKiBDdXN0b20gcmVuZGVyZXJzIGNhbiBwYXNzIGluIHRoZSBwbGF0Zm9ybSBzcGVjaWZpYyB0eXBlcyBsaWtlIHRoaXM6XHJcbiAqXHJcbiAqIGBgYCBqc1xyXG4gKiBjb25zdCB7IHJlbmRlciwgY3JlYXRlQXBwIH0gPSBjcmVhdGVSZW5kZXJlcjxOb2RlLCBFbGVtZW50Pih7XHJcbiAqICAgcGF0Y2hQcm9wLFxyXG4gKiAgIC4uLm5vZGVPcHNcclxuICogfSlcclxuICogYGBgXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJlcihvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpO1xyXG59XHJcbi8vIFNlcGFyYXRlIEFQSSBmb3IgY3JlYXRpbmcgaHlkcmF0aW9uLWVuYWJsZWQgcmVuZGVyZXIuXHJcbi8vIEh5ZHJhdGlvbiBsb2dpYyBpcyBvbmx5IHVzZWQgd2hlbiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIG1ha2luZyBpdFxyXG4vLyB0cmVlLXNoYWthYmxlLlxyXG5mdW5jdGlvbiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyk7XHJcbn1cclxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gYmFzZUNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMsIGNyZWF0ZUh5ZHJhdGlvbkZucykge1xyXG4gICAgLy8gY29tcGlsZS10aW1lIGZlYXR1cmUgZmxhZ3MgY2hlY2tcclxuICAgIHtcclxuICAgICAgICBpbml0RmVhdHVyZUZsYWdzKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0YXJnZXQgPSBnZXRHbG9iYWxUaGlzKCk7XHJcbiAgICB0YXJnZXQuX19WVUVfXyA9IHRydWU7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgIHNldERldnRvb2xzSG9vayh0YXJnZXQuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXywgdGFyZ2V0KTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgaW5zZXJ0OiBob3N0SW5zZXJ0LCByZW1vdmU6IGhvc3RSZW1vdmUsIHBhdGNoUHJvcDogaG9zdFBhdGNoUHJvcCwgY3JlYXRlRWxlbWVudDogaG9zdENyZWF0ZUVsZW1lbnQsIGNyZWF0ZVRleHQ6IGhvc3RDcmVhdGVUZXh0LCBjcmVhdGVDb21tZW50OiBob3N0Q3JlYXRlQ29tbWVudCwgc2V0VGV4dDogaG9zdFNldFRleHQsIHNldEVsZW1lbnRUZXh0OiBob3N0U2V0RWxlbWVudFRleHQsIHBhcmVudE5vZGU6IGhvc3RQYXJlbnROb2RlLCBuZXh0U2libGluZzogaG9zdE5leHRTaWJsaW5nLCBzZXRTY29wZUlkOiBob3N0U2V0U2NvcGVJZCA9IE5PT1AsIGNsb25lTm9kZTogaG9zdENsb25lTm9kZSwgaW5zZXJ0U3RhdGljQ29udGVudDogaG9zdEluc2VydFN0YXRpY0NvbnRlbnQgfSA9IG9wdGlvbnM7XHJcbiAgICAvLyBOb3RlOiBmdW5jdGlvbnMgaW5zaWRlIHRoaXMgY2xvc3VyZSBzaG91bGQgdXNlIGBjb25zdCB4eHggPSAoKSA9PiB7fWBcclxuICAgIC8vIHN0eWxlIGluIG9yZGVyIHRvIHByZXZlbnQgYmVpbmcgaW5saW5lZCBieSBtaW5pZmllcnMuXHJcbiAgICBjb25zdCBwYXRjaCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yID0gbnVsbCwgcGFyZW50Q29tcG9uZW50ID0gbnVsbCwgcGFyZW50U3VzcGVuc2UgPSBudWxsLCBpc1NWRyA9IGZhbHNlLCBzbG90U2NvcGVJZHMgPSBudWxsLCBvcHRpbWl6ZWQgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZyA/IGZhbHNlIDogISFuMi5keW5hbWljQ2hpbGRyZW4pID0+IHtcclxuICAgICAgICBpZiAobjEgPT09IG4yKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcGF0Y2hpbmcgJiBub3Qgc2FtZSB0eXBlLCB1bm1vdW50IG9sZCB0cmVlXHJcbiAgICAgICAgaWYgKG4xICYmICFpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xyXG4gICAgICAgICAgICBhbmNob3IgPSBnZXROZXh0SG9zdE5vZGUobjEpO1xyXG4gICAgICAgICAgICB1bm1vdW50KG4xLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgbjEgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobjIucGF0Y2hGbGFnID09PSAtMiAvKiBCQUlMICovKSB7XHJcbiAgICAgICAgICAgIG9wdGltaXplZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuMi5keW5hbWljQ2hpbGRyZW4gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IHR5cGUsIHJlZiwgc2hhcGVGbGFnIH0gPSBuMjtcclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBUZXh0OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1RleHQobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb21tZW50OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU3RhdGljOlxyXG4gICAgICAgICAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudFN0YXRpY05vZGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaFN0YXRpY05vZGUobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEZyYWdtZW50OlxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0ZyYWdtZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzRWxlbWVudChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQ29tcG9uZW50KG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiA2NCAvKiBURUxFUE9SVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUucHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGludGVybmFscyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzaGFwZUZsYWcgJiAxMjggLyogU1VTUEVOU0UgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlLnByb2Nlc3MobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkLCBpbnRlcm5hbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybignSW52YWxpZCBWTm9kZSB0eXBlOicsIHR5cGUsIGAoJHt0eXBlb2YgdHlwZX0pYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldCByZWZcclxuICAgICAgICBpZiAocmVmICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHNldFJlZihyZWYsIG4xICYmIG4xLnJlZiwgcGFyZW50U3VzcGVuc2UsIG4yIHx8IG4xLCAhbjIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzVGV4dCA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydCgobjIuZWwgPSBob3N0Q3JlYXRlVGV4dChuMi5jaGlsZHJlbikpLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IChuMi5lbCA9IG4xLmVsKTtcclxuICAgICAgICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgaG9zdFNldFRleHQoZWwsIG4yLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzQ29tbWVudE5vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvcikgPT4ge1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoKG4yLmVsID0gaG9zdENyZWF0ZUNvbW1lbnQobjIuY2hpbGRyZW4gfHwgJycpKSwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBzdXBwb3J0IGZvciBkeW5hbWljIGNvbW1lbnRzXHJcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50U3RhdGljTm9kZSA9IChuMiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgW24yLmVsLCBuMi5hbmNob3JdID0gaG9zdEluc2VydFN0YXRpY0NvbnRlbnQobjIuY2hpbGRyZW4sIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgbjIuZWwsIG4yLmFuY2hvcik7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZXYgLyBITVIgb25seVxyXG4gICAgICovXHJcbiAgICBjb25zdCBwYXRjaFN0YXRpY05vZGUgPSAobjEsIG4yLCBjb250YWluZXIsIGlzU1ZHKSA9PiB7XHJcbiAgICAgICAgLy8gc3RhdGljIG5vZGVzIGFyZSBvbmx5IHBhdGNoZWQgZHVyaW5nIGRldiBmb3IgSE1SXHJcbiAgICAgICAgaWYgKG4yLmNoaWxkcmVuICE9PSBuMS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBob3N0TmV4dFNpYmxpbmcobjEuYW5jaG9yKTtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGV4aXN0aW5nXHJcbiAgICAgICAgICAgIHJlbW92ZVN0YXRpY05vZGUobjEpO1xyXG4gICAgICAgICAgICBbbjIuZWwsIG4yLmFuY2hvcl0gPSBob3N0SW5zZXJ0U3RhdGljQ29udGVudChuMi5jaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIGlzU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG4yLmVsID0gbjEuZWw7XHJcbiAgICAgICAgICAgIG4yLmFuY2hvciA9IG4xLmFuY2hvcjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0sIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpID0+IHtcclxuICAgICAgICBsZXQgbmV4dDtcclxuICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xyXG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcclxuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBuZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgIGVsID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdEluc2VydChhbmNob3IsIGNvbnRhaW5lciwgbmV4dFNpYmxpbmcpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZVN0YXRpY05vZGUgPSAoeyBlbCwgYW5jaG9yIH0pID0+IHtcclxuICAgICAgICBsZXQgbmV4dDtcclxuICAgICAgICB3aGlsZSAoZWwgJiYgZWwgIT09IGFuY2hvcikge1xyXG4gICAgICAgICAgICBuZXh0ID0gaG9zdE5leHRTaWJsaW5nKGVsKTtcclxuICAgICAgICAgICAgaG9zdFJlbW92ZShlbCk7XHJcbiAgICAgICAgICAgIGVsID0gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaG9zdFJlbW92ZShhbmNob3IpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NFbGVtZW50ID0gKG4xLCBuMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGlzU1ZHID0gaXNTVkcgfHwgbjIudHlwZSA9PT0gJ3N2Zyc7XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgbW91bnRFbGVtZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBhdGNoRWxlbWVudChuMSwgbjIsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50RWxlbWVudCA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGxldCBlbDtcclxuICAgICAgICBsZXQgdm5vZGVIb29rO1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHNoYXBlRmxhZywgdHJhbnNpdGlvbiwgcGF0Y2hGbGFnLCBkaXJzIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB2bm9kZS5lbCAmJlxyXG4gICAgICAgICAgICBob3N0Q2xvbmVOb2RlICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgcGF0Y2hGbGFnID09PSAtMSAvKiBIT0lTVEVEICovKSB7XHJcbiAgICAgICAgICAgIC8vIElmIGEgdm5vZGUgaGFzIG5vbi1udWxsIGVsLCBpdCBtZWFucyBpdCdzIGJlaW5nIHJldXNlZC5cclxuICAgICAgICAgICAgLy8gT25seSBzdGF0aWMgdm5vZGVzIGNhbiBiZSByZXVzZWQsIHNvIGl0cyBtb3VudGVkIERPTSBub2RlcyBzaG91bGQgYmVcclxuICAgICAgICAgICAgLy8gZXhhY3RseSB0aGUgc2FtZSwgYW5kIHdlIGNhbiBzaW1wbHkgZG8gYSBjbG9uZSBoZXJlLlxyXG4gICAgICAgICAgICAvLyBvbmx5IGRvIHRoaXMgaW4gcHJvZHVjdGlvbiBzaW5jZSBjbG9uZWQgdHJlZXMgY2Fubm90IGJlIEhNUiB1cGRhdGVkLlxyXG4gICAgICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENsb25lTm9kZSh2bm9kZS5lbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbCA9IHZub2RlLmVsID0gaG9zdENyZWF0ZUVsZW1lbnQodm5vZGUudHlwZSwgaXNTVkcsIHByb3BzICYmIHByb3BzLmlzLCBwcm9wcyk7XHJcbiAgICAgICAgICAgIC8vIG1vdW50IGNoaWxkcmVuIGZpcnN0LCBzaW5jZSBzb21lIHByb3BzIG1heSByZWx5IG9uIGNoaWxkIGNvbnRlbnRcclxuICAgICAgICAgICAgLy8gYmVpbmcgYWxyZWFkeSByZW5kZXJlZCwgZS5nLiBgPHNlbGVjdCB2YWx1ZT5gXHJcbiAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiA4IC8qIFRFWFRfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChlbCwgdm5vZGUuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKHZub2RlLmNoaWxkcmVuLCBlbCwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcgJiYgdHlwZSAhPT0gJ2ZvcmVpZ25PYmplY3QnLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2NyZWF0ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICBpZiAocHJvcHMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ3ZhbHVlJyAmJiAhaXNSZXNlcnZlZFByb3Aoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIG51bGwsIHByb3BzW2tleV0sIGlzU1ZHLCB2bm9kZS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFNwZWNpYWwgY2FzZSBmb3Igc2V0dGluZyB2YWx1ZSBvbiBET00gZWxlbWVudHM6XHJcbiAgICAgICAgICAgICAgICAgKiAtIGl0IGNhbiBiZSBvcmRlci1zZW5zaXRpdmUgKGUuZy4gc2hvdWxkIGJlIHNldCAqYWZ0ZXIqIG1pbi9tYXgsICMyMzI1LCAjNDAyNClcclxuICAgICAgICAgICAgICAgICAqIC0gaXQgbmVlZHMgdG8gYmUgZm9yY2VkICgjMTQ3MSlcclxuICAgICAgICAgICAgICAgICAqICMyMzUzIHByb3Bvc2VzIGFkZGluZyBhbm90aGVyIHJlbmRlcmVyIG9wdGlvbiB0byBjb25maWd1cmUgdGhpcywgYnV0XHJcbiAgICAgICAgICAgICAgICAgKiB0aGUgcHJvcGVydGllcyBhZmZlY3RzIGFyZSBzbyBmaW5pdGUgaXQgaXMgd29ydGggc3BlY2lhbCBjYXNpbmcgaXRcclxuICAgICAgICAgICAgICAgICAqIGhlcmUgdG8gcmVkdWNlIHRoZSBjb21wbGV4aXR5LiAoU3BlY2lhbCBjYXNpbmcgaXQgYWxzbyBzaG91bGQgbm90XHJcbiAgICAgICAgICAgICAgICAgKiBhZmZlY3Qgbm9uLURPTSByZW5kZXJlcnMpXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGlmICgndmFsdWUnIGluIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ3ZhbHVlJywgbnVsbCwgcHJvcHMudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcy5vblZub2RlQmVmb3JlTW91bnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2NvcGVJZFxyXG4gICAgICAgICAgICBzZXRTY29wZUlkKGVsLCB2bm9kZSwgdm5vZGUuc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsICdfX3Zub2RlJywge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZub2RlLFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbCwgJ19fdnVlUGFyZW50Q29tcG9uZW50Jywge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHBhcmVudENvbXBvbmVudCxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKHZub2RlLCBudWxsLCBwYXJlbnRDb21wb25lbnQsICdiZWZvcmVNb3VudCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAjMTU4MyBGb3IgaW5zaWRlIHN1c3BlbnNlICsgc3VzcGVuc2Ugbm90IHJlc29sdmVkIGNhc2UsIGVudGVyIGhvb2sgc2hvdWxkIGNhbGwgd2hlbiBzdXNwZW5zZSByZXNvbHZlZFxyXG4gICAgICAgIC8vICMxNjg5IEZvciBpbnNpZGUgc3VzcGVuc2UgKyBzdXNwZW5zZSByZXNvbHZlZCBjYXNlLCBqdXN0IGNhbGwgaXRcclxuICAgICAgICBjb25zdCBuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyA9ICghcGFyZW50U3VzcGVuc2UgfHwgKHBhcmVudFN1c3BlbnNlICYmICFwYXJlbnRTdXNwZW5zZS5wZW5kaW5nQnJhbmNoKSkgJiZcclxuICAgICAgICAgICAgdHJhbnNpdGlvbiAmJlxyXG4gICAgICAgICAgICAhdHJhbnNpdGlvbi5wZXJzaXN0ZWQ7XHJcbiAgICAgICAgaWYgKG5lZWRDYWxsVHJhbnNpdGlvbkhvb2tzKSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24uYmVmb3JlRW50ZXIoZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBob3N0SW5zZXJ0KGVsLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBwcm9wcyAmJiBwcm9wcy5vblZub2RlTW91bnRlZCkgfHxcclxuICAgICAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgfHxcclxuICAgICAgICAgICAgZGlycykge1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgbmVlZENhbGxUcmFuc2l0aW9uSG9va3MgJiYgdHJhbnNpdGlvbi5lbnRlcihlbCk7XHJcbiAgICAgICAgICAgICAgICBkaXJzICYmIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ21vdW50ZWQnKTtcclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBzZXRTY29wZUlkID0gKGVsLCB2bm9kZSwgc2NvcGVJZCwgc2xvdFNjb3BlSWRzLCBwYXJlbnRDb21wb25lbnQpID0+IHtcclxuICAgICAgICBpZiAoc2NvcGVJZCkge1xyXG4gICAgICAgICAgICBob3N0U2V0U2NvcGVJZChlbCwgc2NvcGVJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzbG90U2NvcGVJZHMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbG90U2NvcGVJZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGhvc3RTZXRTY29wZUlkKGVsLCBzbG90U2NvcGVJZHNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJlbnRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgbGV0IHN1YlRyZWUgPSBwYXJlbnRDb21wb25lbnQuc3ViVHJlZTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgc3ViVHJlZS5wYXRjaEZsYWcgPiAwICYmXHJcbiAgICAgICAgICAgICAgICBzdWJUcmVlLnBhdGNoRmxhZyAmIDIwNDggLyogREVWX1JPT1RfRlJBR01FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIHN1YlRyZWUgPVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclNpbmdsZVJvb3Qoc3ViVHJlZS5jaGlsZHJlbikgfHwgc3ViVHJlZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodm5vZGUgPT09IHN1YlRyZWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFZOb2RlID0gcGFyZW50Q29tcG9uZW50LnZub2RlO1xyXG4gICAgICAgICAgICAgICAgc2V0U2NvcGVJZChlbCwgcGFyZW50Vk5vZGUsIHBhcmVudFZOb2RlLnNjb3BlSWQsIHBhcmVudFZOb2RlLnNsb3RTY29wZUlkcywgcGFyZW50Q29tcG9uZW50LnBhcmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW91bnRDaGlsZHJlbiA9IChjaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgc3RhcnQgPSAwKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSAoY2hpbGRyZW5baV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoY2hpbGRyZW5baV0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGNoaWxkcmVuW2ldKSk7XHJcbiAgICAgICAgICAgIHBhdGNoKG51bGwsIGNoaWxkLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hFbGVtZW50ID0gKG4xLCBuMiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZWwgPSAobjIuZWwgPSBuMS5lbCk7XHJcbiAgICAgICAgbGV0IHsgcGF0Y2hGbGFnLCBkeW5hbWljQ2hpbGRyZW4sIGRpcnMgfSA9IG4yO1xyXG4gICAgICAgIC8vICMxNDI2IHRha2UgdGhlIG9sZCB2bm9kZSdzIHBhdGNoIGZsYWcgaW50byBhY2NvdW50IHNpbmNlIHVzZXIgbWF5IGNsb25lIGFcclxuICAgICAgICAvLyBjb21waWxlci1nZW5lcmF0ZWQgdm5vZGUsIHdoaWNoIGRlLW9wdHMgdG8gRlVMTF9QUk9QU1xyXG4gICAgICAgIHBhdGNoRmxhZyB8PSBuMS5wYXRjaEZsYWcgJiAxNiAvKiBGVUxMX1BST1BTICovO1xyXG4gICAgICAgIGNvbnN0IG9sZFByb3BzID0gbjEucHJvcHMgfHwgRU1QVFlfT0JKO1xyXG4gICAgICAgIGNvbnN0IG5ld1Byb3BzID0gbjIucHJvcHMgfHwgRU1QVFlfT0JKO1xyXG4gICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgLy8gZGlzYWJsZSByZWN1cnNlIGluIGJlZm9yZVVwZGF0ZSBob29rc1xyXG4gICAgICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgZmFsc2UpO1xyXG4gICAgICAgIGlmICgodm5vZGVIb29rID0gbmV3UHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkpIHtcclxuICAgICAgICAgICAgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCBuMiwgbjEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGlycykge1xyXG4gICAgICAgICAgICBpbnZva2VEaXJlY3RpdmVIb29rKG4yLCBuMSwgcGFyZW50Q29tcG9uZW50LCAnYmVmb3JlVXBkYXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhcmVudENvbXBvbmVudCAmJiB0b2dnbGVSZWN1cnNlKHBhcmVudENvbXBvbmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgIC8vIEhNUiB1cGRhdGVkLCBmb3JjZSBmdWxsIGRpZmZcclxuICAgICAgICAgICAgcGF0Y2hGbGFnID0gMDtcclxuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFyZUNoaWxkcmVuU1ZHID0gaXNTVkcgJiYgbjIudHlwZSAhPT0gJ2ZvcmVpZ25PYmplY3QnO1xyXG4gICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBlbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgYXJlQ2hpbGRyZW5TVkcsIHNsb3RTY29wZUlkcyk7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XHJcbiAgICAgICAgICAgIC8vIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgZWwsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGFyZUNoaWxkcmVuU1ZHLCBzbG90U2NvcGVJZHMsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhdGNoRmxhZyA+IDApIHtcclxuICAgICAgICAgICAgLy8gdGhlIHByZXNlbmNlIG9mIGEgcGF0Y2hGbGFnIG1lYW5zIHRoaXMgZWxlbWVudCdzIHJlbmRlciBjb2RlIHdhc1xyXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIGFuZCBjYW4gdGFrZSB0aGUgZmFzdCBwYXRoLlxyXG4gICAgICAgICAgICAvLyBpbiB0aGlzIHBhdGggb2xkIG5vZGUgYW5kIG5ldyBub2RlIGFyZSBndWFyYW50ZWVkIHRvIGhhdmUgdGhlIHNhbWUgc2hhcGVcclxuICAgICAgICAgICAgLy8gKGkuZS4gYXQgdGhlIGV4YWN0IHNhbWUgcG9zaXRpb24gaW4gdGhlIHNvdXJjZSB0ZW1wbGF0ZSlcclxuICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDE2IC8qIEZVTExfUFJPUFMgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQgcHJvcHMgY29udGFpbiBkeW5hbWljIGtleXMsIGZ1bGwgZGlmZiBuZWVkZWRcclxuICAgICAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGNsYXNzXHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGZsYWcgaXMgbWF0Y2hlZCB3aGVuIHRoZSBlbGVtZW50IGhhcyBkeW5hbWljIGNsYXNzIGJpbmRpbmdzLlxyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoRmxhZyAmIDIgLyogQ0xBU1MgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkUHJvcHMuY2xhc3MgIT09IG5ld1Byb3BzLmNsYXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsICdjbGFzcycsIG51bGwsIG5ld1Byb3BzLmNsYXNzLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gc3R5bGVcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGR5bmFtaWMgc3R5bGUgYmluZGluZ3NcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiA0IC8qIFNUWUxFICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ3N0eWxlJywgb2xkUHJvcHMuc3R5bGUsIG5ld1Byb3BzLnN0eWxlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBmbGFnIGlzIG1hdGNoZWQgd2hlbiB0aGUgZWxlbWVudCBoYXMgZHluYW1pYyBwcm9wL2F0dHIgYmluZGluZ3NcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyIHRoYW4gY2xhc3MgYW5kIHN0eWxlLiBUaGUga2V5cyBvZiBkeW5hbWljIHByb3AvYXR0cnMgYXJlIHNhdmVkIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gZmFzdGVyIGl0ZXJhdGlvbi5cclxuICAgICAgICAgICAgICAgIC8vIE5vdGUgZHluYW1pYyBrZXlzIGxpa2UgOltmb29dPVwiYmFyXCIgd2lsbCBjYXVzZSB0aGlzIG9wdGltaXphdGlvbiB0b1xyXG4gICAgICAgICAgICAgICAgLy8gYmFpbCBvdXQgYW5kIGdvIHRocm91Z2ggYSBmdWxsIGRpZmYgYmVjYXVzZSB3ZSBuZWVkIHRvIHVuc2V0IHRoZSBvbGQga2V5XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgOCAvKiBQUk9QUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBmbGFnIGlzIHByZXNlbnQgdGhlbiBkeW5hbWljUHJvcHMgbXVzdCBiZSBub24tbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzVG9VcGRhdGUgPSBuMi5keW5hbWljUHJvcHM7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc1RvVXBkYXRlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHByb3BzVG9VcGRhdGVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBvbGRQcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbmV3UHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIzE0NzEgZm9yY2UgcGF0Y2ggdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgIT09IHByZXYgfHwga2V5ID09PSAndmFsdWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCBuMS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0ZXh0XHJcbiAgICAgICAgICAgIC8vIFRoaXMgZmxhZyBpcyBtYXRjaGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIG9ubHkgZHluYW1pYyB0ZXh0IGNoaWxkcmVuLlxyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnICYgMSAvKiBURVhUICovKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobjEuY2hpbGRyZW4gIT09IG4yLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGVsLCBuMi5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIW9wdGltaXplZCAmJiBkeW5hbWljQ2hpbGRyZW4gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAvLyB1bm9wdGltaXplZCwgZnVsbCBkaWZmXHJcbiAgICAgICAgICAgIHBhdGNoUHJvcHMoZWwsIG4yLCBvbGRQcm9wcywgbmV3UHJvcHMsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXdQcm9wcy5vblZub2RlVXBkYXRlZCkgfHwgZGlycykge1xyXG4gICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdm5vZGVIb29rICYmIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgbjIsIG4xKTtcclxuICAgICAgICAgICAgICAgIGRpcnMgJiYgaW52b2tlRGlyZWN0aXZlSG9vayhuMiwgbjEsIHBhcmVudENvbXBvbmVudCwgJ3VwZGF0ZWQnKTtcclxuICAgICAgICAgICAgfSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBUaGUgZmFzdCBwYXRoIGZvciBibG9ja3MuXHJcbiAgICBjb25zdCBwYXRjaEJsb2NrQ2hpbGRyZW4gPSAob2xkQ2hpbGRyZW4sIG5ld0NoaWxkcmVuLCBmYWxsYmFja0NvbnRhaW5lciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcykgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgb2xkVk5vZGUgPSBvbGRDaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgY29uc3QgbmV3Vk5vZGUgPSBuZXdDaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBjb250YWluZXIgKHBhcmVudCBlbGVtZW50KSBmb3IgdGhlIHBhdGNoLlxyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBcclxuICAgICAgICAgICAgLy8gb2xkVk5vZGUgbWF5IGJlIGFuIGVycm9yZWQgYXN5bmMgc2V0dXAoKSBjb21wb25lbnQgaW5zaWRlIFN1c3BlbnNlXHJcbiAgICAgICAgICAgIC8vIHdoaWNoIHdpbGwgbm90IGhhdmUgYSBtb3VudGVkIGVsZW1lbnRcclxuICAgICAgICAgICAgb2xkVk5vZGUuZWwgJiZcclxuICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgYSBGcmFnbWVudCwgd2UgbmVlZCB0byBwcm92aWRlIHRoZSBhY3R1YWwgcGFyZW50XHJcbiAgICAgICAgICAgICAgICAvLyBvZiB0aGUgRnJhZ21lbnQgaXRzZWxmIHNvIGl0IGNhbiBtb3ZlIGl0cyBjaGlsZHJlbi5cclxuICAgICAgICAgICAgICAgIChvbGRWTm9kZS50eXBlID09PSBGcmFnbWVudCB8fFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC0gSW4gdGhlIGNhc2Ugb2YgZGlmZmVyZW50IG5vZGVzLCB0aGVyZSBpcyBnb2luZyB0byBiZSBhIHJlcGxhY2VtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggYWxzbyByZXF1aXJlcyB0aGUgY29ycmVjdCBwYXJlbnQgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgIWlzU2FtZVZOb2RlVHlwZShvbGRWTm9kZSwgbmV3Vk5vZGUpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLSBJbiB0aGUgY2FzZSBvZiBhIGNvbXBvbmVudCwgaXQgY291bGQgY29udGFpbiBhbnl0aGluZy5cclxuICAgICAgICAgICAgICAgICAgICBvbGRWTm9kZS5zaGFwZUZsYWcgJiAoNiAvKiBDT01QT05FTlQgKi8gfCA2NCAvKiBURUxFUE9SVCAqLykpXHJcbiAgICAgICAgICAgICAgICA/IGhvc3RQYXJlbnROb2RlKG9sZFZOb2RlLmVsKVxyXG4gICAgICAgICAgICAgICAgOiAvLyBJbiBvdGhlciBjYXNlcywgdGhlIHBhcmVudCBjb250YWluZXIgaXMgbm90IGFjdHVhbGx5IHVzZWQgc28gd2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHBhc3MgdGhlIGJsb2NrIGVsZW1lbnQgaGVyZSB0byBhdm9pZCBhIERPTSBwYXJlbnROb2RlIGNhbGwuXHJcbiAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tDb250YWluZXI7XHJcbiAgICAgICAgICAgIHBhdGNoKG9sZFZOb2RlLCBuZXdWTm9kZSwgY29udGFpbmVyLCBudWxsLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hQcm9wcyA9IChlbCwgdm5vZGUsIG9sZFByb3BzLCBuZXdQcm9wcywgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcpID0+IHtcclxuICAgICAgICBpZiAob2xkUHJvcHMgIT09IG5ld1Byb3BzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1Byb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbXB0eSBzdHJpbmcgaXMgbm90IHZhbGlkIHByb3BcclxuICAgICAgICAgICAgICAgIGlmIChpc1Jlc2VydmVkUHJvcChrZXkpKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IG5ld1Byb3BzW2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gb2xkUHJvcHNba2V5XTtcclxuICAgICAgICAgICAgICAgIC8vIGRlZmVyIHBhdGNoaW5nIHZhbHVlXHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dCAhPT0gcHJldiAmJiBrZXkgIT09ICd2YWx1ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBob3N0UGF0Y2hQcm9wKGVsLCBrZXksIHByZXYsIG5leHQsIGlzU1ZHLCB2bm9kZS5jaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2xkUHJvcHMgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2xkUHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmVzZXJ2ZWRQcm9wKGtleSkgJiYgIShrZXkgaW4gbmV3UHJvcHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3RQYXRjaFByb3AoZWwsIGtleSwgb2xkUHJvcHNba2V5XSwgbnVsbCwgaXNTVkcsIHZub2RlLmNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB1bm1vdW50Q2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoJ3ZhbHVlJyBpbiBuZXdQcm9wcykge1xyXG4gICAgICAgICAgICAgICAgaG9zdFBhdGNoUHJvcChlbCwgJ3ZhbHVlJywgb2xkUHJvcHMudmFsdWUsIG5ld1Byb3BzLnZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9jZXNzRnJhZ21lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZnJhZ21lbnRTdGFydEFuY2hvciA9IChuMi5lbCA9IG4xID8gbjEuZWwgOiBob3N0Q3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50RW5kQW5jaG9yID0gKG4yLmFuY2hvciA9IG4xID8gbjEuYW5jaG9yIDogaG9zdENyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICBsZXQgeyBwYXRjaEZsYWcsIGR5bmFtaWNDaGlsZHJlbiwgc2xvdFNjb3BlSWRzOiBmcmFnbWVudFNsb3RTY29wZUlkcyB9ID0gbjI7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc0htclVwZGF0aW5nKSB7XHJcbiAgICAgICAgICAgIC8vIEhNUiB1cGRhdGVkLCBmb3JjZSBmdWxsIGRpZmZcclxuICAgICAgICAgICAgcGF0Y2hGbGFnID0gMDtcclxuICAgICAgICAgICAgb3B0aW1pemVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGR5bmFtaWNDaGlsZHJlbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBzbG90IGZyYWdtZW50IHdpdGggOnNsb3R0ZWQgc2NvcGUgaWRzXHJcbiAgICAgICAgaWYgKGZyYWdtZW50U2xvdFNjb3BlSWRzKSB7XHJcbiAgICAgICAgICAgIHNsb3RTY29wZUlkcyA9IHNsb3RTY29wZUlkc1xyXG4gICAgICAgICAgICAgICAgPyBzbG90U2NvcGVJZHMuY29uY2F0KGZyYWdtZW50U2xvdFNjb3BlSWRzKVxyXG4gICAgICAgICAgICAgICAgOiBmcmFnbWVudFNsb3RTY29wZUlkcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChmcmFnbWVudFN0YXJ0QW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQoZnJhZ21lbnRFbmRBbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgLy8gYSBmcmFnbWVudCBjYW4gb25seSBoYXZlIGFycmF5IGNoaWxkcmVuXHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZXkgYXJlIGVpdGhlciBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyLCBvciBpbXBsaWNpdGx5IGNyZWF0ZWRcclxuICAgICAgICAgICAgLy8gZnJvbSBhcnJheXMuXHJcbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4objIuY2hpbGRyZW4sIGNvbnRhaW5lciwgZnJhZ21lbnRFbmRBbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocGF0Y2hGbGFnID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgcGF0Y2hGbGFnICYgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovICYmXHJcbiAgICAgICAgICAgICAgICBkeW5hbWljQ2hpbGRyZW4gJiZcclxuICAgICAgICAgICAgICAgIC8vICMyNzE1IHRoZSBwcmV2aW91cyBmcmFnbWVudCBjb3VsZCd2ZSBiZWVuIGEgQkFJTGVkIG9uZSBhcyBhIHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgLy8gb2YgcmVuZGVyU2xvdCgpIHdpdGggbm8gdmFsaWQgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIG4xLmR5bmFtaWNDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgLy8gYSBzdGFibGUgZnJhZ21lbnQgKHRlbXBsYXRlIHJvb3Qgb3IgPHRlbXBsYXRlIHYtZm9yPikgZG9lc24ndCBuZWVkIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBwYXRjaCBjaGlsZHJlbiBvcmRlciwgYnV0IGl0IG1heSBjb250YWluIGR5bmFtaWNDaGlsZHJlbi5cclxuICAgICAgICAgICAgICAgIHBhdGNoQmxvY2tDaGlsZHJlbihuMS5keW5hbWljQ2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcGFyZW50Q29tcG9uZW50ICYmIHBhcmVudENvbXBvbmVudC50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgIC8vICMyMDgwIGlmIHRoZSBzdGFibGUgZnJhZ21lbnQgaGFzIGEga2V5LCBpdCdzIGEgPHRlbXBsYXRlIHYtZm9yPiB0aGF0IG1heVxyXG4gICAgICAgICAgICAgICAgLy8gIGdldCBtb3ZlZCBhcm91bmQuIE1ha2Ugc3VyZSBhbGwgcm9vdCBsZXZlbCB2bm9kZXMgaW5oZXJpdCBlbC5cclxuICAgICAgICAgICAgICAgIC8vICMyMTM0IG9yIGlmIGl0J3MgYSBjb21wb25lbnQgcm9vdCwgaXQgbWF5IGFsc28gZ2V0IG1vdmVkIGFyb3VuZFxyXG4gICAgICAgICAgICAgICAgLy8gYXMgdGhlIGNvbXBvbmVudCBpcyBiZWluZyBtb3ZlZC5cclxuICAgICAgICAgICAgICAgIG4yLmtleSAhPSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHBhcmVudENvbXBvbmVudCAmJiBuMiA9PT0gcGFyZW50Q29tcG9uZW50LnN1YlRyZWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2VTdGF0aWNDaGlsZHJlbihuMSwgbjIsIHRydWUgLyogc2hhbGxvdyAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBrZXllZCAvIHVua2V5ZWQsIG9yIG1hbnVhbCBmcmFnbWVudHMuXHJcbiAgICAgICAgICAgICAgICAvLyBmb3Iga2V5ZWQgJiB1bmtleWVkLCBzaW5jZSB0aGV5IGFyZSBjb21waWxlciBnZW5lcmF0ZWQgZnJvbSB2LWZvcixcclxuICAgICAgICAgICAgICAgIC8vIGVhY2ggY2hpbGQgaXMgZ3VhcmFudGVlZCB0byBiZSBhIGJsb2NrIHNvIHRoZSBmcmFnbWVudCB3aWxsIG5ldmVyXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGR5bmFtaWNDaGlsZHJlbi5cclxuICAgICAgICAgICAgICAgIHBhdGNoQ2hpbGRyZW4objEsIG4yLCBjb250YWluZXIsIGZyYWdtZW50RW5kQW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHByb2Nlc3NDb21wb25lbnQgPSAobjEsIG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgbjIuc2xvdFNjb3BlSWRzID0gc2xvdFNjb3BlSWRzO1xyXG4gICAgICAgIGlmIChuMSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmIChuMi5zaGFwZUZsYWcgJiA1MTIgLyogQ09NUE9ORU5UX0tFUFRfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudENvbXBvbmVudC5jdHguYWN0aXZhdGUobjIsIGNvbnRhaW5lciwgYW5jaG9yLCBpc1NWRywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1vdW50Q29tcG9uZW50KG4yLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IG1vdW50Q29tcG9uZW50ID0gKGluaXRpYWxWTm9kZSwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IChpbml0aWFsVk5vZGUuY29tcG9uZW50ID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UoaW5pdGlhbFZOb2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKSk7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS50eXBlLl9faG1ySWQpIHtcclxuICAgICAgICAgICAgcmVnaXN0ZXJITVIoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChpbml0aWFsVk5vZGUpO1xyXG4gICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBtb3VudGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmplY3QgcmVuZGVyZXIgaW50ZXJuYWxzIGZvciBrZWVwQWxpdmVcclxuICAgICAgICBpZiAoaXNLZWVwQWxpdmUoaW5pdGlhbFZOb2RlKSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5jdHgucmVuZGVyZXIgPSBpbnRlcm5hbHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc29sdmUgcHJvcHMgYW5kIHNsb3RzIGZvciBzZXR1cCBjb250ZXh0XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBpbml0YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0dXBDb21wb25lbnQoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaW5pdGApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNldHVwKCkgaXMgYXN5bmMuIFRoaXMgY29tcG9uZW50IHJlbGllcyBvbiBhc3luYyBsb2dpYyB0byBiZSByZXNvbHZlZFxyXG4gICAgICAgIC8vIGJlZm9yZSBwcm9jZWVkaW5nXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlICYmIHBhcmVudFN1c3BlbnNlLnJlZ2lzdGVyRGVwKGluc3RhbmNlLCBzZXR1cFJlbmRlckVmZmVjdCk7XHJcbiAgICAgICAgICAgIC8vIEdpdmUgaXQgYSBwbGFjZWhvbGRlciBpZiB0aGlzIGlzIG5vdCBoeWRyYXRpb25cclxuICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgc2VsZi1kZWZpbmVkIGZhbGxiYWNrXHJcbiAgICAgICAgICAgIGlmICghaW5pdGlhbFZOb2RlLmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IChpbnN0YW5jZS5zdWJUcmVlID0gY3JlYXRlVk5vZGUoQ29tbWVudCkpO1xyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc0NvbW1lbnROb2RlKG51bGwsIHBsYWNlaG9sZGVyLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZXR1cFJlbmRlckVmZmVjdChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgcG9wV2FybmluZ0NvbnRleHQoKTtcclxuICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYG1vdW50YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHVwZGF0ZUNvbXBvbmVudCA9IChuMSwgbjIsIG9wdGltaXplZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gKG4yLmNvbXBvbmVudCA9IG4xLmNvbXBvbmVudCk7XHJcbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUNvbXBvbmVudChuMSwgbjIsIG9wdGltaXplZCkpIHtcclxuICAgICAgICAgICAgaWYgKGluc3RhbmNlLmFzeW5jRGVwICYmXHJcbiAgICAgICAgICAgICAgICAhaW5zdGFuY2UuYXN5bmNSZXNvbHZlZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gYXN5bmMgJiBzdGlsbCBwZW5kaW5nIC0ganVzdCB1cGRhdGUgcHJvcHMgYW5kIHNsb3RzXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgY29tcG9uZW50J3MgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXIgaXNuJ3Qgc2V0LXVwIHlldFxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHB1c2hXYXJuaW5nQ29udGV4dChuMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG4yLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcFdhcm5pbmdDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBub3JtYWwgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0ID0gbjI7XHJcbiAgICAgICAgICAgICAgICAvLyBpbiBjYXNlIHRoZSBjaGlsZCBjb21wb25lbnQgaXMgYWxzbyBxdWV1ZWQsIHJlbW92ZSBpdCB0byBhdm9pZFxyXG4gICAgICAgICAgICAgICAgLy8gZG91YmxlIHVwZGF0aW5nIHRoZSBzYW1lIGNoaWxkIGNvbXBvbmVudCBpbiB0aGUgc2FtZSBmbHVzaC5cclxuICAgICAgICAgICAgICAgIGludmFsaWRhdGVKb2IoaW5zdGFuY2UudXBkYXRlKTtcclxuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlLnVwZGF0ZSBpcyB0aGUgcmVhY3RpdmUgZWZmZWN0LlxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG5vIHVwZGF0ZSBuZWVkZWQuIGp1c3QgY29weSBvdmVyIHByb3BlcnRpZXNcclxuICAgICAgICAgICAgbjIuY29tcG9uZW50ID0gbjEuY29tcG9uZW50O1xyXG4gICAgICAgICAgICBuMi5lbCA9IG4xLmVsO1xyXG4gICAgICAgICAgICBpbnN0YW5jZS52bm9kZSA9IG4yO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBzZXR1cFJlbmRlckVmZmVjdCA9IChpbnN0YW5jZSwgaW5pdGlhbFZOb2RlLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjb25zdCBjb21wb25lbnRVcGRhdGVGbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc01vdW50ZWQpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGVsLCBwcm9wcyB9ID0gaW5pdGlhbFZOb2RlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBibSwgbSwgcGFyZW50IH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQXN5bmNXcmFwcGVyVk5vZGUgPSBpc0FzeW5jV3JhcHBlcihpbml0aWFsVk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlUmVjdXJzZShpbnN0YW5jZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlTW91bnQgaG9va1xyXG4gICAgICAgICAgICAgICAgaWYgKGJtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYm0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZUJlZm9yZU1vdW50XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzQXN5bmNXcmFwcGVyVk5vZGUgJiZcclxuICAgICAgICAgICAgICAgICAgICAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZU1vdW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudCwgaW5pdGlhbFZOb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIGh5ZHJhdGVOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgaGFzIGFkb3B0ZWQgaG9zdCBub2RlIC0gcGVyZm9ybSBoeWRyYXRpb24gaW5zdGVhZCBvZiBtb3VudC5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoeWRyYXRlU3ViVHJlZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2Uuc3ViVHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGVOb2RlKGVsLCBpbnN0YW5jZS5zdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgaHlkcmF0ZWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBc3luY1dyYXBwZXJWTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUudHlwZS5fX2FzeW5jTG9hZGVyKCkudGhlbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90ZTogd2UgYXJlIG1vdmluZyB0aGUgcmVuZGVyIGNhbGwgaW50byBhbiBhc3luYyBjYWxsYmFjayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggbWVhbnMgaXQgd29uJ3QgdHJhY2sgZGVwZW5kZW5jaWVzIC0gYnV0IGl0J3Mgb2sgYmVjYXVzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIHNlcnZlci1yZW5kZXJlZCBhc3luYyB3cmFwcGVyIGlzIGFscmVhZHkgaW4gcmVzb2x2ZWQgc3RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGl0IHdpbGwgbmV2ZXIgbmVlZCB0byBjaGFuZ2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgpID0+ICFpbnN0YW5jZS5pc1VubW91bnRlZCAmJiBoeWRyYXRlU3ViVHJlZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh5ZHJhdGVTdWJUcmVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViVHJlZSA9IChpbnN0YW5jZS5zdWJUcmVlID0gcmVuZGVyQ29tcG9uZW50Um9vdChpbnN0YW5jZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHJlbmRlcmApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIHN1YlRyZWUsIGNvbnRhaW5lciwgYW5jaG9yLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUuZWwgPSBzdWJUcmVlLmVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gbW91bnRlZCBob29rXHJcbiAgICAgICAgICAgICAgICBpZiAobSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChtLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBvblZub2RlTW91bnRlZFxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FzeW5jV3JhcHBlclZOb2RlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVNb3VudGVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjb3BlZEluaXRpYWxWTm9kZSA9IGluaXRpYWxWTm9kZTtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBzY29wZWRJbml0aWFsVk5vZGUpLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmF0ZWQgaG9vayBmb3Iga2VlcC1hbGl2ZSByb290cy5cclxuICAgICAgICAgICAgICAgIC8vICMxNzQyIGFjdGl2YXRlZCBob29rIG11c3QgYmUgYWNjZXNzZWQgYWZ0ZXIgZmlyc3QgcmVuZGVyXHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgaG9vayBtYXkgYmUgaW5qZWN0ZWQgYnkgYSBjaGlsZCBrZWVwLWFsaXZlXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbFZOb2RlLnNoYXBlRmxhZyAmIDI1NiAvKiBDT01QT05FTlRfU0hPVUxEX0tFRVBfQUxJVkUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5hICYmIHF1ZXVlUG9zdFJlbmRlckVmZmVjdChpbnN0YW5jZS5hLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc01vdW50ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudEFkZGVkKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vICMyNDU4OiBkZWZlcmVuY2UgbW91bnQtb25seSBvYmplY3QgcGFyYW1ldGVycyB0byBwcmV2ZW50IG1lbWxlYWtzXHJcbiAgICAgICAgICAgICAgICBpbml0aWFsVk5vZGUgPSBjb250YWluZXIgPSBhbmNob3IgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlQ29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRyaWdnZXJlZCBieSBtdXRhdGlvbiBvZiBjb21wb25lbnQncyBvd24gc3RhdGUgKG5leHQ6IG51bGwpXHJcbiAgICAgICAgICAgICAgICAvLyBPUiBwYXJlbnQgY2FsbGluZyBwcm9jZXNzQ29tcG9uZW50IChuZXh0OiBWTm9kZSlcclxuICAgICAgICAgICAgICAgIGxldCB7IG5leHQsIGJ1LCB1LCBwYXJlbnQsIHZub2RlIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIGxldCBvcmlnaW5OZXh0ID0gbmV4dDtcclxuICAgICAgICAgICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHVzaFdhcm5pbmdDb250ZXh0KG5leHQgfHwgaW5zdGFuY2Uudm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gRGlzYWxsb3cgY29tcG9uZW50IGVmZmVjdCByZWN1cnNpb24gZHVyaW5nIHByZS1saWZlY3ljbGUgaG9va3MuXHJcbiAgICAgICAgICAgICAgICB0b2dnbGVSZWN1cnNlKGluc3RhbmNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQuZWwgPSB2bm9kZS5lbDtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIoaW5zdGFuY2UsIG5leHQsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0ID0gdm5vZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBiZWZvcmVVcGRhdGUgaG9va1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlQXJyYXlGbnMoYnUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25Wbm9kZUJlZm9yZVVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgaWYgKCh2bm9kZUhvb2sgPSBuZXh0LnByb3BzICYmIG5leHQucHJvcHMub25Wbm9kZUJlZm9yZVVwZGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnZva2VWTm9kZUhvb2sodm5vZGVIb29rLCBwYXJlbnQsIG5leHQsIHZub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyXHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgcmVuZGVyYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0VHJlZSA9IHJlbmRlckNvbXBvbmVudFJvb3QoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVuZE1lYXN1cmUoaW5zdGFuY2UsIGByZW5kZXJgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZUcmVlID0gaW5zdGFuY2Uuc3ViVHJlZTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnN1YlRyZWUgPSBuZXh0VHJlZTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydE1lYXN1cmUoaW5zdGFuY2UsIGBwYXRjaGApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcGF0Y2gocHJldlRyZWUsIG5leHRUcmVlLCBcclxuICAgICAgICAgICAgICAgIC8vIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSB0ZWxlcG9ydFxyXG4gICAgICAgICAgICAgICAgaG9zdFBhcmVudE5vZGUocHJldlRyZWUuZWwpLCBcclxuICAgICAgICAgICAgICAgIC8vIGFuY2hvciBtYXkgaGF2ZSBjaGFuZ2VkIGlmIGl0J3MgaW4gYSBmcmFnbWVudFxyXG4gICAgICAgICAgICAgICAgZ2V0TmV4dEhvc3ROb2RlKHByZXZUcmVlKSwgaW5zdGFuY2UsIHBhcmVudFN1c3BlbnNlLCBpc1NWRyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kTWVhc3VyZShpbnN0YW5jZSwgYHBhdGNoYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuZXh0LmVsID0gbmV4dFRyZWUuZWw7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JpZ2luTmV4dCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGYtdHJpZ2dlcmVkIHVwZGF0ZS4gSW4gY2FzZSBvZiBIT0MsIHVwZGF0ZSBwYXJlbnQgY29tcG9uZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdm5vZGUgZWwuIEhPQyBpcyBpbmRpY2F0ZWQgYnkgcGFyZW50IGluc3RhbmNlJ3Mgc3ViVHJlZSBwb2ludGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGNoaWxkIGNvbXBvbmVudCdzIHZub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSE9DSG9zdEVsKGluc3RhbmNlLCBuZXh0VHJlZS5lbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGVkIGhvb2tcclxuICAgICAgICAgICAgICAgIGlmICh1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHUsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG9uVm5vZGVVcGRhdGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoKHZub2RlSG9vayA9IG5leHQucHJvcHMgJiYgbmV4dC5wcm9wcy5vblZub2RlVXBkYXRlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVBvc3RSZW5kZXJFZmZlY3QoKCkgPT4gaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50LCBuZXh0LCB2bm9kZSksIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgX19WVUVfUFJPRF9ERVZUT09MU19fKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGV2dG9vbHNDb21wb25lbnRVcGRhdGVkKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3BXYXJuaW5nQ29udGV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBjcmVhdGUgcmVhY3RpdmUgZWZmZWN0IGZvciByZW5kZXJpbmdcclxuICAgICAgICBjb25zdCBlZmZlY3QgPSAoaW5zdGFuY2UuZWZmZWN0ID0gbmV3IFJlYWN0aXZlRWZmZWN0KGNvbXBvbmVudFVwZGF0ZUZuLCAoKSA9PiBxdWV1ZUpvYihpbnN0YW5jZS51cGRhdGUpLCBpbnN0YW5jZS5zY29wZSAvLyB0cmFjayBpdCBpbiBjb21wb25lbnQncyBlZmZlY3Qgc2NvcGVcclxuICAgICAgICApKTtcclxuICAgICAgICBjb25zdCB1cGRhdGUgPSAoaW5zdGFuY2UudXBkYXRlID0gZWZmZWN0LnJ1bi5iaW5kKGVmZmVjdCkpO1xyXG4gICAgICAgIHVwZGF0ZS5pZCA9IGluc3RhbmNlLnVpZDtcclxuICAgICAgICAvLyBhbGxvd1JlY3Vyc2VcclxuICAgICAgICAvLyAjMTgwMSwgIzIwNDMgY29tcG9uZW50IHJlbmRlciBlZmZlY3RzIHNob3VsZCBhbGxvdyByZWN1cnNpdmUgdXBkYXRlc1xyXG4gICAgICAgIHRvZ2dsZVJlY3Vyc2UoaW5zdGFuY2UsIHRydWUpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgZWZmZWN0Lm9uVHJhY2sgPSBpbnN0YW5jZS5ydGNcclxuICAgICAgICAgICAgICAgID8gZSA9PiBpbnZva2VBcnJheUZucyhpbnN0YW5jZS5ydGMsIGUpXHJcbiAgICAgICAgICAgICAgICA6IHZvaWQgMDtcclxuICAgICAgICAgICAgZWZmZWN0Lm9uVHJpZ2dlciA9IGluc3RhbmNlLnJ0Z1xyXG4gICAgICAgICAgICAgICAgPyBlID0+IGludm9rZUFycmF5Rm5zKGluc3RhbmNlLnJ0ZywgZSlcclxuICAgICAgICAgICAgICAgIDogdm9pZCAwO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIChmb3Igc2NoZWR1bGVyKVxyXG4gICAgICAgICAgICB1cGRhdGUub3duZXJJbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1cGRhdGUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCB1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIgPSAoaW5zdGFuY2UsIG5leHRWTm9kZSwgb3B0aW1pemVkKSA9PiB7XHJcbiAgICAgICAgbmV4dFZOb2RlLmNvbXBvbmVudCA9IGluc3RhbmNlO1xyXG4gICAgICAgIGNvbnN0IHByZXZQcm9wcyA9IGluc3RhbmNlLnZub2RlLnByb3BzO1xyXG4gICAgICAgIGluc3RhbmNlLnZub2RlID0gbmV4dFZOb2RlO1xyXG4gICAgICAgIGluc3RhbmNlLm5leHQgPSBudWxsO1xyXG4gICAgICAgIHVwZGF0ZVByb3BzKGluc3RhbmNlLCBuZXh0Vk5vZGUucHJvcHMsIHByZXZQcm9wcywgb3B0aW1pemVkKTtcclxuICAgICAgICB1cGRhdGVTbG90cyhpbnN0YW5jZSwgbmV4dFZOb2RlLmNoaWxkcmVuLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICAvLyBwcm9wcyB1cGRhdGUgbWF5IGhhdmUgdHJpZ2dlcmVkIHByZS1mbHVzaCB3YXRjaGVycy5cclxuICAgICAgICAvLyBmbHVzaCB0aGVtIGJlZm9yZSB0aGUgcmVuZGVyIHVwZGF0ZS5cclxuICAgICAgICBmbHVzaFByZUZsdXNoQ2JzKHVuZGVmaW5lZCwgaW5zdGFuY2UudXBkYXRlKTtcclxuICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcGF0Y2hDaGlsZHJlbiA9IChuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGMxID0gbjEgJiYgbjEuY2hpbGRyZW47XHJcbiAgICAgICAgY29uc3QgcHJldlNoYXBlRmxhZyA9IG4xID8gbjEuc2hhcGVGbGFnIDogMDtcclxuICAgICAgICBjb25zdCBjMiA9IG4yLmNoaWxkcmVuO1xyXG4gICAgICAgIGNvbnN0IHsgcGF0Y2hGbGFnLCBzaGFwZUZsYWcgfSA9IG4yO1xyXG4gICAgICAgIC8vIGZhc3QgcGF0aFxyXG4gICAgICAgIGlmIChwYXRjaEZsYWcgPiAwKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgJiAxMjggLyogS0VZRURfRlJBR01FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY291bGQgYmUgZWl0aGVyIGZ1bGx5LWtleWVkIG9yIG1peGVkIChzb21lIGtleWVkIHNvbWUgbm90KVxyXG4gICAgICAgICAgICAgICAgLy8gcHJlc2VuY2Ugb2YgcGF0Y2hGbGFnIG1lYW5zIGNoaWxkcmVuIGFyZSBndWFyYW50ZWVkIHRvIGJlIGFycmF5c1xyXG4gICAgICAgICAgICAgICAgcGF0Y2hLZXllZENoaWxkcmVuKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAocGF0Y2hGbGFnICYgMjU2IC8qIFVOS0VZRURfRlJBR01FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIHVua2V5ZWRcclxuICAgICAgICAgICAgICAgIHBhdGNoVW5rZXllZENoaWxkcmVuKGMxLCBjMiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY2hpbGRyZW4gaGFzIDMgcG9zc2liaWxpdGllczogdGV4dCwgYXJyYXkgb3Igbm8gY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDggLyogVEVYVF9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAvLyB0ZXh0IGNoaWxkcmVuIGZhc3QgcGF0aFxyXG4gICAgICAgICAgICBpZiAocHJldlNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjMiAhPT0gYzEpIHtcclxuICAgICAgICAgICAgICAgIGhvc3RTZXRFbGVtZW50VGV4dChjb250YWluZXIsIGMyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHByZXZTaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gcHJldiBjaGlsZHJlbiB3YXMgYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmIChzaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHR3byBhcnJheXMsIGNhbm5vdCBhc3N1bWUgYW55dGhpbmcsIGRvIGZ1bGwgZGlmZlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoS2V5ZWRDaGlsZHJlbihjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbm8gbmV3IGNoaWxkcmVuLCBqdXN0IHVubW91bnQgb2xkXHJcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGMxLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHByZXYgY2hpbGRyZW4gd2FzIHRleHQgT1IgbnVsbFxyXG4gICAgICAgICAgICAgICAgLy8gbmV3IGNoaWxkcmVuIGlzIGFycmF5IE9SIG51bGxcclxuICAgICAgICAgICAgICAgIGlmIChwcmV2U2hhcGVGbGFnICYgOCAvKiBURVhUX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdFNldEVsZW1lbnRUZXh0KGNvbnRhaW5lciwgJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gbW91bnQgbmV3IGlmIGFycmF5XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudENoaWxkcmVuKGMyLCBjb250YWluZXIsIGFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBwYXRjaFVua2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBjMSA9IGMxIHx8IEVNUFRZX0FSUjtcclxuICAgICAgICBjMiA9IGMyIHx8IEVNUFRZX0FSUjtcclxuICAgICAgICBjb25zdCBvbGRMZW5ndGggPSBjMS5sZW5ndGg7XHJcbiAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gYzIubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IGNvbW1vbkxlbmd0aCA9IE1hdGgubWluKG9sZExlbmd0aCwgbmV3TGVuZ3RoKTtcclxuICAgICAgICBsZXQgaTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29tbW9uTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgOiBub3JtYWxpemVWTm9kZShjMltpXSkpO1xyXG4gICAgICAgICAgICBwYXRjaChjMVtpXSwgbmV4dENoaWxkLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvbGRMZW5ndGggPiBuZXdMZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZFxyXG4gICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4oYzEsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUsIGZhbHNlLCBjb21tb25MZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbW91bnQgbmV3XHJcbiAgICAgICAgICAgIG1vdW50Q2hpbGRyZW4oYzIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGNvbW1vbkxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIGNhbiBiZSBhbGwta2V5ZWQgb3IgbWl4ZWRcclxuICAgIGNvbnN0IHBhdGNoS2V5ZWRDaGlsZHJlbiA9IChjMSwgYzIsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpID0+IHtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgY29uc3QgbDIgPSBjMi5sZW5ndGg7XHJcbiAgICAgICAgbGV0IGUxID0gYzEubGVuZ3RoIC0gMTsgLy8gcHJldiBlbmRpbmcgaW5kZXhcclxuICAgICAgICBsZXQgZTIgPSBsMiAtIDE7IC8vIG5leHQgZW5kaW5nIGluZGV4XHJcbiAgICAgICAgLy8gMS4gc3luYyBmcm9tIHN0YXJ0XHJcbiAgICAgICAgLy8gKGEgYikgY1xyXG4gICAgICAgIC8vIChhIGIpIGQgZVxyXG4gICAgICAgIHdoaWxlIChpIDw9IGUxICYmIGkgPD0gZTIpIHtcclxuICAgICAgICAgICAgY29uc3QgbjEgPSBjMVtpXTtcclxuICAgICAgICAgICAgY29uc3QgbjIgPSAoYzJbaV0gPSBvcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgID8gY2xvbmVJZk1vdW50ZWQoYzJbaV0pXHJcbiAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSk7XHJcbiAgICAgICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xyXG4gICAgICAgICAgICAgICAgcGF0Y2gobjEsIG4yLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIDIuIHN5bmMgZnJvbSBlbmRcclxuICAgICAgICAvLyBhIChiIGMpXHJcbiAgICAgICAgLy8gZCBlIChiIGMpXHJcbiAgICAgICAgd2hpbGUgKGkgPD0gZTEgJiYgaSA8PSBlMikge1xyXG4gICAgICAgICAgICBjb25zdCBuMSA9IGMxW2UxXTtcclxuICAgICAgICAgICAgY29uc3QgbjIgPSAoYzJbZTJdID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2UyXSlcclxuICAgICAgICAgICAgICAgIDogbm9ybWFsaXplVk5vZGUoYzJbZTJdKSk7XHJcbiAgICAgICAgICAgIGlmIChpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSkge1xyXG4gICAgICAgICAgICAgICAgcGF0Y2gobjEsIG4yLCBjb250YWluZXIsIG51bGwsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlMS0tO1xyXG4gICAgICAgICAgICBlMi0tO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAzLiBjb21tb24gc2VxdWVuY2UgKyBtb3VudFxyXG4gICAgICAgIC8vIChhIGIpXHJcbiAgICAgICAgLy8gKGEgYikgY1xyXG4gICAgICAgIC8vIGkgPSAyLCBlMSA9IDEsIGUyID0gMlxyXG4gICAgICAgIC8vIChhIGIpXHJcbiAgICAgICAgLy8gYyAoYSBiKVxyXG4gICAgICAgIC8vIGkgPSAwLCBlMSA9IC0xLCBlMiA9IDBcclxuICAgICAgICBpZiAoaSA+IGUxKSB7XHJcbiAgICAgICAgICAgIGlmIChpIDw9IGUyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0UG9zID0gZTIgKyAxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV4dFBvcyA8IGwyID8gYzJbbmV4dFBvc10uZWwgOiBwYXJlbnRBbmNob3I7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoaSA8PSBlMikge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhdGNoKG51bGwsIChjMltpXSA9IG9wdGltaXplZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGNsb25lSWZNb3VudGVkKGMyW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSksIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyA0LiBjb21tb24gc2VxdWVuY2UgKyB1bm1vdW50XHJcbiAgICAgICAgLy8gKGEgYikgY1xyXG4gICAgICAgIC8vIChhIGIpXHJcbiAgICAgICAgLy8gaSA9IDIsIGUxID0gMiwgZTIgPSAxXHJcbiAgICAgICAgLy8gYSAoYiBjKVxyXG4gICAgICAgIC8vIChiIGMpXHJcbiAgICAgICAgLy8gaSA9IDAsIGUxID0gMCwgZTIgPSAtMVxyXG4gICAgICAgIGVsc2UgaWYgKGkgPiBlMikge1xyXG4gICAgICAgICAgICB3aGlsZSAoaSA8PSBlMSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChjMVtpXSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gNS4gdW5rbm93biBzZXF1ZW5jZVxyXG4gICAgICAgIC8vIFtpIC4uLiBlMSArIDFdOiBhIGIgW2MgZCBlXSBmIGdcclxuICAgICAgICAvLyBbaSAuLi4gZTIgKyAxXTogYSBiIFtlIGQgYyBoXSBmIGdcclxuICAgICAgICAvLyBpID0gMiwgZTEgPSA0LCBlMiA9IDVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgczEgPSBpOyAvLyBwcmV2IHN0YXJ0aW5nIGluZGV4XHJcbiAgICAgICAgICAgIGNvbnN0IHMyID0gaTsgLy8gbmV4dCBzdGFydGluZyBpbmRleFxyXG4gICAgICAgICAgICAvLyA1LjEgYnVpbGQga2V5OmluZGV4IG1hcCBmb3IgbmV3Q2hpbGRyZW5cclxuICAgICAgICAgICAgY29uc3Qga2V5VG9OZXdJbmRleE1hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICAgICAgZm9yIChpID0gczI7IGkgPD0gZTI7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dENoaWxkID0gKGMyW2ldID0gb3B0aW1pemVkXHJcbiAgICAgICAgICAgICAgICAgICAgPyBjbG9uZUlmTW91bnRlZChjMltpXSlcclxuICAgICAgICAgICAgICAgICAgICA6IG5vcm1hbGl6ZVZOb2RlKGMyW2ldKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dENoaWxkLmtleSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXlUb05ld0luZGV4TWFwLmhhcyhuZXh0Q2hpbGQua2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3YXJuKGBEdXBsaWNhdGUga2V5cyBmb3VuZCBkdXJpbmcgdXBkYXRlOmAsIEpTT04uc3RyaW5naWZ5KG5leHRDaGlsZC5rZXkpLCBgTWFrZSBzdXJlIGtleXMgYXJlIHVuaXF1ZS5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAga2V5VG9OZXdJbmRleE1hcC5zZXQobmV4dENoaWxkLmtleSwgaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gNS4yIGxvb3AgdGhyb3VnaCBvbGQgY2hpbGRyZW4gbGVmdCB0byBiZSBwYXRjaGVkIGFuZCB0cnkgdG8gcGF0Y2hcclxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgbm9kZXMgJiByZW1vdmUgbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIHByZXNlbnRcclxuICAgICAgICAgICAgbGV0IGo7XHJcbiAgICAgICAgICAgIGxldCBwYXRjaGVkID0gMDtcclxuICAgICAgICAgICAgY29uc3QgdG9CZVBhdGNoZWQgPSBlMiAtIHMyICsgMTtcclxuICAgICAgICAgICAgbGV0IG1vdmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIHVzZWQgdG8gdHJhY2sgd2hldGhlciBhbnkgbm9kZSBoYXMgbW92ZWRcclxuICAgICAgICAgICAgbGV0IG1heE5ld0luZGV4U29GYXIgPSAwO1xyXG4gICAgICAgICAgICAvLyB3b3JrcyBhcyBNYXA8bmV3SW5kZXgsIG9sZEluZGV4PlxyXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgb2xkSW5kZXggaXMgb2Zmc2V0IGJ5ICsxXHJcbiAgICAgICAgICAgIC8vIGFuZCBvbGRJbmRleCA9IDAgaXMgYSBzcGVjaWFsIHZhbHVlIGluZGljYXRpbmcgdGhlIG5ldyBub2RlIGhhc1xyXG4gICAgICAgICAgICAvLyBubyBjb3JyZXNwb25kaW5nIG9sZCBub2RlLlxyXG4gICAgICAgICAgICAvLyB1c2VkIGZvciBkZXRlcm1pbmluZyBsb25nZXN0IHN0YWJsZSBzdWJzZXF1ZW5jZVxyXG4gICAgICAgICAgICBjb25zdCBuZXdJbmRleFRvT2xkSW5kZXhNYXAgPSBuZXcgQXJyYXkodG9CZVBhdGNoZWQpO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9CZVBhdGNoZWQ7IGkrKylcclxuICAgICAgICAgICAgICAgIG5ld0luZGV4VG9PbGRJbmRleE1hcFtpXSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHMxOyBpIDw9IGUxOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZDaGlsZCA9IGMxW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhdGNoZWQgPj0gdG9CZVBhdGNoZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbGwgbmV3IGNoaWxkcmVuIGhhdmUgYmVlbiBwYXRjaGVkIHNvIHRoaXMgY2FuIG9ubHkgYmUgYSByZW1vdmFsXHJcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudChwcmV2Q2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IG5ld0luZGV4O1xyXG4gICAgICAgICAgICAgICAgaWYgKHByZXZDaGlsZC5rZXkgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGV4ID0ga2V5VG9OZXdJbmRleE1hcC5nZXQocHJldkNoaWxkLmtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBrZXktbGVzcyBub2RlLCB0cnkgdG8gbG9jYXRlIGEga2V5LWxlc3Mgbm9kZSBvZiB0aGUgc2FtZSB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gczI7IGogPD0gZTI7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXhUb09sZEluZGV4TWFwW2ogLSBzMl0gPT09IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2FtZVZOb2RlVHlwZShwcmV2Q2hpbGQsIGMyW2pdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggPSBqO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3SW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQocHJldkNoaWxkLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZGV4VG9PbGRJbmRleE1hcFtuZXdJbmRleCAtIHMyXSA9IGkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA+PSBtYXhOZXdJbmRleFNvRmFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heE5ld0luZGV4U29GYXIgPSBuZXdJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2gocHJldkNoaWxkLCBjMltuZXdJbmRleF0sIGNvbnRhaW5lciwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaGVkKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gNS4zIG1vdmUgYW5kIG1vdW50XHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIGxvbmdlc3Qgc3RhYmxlIHN1YnNlcXVlbmNlIG9ubHkgd2hlbiBub2RlcyBoYXZlIG1vdmVkXHJcbiAgICAgICAgICAgIGNvbnN0IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlID0gbW92ZWRcclxuICAgICAgICAgICAgICAgID8gZ2V0U2VxdWVuY2UobmV3SW5kZXhUb09sZEluZGV4TWFwKVxyXG4gICAgICAgICAgICAgICAgOiBFTVBUWV9BUlI7XHJcbiAgICAgICAgICAgIGogPSBpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZS5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAvLyBsb29waW5nIGJhY2t3YXJkcyBzbyB0aGF0IHdlIGNhbiB1c2UgbGFzdCBwYXRjaGVkIG5vZGUgYXMgYW5jaG9yXHJcbiAgICAgICAgICAgIGZvciAoaSA9IHRvQmVQYXRjaGVkIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRJbmRleCA9IHMyICsgaTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDaGlsZCA9IGMyW25leHRJbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXh0SW5kZXggKyAxIDwgbDIgPyBjMltuZXh0SW5kZXggKyAxXS5lbCA6IHBhcmVudEFuY2hvcjtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleFRvT2xkSW5kZXhNYXBbaV0gPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3VudCBuZXdcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaChudWxsLCBuZXh0Q2hpbGQsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobW92ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGlmOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIHN0YWJsZSBzdWJzZXF1ZW5jZSAoZS5nLiBhIHJldmVyc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT1IgY3VycmVudCBub2RlIGlzIG5vdCBhbW9uZyB0aGUgc3RhYmxlIHNlcXVlbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPCAwIHx8IGkgIT09IGluY3JlYXNpbmdOZXdJbmRleFNlcXVlbmNlW2pdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmUobmV4dENoaWxkLCBjb250YWluZXIsIGFuY2hvciwgMiAvKiBSRU9SREVSICovKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGotLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgbW92ZSA9ICh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlLCBwYXJlbnRTdXNwZW5zZSA9IG51bGwpID0+IHtcclxuICAgICAgICBjb25zdCB7IGVsLCB0eXBlLCB0cmFuc2l0aW9uLCBjaGlsZHJlbiwgc2hhcGVGbGFnIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgbW92ZSh2bm9kZS5jb21wb25lbnQuc3ViVHJlZSwgY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgIHZub2RlLnN1c3BlbnNlLm1vdmUoY29udGFpbmVyLCBhbmNob3IsIG1vdmVUeXBlKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgdHlwZS5tb3ZlKHZub2RlLCBjb250YWluZXIsIGFuY2hvciwgaW50ZXJuYWxzKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZSA9PT0gRnJhZ21lbnQpIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBtb3ZlKGNoaWxkcmVuW2ldLCBjb250YWluZXIsIGFuY2hvciwgbW92ZVR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGhvc3RJbnNlcnQodm5vZGUuYW5jaG9yLCBjb250YWluZXIsIGFuY2hvcik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFN0YXRpYykge1xyXG4gICAgICAgICAgICBtb3ZlU3RhdGljTm9kZSh2bm9kZSwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHNpbmdsZSBub2Rlc1xyXG4gICAgICAgIGNvbnN0IG5lZWRUcmFuc2l0aW9uID0gbW92ZVR5cGUgIT09IDIgLyogUkVPUkRFUiAqLyAmJlxyXG4gICAgICAgICAgICBzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiZcclxuICAgICAgICAgICAgdHJhbnNpdGlvbjtcclxuICAgICAgICBpZiAobmVlZFRyYW5zaXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKG1vdmVUeXBlID09PSAwIC8qIEVOVEVSICovKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICAgICAgICAgIGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB0cmFuc2l0aW9uLmVudGVyKGVsKSwgcGFyZW50U3VzcGVuc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBsZWF2ZSwgZGVsYXlMZWF2ZSwgYWZ0ZXJMZWF2ZSB9ID0gdHJhbnNpdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZSA9ICgpID0+IGhvc3RJbnNlcnQoZWwsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZWF2ZShlbCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJMZWF2ZSAmJiBhZnRlckxlYXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheUxlYXZlKGVsLCByZW1vdmUsIHBlcmZvcm1MZWF2ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwZXJmb3JtTGVhdmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaG9zdEluc2VydChlbCwgY29udGFpbmVyLCBhbmNob3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1bm1vdW50ID0gKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSA9IGZhbHNlLCBvcHRpbWl6ZWQgPSBmYWxzZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgcHJvcHMsIHJlZiwgY2hpbGRyZW4sIGR5bmFtaWNDaGlsZHJlbiwgc2hhcGVGbGFnLCBwYXRjaEZsYWcsIGRpcnMgfSA9IHZub2RlO1xyXG4gICAgICAgIC8vIHVuc2V0IHJlZlxyXG4gICAgICAgIGlmIChyZWYgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzZXRSZWYocmVmLCBudWxsLCBwYXJlbnRTdXNwZW5zZSwgdm5vZGUsIHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMjU2IC8qIENPTVBPTkVOVF9TSE9VTERfS0VFUF9BTElWRSAqLykge1xyXG4gICAgICAgICAgICBwYXJlbnRDb21wb25lbnQuY3R4LmRlYWN0aXZhdGUodm5vZGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNob3VsZEludm9rZURpcnMgPSBzaGFwZUZsYWcgJiAxIC8qIEVMRU1FTlQgKi8gJiYgZGlycztcclxuICAgICAgICBjb25zdCBzaG91bGRJbnZva2VWbm9kZUhvb2sgPSAhaXNBc3luY1dyYXBwZXIodm5vZGUpO1xyXG4gICAgICAgIGxldCB2bm9kZUhvb2s7XHJcbiAgICAgICAgaWYgKHNob3VsZEludm9rZVZub2RlSG9vayAmJlxyXG4gICAgICAgICAgICAodm5vZGVIb29rID0gcHJvcHMgJiYgcHJvcHMub25Wbm9kZUJlZm9yZVVubW91bnQpKSB7XHJcbiAgICAgICAgICAgIGludm9rZVZOb2RlSG9vayh2bm9kZUhvb2ssIHBhcmVudENvbXBvbmVudCwgdm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICAgICAgdW5tb3VudENvbXBvbmVudCh2bm9kZS5jb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5zdXNwZW5zZS51bm1vdW50KHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNob3VsZEludm9rZURpcnMpIHtcclxuICAgICAgICAgICAgICAgIGludm9rZURpcmVjdGl2ZUhvb2sodm5vZGUsIG51bGwsIHBhcmVudENvbXBvbmVudCwgJ2JlZm9yZVVubW91bnQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLnR5cGUucmVtb3ZlKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQsIGludGVybmFscywgZG9SZW1vdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGR5bmFtaWNDaGlsZHJlbiAmJlxyXG4gICAgICAgICAgICAgICAgLy8gIzExNTM6IGZhc3QgcGF0aCBzaG91bGQgbm90IGJlIHRha2VuIGZvciBub24tc3RhYmxlICh2LWZvcikgZnJhZ21lbnRzXHJcbiAgICAgICAgICAgICAgICAodHlwZSAhPT0gRnJhZ21lbnQgfHxcclxuICAgICAgICAgICAgICAgICAgICAocGF0Y2hGbGFnID4gMCAmJiBwYXRjaEZsYWcgJiA2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi8pKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gZmFzdCBwYXRoIGZvciBibG9jayBub2Rlczogb25seSBuZWVkIHRvIHVubW91bnQgZHluYW1pYyBjaGlsZHJlbi5cclxuICAgICAgICAgICAgICAgIHVubW91bnRDaGlsZHJlbihkeW5hbWljQ2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgodHlwZSA9PT0gRnJhZ21lbnQgJiZcclxuICAgICAgICAgICAgICAgIHBhdGNoRmxhZyAmXHJcbiAgICAgICAgICAgICAgICAgICAgKDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqLyB8IDI1NiAvKiBVTktFWUVEX0ZSQUdNRU5UICovKSkgfHxcclxuICAgICAgICAgICAgICAgICghb3B0aW1pemVkICYmIHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudENoaWxkcmVuKGNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZSh2bm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChzaG91bGRJbnZva2VWbm9kZUhvb2sgJiZcclxuICAgICAgICAgICAgKHZub2RlSG9vayA9IHByb3BzICYmIHByb3BzLm9uVm5vZGVVbm1vdW50ZWQpKSB8fFxyXG4gICAgICAgICAgICBzaG91bGRJbnZva2VEaXJzKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZUhvb2sgJiYgaW52b2tlVk5vZGVIb29rKHZub2RlSG9vaywgcGFyZW50Q29tcG9uZW50LCB2bm9kZSk7XHJcbiAgICAgICAgICAgICAgICBzaG91bGRJbnZva2VEaXJzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgaW52b2tlRGlyZWN0aXZlSG9vayh2bm9kZSwgbnVsbCwgcGFyZW50Q29tcG9uZW50LCAndW5tb3VudGVkJyk7XHJcbiAgICAgICAgICAgIH0sIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVtb3ZlID0gdm5vZGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgdHlwZSwgZWwsIGFuY2hvciwgdHJhbnNpdGlvbiB9ID0gdm5vZGU7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IEZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIHJlbW92ZUZyYWdtZW50KGVsLCBhbmNob3IpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSBTdGF0aWMpIHtcclxuICAgICAgICAgICAgcmVtb3ZlU3RhdGljTm9kZSh2bm9kZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcGVyZm9ybVJlbW92ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgaG9zdFJlbW92ZShlbCk7XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2l0aW9uICYmICF0cmFuc2l0aW9uLnBlcnNpc3RlZCAmJiB0cmFuc2l0aW9uLmFmdGVyTGVhdmUpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uYWZ0ZXJMZWF2ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24gJiZcclxuICAgICAgICAgICAgIXRyYW5zaXRpb24ucGVyc2lzdGVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgbGVhdmUsIGRlbGF5TGVhdmUgfSA9IHRyYW5zaXRpb247XHJcbiAgICAgICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IGxlYXZlKGVsLCBwZXJmb3JtUmVtb3ZlKTtcclxuICAgICAgICAgICAgaWYgKGRlbGF5TGVhdmUpIHtcclxuICAgICAgICAgICAgICAgIGRlbGF5TGVhdmUodm5vZGUuZWwsIHBlcmZvcm1SZW1vdmUsIHBlcmZvcm1MZWF2ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwZXJmb3JtTGVhdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGVyZm9ybVJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCByZW1vdmVGcmFnbWVudCA9IChjdXIsIGVuZCkgPT4ge1xyXG4gICAgICAgIC8vIEZvciBmcmFnbWVudHMsIGRpcmVjdGx5IHJlbW92ZSBhbGwgY29udGFpbmVkIERPTSBub2Rlcy5cclxuICAgICAgICAvLyAoZnJhZ21lbnQgY2hpbGQgbm9kZXMgY2Fubm90IGhhdmUgdHJhbnNpdGlvbilcclxuICAgICAgICBsZXQgbmV4dDtcclxuICAgICAgICB3aGlsZSAoY3VyICE9PSBlbmQpIHtcclxuICAgICAgICAgICAgbmV4dCA9IGhvc3ROZXh0U2libGluZyhjdXIpO1xyXG4gICAgICAgICAgICBob3N0UmVtb3ZlKGN1cik7XHJcbiAgICAgICAgICAgIGN1ciA9IG5leHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhvc3RSZW1vdmUoZW5kKTtcclxuICAgIH07XHJcbiAgICBjb25zdCB1bm1vdW50Q29tcG9uZW50ID0gKGluc3RhbmNlLCBwYXJlbnRTdXNwZW5zZSwgZG9SZW1vdmUpID0+IHtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGluc3RhbmNlLnR5cGUuX19obXJJZCkge1xyXG4gICAgICAgICAgICB1bnJlZ2lzdGVySE1SKGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgeyBidW0sIHNjb3BlLCB1cGRhdGUsIHN1YlRyZWUsIHVtIH0gPSBpbnN0YW5jZTtcclxuICAgICAgICAvLyBiZWZvcmVVbm1vdW50IGhvb2tcclxuICAgICAgICBpZiAoYnVtKSB7XHJcbiAgICAgICAgICAgIGludm9rZUFycmF5Rm5zKGJ1bSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHN0b3AgZWZmZWN0cyBpbiBjb21wb25lbnQgc2NvcGVcclxuICAgICAgICBzY29wZS5zdG9wKCk7XHJcbiAgICAgICAgLy8gdXBkYXRlIG1heSBiZSBudWxsIGlmIGEgY29tcG9uZW50IGlzIHVubW91bnRlZCBiZWZvcmUgaXRzIGFzeW5jXHJcbiAgICAgICAgLy8gc2V0dXAgaGFzIHJlc29sdmVkLlxyXG4gICAgICAgIGlmICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgLy8gc28gdGhhdCBzY2hlZHVsZXIgd2lsbCBubyBsb25nZXIgaW52b2tlIGl0XHJcbiAgICAgICAgICAgIHVwZGF0ZS5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdW5tb3VudChzdWJUcmVlLCBpbnN0YW5jZSwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdW5tb3VudGVkIGhvb2tcclxuICAgICAgICBpZiAodW0pIHtcclxuICAgICAgICAgICAgcXVldWVQb3N0UmVuZGVyRWZmZWN0KHVtLCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHF1ZXVlUG9zdFJlbmRlckVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlLmlzVW5tb3VudGVkID0gdHJ1ZTtcclxuICAgICAgICB9LCBwYXJlbnRTdXNwZW5zZSk7XHJcbiAgICAgICAgLy8gQSBjb21wb25lbnQgd2l0aCBhc3luYyBkZXAgaW5zaWRlIGEgcGVuZGluZyBzdXNwZW5zZSBpcyB1bm1vdW50ZWQgYmVmb3JlXHJcbiAgICAgICAgLy8gaXRzIGFzeW5jIGRlcCByZXNvbHZlcy4gVGhpcyBzaG91bGQgcmVtb3ZlIHRoZSBkZXAgZnJvbSB0aGUgc3VzcGVuc2UsIGFuZFxyXG4gICAgICAgIC8vIGNhdXNlIHRoZSBzdXNwZW5zZSB0byByZXNvbHZlIGltbWVkaWF0ZWx5IGlmIHRoYXQgd2FzIHRoZSBsYXN0IGRlcC5cclxuICAgICAgICBpZiAocGFyZW50U3VzcGVuc2UgJiZcclxuICAgICAgICAgICAgcGFyZW50U3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJlxyXG4gICAgICAgICAgICAhcGFyZW50U3VzcGVuc2UuaXNVbm1vdW50ZWQgJiZcclxuICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgJiZcclxuICAgICAgICAgICAgIWluc3RhbmNlLmFzeW5jUmVzb2x2ZWQgJiZcclxuICAgICAgICAgICAgaW5zdGFuY2Uuc3VzcGVuc2VJZCA9PT0gcGFyZW50U3VzcGVuc2UucGVuZGluZ0lkKSB7XHJcbiAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLmRlcHMtLTtcclxuICAgICAgICAgICAgaWYgKHBhcmVudFN1c3BlbnNlLmRlcHMgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHBhcmVudFN1c3BlbnNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8IF9fVlVFX1BST0RfREVWVE9PTFNfXykge1xyXG4gICAgICAgICAgICBkZXZ0b29sc0NvbXBvbmVudFJlbW92ZWQoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCB1bm1vdW50Q2hpbGRyZW4gPSAoY2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGRvUmVtb3ZlID0gZmFsc2UsIG9wdGltaXplZCA9IGZhbHNlLCBzdGFydCA9IDApID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB1bm1vdW50KGNoaWxkcmVuW2ldLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBkb1JlbW92ZSwgb3B0aW1pemVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZ2V0TmV4dEhvc3ROb2RlID0gdm5vZGUgPT4ge1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiA2IC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0TmV4dEhvc3ROb2RlKHZub2RlLmNvbXBvbmVudC5zdWJUcmVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZub2RlLnNoYXBlRmxhZyAmIDEyOCAvKiBTVVNQRU5TRSAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gdm5vZGUuc3VzcGVuc2UubmV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaG9zdE5leHRTaWJsaW5nKCh2bm9kZS5hbmNob3IgfHwgdm5vZGUuZWwpKTtcclxuICAgIH07XHJcbiAgICBjb25zdCByZW5kZXIgPSAodm5vZGUsIGNvbnRhaW5lciwgaXNTVkcpID0+IHtcclxuICAgICAgICBpZiAodm5vZGUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyLl92bm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdW5tb3VudChjb250YWluZXIuX3Zub2RlLCBudWxsLCBudWxsLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGF0Y2goY29udGFpbmVyLl92bm9kZSB8fCBudWxsLCB2bm9kZSwgY29udGFpbmVyLCBudWxsLCBudWxsLCBudWxsLCBpc1NWRyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZsdXNoUG9zdEZsdXNoQ2JzKCk7XHJcbiAgICAgICAgY29udGFpbmVyLl92bm9kZSA9IHZub2RlO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGludGVybmFscyA9IHtcclxuICAgICAgICBwOiBwYXRjaCxcclxuICAgICAgICB1bTogdW5tb3VudCxcclxuICAgICAgICBtOiBtb3ZlLFxyXG4gICAgICAgIHI6IHJlbW92ZSxcclxuICAgICAgICBtdDogbW91bnRDb21wb25lbnQsXHJcbiAgICAgICAgbWM6IG1vdW50Q2hpbGRyZW4sXHJcbiAgICAgICAgcGM6IHBhdGNoQ2hpbGRyZW4sXHJcbiAgICAgICAgcGJjOiBwYXRjaEJsb2NrQ2hpbGRyZW4sXHJcbiAgICAgICAgbjogZ2V0TmV4dEhvc3ROb2RlLFxyXG4gICAgICAgIG86IG9wdGlvbnNcclxuICAgIH07XHJcbiAgICBsZXQgaHlkcmF0ZTtcclxuICAgIGxldCBoeWRyYXRlTm9kZTtcclxuICAgIGlmIChjcmVhdGVIeWRyYXRpb25GbnMpIHtcclxuICAgICAgICBbaHlkcmF0ZSwgaHlkcmF0ZU5vZGVdID0gY3JlYXRlSHlkcmF0aW9uRm5zKGludGVybmFscyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbmRlcixcclxuICAgICAgICBoeWRyYXRlLFxyXG4gICAgICAgIGNyZWF0ZUFwcDogY3JlYXRlQXBwQVBJKHJlbmRlciwgaHlkcmF0ZSlcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gdG9nZ2xlUmVjdXJzZSh7IGVmZmVjdCwgdXBkYXRlIH0sIGFsbG93ZWQpIHtcclxuICAgIGVmZmVjdC5hbGxvd1JlY3Vyc2UgPSB1cGRhdGUuYWxsb3dSZWN1cnNlID0gYWxsb3dlZDtcclxufVxyXG4vKipcclxuICogIzExNTZcclxuICogV2hlbiBhIGNvbXBvbmVudCBpcyBITVItZW5hYmxlZCwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBhbGwgc3RhdGljIG5vZGVzXHJcbiAqIGluc2lkZSBhIGJsb2NrIGFsc28gaW5oZXJpdCB0aGUgRE9NIGVsZW1lbnQgZnJvbSB0aGUgcHJldmlvdXMgdHJlZSBzbyB0aGF0XHJcbiAqIEhNUiB1cGRhdGVzICh3aGljaCBhcmUgZnVsbCB1cGRhdGVzKSBjYW4gcmV0cmlldmUgdGhlIGVsZW1lbnQgZm9yIHBhdGNoaW5nLlxyXG4gKlxyXG4gKiAjMjA4MFxyXG4gKiBJbnNpZGUga2V5ZWQgYHRlbXBsYXRlYCBmcmFnbWVudCBzdGF0aWMgY2hpbGRyZW4sIGlmIGEgZnJhZ21lbnQgaXMgbW92ZWQsXHJcbiAqIHRoZSBjaGlsZHJlbiB3aWxsIGFsd2F5cyBiZSBtb3ZlZC4gVGhlcmVmb3JlLCBpbiBvcmRlciB0byBlbnN1cmUgY29ycmVjdCBtb3ZlXHJcbiAqIHBvc2l0aW9uLCBlbCBzaG91bGQgYmUgaW5oZXJpdGVkIGZyb20gcHJldmlvdXMgbm9kZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuKG4xLCBuMiwgc2hhbGxvdyA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBjaDEgPSBuMS5jaGlsZHJlbjtcclxuICAgIGNvbnN0IGNoMiA9IG4yLmNoaWxkcmVuO1xyXG4gICAgaWYgKGlzQXJyYXkoY2gxKSAmJiBpc0FycmF5KGNoMikpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoMS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAvLyB0aGlzIGlzIG9ubHkgY2FsbGVkIGluIHRoZSBvcHRpbWl6ZWQgcGF0aCBzbyBhcnJheSBjaGlsZHJlbiBhcmVcclxuICAgICAgICAgICAgLy8gZ3VhcmFudGVlZCB0byBiZSB2bm9kZXNcclxuICAgICAgICAgICAgY29uc3QgYzEgPSBjaDFbaV07XHJcbiAgICAgICAgICAgIGxldCBjMiA9IGNoMltpXTtcclxuICAgICAgICAgICAgaWYgKGMyLnNoYXBlRmxhZyAmIDEgLyogRUxFTUVOVCAqLyAmJiAhYzIuZHluYW1pY0NoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYzIucGF0Y2hGbGFnIDw9IDAgfHwgYzIucGF0Y2hGbGFnID09PSAzMiAvKiBIWURSQVRFX0VWRU5UUyAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGMyID0gY2gyW2ldID0gY2xvbmVJZk1vdW50ZWQoY2gyW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFzaGFsbG93KVxyXG4gICAgICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4oYzEsIGMyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhbHNvIGluaGVyaXQgZm9yIGNvbW1lbnQgbm9kZXMsIGJ1dCBub3QgcGxhY2Vob2xkZXJzIChlLmcuIHYtaWYgd2hpY2hcclxuICAgICAgICAgICAgLy8gd291bGQgaGF2ZSByZWNlaXZlZCAuZWwgZHVyaW5nIGJsb2NrIHBhdGNoKVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGMyLnR5cGUgPT09IENvbW1lbnQgJiYgIWMyLmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjMi5lbCA9IGMxLmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvbmdlc3RfaW5jcmVhc2luZ19zdWJzZXF1ZW5jZVxyXG5mdW5jdGlvbiBnZXRTZXF1ZW5jZShhcnIpIHtcclxuICAgIGNvbnN0IHAgPSBhcnIuc2xpY2UoKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFswXTtcclxuICAgIGxldCBpLCBqLCB1LCB2LCBjO1xyXG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGFyckkgPSBhcnJbaV07XHJcbiAgICAgICAgaWYgKGFyckkgIT09IDApIHtcclxuICAgICAgICAgICAgaiA9IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGlmIChhcnJbal0gPCBhcnJJKSB7XHJcbiAgICAgICAgICAgICAgICBwW2ldID0gajtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdSA9IDA7XHJcbiAgICAgICAgICAgIHYgPSByZXN1bHQubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgd2hpbGUgKHUgPCB2KSB7XHJcbiAgICAgICAgICAgICAgICBjID0gKHUgKyB2KSA+PiAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFycltyZXN1bHRbY11dIDwgYXJySSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHUgPSBjICsgMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHYgPSBjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhcnJJIDwgYXJyW3Jlc3VsdFt1XV0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh1ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBbaV0gPSByZXN1bHRbdSAtIDFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzdWx0W3VdID0gaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHUgPSByZXN1bHQubGVuZ3RoO1xyXG4gICAgdiA9IHJlc3VsdFt1IC0gMV07XHJcbiAgICB3aGlsZSAodS0tID4gMCkge1xyXG4gICAgICAgIHJlc3VsdFt1XSA9IHY7XHJcbiAgICAgICAgdiA9IHBbdl07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XG5cbmNvbnN0IGlzVGVsZXBvcnQgPSAodHlwZSkgPT4gdHlwZS5fX2lzVGVsZXBvcnQ7XHJcbmNvbnN0IGlzVGVsZXBvcnREaXNhYmxlZCA9IChwcm9wcykgPT4gcHJvcHMgJiYgKHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmRpc2FibGVkID09PSAnJyk7XHJcbmNvbnN0IGlzVGFyZ2V0U1ZHID0gKHRhcmdldCkgPT4gdHlwZW9mIFNWR0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQ7XHJcbmNvbnN0IHJlc29sdmVUYXJnZXQgPSAocHJvcHMsIHNlbGVjdCkgPT4ge1xyXG4gICAgY29uc3QgdGFyZ2V0U2VsZWN0b3IgPSBwcm9wcyAmJiBwcm9wcy50bztcclxuICAgIGlmIChpc1N0cmluZyh0YXJnZXRTZWxlY3RvcikpIHtcclxuICAgICAgICBpZiAoIXNlbGVjdCkge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIHdhcm4oYEN1cnJlbnQgcmVuZGVyZXIgZG9lcyBub3Qgc3VwcG9ydCBzdHJpbmcgdGFyZ2V0IGZvciBUZWxlcG9ydHMuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGAobWlzc2luZyBxdWVyeVNlbGVjdG9yIHJlbmRlcmVyIG9wdGlvbilgKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBzZWxlY3QodGFyZ2V0U2VsZWN0b3IpO1xyXG4gICAgICAgICAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgd2FybihgRmFpbGVkIHRvIGxvY2F0ZSBUZWxlcG9ydCB0YXJnZXQgd2l0aCBzZWxlY3RvciBcIiR7dGFyZ2V0U2VsZWN0b3J9XCIuIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgTm90ZSB0aGUgdGFyZ2V0IGVsZW1lbnQgbXVzdCBleGlzdCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkIC0gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpLmUuIHRoZSB0YXJnZXQgY2Fubm90IGJlIHJlbmRlcmVkIGJ5IHRoZSBjb21wb25lbnQgaXRzZWxmLCBhbmQgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBpZGVhbGx5IHNob3VsZCBiZSBvdXRzaWRlIG9mIHRoZSBlbnRpcmUgVnVlIGNvbXBvbmVudCB0cmVlLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhdGFyZ2V0U2VsZWN0b3IgJiYgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcclxuICAgICAgICAgICAgd2FybihgSW52YWxpZCBUZWxlcG9ydCB0YXJnZXQ6ICR7dGFyZ2V0U2VsZWN0b3J9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXRTZWxlY3RvcjtcclxuICAgIH1cclxufTtcclxuY29uc3QgVGVsZXBvcnRJbXBsID0ge1xyXG4gICAgX19pc1RlbGVwb3J0OiB0cnVlLFxyXG4gICAgcHJvY2VzcyhuMSwgbjIsIGNvbnRhaW5lciwgYW5jaG9yLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQsIGludGVybmFscykge1xyXG4gICAgICAgIGNvbnN0IHsgbWM6IG1vdW50Q2hpbGRyZW4sIHBjOiBwYXRjaENoaWxkcmVuLCBwYmM6IHBhdGNoQmxvY2tDaGlsZHJlbiwgbzogeyBpbnNlcnQsIHF1ZXJ5U2VsZWN0b3IsIGNyZWF0ZVRleHQsIGNyZWF0ZUNvbW1lbnQgfSB9ID0gaW50ZXJuYWxzO1xyXG4gICAgICAgIGNvbnN0IGRpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4yLnByb3BzKTtcclxuICAgICAgICBsZXQgeyBzaGFwZUZsYWcsIGNoaWxkcmVuLCBkeW5hbWljQ2hpbGRyZW4gfSA9IG4yO1xyXG4gICAgICAgIC8vICMzMzAyXHJcbiAgICAgICAgLy8gSE1SIHVwZGF0ZWQsIGZvcmNlIGZ1bGwgZGlmZlxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgaXNIbXJVcGRhdGluZykge1xyXG4gICAgICAgICAgICBvcHRpbWl6ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZHluYW1pY0NoaWxkcmVuID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4xID09IG51bGwpIHtcclxuICAgICAgICAgICAgLy8gaW5zZXJ0IGFuY2hvcnMgaW4gdGhlIG1haW4gdmlld1xyXG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlciA9IChuMi5lbCA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVDb21tZW50KCd0ZWxlcG9ydCBzdGFydCcpXHJcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICAgICAgY29uc3QgbWFpbkFuY2hvciA9IChuMi5hbmNob3IgPSAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJylcclxuICAgICAgICAgICAgICAgID8gY3JlYXRlQ29tbWVudCgndGVsZXBvcnQgZW5kJylcclxuICAgICAgICAgICAgICAgIDogY3JlYXRlVGV4dCgnJykpO1xyXG4gICAgICAgICAgICBpbnNlcnQocGxhY2Vob2xkZXIsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgaW5zZXJ0KG1haW5BbmNob3IsIGNvbnRhaW5lciwgYW5jaG9yKTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gKG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gKG4yLnRhcmdldEFuY2hvciA9IGNyZWF0ZVRleHQoJycpKTtcclxuICAgICAgICAgICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgaW5zZXJ0KHRhcmdldEFuY2hvciwgdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIC8vICMyNjUyIHdlIGNvdWxkIGJlIHRlbGVwb3J0aW5nIGZyb20gYSBub24tU1ZHIHRyZWUgaW50byBhbiBTVkcgdHJlZVxyXG4gICAgICAgICAgICAgICAgaXNTVkcgPSBpc1NWRyB8fCBpc1RhcmdldFNWRyh0YXJnZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIG1vdW50OicsIHRhcmdldCwgYCgke3R5cGVvZiB0YXJnZXR9KWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdW50ID0gKGNvbnRhaW5lciwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBUZWxlcG9ydCAqYWx3YXlzKiBoYXMgQXJyYXkgY2hpbGRyZW4uIFRoaXMgaXMgZW5mb3JjZWQgaW4gYm90aCB0aGVcclxuICAgICAgICAgICAgICAgIC8vIGNvbXBpbGVyIGFuZCB2bm9kZSBjaGlsZHJlbiBub3JtYWxpemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW91bnRDaGlsZHJlbihjaGlsZHJlbiwgY29udGFpbmVyLCBhbmNob3IsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIGlzU1ZHLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgbW91bnQoY29udGFpbmVyLCBtYWluQW5jaG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIG1vdW50KHRhcmdldCwgdGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdXBkYXRlIGNvbnRlbnRcclxuICAgICAgICAgICAgbjIuZWwgPSBuMS5lbDtcclxuICAgICAgICAgICAgY29uc3QgbWFpbkFuY2hvciA9IChuMi5hbmNob3IgPSBuMS5hbmNob3IpO1xyXG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSAobjIudGFyZ2V0ID0gbjEudGFyZ2V0KTtcclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0QW5jaG9yID0gKG4yLnRhcmdldEFuY2hvciA9IG4xLnRhcmdldEFuY2hvcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHdhc0Rpc2FibGVkID0gaXNUZWxlcG9ydERpc2FibGVkKG4xLnByb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbnRhaW5lciA9IHdhc0Rpc2FibGVkID8gY29udGFpbmVyIDogdGFyZ2V0O1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50QW5jaG9yID0gd2FzRGlzYWJsZWQgPyBtYWluQW5jaG9yIDogdGFyZ2V0QW5jaG9yO1xyXG4gICAgICAgICAgICBpc1NWRyA9IGlzU1ZHIHx8IGlzVGFyZ2V0U1ZHKHRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmIChkeW5hbWljQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIC8vIGZhc3QgcGF0aCB3aGVuIHRoZSB0ZWxlcG9ydCBoYXBwZW5zIHRvIGJlIGEgYmxvY2sgcm9vdFxyXG4gICAgICAgICAgICAgICAgcGF0Y2hCbG9ja0NoaWxkcmVuKG4xLmR5bmFtaWNDaGlsZHJlbiwgZHluYW1pY0NoaWxkcmVuLCBjdXJyZW50Q29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBpc1NWRywgc2xvdFNjb3BlSWRzKTtcclxuICAgICAgICAgICAgICAgIC8vIGV2ZW4gaW4gYmxvY2sgdHJlZSBtb2RlIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGFsbCByb290LWxldmVsIG5vZGVzXHJcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgdGVsZXBvcnQgaW5oZXJpdCBwcmV2aW91cyBET00gcmVmZXJlbmNlcyBzbyB0aGF0IHRoZXkgY2FuXHJcbiAgICAgICAgICAgICAgICAvLyBiZSBtb3ZlZCBpbiBmdXR1cmUgcGF0Y2hlcy5cclxuICAgICAgICAgICAgICAgIHRyYXZlcnNlU3RhdGljQ2hpbGRyZW4objEsIG4yLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICghb3B0aW1pemVkKSB7XHJcbiAgICAgICAgICAgICAgICBwYXRjaENoaWxkcmVuKG4xLCBuMiwgY3VycmVudENvbnRhaW5lciwgY3VycmVudEFuY2hvciwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgaXNTVkcsIHNsb3RTY29wZUlkcywgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF3YXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVuYWJsZWQgLT4gZGlzYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gbWFpbiBjb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIGNvbnRhaW5lciwgbWFpbkFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRPR0dMRSAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgY2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgaWYgKChuMi5wcm9wcyAmJiBuMi5wcm9wcy50bykgIT09IChuMS5wcm9wcyAmJiBuMS5wcm9wcy50bykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0VGFyZ2V0ID0gKG4yLnRhcmdldCA9IHJlc29sdmVUYXJnZXQobjIucHJvcHMsIHF1ZXJ5U2VsZWN0b3IpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb3ZlVGVsZXBvcnQobjIsIG5leHRUYXJnZXQsIG51bGwsIGludGVybmFscywgMCAvKiBUQVJHRVRfQ0hBTkdFICovKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm4oJ0ludmFsaWQgVGVsZXBvcnQgdGFyZ2V0IG9uIHVwZGF0ZTonLCB0YXJnZXQsIGAoJHt0eXBlb2YgdGFyZ2V0fSlgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh3YXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpc2FibGVkIC0+IGVuYWJsZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGludG8gdGVsZXBvcnQgdGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgbW92ZVRlbGVwb3J0KG4yLCB0YXJnZXQsIHRhcmdldEFuY2hvciwgaW50ZXJuYWxzLCAxIC8qIFRPR0dMRSAqLyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlKHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBvcHRpbWl6ZWQsIHsgdW06IHVubW91bnQsIG86IHsgcmVtb3ZlOiBob3N0UmVtb3ZlIH0gfSwgZG9SZW1vdmUpIHtcclxuICAgICAgICBjb25zdCB7IHNoYXBlRmxhZywgY2hpbGRyZW4sIGFuY2hvciwgdGFyZ2V0QW5jaG9yLCB0YXJnZXQsIHByb3BzIH0gPSB2bm9kZTtcclxuICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGhvc3RSZW1vdmUodGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYW4gdW5tb3VudGVkIHRlbGVwb3J0IHNob3VsZCBhbHdheXMgcmVtb3ZlIGl0cyBjaGlsZHJlbiBpZiBub3QgZGlzYWJsZWRcclxuICAgICAgICBpZiAoZG9SZW1vdmUgfHwgIWlzVGVsZXBvcnREaXNhYmxlZChwcm9wcykpIHtcclxuICAgICAgICAgICAgaG9zdFJlbW92ZShhbmNob3IpO1xyXG4gICAgICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTYgLyogQVJSQVlfQ0hJTERSRU4gKi8pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHVubW91bnQoY2hpbGQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHRydWUsICEhY2hpbGQuZHluYW1pY0NoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtb3ZlOiBtb3ZlVGVsZXBvcnQsXHJcbiAgICBoeWRyYXRlOiBoeWRyYXRlVGVsZXBvcnRcclxufTtcclxuZnVuY3Rpb24gbW92ZVRlbGVwb3J0KHZub2RlLCBjb250YWluZXIsIHBhcmVudEFuY2hvciwgeyBvOiB7IGluc2VydCB9LCBtOiBtb3ZlIH0sIG1vdmVUeXBlID0gMiAvKiBSRU9SREVSICovKSB7XHJcbiAgICAvLyBtb3ZlIHRhcmdldCBhbmNob3IgaWYgdGhpcyBpcyBhIHRhcmdldCBjaGFuZ2UuXHJcbiAgICBpZiAobW92ZVR5cGUgPT09IDAgLyogVEFSR0VUX0NIQU5HRSAqLykge1xyXG4gICAgICAgIGluc2VydCh2bm9kZS50YXJnZXRBbmNob3IsIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgZWwsIGFuY2hvciwgc2hhcGVGbGFnLCBjaGlsZHJlbiwgcHJvcHMgfSA9IHZub2RlO1xyXG4gICAgY29uc3QgaXNSZW9yZGVyID0gbW92ZVR5cGUgPT09IDIgLyogUkVPUkRFUiAqLztcclxuICAgIC8vIG1vdmUgbWFpbiB2aWV3IGFuY2hvciBpZiB0aGlzIGlzIGEgcmUtb3JkZXIuXHJcbiAgICBpZiAoaXNSZW9yZGVyKSB7XHJcbiAgICAgICAgaW5zZXJ0KGVsLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XHJcbiAgICB9XHJcbiAgICAvLyBpZiB0aGlzIGlzIGEgcmUtb3JkZXIgYW5kIHRlbGVwb3J0IGlzIGVuYWJsZWQgKGNvbnRlbnQgaXMgaW4gdGFyZ2V0KVxyXG4gICAgLy8gZG8gbm90IG1vdmUgY2hpbGRyZW4uIFNvIHRoZSBvcHBvc2l0ZSBpczogb25seSBtb3ZlIGNoaWxkcmVuIGlmIHRoaXNcclxuICAgIC8vIGlzIG5vdCBhIHJlb3JkZXIsIG9yIHRoZSB0ZWxlcG9ydCBpcyBkaXNhYmxlZFxyXG4gICAgaWYgKCFpc1Jlb3JkZXIgfHwgaXNUZWxlcG9ydERpc2FibGVkKHByb3BzKSkge1xyXG4gICAgICAgIC8vIFRlbGVwb3J0IGhhcyBlaXRoZXIgQXJyYXkgY2hpbGRyZW4gb3Igbm8gY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKHNoYXBlRmxhZyAmIDE2IC8qIEFSUkFZX0NISUxEUkVOICovKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1vdmUoY2hpbGRyZW5baV0sIGNvbnRhaW5lciwgcGFyZW50QW5jaG9yLCAyIC8qIFJFT1JERVIgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gbW92ZSBtYWluIHZpZXcgYW5jaG9yIGlmIHRoaXMgaXMgYSByZS1vcmRlci5cclxuICAgIGlmIChpc1Jlb3JkZXIpIHtcclxuICAgICAgICBpbnNlcnQoYW5jaG9yLCBjb250YWluZXIsIHBhcmVudEFuY2hvcik7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaHlkcmF0ZVRlbGVwb3J0KG5vZGUsIHZub2RlLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlLCBzbG90U2NvcGVJZHMsIG9wdGltaXplZCwgeyBvOiB7IG5leHRTaWJsaW5nLCBwYXJlbnROb2RlLCBxdWVyeVNlbGVjdG9yIH0gfSwgaHlkcmF0ZUNoaWxkcmVuKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSAodm5vZGUudGFyZ2V0ID0gcmVzb2x2ZVRhcmdldCh2bm9kZS5wcm9wcywgcXVlcnlTZWxlY3RvcikpO1xyXG4gICAgaWYgKHRhcmdldCkge1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlIHRlbGVwb3J0cyByZW5kZXJlZCB0byB0aGUgc2FtZSB0YXJnZXQgZWxlbWVudCwgd2UgbmVlZCB0b1xyXG4gICAgICAgIC8vIHBpY2sgdXAgZnJvbSB3aGVyZSB0aGUgbGFzdCB0ZWxlcG9ydCBmaW5pc2hlZCBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBub2RlXHJcbiAgICAgICAgY29uc3QgdGFyZ2V0Tm9kZSA9IHRhcmdldC5fbHBhIHx8IHRhcmdldC5maXJzdENoaWxkO1xyXG4gICAgICAgIGlmICh2bm9kZS5zaGFwZUZsYWcgJiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLykge1xyXG4gICAgICAgICAgICBpZiAoaXNUZWxlcG9ydERpc2FibGVkKHZub2RlLnByb3BzKSkge1xyXG4gICAgICAgICAgICAgICAgdm5vZGUuYW5jaG9yID0gaHlkcmF0ZUNoaWxkcmVuKG5leHRTaWJsaW5nKG5vZGUpLCB2bm9kZSwgcGFyZW50Tm9kZShub2RlKSwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgc2xvdFNjb3BlSWRzLCBvcHRpbWl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gdGFyZ2V0Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZub2RlLmFuY2hvciA9IG5leHRTaWJsaW5nKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgdm5vZGUudGFyZ2V0QW5jaG9yID0gaHlkcmF0ZUNoaWxkcmVuKHRhcmdldE5vZGUsIHZub2RlLCB0YXJnZXQsIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHNsb3RTY29wZUlkcywgb3B0aW1pemVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0YXJnZXQuX2xwYSA9XHJcbiAgICAgICAgICAgICAgICB2bm9kZS50YXJnZXRBbmNob3IgJiYgbmV4dFNpYmxpbmcodm5vZGUudGFyZ2V0QW5jaG9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdm5vZGUuYW5jaG9yICYmIG5leHRTaWJsaW5nKHZub2RlLmFuY2hvcik7XHJcbn1cclxuLy8gRm9yY2UtY2FzdGVkIHB1YmxpYyB0eXBpbmcgZm9yIGggYW5kIFRTWCBwcm9wcyBpbmZlcmVuY2VcclxuY29uc3QgVGVsZXBvcnQgPSBUZWxlcG9ydEltcGw7XG5cbmNvbnN0IENPTVBPTkVOVFMgPSAnY29tcG9uZW50cyc7XHJcbmNvbnN0IERJUkVDVElWRVMgPSAnZGlyZWN0aXZlcyc7XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudChuYW1lLCBtYXliZVNlbGZSZWZlcmVuY2UpIHtcclxuICAgIHJldHVybiByZXNvbHZlQXNzZXQoQ09NUE9ORU5UUywgbmFtZSwgdHJ1ZSwgbWF5YmVTZWxmUmVmZXJlbmNlKSB8fCBuYW1lO1xyXG59XHJcbmNvbnN0IE5VTExfRFlOQU1JQ19DT01QT05FTlQgPSBTeW1ib2woKTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY0NvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgIGlmIChpc1N0cmluZyhjb21wb25lbnQpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmVBc3NldChDT01QT05FTlRTLCBjb21wb25lbnQsIGZhbHNlKSB8fCBjb21wb25lbnQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBpbnZhbGlkIHR5cGVzIHdpbGwgZmFsbHRocm91Z2ggdG8gY3JlYXRlVk5vZGUgYW5kIHJhaXNlIHdhcm5pbmdcclxuICAgICAgICByZXR1cm4gKGNvbXBvbmVudCB8fCBOVUxMX0RZTkFNSUNfQ09NUE9ORU5UKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIHJlc29sdmVEaXJlY3RpdmUobmFtZSkge1xyXG4gICAgcmV0dXJuIHJlc29sdmVBc3NldChESVJFQ1RJVkVTLCBuYW1lKTtcclxufVxyXG4vLyBpbXBsZW1lbnRhdGlvblxyXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQodHlwZSwgbmFtZSwgd2Fybk1pc3NpbmcgPSB0cnVlLCBtYXliZVNlbGZSZWZlcmVuY2UgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgfHwgY3VycmVudEluc3RhbmNlO1xyXG4gICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgY29uc3QgQ29tcG9uZW50ID0gaW5zdGFuY2UudHlwZTtcclxuICAgICAgICAvLyBleHBsaWNpdCBzZWxmIG5hbWUgaGFzIGhpZ2hlc3QgcHJpb3JpdHlcclxuICAgICAgICBpZiAodHlwZSA9PT0gQ09NUE9ORU5UUykge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxmTmFtZSA9IGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KTtcclxuICAgICAgICAgICAgaWYgKHNlbGZOYW1lICYmXHJcbiAgICAgICAgICAgICAgICAoc2VsZk5hbWUgPT09IG5hbWUgfHxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmTmFtZSA9PT0gY2FtZWxpemUobmFtZSkgfHxcclxuICAgICAgICAgICAgICAgICAgICBzZWxmTmFtZSA9PT0gY2FwaXRhbGl6ZShjYW1lbGl6ZShuYW1lKSkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ29tcG9uZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJlcyA9IFxyXG4gICAgICAgIC8vIGxvY2FsIHJlZ2lzdHJhdGlvblxyXG4gICAgICAgIC8vIGNoZWNrIGluc3RhbmNlW3R5cGVdIGZpcnN0IHdoaWNoIGlzIHJlc29sdmVkIGZvciBvcHRpb25zIEFQSVxyXG4gICAgICAgIHJlc29sdmUoaW5zdGFuY2VbdHlwZV0gfHwgQ29tcG9uZW50W3R5cGVdLCBuYW1lKSB8fFxyXG4gICAgICAgICAgICAvLyBnbG9iYWwgcmVnaXN0cmF0aW9uXHJcbiAgICAgICAgICAgIHJlc29sdmUoaW5zdGFuY2UuYXBwQ29udGV4dFt0eXBlXSwgbmFtZSk7XHJcbiAgICAgICAgaWYgKCFyZXMgJiYgbWF5YmVTZWxmUmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIGltcGxpY2l0IHNlbGYtcmVmZXJlbmNlXHJcbiAgICAgICAgICAgIHJldHVybiBDb21wb25lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xyXG4gICAgICAgICAgICBjb25zdCBleHRyYSA9IHR5cGUgPT09IENPTVBPTkVOVFNcclxuICAgICAgICAgICAgICAgID8gYFxcbklmIHRoaXMgaXMgYSBuYXRpdmUgY3VzdG9tIGVsZW1lbnQsIG1ha2Ugc3VyZSB0byBleGNsdWRlIGl0IGZyb20gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGNvbXBvbmVudCByZXNvbHV0aW9uIHZpYSBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50LmBcclxuICAgICAgICAgICAgICAgIDogYGA7XHJcbiAgICAgICAgICAgIHdhcm4oYEZhaWxlZCB0byByZXNvbHZlICR7dHlwZS5zbGljZSgwLCAtMSl9OiAke25hbWV9JHtleHRyYX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm4oYHJlc29sdmUke2NhcGl0YWxpemUodHlwZS5zbGljZSgwLCAtMSkpfSBgICtcclxuICAgICAgICAgICAgYGNhbiBvbmx5IGJlIHVzZWQgaW4gcmVuZGVyKCkgb3Igc2V0dXAoKS5gKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXNvbHZlKHJlZ2lzdHJ5LCBuYW1lKSB7XHJcbiAgICByZXR1cm4gKHJlZ2lzdHJ5ICYmXHJcbiAgICAgICAgKHJlZ2lzdHJ5W25hbWVdIHx8XHJcbiAgICAgICAgICAgIHJlZ2lzdHJ5W2NhbWVsaXplKG5hbWUpXSB8fFxyXG4gICAgICAgICAgICByZWdpc3RyeVtjYXBpdGFsaXplKGNhbWVsaXplKG5hbWUpKV0pKTtcclxufVxuXG5jb25zdCBGcmFnbWVudCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnRnJhZ21lbnQnIDogdW5kZWZpbmVkKTtcclxuY29uc3QgVGV4dCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnVGV4dCcgOiB1bmRlZmluZWQpO1xyXG5jb25zdCBDb21tZW50ID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/ICdDb21tZW50JyA6IHVuZGVmaW5lZCk7XHJcbmNvbnN0IFN0YXRpYyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnU3RhdGljJyA6IHVuZGVmaW5lZCk7XHJcbi8vIFNpbmNlIHYtaWYgYW5kIHYtZm9yIGFyZSB0aGUgdHdvIHBvc3NpYmxlIHdheXMgbm9kZSBzdHJ1Y3R1cmUgY2FuIGR5bmFtaWNhbGx5XHJcbi8vIGNoYW5nZSwgb25jZSB3ZSBjb25zaWRlciB2LWlmIGJyYW5jaGVzIGFuZCBlYWNoIHYtZm9yIGZyYWdtZW50IGEgYmxvY2ssIHdlXHJcbi8vIGNhbiBkaXZpZGUgYSB0ZW1wbGF0ZSBpbnRvIG5lc3RlZCBibG9ja3MsIGFuZCB3aXRoaW4gZWFjaCBibG9jayB0aGUgbm9kZVxyXG4vLyBzdHJ1Y3R1cmUgd291bGQgYmUgc3RhYmxlLiBUaGlzIGFsbG93cyB1cyB0byBza2lwIG1vc3QgY2hpbGRyZW4gZGlmZmluZ1xyXG4vLyBhbmQgb25seSB3b3JyeSBhYm91dCB0aGUgZHluYW1pYyBub2RlcyAoaW5kaWNhdGVkIGJ5IHBhdGNoIGZsYWdzKS5cclxuY29uc3QgYmxvY2tTdGFjayA9IFtdO1xyXG5sZXQgY3VycmVudEJsb2NrID0gbnVsbDtcclxuLyoqXHJcbiAqIE9wZW4gYSBibG9jay5cclxuICogVGhpcyBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYC4gSXQgY2Fubm90IGJlIHBhcnQgb2YgYGNyZWF0ZUJsb2NrYFxyXG4gKiBiZWNhdXNlIHRoZSBjaGlsZHJlbiBvZiB0aGUgYmxvY2sgYXJlIGV2YWx1YXRlZCBiZWZvcmUgYGNyZWF0ZUJsb2NrYCBpdHNlbGZcclxuICogaXMgY2FsbGVkLiBUaGUgZ2VuZXJhdGVkIGNvZGUgdHlwaWNhbGx5IGxvb2tzIGxpa2UgdGhpczpcclxuICpcclxuICogYGBganNcclxuICogZnVuY3Rpb24gcmVuZGVyKCkge1xyXG4gKiAgIHJldHVybiAob3BlbkJsb2NrKCksY3JlYXRlQmxvY2soJ2RpdicsIG51bGwsIFsuLi5dKSlcclxuICogfVxyXG4gKiBgYGBcclxuICogZGlzYWJsZVRyYWNraW5nIGlzIHRydWUgd2hlbiBjcmVhdGluZyBhIHYtZm9yIGZyYWdtZW50IGJsb2NrLCBzaW5jZSBhIHYtZm9yXHJcbiAqIGZyYWdtZW50IGFsd2F5cyBkaWZmcyBpdHMgY2hpbGRyZW4uXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBvcGVuQmxvY2soZGlzYWJsZVRyYWNraW5nID0gZmFsc2UpIHtcclxuICAgIGJsb2NrU3RhY2sucHVzaCgoY3VycmVudEJsb2NrID0gZGlzYWJsZVRyYWNraW5nID8gbnVsbCA6IFtdKSk7XHJcbn1cclxuZnVuY3Rpb24gY2xvc2VCbG9jaygpIHtcclxuICAgIGJsb2NrU3RhY2sucG9wKCk7XHJcbiAgICBjdXJyZW50QmxvY2sgPSBibG9ja1N0YWNrW2Jsb2NrU3RhY2subGVuZ3RoIC0gMV0gfHwgbnVsbDtcclxufVxyXG4vLyBXaGV0aGVyIHdlIHNob3VsZCBiZSB0cmFja2luZyBkeW5hbWljIGNoaWxkIG5vZGVzIGluc2lkZSBhIGJsb2NrLlxyXG4vLyBPbmx5IHRyYWNrcyB3aGVuIHRoaXMgdmFsdWUgaXMgPiAwXHJcbi8vIFdlIGFyZSBub3QgdXNpbmcgYSBzaW1wbGUgYm9vbGVhbiBiZWNhdXNlIHRoaXMgdmFsdWUgbWF5IG5lZWQgdG8gYmVcclxuLy8gaW5jcmVtZW50ZWQvZGVjcmVtZW50ZWQgYnkgbmVzdGVkIHVzYWdlIG9mIHYtb25jZSAoc2VlIGJlbG93KVxyXG5sZXQgaXNCbG9ja1RyZWVFbmFibGVkID0gMTtcclxuLyoqXHJcbiAqIEJsb2NrIHRyYWNraW5nIHNvbWV0aW1lcyBuZWVkcyB0byBiZSBkaXNhYmxlZCwgZm9yIGV4YW1wbGUgZHVyaW5nIHRoZVxyXG4gKiBjcmVhdGlvbiBvZiBhIHRyZWUgdGhhdCBuZWVkcyB0byBiZSBjYWNoZWQgYnkgdi1vbmNlLiBUaGUgY29tcGlsZXIgZ2VuZXJhdGVzXHJcbiAqIGNvZGUgbGlrZSB0aGlzOlxyXG4gKlxyXG4gKiBgYGAganNcclxuICogX2NhY2hlWzFdIHx8IChcclxuICogICBzZXRCbG9ja1RyYWNraW5nKC0xKSxcclxuICogICBfY2FjaGVbMV0gPSBjcmVhdGVWTm9kZSguLi4pLFxyXG4gKiAgIHNldEJsb2NrVHJhY2tpbmcoMSksXHJcbiAqICAgX2NhY2hlWzFdXHJcbiAqIClcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRCbG9ja1RyYWNraW5nKHZhbHVlKSB7XHJcbiAgICBpc0Jsb2NrVHJlZUVuYWJsZWQgKz0gdmFsdWU7XHJcbn1cclxuZnVuY3Rpb24gc2V0dXBCbG9jayh2bm9kZSkge1xyXG4gICAgLy8gc2F2ZSBjdXJyZW50IGJsb2NrIGNoaWxkcmVuIG9uIHRoZSBibG9jayB2bm9kZVxyXG4gICAgdm5vZGUuZHluYW1pY0NoaWxkcmVuID1cclxuICAgICAgICBpc0Jsb2NrVHJlZUVuYWJsZWQgPiAwID8gY3VycmVudEJsb2NrIHx8IEVNUFRZX0FSUiA6IG51bGw7XHJcbiAgICAvLyBjbG9zZSBibG9ja1xyXG4gICAgY2xvc2VCbG9jaygpO1xyXG4gICAgLy8gYSBibG9jayBpcyBhbHdheXMgZ29pbmcgdG8gYmUgcGF0Y2hlZCwgc28gdHJhY2sgaXQgYXMgYSBjaGlsZCBvZiBpdHNcclxuICAgIC8vIHBhcmVudCBibG9ja1xyXG4gICAgaWYgKGlzQmxvY2tUcmVlRW5hYmxlZCA+IDAgJiYgY3VycmVudEJsb2NrKSB7XHJcbiAgICAgICAgY3VycmVudEJsb2NrLnB1c2godm5vZGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudEJsb2NrKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIHNoYXBlRmxhZykge1xyXG4gICAgcmV0dXJuIHNldHVwQmxvY2soY3JlYXRlQmFzZVZOb2RlKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIHNoYXBlRmxhZywgdHJ1ZSAvKiBpc0Jsb2NrICovKSk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2NrIHJvb3Qgdm5vZGUuIFRha2VzIHRoZSBzYW1lIGV4YWN0IGFyZ3VtZW50cyBhcyBgY3JlYXRlVk5vZGVgLlxyXG4gKiBBIGJsb2NrIHJvb3Qga2VlcHMgdHJhY2sgb2YgZHluYW1pYyBub2RlcyB3aXRoaW4gdGhlIGJsb2NrIGluIHRoZVxyXG4gKiBgZHluYW1pY0NoaWxkcmVuYCBhcnJheS5cclxuICpcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUJsb2NrKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMpIHtcclxuICAgIHJldHVybiBzZXR1cEJsb2NrKGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzLCBjaGlsZHJlbiwgcGF0Y2hGbGFnLCBkeW5hbWljUHJvcHMsIHRydWUgLyogaXNCbG9jazogcHJldmVudCBhIGJsb2NrIGZyb20gdHJhY2tpbmcgaXRzZWxmICovKSk7XHJcbn1cclxuZnVuY3Rpb24gaXNWTm9kZSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHZhbHVlID8gdmFsdWUuX192X2lzVk5vZGUgPT09IHRydWUgOiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBpc1NhbWVWTm9kZVR5cGUobjEsIG4yKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgbjIuc2hhcGVGbGFnICYgNiAvKiBDT01QT05FTlQgKi8gJiZcclxuICAgICAgICBobXJEaXJ0eUNvbXBvbmVudHMuaGFzKG4yLnR5cGUpKSB7XHJcbiAgICAgICAgLy8gSE1SIG9ubHk6IGlmIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gaG90LXVwZGF0ZWQsIGZvcmNlIGEgcmVsb2FkLlxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBuMS50eXBlID09PSBuMi50eXBlICYmIG4xLmtleSA9PT0gbjIua2V5O1xyXG59XHJcbmxldCB2bm9kZUFyZ3NUcmFuc2Zvcm1lcjtcclxuLyoqXHJcbiAqIEludGVybmFsIEFQSSBmb3IgcmVnaXN0ZXJpbmcgYW4gYXJndW1lbnRzIHRyYW5zZm9ybSBmb3IgY3JlYXRlVk5vZGVcclxuICogdXNlZCBmb3IgY3JlYXRpbmcgc3R1YnMgaW4gdGhlIHRlc3QtdXRpbHNcclxuICogSXQgaXMgKmludGVybmFsKiBidXQgbmVlZHMgdG8gYmUgZXhwb3NlZCBmb3IgdGVzdC11dGlscyB0byBwaWNrIHVwIHByb3BlclxyXG4gKiB0eXBpbmdzXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmFuc2Zvcm1WTm9kZUFyZ3ModHJhbnNmb3JtZXIpIHtcclxuICAgIHZub2RlQXJnc1RyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XHJcbn1cclxuY29uc3QgY3JlYXRlVk5vZGVXaXRoQXJnc1RyYW5zZm9ybSA9ICguLi5hcmdzKSA9PiB7XHJcbiAgICByZXR1cm4gX2NyZWF0ZVZOb2RlKC4uLih2bm9kZUFyZ3NUcmFuc2Zvcm1lclxyXG4gICAgICAgID8gdm5vZGVBcmdzVHJhbnNmb3JtZXIoYXJncywgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlKVxyXG4gICAgICAgIDogYXJncykpO1xyXG59O1xyXG5jb25zdCBJbnRlcm5hbE9iamVjdEtleSA9IGBfX3ZJbnRlcm5hbGA7XHJcbmNvbnN0IG5vcm1hbGl6ZUtleSA9ICh7IGtleSB9KSA9PiBrZXkgIT0gbnVsbCA/IGtleSA6IG51bGw7XHJcbmNvbnN0IG5vcm1hbGl6ZVJlZiA9ICh7IHJlZiwgcmVmX2tleSwgcmVmX2ZvciB9KSA9PiB7XHJcbiAgICByZXR1cm4gKHJlZiAhPSBudWxsXHJcbiAgICAgICAgPyBpc1N0cmluZyhyZWYpIHx8IGlzUmVmKHJlZikgfHwgaXNGdW5jdGlvbihyZWYpXHJcbiAgICAgICAgICAgID8geyBpOiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UsIHI6IHJlZiwgazogcmVmX2tleSwgZjogISFyZWZfZm9yIH1cclxuICAgICAgICAgICAgOiByZWZcclxuICAgICAgICA6IG51bGwpO1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVCYXNlVk5vZGUodHlwZSwgcHJvcHMgPSBudWxsLCBjaGlsZHJlbiA9IG51bGwsIHBhdGNoRmxhZyA9IDAsIGR5bmFtaWNQcm9wcyA9IG51bGwsIHNoYXBlRmxhZyA9IHR5cGUgPT09IEZyYWdtZW50ID8gMCA6IDEgLyogRUxFTUVOVCAqLywgaXNCbG9ja05vZGUgPSBmYWxzZSwgbmVlZEZ1bGxDaGlsZHJlbk5vcm1hbGl6YXRpb24gPSBmYWxzZSkge1xyXG4gICAgY29uc3Qgdm5vZGUgPSB7XHJcbiAgICAgICAgX192X2lzVk5vZGU6IHRydWUsXHJcbiAgICAgICAgX192X3NraXA6IHRydWUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICBwcm9wcyxcclxuICAgICAgICBrZXk6IHByb3BzICYmIG5vcm1hbGl6ZUtleShwcm9wcyksXHJcbiAgICAgICAgcmVmOiBwcm9wcyAmJiBub3JtYWxpemVSZWYocHJvcHMpLFxyXG4gICAgICAgIHNjb3BlSWQ6IGN1cnJlbnRTY29wZUlkLFxyXG4gICAgICAgIHNsb3RTY29wZUlkczogbnVsbCxcclxuICAgICAgICBjaGlsZHJlbixcclxuICAgICAgICBjb21wb25lbnQ6IG51bGwsXHJcbiAgICAgICAgc3VzcGVuc2U6IG51bGwsXHJcbiAgICAgICAgc3NDb250ZW50OiBudWxsLFxyXG4gICAgICAgIHNzRmFsbGJhY2s6IG51bGwsXHJcbiAgICAgICAgZGlyczogbnVsbCxcclxuICAgICAgICB0cmFuc2l0aW9uOiBudWxsLFxyXG4gICAgICAgIGVsOiBudWxsLFxyXG4gICAgICAgIGFuY2hvcjogbnVsbCxcclxuICAgICAgICB0YXJnZXQ6IG51bGwsXHJcbiAgICAgICAgdGFyZ2V0QW5jaG9yOiBudWxsLFxyXG4gICAgICAgIHN0YXRpY0NvdW50OiAwLFxyXG4gICAgICAgIHNoYXBlRmxhZyxcclxuICAgICAgICBwYXRjaEZsYWcsXHJcbiAgICAgICAgZHluYW1pY1Byb3BzLFxyXG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbjogbnVsbCxcclxuICAgICAgICBhcHBDb250ZXh0OiBudWxsXHJcbiAgICB9O1xyXG4gICAgaWYgKG5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uKSB7XHJcbiAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKTtcclxuICAgICAgICAvLyBub3JtYWxpemUgc3VzcGVuc2UgY2hpbGRyZW5cclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgICAgIHR5cGUubm9ybWFsaXplKHZub2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChjaGlsZHJlbikge1xyXG4gICAgICAgIC8vIGNvbXBpbGVkIGVsZW1lbnQgdm5vZGUgLSBpZiBjaGlsZHJlbiBpcyBwYXNzZWQsIG9ubHkgcG9zc2libGUgdHlwZXMgYXJlXHJcbiAgICAgICAgLy8gc3RyaW5nIG9yIEFycmF5LlxyXG4gICAgICAgIHZub2RlLnNoYXBlRmxhZyB8PSBpc1N0cmluZyhjaGlsZHJlbilcclxuICAgICAgICAgICAgPyA4IC8qIFRFWFRfQ0hJTERSRU4gKi9cclxuICAgICAgICAgICAgOiAxNiAvKiBBUlJBWV9DSElMRFJFTiAqLztcclxuICAgIH1cclxuICAgIC8vIHZhbGlkYXRlIGtleVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB2bm9kZS5rZXkgIT09IHZub2RlLmtleSkge1xyXG4gICAgICAgIHdhcm4oYFZOb2RlIGNyZWF0ZWQgd2l0aCBpbnZhbGlkIGtleSAoTmFOKS4gVk5vZGUgdHlwZTpgLCB2bm9kZS50eXBlKTtcclxuICAgIH1cclxuICAgIC8vIHRyYWNrIHZub2RlIGZvciBibG9jayB0cmVlXHJcbiAgICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJlxyXG4gICAgICAgIC8vIGF2b2lkIGEgYmxvY2sgbm9kZSBmcm9tIHRyYWNraW5nIGl0c2VsZlxyXG4gICAgICAgICFpc0Jsb2NrTm9kZSAmJlxyXG4gICAgICAgIC8vIGhhcyBjdXJyZW50IHBhcmVudCBibG9ja1xyXG4gICAgICAgIGN1cnJlbnRCbG9jayAmJlxyXG4gICAgICAgIC8vIHByZXNlbmNlIG9mIGEgcGF0Y2ggZmxhZyBpbmRpY2F0ZXMgdGhpcyBub2RlIG5lZWRzIHBhdGNoaW5nIG9uIHVwZGF0ZXMuXHJcbiAgICAgICAgLy8gY29tcG9uZW50IG5vZGVzIGFsc28gc2hvdWxkIGFsd2F5cyBiZSBwYXRjaGVkLCBiZWNhdXNlIGV2ZW4gaWYgdGhlXHJcbiAgICAgICAgLy8gY29tcG9uZW50IGRvZXNuJ3QgbmVlZCB0byB1cGRhdGUsIGl0IG5lZWRzIHRvIHBlcnNpc3QgdGhlIGluc3RhbmNlIG9uIHRvXHJcbiAgICAgICAgLy8gdGhlIG5leHQgdm5vZGUgc28gdGhhdCBpdCBjYW4gYmUgcHJvcGVybHkgdW5tb3VudGVkIGxhdGVyLlxyXG4gICAgICAgICh2bm9kZS5wYXRjaEZsYWcgPiAwIHx8IHNoYXBlRmxhZyAmIDYgLyogQ09NUE9ORU5UICovKSAmJlxyXG4gICAgICAgIC8vIHRoZSBFVkVOVFMgZmxhZyBpcyBvbmx5IGZvciBoeWRyYXRpb24gYW5kIGlmIGl0IGlzIHRoZSBvbmx5IGZsYWcsIHRoZVxyXG4gICAgICAgIC8vIHZub2RlIHNob3VsZCBub3QgYmUgY29uc2lkZXJlZCBkeW5hbWljIGR1ZSB0byBoYW5kbGVyIGNhY2hpbmcuXHJcbiAgICAgICAgdm5vZGUucGF0Y2hGbGFnICE9PSAzMiAvKiBIWURSQVRFX0VWRU5UUyAqLykge1xyXG4gICAgICAgIGN1cnJlbnRCbG9jay5wdXNoKHZub2RlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2bm9kZTtcclxufVxyXG5jb25zdCBjcmVhdGVWTm9kZSA9ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBjcmVhdGVWTm9kZVdpdGhBcmdzVHJhbnNmb3JtIDogX2NyZWF0ZVZOb2RlKTtcclxuZnVuY3Rpb24gX2NyZWF0ZVZOb2RlKHR5cGUsIHByb3BzID0gbnVsbCwgY2hpbGRyZW4gPSBudWxsLCBwYXRjaEZsYWcgPSAwLCBkeW5hbWljUHJvcHMgPSBudWxsLCBpc0Jsb2NrTm9kZSA9IGZhbHNlKSB7XHJcbiAgICBpZiAoIXR5cGUgfHwgdHlwZSA9PT0gTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCkge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXR5cGUpIHtcclxuICAgICAgICAgICAgd2FybihgSW52YWxpZCB2bm9kZSB0eXBlIHdoZW4gY3JlYXRpbmcgdm5vZGU6ICR7dHlwZX0uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHR5cGUgPSBDb21tZW50O1xyXG4gICAgfVxyXG4gICAgaWYgKGlzVk5vZGUodHlwZSkpIHtcclxuICAgICAgICAvLyBjcmVhdGVWTm9kZSByZWNlaXZpbmcgYW4gZXhpc3Rpbmcgdm5vZGUuIFRoaXMgaGFwcGVucyBpbiBjYXNlcyBsaWtlXHJcbiAgICAgICAgLy8gPGNvbXBvbmVudCA6aXM9XCJ2bm9kZVwiLz5cclxuICAgICAgICAvLyAjMjA3OCBtYWtlIHN1cmUgdG8gbWVyZ2UgcmVmcyBkdXJpbmcgdGhlIGNsb25lIGluc3RlYWQgb2Ygb3ZlcndyaXRpbmcgaXRcclxuICAgICAgICBjb25zdCBjbG9uZWQgPSBjbG9uZVZOb2RlKHR5cGUsIHByb3BzLCB0cnVlIC8qIG1lcmdlUmVmOiB0cnVlICovKTtcclxuICAgICAgICBpZiAoY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgbm9ybWFsaXplQ2hpbGRyZW4oY2xvbmVkLCBjaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjbG9uZWQ7XHJcbiAgICB9XHJcbiAgICAvLyBjbGFzcyBjb21wb25lbnQgbm9ybWFsaXphdGlvbi5cclxuICAgIGlmIChpc0NsYXNzQ29tcG9uZW50KHR5cGUpKSB7XHJcbiAgICAgICAgdHlwZSA9IHR5cGUuX192Y2NPcHRzO1xyXG4gICAgfVxyXG4gICAgLy8gY2xhc3MgJiBzdHlsZSBub3JtYWxpemF0aW9uLlxyXG4gICAgaWYgKHByb3BzKSB7XHJcbiAgICAgICAgLy8gZm9yIHJlYWN0aXZlIG9yIHByb3h5IG9iamVjdHMsIHdlIG5lZWQgdG8gY2xvbmUgaXQgdG8gZW5hYmxlIG11dGF0aW9uLlxyXG4gICAgICAgIHByb3BzID0gZ3VhcmRSZWFjdGl2ZVByb3BzKHByb3BzKTtcclxuICAgICAgICBsZXQgeyBjbGFzczoga2xhc3MsIHN0eWxlIH0gPSBwcm9wcztcclxuICAgICAgICBpZiAoa2xhc3MgJiYgIWlzU3RyaW5nKGtsYXNzKSkge1xyXG4gICAgICAgICAgICBwcm9wcy5jbGFzcyA9IG5vcm1hbGl6ZUNsYXNzKGtsYXNzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KHN0eWxlKSkge1xyXG4gICAgICAgICAgICAvLyByZWFjdGl2ZSBzdGF0ZSBvYmplY3RzIG5lZWQgdG8gYmUgY2xvbmVkIHNpbmNlIHRoZXkgYXJlIGxpa2VseSB0byBiZVxyXG4gICAgICAgICAgICAvLyBtdXRhdGVkXHJcbiAgICAgICAgICAgIGlmIChpc1Byb3h5KHN0eWxlKSAmJiAhaXNBcnJheShzdHlsZSkpIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlID0gZXh0ZW5kKHt9LCBzdHlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcHJvcHMuc3R5bGUgPSBub3JtYWxpemVTdHlsZShzdHlsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gZW5jb2RlIHRoZSB2bm9kZSB0eXBlIGluZm9ybWF0aW9uIGludG8gYSBiaXRtYXBcclxuICAgIGNvbnN0IHNoYXBlRmxhZyA9IGlzU3RyaW5nKHR5cGUpXHJcbiAgICAgICAgPyAxIC8qIEVMRU1FTlQgKi9cclxuICAgICAgICA6IGlzU3VzcGVuc2UodHlwZSlcclxuICAgICAgICAgICAgPyAxMjggLyogU1VTUEVOU0UgKi9cclxuICAgICAgICAgICAgOiBpc1RlbGVwb3J0KHR5cGUpXHJcbiAgICAgICAgICAgICAgICA/IDY0IC8qIFRFTEVQT1JUICovXHJcbiAgICAgICAgICAgICAgICA6IGlzT2JqZWN0KHR5cGUpXHJcbiAgICAgICAgICAgICAgICAgICAgPyA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqL1xyXG4gICAgICAgICAgICAgICAgICAgIDogaXNGdW5jdGlvbih0eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDIgLyogRlVOQ1RJT05BTF9DT01QT05FTlQgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLyAmJiBpc1Byb3h5KHR5cGUpKSB7XHJcbiAgICAgICAgdHlwZSA9IHRvUmF3KHR5cGUpO1xyXG4gICAgICAgIHdhcm4oYFZ1ZSByZWNlaXZlZCBhIENvbXBvbmVudCB3aGljaCB3YXMgbWFkZSBhIHJlYWN0aXZlIG9iamVjdC4gVGhpcyBjYW4gYCArXHJcbiAgICAgICAgICAgIGBsZWFkIHRvIHVubmVjZXNzYXJ5IHBlcmZvcm1hbmNlIG92ZXJoZWFkLCBhbmQgc2hvdWxkIGJlIGF2b2lkZWQgYnkgYCArXHJcbiAgICAgICAgICAgIGBtYXJraW5nIHRoZSBjb21wb25lbnQgd2l0aCBcXGBtYXJrUmF3XFxgIG9yIHVzaW5nIFxcYHNoYWxsb3dSZWZcXGAgYCArXHJcbiAgICAgICAgICAgIGBpbnN0ZWFkIG9mIFxcYHJlZlxcYC5gLCBgXFxuQ29tcG9uZW50IHRoYXQgd2FzIG1hZGUgcmVhY3RpdmU6IGAsIHR5cGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZUJhc2VWTm9kZSh0eXBlLCBwcm9wcywgY2hpbGRyZW4sIHBhdGNoRmxhZywgZHluYW1pY1Byb3BzLCBzaGFwZUZsYWcsIGlzQmxvY2tOb2RlLCB0cnVlKTtcclxufVxyXG5mdW5jdGlvbiBndWFyZFJlYWN0aXZlUHJvcHMocHJvcHMpIHtcclxuICAgIGlmICghcHJvcHMpXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICByZXR1cm4gaXNQcm94eShwcm9wcykgfHwgSW50ZXJuYWxPYmplY3RLZXkgaW4gcHJvcHNcclxuICAgICAgICA/IGV4dGVuZCh7fSwgcHJvcHMpXHJcbiAgICAgICAgOiBwcm9wcztcclxufVxyXG5mdW5jdGlvbiBjbG9uZVZOb2RlKHZub2RlLCBleHRyYVByb3BzLCBtZXJnZVJlZiA9IGZhbHNlKSB7XHJcbiAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgTk9UIHVzaW5nIHNwcmVhZCBvciBleHRlbmQgdG8gYXZvaWQgdGhlIHJ1bnRpbWVcclxuICAgIC8vIGtleSBlbnVtZXJhdGlvbiBjb3N0LlxyXG4gICAgY29uc3QgeyBwcm9wcywgcmVmLCBwYXRjaEZsYWcsIGNoaWxkcmVuIH0gPSB2bm9kZTtcclxuICAgIGNvbnN0IG1lcmdlZFByb3BzID0gZXh0cmFQcm9wcyA/IG1lcmdlUHJvcHMocHJvcHMgfHwge30sIGV4dHJhUHJvcHMpIDogcHJvcHM7XHJcbiAgICBjb25zdCBjbG9uZWQgPSB7XHJcbiAgICAgICAgX192X2lzVk5vZGU6IHRydWUsXHJcbiAgICAgICAgX192X3NraXA6IHRydWUsXHJcbiAgICAgICAgdHlwZTogdm5vZGUudHlwZSxcclxuICAgICAgICBwcm9wczogbWVyZ2VkUHJvcHMsXHJcbiAgICAgICAga2V5OiBtZXJnZWRQcm9wcyAmJiBub3JtYWxpemVLZXkobWVyZ2VkUHJvcHMpLFxyXG4gICAgICAgIHJlZjogZXh0cmFQcm9wcyAmJiBleHRyYVByb3BzLnJlZlxyXG4gICAgICAgICAgICA/IC8vICMyMDc4IGluIHRoZSBjYXNlIG9mIDxjb21wb25lbnQgOmlzPVwidm5vZGVcIiByZWY9XCJleHRyYVwiLz5cclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB2bm9kZSBpdHNlbGYgYWxyZWFkeSBoYXMgYSByZWYsIGNsb25lVk5vZGUgd2lsbCBuZWVkIHRvIG1lcmdlXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgcmVmcyBzbyB0aGUgc2luZ2xlIHZub2RlIGNhbiBiZSBzZXQgb24gbXVsdGlwbGUgcmVmc1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VSZWYgJiYgcmVmXHJcbiAgICAgICAgICAgICAgICAgICAgPyBpc0FycmF5KHJlZilcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZWYuY29uY2F0KG5vcm1hbGl6ZVJlZihleHRyYVByb3BzKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbcmVmLCBub3JtYWxpemVSZWYoZXh0cmFQcm9wcyldXHJcbiAgICAgICAgICAgICAgICAgICAgOiBub3JtYWxpemVSZWYoZXh0cmFQcm9wcylcclxuICAgICAgICAgICAgOiByZWYsXHJcbiAgICAgICAgc2NvcGVJZDogdm5vZGUuc2NvcGVJZCxcclxuICAgICAgICBzbG90U2NvcGVJZHM6IHZub2RlLnNsb3RTY29wZUlkcyxcclxuICAgICAgICBjaGlsZHJlbjogKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHBhdGNoRmxhZyA9PT0gLTEgLyogSE9JU1RFRCAqLyAmJiBpc0FycmF5KGNoaWxkcmVuKVxyXG4gICAgICAgICAgICA/IGNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSlcclxuICAgICAgICAgICAgOiBjaGlsZHJlbixcclxuICAgICAgICB0YXJnZXQ6IHZub2RlLnRhcmdldCxcclxuICAgICAgICB0YXJnZXRBbmNob3I6IHZub2RlLnRhcmdldEFuY2hvcixcclxuICAgICAgICBzdGF0aWNDb3VudDogdm5vZGUuc3RhdGljQ291bnQsXHJcbiAgICAgICAgc2hhcGVGbGFnOiB2bm9kZS5zaGFwZUZsYWcsXHJcbiAgICAgICAgLy8gaWYgdGhlIHZub2RlIGlzIGNsb25lZCB3aXRoIGV4dHJhIHByb3BzLCB3ZSBjYW4gbm8gbG9uZ2VyIGFzc3VtZSBpdHNcclxuICAgICAgICAvLyBleGlzdGluZyBwYXRjaCBmbGFnIHRvIGJlIHJlbGlhYmxlIGFuZCBuZWVkIHRvIGFkZCB0aGUgRlVMTF9QUk9QUyBmbGFnLlxyXG4gICAgICAgIC8vIG5vdGU6IHByZXNlcnZlIGZsYWcgZm9yIGZyYWdtZW50cyBzaW5jZSB0aGV5IHVzZSB0aGUgZmxhZyBmb3IgY2hpbGRyZW5cclxuICAgICAgICAvLyBmYXN0IHBhdGhzIG9ubHkuXHJcbiAgICAgICAgcGF0Y2hGbGFnOiBleHRyYVByb3BzICYmIHZub2RlLnR5cGUgIT09IEZyYWdtZW50XHJcbiAgICAgICAgICAgID8gcGF0Y2hGbGFnID09PSAtMSAvLyBob2lzdGVkIG5vZGVcclxuICAgICAgICAgICAgICAgID8gMTYgLyogRlVMTF9QUk9QUyAqL1xyXG4gICAgICAgICAgICAgICAgOiBwYXRjaEZsYWcgfCAxNiAvKiBGVUxMX1BST1BTICovXHJcbiAgICAgICAgICAgIDogcGF0Y2hGbGFnLFxyXG4gICAgICAgIGR5bmFtaWNQcm9wczogdm5vZGUuZHluYW1pY1Byb3BzLFxyXG4gICAgICAgIGR5bmFtaWNDaGlsZHJlbjogdm5vZGUuZHluYW1pY0NoaWxkcmVuLFxyXG4gICAgICAgIGFwcENvbnRleHQ6IHZub2RlLmFwcENvbnRleHQsXHJcbiAgICAgICAgZGlyczogdm5vZGUuZGlycyxcclxuICAgICAgICB0cmFuc2l0aW9uOiB2bm9kZS50cmFuc2l0aW9uLFxyXG4gICAgICAgIC8vIFRoZXNlIHNob3VsZCB0ZWNobmljYWxseSBvbmx5IGJlIG5vbi1udWxsIG9uIG1vdW50ZWQgVk5vZGVzLiBIb3dldmVyLFxyXG4gICAgICAgIC8vIHRoZXkgKnNob3VsZCogYmUgY29waWVkIGZvciBrZXB0LWFsaXZlIHZub2Rlcy4gU28gd2UganVzdCBhbHdheXMgY29weVxyXG4gICAgICAgIC8vIHRoZW0gc2luY2UgdGhlbSBiZWluZyBub24tbnVsbCBkdXJpbmcgYSBtb3VudCBkb2Vzbid0IGFmZmVjdCB0aGUgbG9naWMgYXNcclxuICAgICAgICAvLyB0aGV5IHdpbGwgc2ltcGx5IGJlIG92ZXJ3cml0dGVuLlxyXG4gICAgICAgIGNvbXBvbmVudDogdm5vZGUuY29tcG9uZW50LFxyXG4gICAgICAgIHN1c3BlbnNlOiB2bm9kZS5zdXNwZW5zZSxcclxuICAgICAgICBzc0NvbnRlbnQ6IHZub2RlLnNzQ29udGVudCAmJiBjbG9uZVZOb2RlKHZub2RlLnNzQ29udGVudCksXHJcbiAgICAgICAgc3NGYWxsYmFjazogdm5vZGUuc3NGYWxsYmFjayAmJiBjbG9uZVZOb2RlKHZub2RlLnNzRmFsbGJhY2spLFxyXG4gICAgICAgIGVsOiB2bm9kZS5lbCxcclxuICAgICAgICBhbmNob3I6IHZub2RlLmFuY2hvclxyXG4gICAgfTtcclxuICAgIHJldHVybiBjbG9uZWQ7XHJcbn1cclxuLyoqXHJcbiAqIERldiBvbmx5LCBmb3IgSE1SIG9mIGhvaXN0ZWQgdm5vZGVzIHJldXNlZCBpbiB2LWZvclxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vdml0ZWpzL3ZpdGUvaXNzdWVzLzIwMjJcclxuICovXHJcbmZ1bmN0aW9uIGRlZXBDbG9uZVZOb2RlKHZub2RlKSB7XHJcbiAgICBjb25zdCBjbG9uZWQgPSBjbG9uZVZOb2RlKHZub2RlKTtcclxuICAgIGlmIChpc0FycmF5KHZub2RlLmNoaWxkcmVuKSkge1xyXG4gICAgICAgIGNsb25lZC5jaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuLm1hcChkZWVwQ2xvbmVWTm9kZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2xvbmVkO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlKHRleHQgPSAnICcsIGZsYWcgPSAwKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlVk5vZGUoVGV4dCwgbnVsbCwgdGV4dCwgZmxhZyk7XHJcbn1cclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdGF0aWNWTm9kZShjb250ZW50LCBudW1iZXJPZk5vZGVzKSB7XHJcbiAgICAvLyBBIHN0YXRpYyB2bm9kZSBjYW4gY29udGFpbiBtdWx0aXBsZSBzdHJpbmdpZmllZCBlbGVtZW50cywgYW5kIHRoZSBudW1iZXJcclxuICAgIC8vIG9mIGVsZW1lbnRzIGlzIG5lY2Vzc2FyeSBmb3IgaHlkcmF0aW9uLlxyXG4gICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVWTm9kZShTdGF0aWMsIG51bGwsIGNvbnRlbnQpO1xyXG4gICAgdm5vZGUuc3RhdGljQ291bnQgPSBudW1iZXJPZk5vZGVzO1xyXG4gICAgcmV0dXJuIHZub2RlO1xyXG59XHJcbi8qKlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudFZOb2RlKHRleHQgPSAnJywgXHJcbi8vIHdoZW4gdXNlZCBhcyB0aGUgdi1lbHNlIGJyYW5jaCwgdGhlIGNvbW1lbnQgbm9kZSBtdXN0IGJlIGNyZWF0ZWQgYXMgYVxyXG4vLyBibG9jayB0byBlbnN1cmUgY29ycmVjdCB1cGRhdGVzLlxyXG5hc0Jsb2NrID0gZmFsc2UpIHtcclxuICAgIHJldHVybiBhc0Jsb2NrXHJcbiAgICAgICAgPyAob3BlbkJsb2NrKCksIGNyZWF0ZUJsb2NrKENvbW1lbnQsIG51bGwsIHRleHQpKVxyXG4gICAgICAgIDogY3JlYXRlVk5vZGUoQ29tbWVudCwgbnVsbCwgdGV4dCk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplVk5vZGUoY2hpbGQpIHtcclxuICAgIGlmIChjaGlsZCA9PSBudWxsIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgLy8gZW1wdHkgcGxhY2Vob2xkZXJcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoQ29tbWVudCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0FycmF5KGNoaWxkKSkge1xyXG4gICAgICAgIC8vIGZyYWdtZW50XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKEZyYWdtZW50LCBudWxsLCBcclxuICAgICAgICAvLyAjMzY2NiwgYXZvaWQgcmVmZXJlbmNlIHBvbGx1dGlvbiB3aGVuIHJldXNpbmcgdm5vZGVcclxuICAgICAgICBjaGlsZC5zbGljZSgpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAvLyBhbHJlYWR5IHZub2RlLCB0aGlzIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gc2luY2UgY29tcGlsZWQgdGVtcGxhdGVzXHJcbiAgICAgICAgLy8gYWx3YXlzIHByb2R1Y2UgYWxsLXZub2RlIGNoaWxkcmVuIGFycmF5c1xyXG4gICAgICAgIHJldHVybiBjbG9uZUlmTW91bnRlZChjaGlsZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBzdHJpbmdzIGFuZCBudW1iZXJzXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKFRleHQsIG51bGwsIFN0cmluZyhjaGlsZCkpO1xyXG4gICAgfVxyXG59XHJcbi8vIG9wdGltaXplZCBub3JtYWxpemF0aW9uIGZvciB0ZW1wbGF0ZS1jb21waWxlZCByZW5kZXIgZm5zXHJcbmZ1bmN0aW9uIGNsb25lSWZNb3VudGVkKGNoaWxkKSB7XHJcbiAgICByZXR1cm4gY2hpbGQuZWwgPT09IG51bGwgfHwgY2hpbGQubWVtbyA/IGNoaWxkIDogY2xvbmVWTm9kZShjaGlsZCk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUsIGNoaWxkcmVuKSB7XHJcbiAgICBsZXQgdHlwZSA9IDA7XHJcbiAgICBjb25zdCB7IHNoYXBlRmxhZyB9ID0gdm5vZGU7XHJcbiAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xyXG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzQXJyYXkoY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgdHlwZSA9IDE2IC8qIEFSUkFZX0NISUxEUkVOICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGNoaWxkcmVuID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGlmIChzaGFwZUZsYWcgJiAoMSAvKiBFTEVNRU5UICovIHwgNjQgLyogVEVMRVBPUlQgKi8pKSB7XHJcbiAgICAgICAgICAgIC8vIE5vcm1hbGl6ZSBzbG90IHRvIHBsYWluIGNoaWxkcmVuIGZvciBwbGFpbiBlbGVtZW50IGFuZCBUZWxlcG9ydFxyXG4gICAgICAgICAgICBjb25zdCBzbG90ID0gY2hpbGRyZW4uZGVmYXVsdDtcclxuICAgICAgICAgICAgaWYgKHNsb3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIF9jIG1hcmtlciBpcyBhZGRlZCBieSB3aXRoQ3R4KCkgaW5kaWNhdGluZyB0aGlzIGlzIGEgY29tcGlsZWQgc2xvdFxyXG4gICAgICAgICAgICAgICAgc2xvdC5fYyAmJiAoc2xvdC5fZCA9IGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLCBzbG90KCkpO1xyXG4gICAgICAgICAgICAgICAgc2xvdC5fYyAmJiAoc2xvdC5fZCA9IHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSAzMiAvKiBTTE9UU19DSElMRFJFTiAqLztcclxuICAgICAgICAgICAgY29uc3Qgc2xvdEZsYWcgPSBjaGlsZHJlbi5fO1xyXG4gICAgICAgICAgICBpZiAoIXNsb3RGbGFnICYmICEoSW50ZXJuYWxPYmplY3RLZXkgaW4gY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5fY3R4ID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNsb3RGbGFnID09PSAzIC8qIEZPUldBUkRFRCAqLyAmJiBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIGEgY2hpbGQgY29tcG9uZW50IHJlY2VpdmVzIGZvcndhcmRlZCBzbG90cyBmcm9tIHRoZSBwYXJlbnQuXHJcbiAgICAgICAgICAgICAgICAvLyBpdHMgc2xvdCB0eXBlIGlzIGRldGVybWluZWQgYnkgaXRzIHBhcmVudCdzIHNsb3QgdHlwZS5cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2Uuc2xvdHMuXyA9PT0gMSAvKiBTVEFCTEUgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5fID0gMSAvKiBTVEFCTEUgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi5fID0gMiAvKiBEWU5BTUlDICovO1xyXG4gICAgICAgICAgICAgICAgICAgIHZub2RlLnBhdGNoRmxhZyB8PSAxMDI0IC8qIERZTkFNSUNfU0xPVFMgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xyXG4gICAgICAgIGNoaWxkcmVuID0geyBkZWZhdWx0OiBjaGlsZHJlbiwgX2N0eDogY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIH07XHJcbiAgICAgICAgdHlwZSA9IDMyIC8qIFNMT1RTX0NISUxEUkVOICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY2hpbGRyZW4gPSBTdHJpbmcoY2hpbGRyZW4pO1xyXG4gICAgICAgIC8vIGZvcmNlIHRlbGVwb3J0IGNoaWxkcmVuIHRvIGFycmF5IHNvIGl0IGNhbiBiZSBtb3ZlZCBhcm91bmRcclxuICAgICAgICBpZiAoc2hhcGVGbGFnICYgNjQgLyogVEVMRVBPUlQgKi8pIHtcclxuICAgICAgICAgICAgdHlwZSA9IDE2IC8qIEFSUkFZX0NISUxEUkVOICovO1xyXG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSA4IC8qIFRFWFRfQ0hJTERSRU4gKi87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdm5vZGUuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgIHZub2RlLnNoYXBlRmxhZyB8PSB0eXBlO1xyXG59XHJcbmZ1bmN0aW9uIG1lcmdlUHJvcHMoLi4uYXJncykge1xyXG4gICAgY29uc3QgcmV0ID0ge307XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCB0b01lcmdlID0gYXJnc1tpXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0b01lcmdlKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXQuY2xhc3MgIT09IHRvTWVyZ2UuY2xhc3MpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXQuY2xhc3MgPSBub3JtYWxpemVDbGFzcyhbcmV0LmNsYXNzLCB0b01lcmdlLmNsYXNzXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnc3R5bGUnKSB7XHJcbiAgICAgICAgICAgICAgICByZXQuc3R5bGUgPSBub3JtYWxpemVTdHlsZShbcmV0LnN0eWxlLCB0b01lcmdlLnN0eWxlXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNPbihrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHJldFtrZXldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5jb21pbmcgPSB0b01lcmdlW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5jb21pbmcgJiZcclxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZyAhPT0gaW5jb21pbmcgJiZcclxuICAgICAgICAgICAgICAgICAgICAhKGlzQXJyYXkoZXhpc3RpbmcpICYmIGV4aXN0aW5nLmluY2x1ZGVzKGluY29taW5nKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXRba2V5XSA9IGV4aXN0aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBpbmNvbWluZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpbmNvbWluZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXRba2V5XSA9IHRvTWVyZ2Vba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuZnVuY3Rpb24gaW52b2tlVk5vZGVIb29rKGhvb2ssIGluc3RhbmNlLCB2bm9kZSwgcHJldlZOb2RlID0gbnVsbCkge1xyXG4gICAgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcoaG9vaywgaW5zdGFuY2UsIDcgLyogVk5PREVfSE9PSyAqLywgW1xyXG4gICAgICAgIHZub2RlLFxyXG4gICAgICAgIHByZXZWTm9kZVxyXG4gICAgXSk7XHJcbn1cblxuLyoqXHJcbiAqIEFjdHVhbCBpbXBsZW1lbnRhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gcmVuZGVyTGlzdChzb3VyY2UsIHJlbmRlckl0ZW0sIGNhY2hlLCBpbmRleCkge1xyXG4gICAgbGV0IHJldDtcclxuICAgIGNvbnN0IGNhY2hlZCA9IChjYWNoZSAmJiBjYWNoZVtpbmRleF0pO1xyXG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSB8fCBpc1N0cmluZyhzb3VyY2UpKSB7XHJcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZS5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gc291cmNlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtpXSwgaSwgdW5kZWZpbmVkLCBjYWNoZWQgJiYgY2FjaGVkW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2Ygc291cmNlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIU51bWJlci5pc0ludGVnZXIoc291cmNlKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBUaGUgdi1mb3IgcmFuZ2UgZXhwZWN0IGFuIGludGVnZXIgdmFsdWUgYnV0IGdvdCAke3NvdXJjZX0uYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0ID0gbmV3IEFycmF5KHNvdXJjZSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2U7IGkrKykge1xyXG4gICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKGkgKyAxLCBpLCB1bmRlZmluZWQsIGNhY2hlZCAmJiBjYWNoZWRbaV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcclxuICAgICAgICBpZiAoc291cmNlW1N5bWJvbC5pdGVyYXRvcl0pIHtcclxuICAgICAgICAgICAgcmV0ID0gQXJyYXkuZnJvbShzb3VyY2UsIChpdGVtLCBpKSA9PiByZW5kZXJJdGVtKGl0ZW0sIGksIHVuZGVmaW5lZCwgY2FjaGVkICYmIGNhY2hlZFtpXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XHJcbiAgICAgICAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICByZXRbaV0gPSByZW5kZXJJdGVtKHNvdXJjZVtrZXldLCBrZXksIGksIGNhY2hlZCAmJiBjYWNoZWRbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0ID0gW107XHJcbiAgICB9XHJcbiAgICBpZiAoY2FjaGUpIHtcclxuICAgICAgICBjYWNoZVtpbmRleF0gPSByZXQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbi8qKlxyXG4gKiBDb21waWxlciBydW50aW1lIGhlbHBlciBmb3IgY3JlYXRpbmcgZHluYW1pYyBzbG90cyBvYmplY3RcclxuICogQHByaXZhdGVcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVNsb3RzKHNsb3RzLCBkeW5hbWljU2xvdHMpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHluYW1pY1Nsb3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2xvdCA9IGR5bmFtaWNTbG90c1tpXTtcclxuICAgICAgICAvLyBhcnJheSBvZiBkeW5hbWljIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWZvcj1cIi4uLlwiICNbLi4uXT5cclxuICAgICAgICBpZiAoaXNBcnJheShzbG90KSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNsb3QubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHNsb3RzW3Nsb3Rbal0ubmFtZV0gPSBzbG90W2pdLmZuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNsb3QpIHtcclxuICAgICAgICAgICAgLy8gY29uZGl0aW9uYWwgc2luZ2xlIHNsb3QgZ2VuZXJhdGVkIGJ5IDx0ZW1wbGF0ZSB2LWlmPVwiLi4uXCIgI2Zvbz5cclxuICAgICAgICAgICAgc2xvdHNbc2xvdC5uYW1lXSA9IHNsb3QuZm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNsb3RzO1xyXG59XG5cbi8qKlxyXG4gKiBDb21waWxlciBydW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIGA8c2xvdC8+YFxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZnVuY3Rpb24gcmVuZGVyU2xvdChzbG90cywgbmFtZSwgcHJvcHMgPSB7fSwgXHJcbi8vIHRoaXMgaXMgbm90IGEgdXNlci1mYWNpbmcgZnVuY3Rpb24sIHNvIHRoZSBmYWxsYmFjayBpcyBhbHdheXMgZ2VuZXJhdGVkIGJ5XHJcbi8vIHRoZSBjb21waWxlciBhbmQgZ3VhcmFudGVlZCB0byBiZSBhIGZ1bmN0aW9uIHJldHVybmluZyBhbiBhcnJheVxyXG5mYWxsYmFjaywgbm9TbG90dGVkKSB7XHJcbiAgICBpZiAoY3VycmVudFJlbmRlcmluZ0luc3RhbmNlLmlzQ0UpIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUoJ3Nsb3QnLCBuYW1lID09PSAnZGVmYXVsdCcgPyBudWxsIDogeyBuYW1lIH0sIGZhbGxiYWNrICYmIGZhbGxiYWNrKCkpO1xyXG4gICAgfVxyXG4gICAgbGV0IHNsb3QgPSBzbG90c1tuYW1lXTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgc2xvdCAmJiBzbG90Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgICB3YXJuKGBTU1Itb3B0aW1pemVkIHNsb3QgZnVuY3Rpb24gZGV0ZWN0ZWQgaW4gYSBub24tU1NSLW9wdGltaXplZCByZW5kZXIgYCArXHJcbiAgICAgICAgICAgIGBmdW5jdGlvbi4gWW91IG5lZWQgdG8gbWFyayB0aGlzIGNvbXBvbmVudCB3aXRoICRkeW5hbWljLXNsb3RzIGluIHRoZSBgICtcclxuICAgICAgICAgICAgYHBhcmVudCB0ZW1wbGF0ZS5gKTtcclxuICAgICAgICBzbG90ID0gKCkgPT4gW107XHJcbiAgICB9XHJcbiAgICAvLyBhIGNvbXBpbGVkIHNsb3QgZGlzYWJsZXMgYmxvY2sgdHJhY2tpbmcgYnkgZGVmYXVsdCB0byBhdm9pZCBtYW51YWxcclxuICAgIC8vIGludm9jYXRpb24gaW50ZXJmZXJpbmcgd2l0aCB0ZW1wbGF0ZS1iYXNlZCBibG9jayB0cmFja2luZywgYnV0IGluXHJcbiAgICAvLyBgcmVuZGVyU2xvdGAgd2UgY2FuIGJlIHN1cmUgdGhhdCBpdCdzIHRlbXBsYXRlLWJhc2VkIHNvIHdlIGNhbiBmb3JjZVxyXG4gICAgLy8gZW5hYmxlIGl0LlxyXG4gICAgaWYgKHNsb3QgJiYgc2xvdC5fYykge1xyXG4gICAgICAgIHNsb3QuX2QgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIG9wZW5CbG9jaygpO1xyXG4gICAgY29uc3QgdmFsaWRTbG90Q29udGVudCA9IHNsb3QgJiYgZW5zdXJlVmFsaWRWTm9kZShzbG90KHByb3BzKSk7XHJcbiAgICBjb25zdCByZW5kZXJlZCA9IGNyZWF0ZUJsb2NrKEZyYWdtZW50LCB7IGtleTogcHJvcHMua2V5IHx8IGBfJHtuYW1lfWAgfSwgdmFsaWRTbG90Q29udGVudCB8fCAoZmFsbGJhY2sgPyBmYWxsYmFjaygpIDogW10pLCB2YWxpZFNsb3RDb250ZW50ICYmIHNsb3RzLl8gPT09IDEgLyogU1RBQkxFICovXHJcbiAgICAgICAgPyA2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi9cclxuICAgICAgICA6IC0yIC8qIEJBSUwgKi8pO1xyXG4gICAgaWYgKCFub1Nsb3R0ZWQgJiYgcmVuZGVyZWQuc2NvcGVJZCkge1xyXG4gICAgICAgIHJlbmRlcmVkLnNsb3RTY29wZUlkcyA9IFtyZW5kZXJlZC5zY29wZUlkICsgJy1zJ107XHJcbiAgICB9XHJcbiAgICBpZiAoc2xvdCAmJiBzbG90Ll9jKSB7XHJcbiAgICAgICAgc2xvdC5fZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVuZGVyZWQ7XHJcbn1cclxuZnVuY3Rpb24gZW5zdXJlVmFsaWRWTm9kZSh2bm9kZXMpIHtcclxuICAgIHJldHVybiB2bm9kZXMuc29tZShjaGlsZCA9PiB7XHJcbiAgICAgICAgaWYgKCFpc1ZOb2RlKGNoaWxkKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IENvbW1lbnQpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gRnJhZ21lbnQgJiZcclxuICAgICAgICAgICAgIWVuc3VyZVZhbGlkVk5vZGUoY2hpbGQuY2hpbGRyZW4pKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9KVxyXG4gICAgICAgID8gdm5vZGVzXHJcbiAgICAgICAgOiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBGb3IgcHJlZml4aW5nIGtleXMgaW4gdi1vbj1cIm9ialwiIHdpdGggXCJvblwiXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiB0b0hhbmRsZXJzKG9iaikge1xyXG4gICAgY29uc3QgcmV0ID0ge307XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFpc09iamVjdChvYmopKSB7XHJcbiAgICAgICAgd2Fybihgdi1vbiB3aXRoIG5vIGFyZ3VtZW50IGV4cGVjdHMgYW4gb2JqZWN0IHZhbHVlLmApO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgICAgICByZXRbdG9IYW5kbGVyS2V5KGtleSldID0gb2JqW2tleV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0O1xyXG59XG5cbi8qKlxyXG4gKiAjMjQzNyBJbiBWdWUgMywgZnVuY3Rpb25hbCBjb21wb25lbnRzIGRvIG5vdCBoYXZlIGEgcHVibGljIGluc3RhbmNlIHByb3h5IGJ1dFxyXG4gKiB0aGV5IGV4aXN0IGluIHRoZSBpbnRlcm5hbCBwYXJlbnQgY2hhaW4uIEZvciBjb2RlIHRoYXQgcmVsaWVzIG9uIHRyYXZlcnNpbmdcclxuICogcHVibGljICRwYXJlbnQgY2hhaW5zLCBza2lwIGZ1bmN0aW9uYWwgb25lcyBhbmQgZ28gdG8gdGhlIHBhcmVudCBpbnN0ZWFkLlxyXG4gKi9cclxuY29uc3QgZ2V0UHVibGljSW5zdGFuY2UgPSAoaSkgPT4ge1xyXG4gICAgaWYgKCFpKVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgaWYgKGlzU3RhdGVmdWxDb21wb25lbnQoaSkpXHJcbiAgICAgICAgcmV0dXJuIGdldEV4cG9zZVByb3h5KGkpIHx8IGkucHJveHk7XHJcbiAgICByZXR1cm4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpO1xyXG59O1xyXG5jb25zdCBwdWJsaWNQcm9wZXJ0aWVzTWFwID0gZXh0ZW5kKE9iamVjdC5jcmVhdGUobnVsbCksIHtcclxuICAgICQ6IGkgPT4gaSxcclxuICAgICRlbDogaSA9PiBpLnZub2RlLmVsLFxyXG4gICAgJGRhdGE6IGkgPT4gaS5kYXRhLFxyXG4gICAgJHByb3BzOiBpID0+ICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBzaGFsbG93UmVhZG9ubHkoaS5wcm9wcykgOiBpLnByb3BzKSxcclxuICAgICRhdHRyczogaSA9PiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGkuYXR0cnMpIDogaS5hdHRycyksXHJcbiAgICAkc2xvdHM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnNsb3RzKSA6IGkuc2xvdHMpLFxyXG4gICAgJHJlZnM6IGkgPT4gKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IHNoYWxsb3dSZWFkb25seShpLnJlZnMpIDogaS5yZWZzKSxcclxuICAgICRwYXJlbnQ6IGkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5wYXJlbnQpLFxyXG4gICAgJHJvb3Q6IGkgPT4gZ2V0UHVibGljSW5zdGFuY2UoaS5yb290KSxcclxuICAgICRlbWl0OiBpID0+IGkuZW1pdCxcclxuICAgICRvcHRpb25zOiBpID0+IChfX1ZVRV9PUFRJT05TX0FQSV9fID8gcmVzb2x2ZU1lcmdlZE9wdGlvbnMoaSkgOiBpLnR5cGUpLFxyXG4gICAgJGZvcmNlVXBkYXRlOiBpID0+ICgpID0+IHF1ZXVlSm9iKGkudXBkYXRlKSxcclxuICAgICRuZXh0VGljazogaSA9PiBuZXh0VGljay5iaW5kKGkucHJveHkpLFxyXG4gICAgJHdhdGNoOiBpID0+IChfX1ZVRV9PUFRJT05TX0FQSV9fID8gaW5zdGFuY2VXYXRjaC5iaW5kKGkpIDogTk9PUClcclxufSk7XHJcbmNvbnN0IFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IHtcclxuICAgIGdldCh7IF86IGluc3RhbmNlIH0sIGtleSkge1xyXG4gICAgICAgIGNvbnN0IHsgY3R4LCBzZXR1cFN0YXRlLCBkYXRhLCBwcm9wcywgYWNjZXNzQ2FjaGUsIHR5cGUsIGFwcENvbnRleHQgfSA9IGluc3RhbmNlO1xyXG4gICAgICAgIC8vIGZvciBpbnRlcm5hbCBmb3JtYXR0ZXJzIHRvIGtub3cgdGhhdCB0aGlzIGlzIGEgVnVlIGluc3RhbmNlXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBrZXkgPT09ICdfX2lzVnVlJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcHJpb3JpdGl6ZSA8c2NyaXB0IHNldHVwPiBiaW5kaW5ncyBkdXJpbmcgZGV2LlxyXG4gICAgICAgIC8vIHRoaXMgYWxsb3dzIGV2ZW4gcHJvcGVydGllcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkIHRvIGJlIHVzZWQgLSBzbyB0aGF0XHJcbiAgICAgICAgLy8gaXQgYWxpZ25zIHdpdGggdGhlIHByb2R1Y3Rpb24gYmVoYXZpb3Igd2hlcmUgdGhlIHJlbmRlciBmbiBpcyBpbmxpbmVkIGFuZFxyXG4gICAgICAgIC8vIGluZGVlZCBoYXMgYWNjZXNzIHRvIGFsbCBkZWNsYXJlZCB2YXJpYWJsZXMuXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICBzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiZcclxuICAgICAgICAgICAgc2V0dXBTdGF0ZS5fX2lzU2NyaXB0U2V0dXAgJiZcclxuICAgICAgICAgICAgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZGF0YSAvIHByb3BzIC8gY3R4XHJcbiAgICAgICAgLy8gVGhpcyBnZXR0ZXIgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IHByb3BlcnR5IGFjY2VzcyBvbiB0aGUgcmVuZGVyIGNvbnRleHRcclxuICAgICAgICAvLyBkdXJpbmcgcmVuZGVyIGFuZCBpcyBhIG1ham9yIGhvdHNwb3QuIFRoZSBtb3N0IGV4cGVuc2l2ZSBwYXJ0IG9mIHRoaXNcclxuICAgICAgICAvLyBpcyB0aGUgbXVsdGlwbGUgaGFzT3duKCkgY2FsbHMuIEl0J3MgbXVjaCBmYXN0ZXIgdG8gZG8gYSBzaW1wbGUgcHJvcGVydHlcclxuICAgICAgICAvLyBhY2Nlc3Mgb24gYSBwbGFpbiBvYmplY3QsIHNvIHdlIHVzZSBhbiBhY2Nlc3NDYWNoZSBvYmplY3QgKHdpdGggbnVsbFxyXG4gICAgICAgIC8vIHByb3RvdHlwZSkgdG8gbWVtb2l6ZSB3aGF0IGFjY2VzcyB0eXBlIGEga2V5IGNvcnJlc3BvbmRzIHRvLlxyXG4gICAgICAgIGxldCBub3JtYWxpemVkUHJvcHM7XHJcbiAgICAgICAgaWYgKGtleVswXSAhPT0gJyQnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBhY2Nlc3NDYWNoZVtrZXldO1xyXG4gICAgICAgICAgICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEgLyogU0VUVVAgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXR1cFN0YXRlW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyIC8qIERBVEEgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0IC8qIENPTlRFWFQgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDMgLyogUFJPUFMgKi86XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQ6IGp1c3QgZmFsbHRocm91Z2hcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAxIC8qIFNFVFVQICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwU3RhdGVba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKGRhdGEsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSAyIC8qIERBVEEgKi87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAvLyBvbmx5IGNhY2hlIG90aGVyIHByb3BlcnRpZXMgd2hlbiBpbnN0YW5jZSBoYXMgZGVjbGFyZWQgKHRodXMgc3RhYmxlKVxyXG4gICAgICAgICAgICAvLyBwcm9wc1xyXG4gICAgICAgICAgICAobm9ybWFsaXplZFByb3BzID0gaW5zdGFuY2UucHJvcHNPcHRpb25zWzBdKSAmJlxyXG4gICAgICAgICAgICAgICAgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgYWNjZXNzQ2FjaGVba2V5XSA9IDMgLyogUFJPUFMgKi87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjdHggIT09IEVNUFRZX09CSiAmJiBoYXNPd24oY3R4LCBrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gNCAvKiBDT05URVhUICovO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCFfX1ZVRV9PUFRJT05TX0FQSV9fIHx8IHNob3VsZENhY2hlQWNjZXNzKSB7XHJcbiAgICAgICAgICAgICAgICBhY2Nlc3NDYWNoZVtrZXldID0gMCAvKiBPVEhFUiAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwdWJsaWNHZXR0ZXIgPSBwdWJsaWNQcm9wZXJ0aWVzTWFwW2tleV07XHJcbiAgICAgICAgbGV0IGNzc01vZHVsZSwgZ2xvYmFsUHJvcGVydGllcztcclxuICAgICAgICAvLyBwdWJsaWMgJHh4eCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaWYgKHB1YmxpY0dldHRlcikge1xyXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnJGF0dHJzJykge1xyXG4gICAgICAgICAgICAgICAgdHJhY2soaW5zdGFuY2UsIFwiZ2V0XCIgLyogR0VUICovLCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHB1YmxpY0dldHRlcihpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFxyXG4gICAgICAgIC8vIGNzcyBtb2R1bGUgKGluamVjdGVkIGJ5IHZ1ZS1sb2FkZXIpXHJcbiAgICAgICAgKGNzc01vZHVsZSA9IHR5cGUuX19jc3NNb2R1bGVzKSAmJlxyXG4gICAgICAgICAgICAoY3NzTW9kdWxlID0gY3NzTW9kdWxlW2tleV0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjc3NNb2R1bGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGN0eCAhPT0gRU1QVFlfT0JKICYmIGhhc093bihjdHgsIGtleSkpIHtcclxuICAgICAgICAgICAgLy8gdXNlciBtYXkgc2V0IGN1c3RvbSBwcm9wZXJ0aWVzIHRvIGB0aGlzYCB0aGF0IHN0YXJ0IHdpdGggYCRgXHJcbiAgICAgICAgICAgIGFjY2Vzc0NhY2hlW2tleV0gPSA0IC8qIENPTlRFWFQgKi87XHJcbiAgICAgICAgICAgIHJldHVybiBjdHhba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgLy8gZ2xvYmFsIHByb3BlcnRpZXNcclxuICAgICAgICAoKGdsb2JhbFByb3BlcnRpZXMgPSBhcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSxcclxuICAgICAgICAgICAgaGFzT3duKGdsb2JhbFByb3BlcnRpZXMsIGtleSkpKSB7XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBnbG9iYWxQcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSAmJlxyXG4gICAgICAgICAgICAoIWlzU3RyaW5nKGtleSkgfHxcclxuICAgICAgICAgICAgICAgIC8vICMxMDkxIGF2b2lkIGludGVybmFsIGlzUmVmL2lzVk5vZGUgY2hlY2tzIG9uIGNvbXBvbmVudCBpbnN0YW5jZSBsZWFkaW5nXHJcbiAgICAgICAgICAgICAgICAvLyB0byBpbmZpbml0ZSB3YXJuaW5nIGxvb3BcclxuICAgICAgICAgICAgICAgIGtleS5pbmRleE9mKCdfX3YnKSAhPT0gMCkpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJlxyXG4gICAgICAgICAgICAgICAgKGtleVswXSA9PT0gJyQnIHx8IGtleVswXSA9PT0gJ18nKSAmJlxyXG4gICAgICAgICAgICAgICAgaGFzT3duKGRhdGEsIGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gbXVzdCBiZSBhY2Nlc3NlZCB2aWEgJGRhdGEgYmVjYXVzZSBpdCBzdGFydHMgd2l0aCBhIHJlc2VydmVkIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBjaGFyYWN0ZXIgKFwiJFwiIG9yIFwiX1wiKSBhbmQgaXMgbm90IHByb3hpZWQgb24gdGhlIHJlbmRlciBjb250ZXh0LmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGluc3RhbmNlID09PSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYFByb3BlcnR5ICR7SlNPTi5zdHJpbmdpZnkoa2V5KX0gd2FzIGFjY2Vzc2VkIGR1cmluZyByZW5kZXIgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYGJ1dCBpcyBub3QgZGVmaW5lZCBvbiBpbnN0YW5jZS5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzZXQoeyBfOiBpbnN0YW5jZSB9LCBrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhLCBzZXR1cFN0YXRlLCBjdHggfSA9IGluc3RhbmNlO1xyXG4gICAgICAgIGlmIChzZXR1cFN0YXRlICE9PSBFTVBUWV9PQkogJiYgaGFzT3duKHNldHVwU3RhdGUsIGtleSkpIHtcclxuICAgICAgICAgICAgc2V0dXBTdGF0ZVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IEVNUFRZX09CSiAmJiBoYXNPd24oZGF0YSwga2V5KSkge1xyXG4gICAgICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaGFzT3duKGluc3RhbmNlLnByb3BzLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQXR0ZW1wdGluZyB0byBtdXRhdGUgcHJvcCBcIiR7a2V5fVwiLiBQcm9wcyBhcmUgcmVhZG9ubHkuYCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChrZXlbMF0gPT09ICckJyAmJiBrZXkuc2xpY2UoMSkgaW4gaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgICAgICB3YXJuKGBBdHRlbXB0aW5nIHRvIG11dGF0ZSBwdWJsaWMgcHJvcGVydHkgXCIke2tleX1cIi4gYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYFByb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCAkIGFyZSByZXNlcnZlZCBhbmQgcmVhZG9ubHkuYCwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGtleSBpbiBpbnN0YW5jZS5hcHBDb250ZXh0LmNvbmZpZy5nbG9iYWxQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdHhba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuICAgIGhhcyh7IF86IHsgZGF0YSwgc2V0dXBTdGF0ZSwgYWNjZXNzQ2FjaGUsIGN0eCwgYXBwQ29udGV4dCwgcHJvcHNPcHRpb25zIH0gfSwga2V5KSB7XHJcbiAgICAgICAgbGV0IG5vcm1hbGl6ZWRQcm9wcztcclxuICAgICAgICByZXR1cm4gKCEhYWNjZXNzQ2FjaGVba2V5XSB8fFxyXG4gICAgICAgICAgICAoZGF0YSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihkYXRhLCBrZXkpKSB8fFxyXG4gICAgICAgICAgICAoc2V0dXBTdGF0ZSAhPT0gRU1QVFlfT0JKICYmIGhhc093bihzZXR1cFN0YXRlLCBrZXkpKSB8fFxyXG4gICAgICAgICAgICAoKG5vcm1hbGl6ZWRQcm9wcyA9IHByb3BzT3B0aW9uc1swXSkgJiYgaGFzT3duKG5vcm1hbGl6ZWRQcm9wcywga2V5KSkgfHxcclxuICAgICAgICAgICAgaGFzT3duKGN0eCwga2V5KSB8fFxyXG4gICAgICAgICAgICBoYXNPd24ocHVibGljUHJvcGVydGllc01hcCwga2V5KSB8fFxyXG4gICAgICAgICAgICBoYXNPd24oYXBwQ29udGV4dC5jb25maWcuZ2xvYmFsUHJvcGVydGllcywga2V5KSk7XHJcbiAgICB9XHJcbn07XHJcbmlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWZhbHNlKSB7XHJcbiAgICBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMub3duS2V5cyA9ICh0YXJnZXQpID0+IHtcclxuICAgICAgICB3YXJuKGBBdm9pZCBhcHAgbG9naWMgdGhhdCByZWxpZXMgb24gZW51bWVyYXRpbmcga2V5cyBvbiBhIGNvbXBvbmVudCBpbnN0YW5jZS4gYCArXHJcbiAgICAgICAgICAgIGBUaGUga2V5cyB3aWxsIGJlIGVtcHR5IGluIHByb2R1Y3Rpb24gbW9kZSB0byBhdm9pZCBwZXJmb3JtYW5jZSBvdmVyaGVhZC5gKTtcclxuICAgICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHRhcmdldCk7XHJcbiAgICB9O1xyXG59XHJcbmNvbnN0IFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyA9IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMsIHtcclxuICAgIGdldCh0YXJnZXQsIGtleSkge1xyXG4gICAgICAgIC8vIGZhc3QgcGF0aCBmb3IgdW5zY29wYWJsZXMgd2hlbiB1c2luZyBgd2l0aGAgYmxvY2tcclxuICAgICAgICBpZiAoa2V5ID09PSBTeW1ib2wudW5zY29wYWJsZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHVibGljSW5zdGFuY2VQcm94eUhhbmRsZXJzLmdldCh0YXJnZXQsIGtleSwgdGFyZ2V0KTtcclxuICAgIH0sXHJcbiAgICBoYXMoXywga2V5KSB7XHJcbiAgICAgICAgY29uc3QgaGFzID0ga2V5WzBdICE9PSAnXycgJiYgIWlzR2xvYmFsbHlXaGl0ZWxpc3RlZChrZXkpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWhhcyAmJiBQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMuaGFzKF8sIGtleSkpIHtcclxuICAgICAgICAgICAgd2FybihgUHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXyB3aGljaCBpcyBhIHJlc2VydmVkIHByZWZpeCBmb3IgVnVlIGludGVybmFscy5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhhcztcclxuICAgIH1cclxufSk7XHJcbi8vIGRldiBvbmx5XHJcbi8vIEluIGRldiBtb2RlLCB0aGUgcHJveHkgdGFyZ2V0IGV4cG9zZXMgdGhlIHNhbWUgcHJvcGVydGllcyBhcyBzZWVuIG9uIGB0aGlzYFxyXG4vLyBmb3IgZWFzaWVyIGNvbnNvbGUgaW5zcGVjdGlvbi4gSW4gcHJvZCBtb2RlIGl0IHdpbGwgYmUgYW4gZW1wdHkgb2JqZWN0IHNvXHJcbi8vIHRoZXNlIHByb3BlcnRpZXMgZGVmaW5pdGlvbnMgY2FuIGJlIHNraXBwZWQuXHJcbmZ1bmN0aW9uIGNyZWF0ZURldlJlbmRlckNvbnRleHQoaW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHt9O1xyXG4gICAgLy8gZXhwb3NlIGludGVybmFsIGluc3RhbmNlIGZvciBwcm94eSBoYW5kbGVyc1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgYF9gLCB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGdldDogKCkgPT4gaW5zdGFuY2VcclxuICAgIH0pO1xyXG4gICAgLy8gZXhwb3NlIHB1YmxpYyBwcm9wZXJ0aWVzXHJcbiAgICBPYmplY3Qua2V5cyhwdWJsaWNQcm9wZXJ0aWVzTWFwKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIGdldDogKCkgPT4gcHVibGljUHJvcGVydGllc01hcFtrZXldKGluc3RhbmNlKSxcclxuICAgICAgICAgICAgLy8gaW50ZXJjZXB0ZWQgYnkgdGhlIHByb3h5IHNvIG5vIG5lZWQgZm9yIGltcGxlbWVudGF0aW9uLFxyXG4gICAgICAgICAgICAvLyBidXQgbmVlZGVkIHRvIHByZXZlbnQgc2V0IGVycm9yc1xyXG4gICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRhcmdldDtcclxufVxyXG4vLyBkZXYgb25seVxyXG5mdW5jdGlvbiBleHBvc2VQcm9wc09uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBjdHgsIHByb3BzT3B0aW9uczogW3Byb3BzT3B0aW9uc10gfSA9IGluc3RhbmNlO1xyXG4gICAgaWYgKHByb3BzT3B0aW9ucykge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHByb3BzT3B0aW9ucykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IGluc3RhbmNlLnByb3BzW2tleV0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IE5PT1BcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8gZGV2IG9ubHlcclxuZnVuY3Rpb24gZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgeyBjdHgsIHNldHVwU3RhdGUgfSA9IGluc3RhbmNlO1xyXG4gICAgT2JqZWN0LmtleXModG9SYXcoc2V0dXBTdGF0ZSkpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBpZiAoIXNldHVwU3RhdGUuX19pc1NjcmlwdFNldHVwKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXlbMF0gPT09ICckJyB8fCBrZXlbMF0gPT09ICdfJykge1xyXG4gICAgICAgICAgICAgICAgd2Fybihgc2V0dXAoKSByZXR1cm4gcHJvcGVydHkgJHtKU09OLnN0cmluZ2lmeShrZXkpfSBzaG91bGQgbm90IHN0YXJ0IHdpdGggXCIkXCIgb3IgXCJfXCIgYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYHdoaWNoIGFyZSByZXNlcnZlZCBwcmVmaXhlcyBmb3IgVnVlIGludGVybmFscy5gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCBrZXksIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHNldHVwU3RhdGVba2V5XSxcclxuICAgICAgICAgICAgICAgIHNldDogTk9PUFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxuXG5jb25zdCBlbXB0eUFwcENvbnRleHQgPSBjcmVhdGVBcHBDb250ZXh0KCk7XHJcbmxldCB1aWQkMSA9IDA7XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlKHZub2RlLCBwYXJlbnQsIHN1c3BlbnNlKSB7XHJcbiAgICBjb25zdCB0eXBlID0gdm5vZGUudHlwZTtcclxuICAgIC8vIGluaGVyaXQgcGFyZW50IGFwcCBjb250ZXh0IC0gb3IgLSBpZiByb290LCBhZG9wdCBmcm9tIHJvb3Qgdm5vZGVcclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSAocGFyZW50ID8gcGFyZW50LmFwcENvbnRleHQgOiB2bm9kZS5hcHBDb250ZXh0KSB8fCBlbXB0eUFwcENvbnRleHQ7XHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IHtcclxuICAgICAgICB1aWQ6IHVpZCQxKyssXHJcbiAgICAgICAgdm5vZGUsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICBwYXJlbnQsXHJcbiAgICAgICAgYXBwQ29udGV4dCxcclxuICAgICAgICByb290OiBudWxsLFxyXG4gICAgICAgIG5leHQ6IG51bGwsXHJcbiAgICAgICAgc3ViVHJlZTogbnVsbCxcclxuICAgICAgICBlZmZlY3Q6IG51bGwsXHJcbiAgICAgICAgdXBkYXRlOiBudWxsLFxyXG4gICAgICAgIHNjb3BlOiBuZXcgRWZmZWN0U2NvcGUodHJ1ZSAvKiBkZXRhY2hlZCAqLyksXHJcbiAgICAgICAgcmVuZGVyOiBudWxsLFxyXG4gICAgICAgIHByb3h5OiBudWxsLFxyXG4gICAgICAgIGV4cG9zZWQ6IG51bGwsXHJcbiAgICAgICAgZXhwb3NlUHJveHk6IG51bGwsXHJcbiAgICAgICAgd2l0aFByb3h5OiBudWxsLFxyXG4gICAgICAgIHByb3ZpZGVzOiBwYXJlbnQgPyBwYXJlbnQucHJvdmlkZXMgOiBPYmplY3QuY3JlYXRlKGFwcENvbnRleHQucHJvdmlkZXMpLFxyXG4gICAgICAgIGFjY2Vzc0NhY2hlOiBudWxsLFxyXG4gICAgICAgIHJlbmRlckNhY2hlOiBbXSxcclxuICAgICAgICAvLyBsb2NhbCByZXNvdmxlZCBhc3NldHNcclxuICAgICAgICBjb21wb25lbnRzOiBudWxsLFxyXG4gICAgICAgIGRpcmVjdGl2ZXM6IG51bGwsXHJcbiAgICAgICAgLy8gcmVzb2x2ZWQgcHJvcHMgYW5kIGVtaXRzIG9wdGlvbnNcclxuICAgICAgICBwcm9wc09wdGlvbnM6IG5vcm1hbGl6ZVByb3BzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcclxuICAgICAgICBlbWl0c09wdGlvbnM6IG5vcm1hbGl6ZUVtaXRzT3B0aW9ucyh0eXBlLCBhcHBDb250ZXh0KSxcclxuICAgICAgICAvLyBlbWl0XHJcbiAgICAgICAgZW1pdDogbnVsbCxcclxuICAgICAgICBlbWl0dGVkOiBudWxsLFxyXG4gICAgICAgIC8vIHByb3BzIGRlZmF1bHQgdmFsdWVcclxuICAgICAgICBwcm9wc0RlZmF1bHRzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgLy8gaW5oZXJpdEF0dHJzXHJcbiAgICAgICAgaW5oZXJpdEF0dHJzOiB0eXBlLmluaGVyaXRBdHRycyxcclxuICAgICAgICAvLyBzdGF0ZVxyXG4gICAgICAgIGN0eDogRU1QVFlfT0JKLFxyXG4gICAgICAgIGRhdGE6IEVNUFRZX09CSixcclxuICAgICAgICBwcm9wczogRU1QVFlfT0JKLFxyXG4gICAgICAgIGF0dHJzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgc2xvdHM6IEVNUFRZX09CSixcclxuICAgICAgICByZWZzOiBFTVBUWV9PQkosXHJcbiAgICAgICAgc2V0dXBTdGF0ZTogRU1QVFlfT0JKLFxyXG4gICAgICAgIHNldHVwQ29udGV4dDogbnVsbCxcclxuICAgICAgICAvLyBzdXNwZW5zZSByZWxhdGVkXHJcbiAgICAgICAgc3VzcGVuc2UsXHJcbiAgICAgICAgc3VzcGVuc2VJZDogc3VzcGVuc2UgPyBzdXNwZW5zZS5wZW5kaW5nSWQgOiAwLFxyXG4gICAgICAgIGFzeW5jRGVwOiBudWxsLFxyXG4gICAgICAgIGFzeW5jUmVzb2x2ZWQ6IGZhbHNlLFxyXG4gICAgICAgIC8vIGxpZmVjeWNsZSBob29rc1xyXG4gICAgICAgIC8vIG5vdCB1c2luZyBlbnVtcyBoZXJlIGJlY2F1c2UgaXQgcmVzdWx0cyBpbiBjb21wdXRlZCBwcm9wZXJ0aWVzXHJcbiAgICAgICAgaXNNb3VudGVkOiBmYWxzZSxcclxuICAgICAgICBpc1VubW91bnRlZDogZmFsc2UsXHJcbiAgICAgICAgaXNEZWFjdGl2YXRlZDogZmFsc2UsXHJcbiAgICAgICAgYmM6IG51bGwsXHJcbiAgICAgICAgYzogbnVsbCxcclxuICAgICAgICBibTogbnVsbCxcclxuICAgICAgICBtOiBudWxsLFxyXG4gICAgICAgIGJ1OiBudWxsLFxyXG4gICAgICAgIHU6IG51bGwsXHJcbiAgICAgICAgdW06IG51bGwsXHJcbiAgICAgICAgYnVtOiBudWxsLFxyXG4gICAgICAgIGRhOiBudWxsLFxyXG4gICAgICAgIGE6IG51bGwsXHJcbiAgICAgICAgcnRnOiBudWxsLFxyXG4gICAgICAgIHJ0YzogbnVsbCxcclxuICAgICAgICBlYzogbnVsbCxcclxuICAgICAgICBzcDogbnVsbFxyXG4gICAgfTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpbnN0YW5jZS5jdHggPSBjcmVhdGVEZXZSZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGluc3RhbmNlLmN0eCA9IHsgXzogaW5zdGFuY2UgfTtcclxuICAgIH1cclxuICAgIGluc3RhbmNlLnJvb3QgPSBwYXJlbnQgPyBwYXJlbnQucm9vdCA6IGluc3RhbmNlO1xyXG4gICAgaW5zdGFuY2UuZW1pdCA9IGVtaXQkMS5iaW5kKG51bGwsIGluc3RhbmNlKTtcclxuICAgIC8vIGFwcGx5IGN1c3RvbSBlbGVtZW50IHNwZWNpYWwgaGFuZGxpbmdcclxuICAgIGlmICh2bm9kZS5jZSkge1xyXG4gICAgICAgIHZub2RlLmNlKGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbnN0YW5jZTtcclxufVxyXG5sZXQgY3VycmVudEluc3RhbmNlID0gbnVsbDtcclxuY29uc3QgZ2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4gY3VycmVudEluc3RhbmNlIHx8IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcclxuY29uc3Qgc2V0Q3VycmVudEluc3RhbmNlID0gKGluc3RhbmNlKSA9PiB7XHJcbiAgICBjdXJyZW50SW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuICAgIGluc3RhbmNlLnNjb3BlLm9uKCk7XHJcbn07XHJcbmNvbnN0IHVuc2V0Q3VycmVudEluc3RhbmNlID0gKCkgPT4ge1xyXG4gICAgY3VycmVudEluc3RhbmNlICYmIGN1cnJlbnRJbnN0YW5jZS5zY29wZS5vZmYoKTtcclxuICAgIGN1cnJlbnRJbnN0YW5jZSA9IG51bGw7XHJcbn07XHJcbmNvbnN0IGlzQnVpbHRJblRhZyA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnKTtcclxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUsIGNvbmZpZykge1xyXG4gICAgY29uc3QgYXBwSXNOYXRpdmVUYWcgPSBjb25maWcuaXNOYXRpdmVUYWcgfHwgTk87XHJcbiAgICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGFwcElzTmF0aXZlVGFnKG5hbWUpKSB7XHJcbiAgICAgICAgd2FybignRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCBpZDogJyArIG5hbWUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UpIHtcclxuICAgIHJldHVybiBpbnN0YW5jZS52bm9kZS5zaGFwZUZsYWcgJiA0IC8qIFNUQVRFRlVMX0NPTVBPTkVOVCAqLztcclxufVxyXG5sZXQgaXNJblNTUkNvbXBvbmVudFNldHVwID0gZmFsc2U7XHJcbmZ1bmN0aW9uIHNldHVwQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUiA9IGZhbHNlKSB7XHJcbiAgICBpc0luU1NSQ29tcG9uZW50U2V0dXAgPSBpc1NTUjtcclxuICAgIGNvbnN0IHsgcHJvcHMsIGNoaWxkcmVuIH0gPSBpbnN0YW5jZS52bm9kZTtcclxuICAgIGNvbnN0IGlzU3RhdGVmdWwgPSBpc1N0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlKTtcclxuICAgIGluaXRQcm9wcyhpbnN0YW5jZSwgcHJvcHMsIGlzU3RhdGVmdWwsIGlzU1NSKTtcclxuICAgIGluaXRTbG90cyhpbnN0YW5jZSwgY2hpbGRyZW4pO1xyXG4gICAgY29uc3Qgc2V0dXBSZXN1bHQgPSBpc1N0YXRlZnVsXHJcbiAgICAgICAgPyBzZXR1cFN0YXRlZnVsQ29tcG9uZW50KGluc3RhbmNlLCBpc1NTUilcclxuICAgICAgICA6IHVuZGVmaW5lZDtcclxuICAgIGlzSW5TU1JDb21wb25lbnRTZXR1cCA9IGZhbHNlO1xyXG4gICAgcmV0dXJuIHNldHVwUmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIHNldHVwU3RhdGVmdWxDb21wb25lbnQoaW5zdGFuY2UsIGlzU1NSKSB7XHJcbiAgICBjb25zdCBDb21wb25lbnQgPSBpbnN0YW5jZS50eXBlO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGlmIChDb21wb25lbnQubmFtZSkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoQ29tcG9uZW50Lm5hbWUsIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5jb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoQ29tcG9uZW50LmNvbXBvbmVudHMpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZXNbaV0sIGluc3RhbmNlLmFwcENvbnRleHQuY29uZmlnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcG9uZW50LmRpcmVjdGl2ZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhDb21wb25lbnQuZGlyZWN0aXZlcyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlRGlyZWN0aXZlTmFtZShuYW1lc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvbXBvbmVudC5jb21waWxlck9wdGlvbnMgJiYgaXNSdW50aW1lT25seSgpKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYFwiY29tcGlsZXJPcHRpb25zXCIgaXMgb25seSBzdXBwb3J0ZWQgd2hlbiB1c2luZyBhIGJ1aWxkIG9mIFZ1ZSB0aGF0IGAgK1xyXG4gICAgICAgICAgICAgICAgYGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyLiBTaW5jZSB5b3UgYXJlIHVzaW5nIGEgcnVudGltZS1vbmx5IGAgK1xyXG4gICAgICAgICAgICAgICAgYGJ1aWxkLCB0aGUgb3B0aW9ucyBzaG91bGQgYmUgcGFzc2VkIHZpYSB5b3VyIGJ1aWxkIHRvb2wgY29uZmlnIGluc3RlYWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gMC4gY3JlYXRlIHJlbmRlciBwcm94eSBwcm9wZXJ0eSBhY2Nlc3MgY2FjaGVcclxuICAgIGluc3RhbmNlLmFjY2Vzc0NhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIC8vIDEuIGNyZWF0ZSBwdWJsaWMgaW5zdGFuY2UgLyByZW5kZXIgcHJveHlcclxuICAgIC8vIGFsc28gbWFyayBpdCByYXcgc28gaXQncyBuZXZlciBvYnNlcnZlZFxyXG4gICAgaW5zdGFuY2UucHJveHkgPSBtYXJrUmF3KG5ldyBQcm94eShpbnN0YW5jZS5jdHgsIFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycykpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGV4cG9zZVByb3BzT25SZW5kZXJDb250ZXh0KGluc3RhbmNlKTtcclxuICAgIH1cclxuICAgIC8vIDIuIGNhbGwgc2V0dXAoKVxyXG4gICAgY29uc3QgeyBzZXR1cCB9ID0gQ29tcG9uZW50O1xyXG4gICAgaWYgKHNldHVwKSB7XHJcbiAgICAgICAgY29uc3Qgc2V0dXBDb250ZXh0ID0gKGluc3RhbmNlLnNldHVwQ29udGV4dCA9XHJcbiAgICAgICAgICAgIHNldHVwLmxlbmd0aCA+IDEgPyBjcmVhdGVTZXR1cENvbnRleHQoaW5zdGFuY2UpIDogbnVsbCk7XHJcbiAgICAgICAgc2V0Q3VycmVudEluc3RhbmNlKGluc3RhbmNlKTtcclxuICAgICAgICBwYXVzZVRyYWNraW5nKCk7XHJcbiAgICAgICAgY29uc3Qgc2V0dXBSZXN1bHQgPSBjYWxsV2l0aEVycm9ySGFuZGxpbmcoc2V0dXAsIGluc3RhbmNlLCAwIC8qIFNFVFVQX0ZVTkNUSU9OICovLCBbKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gc2hhbGxvd1JlYWRvbmx5KGluc3RhbmNlLnByb3BzKSA6IGluc3RhbmNlLnByb3BzLCBzZXR1cENvbnRleHRdKTtcclxuICAgICAgICByZXNldFRyYWNraW5nKCk7XHJcbiAgICAgICAgdW5zZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBpZiAoaXNQcm9taXNlKHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgICAgICBzZXR1cFJlc3VsdC50aGVuKHVuc2V0Q3VycmVudEluc3RhbmNlLCB1bnNldEN1cnJlbnRJbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIGlmIChpc1NTUikge1xyXG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBwcm9taXNlIHNvIHNlcnZlci1yZW5kZXJlciBjYW4gd2FpdCBvbiBpdFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNldHVwUmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHJlc29sdmVkUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHJlc29sdmVkUmVzdWx0LCBpc1NTUik7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlLCBpbnN0YW5jZSwgMCAvKiBTRVRVUF9GVU5DVElPTiAqLyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGFzeW5jIHNldHVwIHJldHVybmVkIFByb21pc2UuXHJcbiAgICAgICAgICAgICAgICAvLyBiYWlsIGhlcmUgYW5kIHdhaXQgZm9yIHJlLWVudHJ5LlxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuYXN5bmNEZXAgPSBzZXR1cFJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaGFuZGxlU2V0dXBSZXN1bHQoaW5zdGFuY2UsIHNldHVwUmVzdWx0LCBpc1NTUik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZmluaXNoQ29tcG9uZW50U2V0dXAoaW5zdGFuY2UsIGlzU1NSKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYW5kbGVTZXR1cFJlc3VsdChpbnN0YW5jZSwgc2V0dXBSZXN1bHQsIGlzU1NSKSB7XHJcbiAgICBpZiAoaXNGdW5jdGlvbihzZXR1cFJlc3VsdCkpIHtcclxuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBhbiBpbmxpbmUgcmVuZGVyIGZ1bmN0aW9uXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnR5cGUuX19zc3JJbmxpbmVSZW5kZXIpIHtcclxuICAgICAgICAgICAgLy8gd2hlbiB0aGUgZnVuY3Rpb24ncyBuYW1lIGlzIGBzc3JSZW5kZXJgIChjb21waWxlZCBieSBTRkMgaW5saW5lIG1vZGUpLFxyXG4gICAgICAgICAgICAvLyBzZXQgaXQgYXMgc3NyUmVuZGVyIGluc3RlYWQuXHJcbiAgICAgICAgICAgIGluc3RhbmNlLnNzclJlbmRlciA9IHNldHVwUmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UucmVuZGVyID0gc2V0dXBSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNPYmplY3Qoc2V0dXBSZXN1bHQpKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpc1ZOb2RlKHNldHVwUmVzdWx0KSkge1xyXG4gICAgICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCBub3QgcmV0dXJuIFZOb2RlcyBkaXJlY3RseSAtIGAgK1xyXG4gICAgICAgICAgICAgICAgYHJldHVybiBhIHJlbmRlciBmdW5jdGlvbiBpbnN0ZWFkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzZXR1cCByZXR1cm5lZCBiaW5kaW5ncy5cclxuICAgICAgICAvLyBhc3N1bWluZyBhIHJlbmRlciBmdW5jdGlvbiBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGlzIHByZXNlbnQuXHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCBfX1ZVRV9QUk9EX0RFVlRPT0xTX18pIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UuZGV2dG9vbHNSYXdTZXR1cFN0YXRlID0gc2V0dXBSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnNldHVwU3RhdGUgPSBwcm94eVJlZnMoc2V0dXBSZXN1bHQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgZXhwb3NlU2V0dXBTdGF0ZU9uUmVuZGVyQ29udGV4dChpbnN0YW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHNldHVwUmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB3YXJuKGBzZXR1cCgpIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0LiBSZWNlaXZlZDogJHtzZXR1cFJlc3VsdCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBzZXR1cFJlc3VsdH1gKTtcclxuICAgIH1cclxuICAgIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUik7XHJcbn1cclxubGV0IGNvbXBpbGU7XHJcbmxldCBpbnN0YWxsV2l0aFByb3h5O1xyXG4vKipcclxuICogRm9yIHJ1bnRpbWUtZG9tIHRvIHJlZ2lzdGVyIHRoZSBjb21waWxlci5cclxuICogTm90ZSB0aGUgZXhwb3J0ZWQgbWV0aG9kIHVzZXMgYW55IHRvIGF2b2lkIGQudHMgcmVseWluZyBvbiB0aGUgY29tcGlsZXIgdHlwZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlclJ1bnRpbWVDb21waWxlcihfY29tcGlsZSkge1xyXG4gICAgY29tcGlsZSA9IF9jb21waWxlO1xyXG4gICAgaW5zdGFsbFdpdGhQcm94eSA9IGkgPT4ge1xyXG4gICAgICAgIGlmIChpLnJlbmRlci5fcmMpIHtcclxuICAgICAgICAgICAgaS53aXRoUHJveHkgPSBuZXcgUHJveHkoaS5jdHgsIFJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBkZXYgb25seVxyXG5jb25zdCBpc1J1bnRpbWVPbmx5ID0gKCkgPT4gIWNvbXBpbGU7XHJcbmZ1bmN0aW9uIGZpbmlzaENvbXBvbmVudFNldHVwKGluc3RhbmNlLCBpc1NTUiwgc2tpcE9wdGlvbnMpIHtcclxuICAgIGNvbnN0IENvbXBvbmVudCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICAvLyB0ZW1wbGF0ZSAvIHJlbmRlciBmdW5jdGlvbiBub3JtYWxpemF0aW9uXHJcbiAgICAvLyBjb3VsZCBiZSBhbHJlYWR5IHNldCB3aGVuIHJldHVybmVkIGZyb20gc2V0dXAoKVxyXG4gICAgaWYgKCFpbnN0YW5jZS5yZW5kZXIpIHtcclxuICAgICAgICAvLyBvbmx5IGRvIG9uLXRoZS1mbHkgY29tcGlsZSBpZiBub3QgaW4gU1NSIC0gU1NSIG9uLXRoZS1mbHkgY29tcGlsYXRpb25cclxuICAgICAgICAvLyBpcyBkb25lIGJ5IHNlcnZlci1yZW5kZXJlclxyXG4gICAgICAgIGlmICghaXNTU1IgJiYgY29tcGlsZSAmJiAhQ29tcG9uZW50LnJlbmRlcikge1xyXG4gICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IENvbXBvbmVudC50ZW1wbGF0ZTtcclxuICAgICAgICAgICAgaWYgKHRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBpc0N1c3RvbUVsZW1lbnQsIGNvbXBpbGVyT3B0aW9ucyB9ID0gaW5zdGFuY2UuYXBwQ29udGV4dC5jb25maWc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRlbGltaXRlcnMsIGNvbXBpbGVyT3B0aW9uczogY29tcG9uZW50Q29tcGlsZXJPcHRpb25zIH0gPSBDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaW5hbENvbXBpbGVyT3B0aW9ucyA9IGV4dGVuZChleHRlbmQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGlzQ3VzdG9tRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICBkZWxpbWl0ZXJzXHJcbiAgICAgICAgICAgICAgICB9LCBjb21waWxlck9wdGlvbnMpLCBjb21wb25lbnRDb21waWxlck9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgQ29tcG9uZW50LnJlbmRlciA9IGNvbXBpbGUodGVtcGxhdGUsIGZpbmFsQ29tcGlsZXJPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRNZWFzdXJlKGluc3RhbmNlLCBgY29tcGlsZWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlLnJlbmRlciA9IChDb21wb25lbnQucmVuZGVyIHx8IE5PT1ApO1xyXG4gICAgICAgIC8vIGZvciBydW50aW1lLWNvbXBpbGVkIHJlbmRlciBmdW5jdGlvbnMgdXNpbmcgYHdpdGhgIGJsb2NrcywgdGhlIHJlbmRlclxyXG4gICAgICAgIC8vIHByb3h5IHVzZWQgbmVlZHMgYSBkaWZmZXJlbnQgYGhhc2AgaGFuZGxlciB3aGljaCBpcyBtb3JlIHBlcmZvcm1hbnQgYW5kXHJcbiAgICAgICAgLy8gYWxzbyBvbmx5IGFsbG93cyBhIHdoaXRlbGlzdCBvZiBnbG9iYWxzIHRvIGZhbGx0aHJvdWdoLlxyXG4gICAgICAgIGlmIChpbnN0YWxsV2l0aFByb3h5KSB7XHJcbiAgICAgICAgICAgIGluc3RhbGxXaXRoUHJveHkoaW5zdGFuY2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHN1cHBvcnQgZm9yIDIueCBvcHRpb25zXHJcbiAgICBpZiAoX19WVUVfT1BUSU9OU19BUElfXyAmJiAhKGZhbHNlICkpIHtcclxuICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoaW5zdGFuY2UpO1xyXG4gICAgICAgIHBhdXNlVHJhY2tpbmcoKTtcclxuICAgICAgICBhcHBseU9wdGlvbnMoaW5zdGFuY2UpO1xyXG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcclxuICAgICAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgfVxyXG4gICAgLy8gd2FybiBtaXNzaW5nIHRlbXBsYXRlL3JlbmRlclxyXG4gICAgLy8gdGhlIHJ1bnRpbWUgY29tcGlsYXRpb24gb2YgdGVtcGxhdGUgaW4gU1NSIGlzIGRvbmUgYnkgc2VydmVyLXJlbmRlclxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhQ29tcG9uZW50LnJlbmRlciAmJiBpbnN0YW5jZS5yZW5kZXIgPT09IE5PT1AgJiYgIWlzU1NSKSB7XHJcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgaWYgKCFjb21waWxlICYmIENvbXBvbmVudC50ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgcHJvdmlkZWQgdGVtcGxhdGUgb3B0aW9uIGJ1dCBgICtcclxuICAgICAgICAgICAgICAgIGBydW50aW1lIGNvbXBpbGF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBidWlsZCBvZiBWdWUuYCArXHJcbiAgICAgICAgICAgICAgICAoYCBDb25maWd1cmUgeW91ciBidW5kbGVyIHRvIGFsaWFzIFwidnVlXCIgdG8gXCJ2dWUvZGlzdC92dWUuZXNtLWJ1bmRsZXIuanNcIi5gXHJcbiAgICAgICAgICAgICAgICAgICAgKSAvKiBzaG91bGQgbm90IGhhcHBlbiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB3YXJuKGBDb21wb25lbnQgaXMgbWlzc2luZyB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24uYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUF0dHJzUHJveHkoaW5zdGFuY2UpIHtcclxuICAgIHJldHVybiBuZXcgUHJveHkoaW5zdGFuY2UuYXR0cnMsIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgID8ge1xyXG4gICAgICAgICAgICBnZXQodGFyZ2V0LCBrZXkpIHtcclxuICAgICAgICAgICAgICAgIG1hcmtBdHRyc0FjY2Vzc2VkKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFjayhpbnN0YW5jZSwgXCJnZXRcIiAvKiBHRVQgKi8sICckYXR0cnMnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0KCkge1xyXG4gICAgICAgICAgICAgICAgd2Fybihgc2V0dXBDb250ZXh0LmF0dHJzIGlzIHJlYWRvbmx5LmApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWxldGVQcm9wZXJ0eSgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4oYHNldHVwQ29udGV4dC5hdHRycyBpcyByZWFkb25seS5gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICA6IHtcclxuICAgICAgICAgICAgZ2V0KHRhcmdldCwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICB0cmFjayhpbnN0YW5jZSwgXCJnZXRcIiAvKiBHRVQgKi8sICckYXR0cnMnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNldHVwQ29udGV4dChpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgZXhwb3NlID0gZXhwb3NlZCA9PiB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBpbnN0YW5jZS5leHBvc2VkKSB7XHJcbiAgICAgICAgICAgIHdhcm4oYGV4cG9zZSgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlIHBlciBzZXR1cCgpLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5leHBvc2VkID0gZXhwb3NlZCB8fCB7fTtcclxuICAgIH07XHJcbiAgICBsZXQgYXR0cnM7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgLy8gV2UgdXNlIGdldHRlcnMgaW4gZGV2IGluIGNhc2UgbGlicyBsaWtlIHRlc3QtdXRpbHMgb3ZlcndyaXRlIGluc3RhbmNlXHJcbiAgICAgICAgLy8gcHJvcGVydGllcyAob3ZlcndyaXRlcyBzaG91bGQgbm90IGJlIGRvbmUgaW4gcHJvZClcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgICAgICAgICAgIGdldCBhdHRycygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhdHRycyB8fCAoYXR0cnMgPSBjcmVhdGVBdHRyc1Byb3h5KGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldCBzbG90cygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaGFsbG93UmVhZG9ubHkoaW5zdGFuY2Uuc2xvdHMpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQgZW1pdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IGluc3RhbmNlLmVtaXQoZXZlbnQsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHBvc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldCBhdHRycygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhdHRycyB8fCAoYXR0cnMgPSBjcmVhdGVBdHRyc1Byb3h5KGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNsb3RzOiBpbnN0YW5jZS5zbG90cyxcclxuICAgICAgICAgICAgZW1pdDogaW5zdGFuY2UuZW1pdCxcclxuICAgICAgICAgICAgZXhwb3NlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRFeHBvc2VQcm94eShpbnN0YW5jZSkge1xyXG4gICAgaWYgKGluc3RhbmNlLmV4cG9zZWQpIHtcclxuICAgICAgICByZXR1cm4gKGluc3RhbmNlLmV4cG9zZVByb3h5IHx8XHJcbiAgICAgICAgICAgIChpbnN0YW5jZS5leHBvc2VQcm94eSA9IG5ldyBQcm94eShwcm94eVJlZnMobWFya1JhdyhpbnN0YW5jZS5leHBvc2VkKSksIHtcclxuICAgICAgICAgICAgICAgIGdldCh0YXJnZXQsIGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5IGluIHB1YmxpY1Byb3BlcnRpZXNNYXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHB1YmxpY1Byb3BlcnRpZXNNYXBba2V5XShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSkpO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XHJcbmNvbnN0IGNsYXNzaWZ5ID0gKHN0cikgPT4gc3RyLnJlcGxhY2UoY2xhc3NpZnlSRSwgYyA9PiBjLnRvVXBwZXJDYXNlKCkpLnJlcGxhY2UoL1stX10vZywgJycpO1xyXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lKENvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oQ29tcG9uZW50KVxyXG4gICAgICAgID8gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lXHJcbiAgICAgICAgOiBDb21wb25lbnQubmFtZTtcclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBmb3JtYXRDb21wb25lbnROYW1lKGluc3RhbmNlLCBDb21wb25lbnQsIGlzUm9vdCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50KTtcclxuICAgIGlmICghbmFtZSAmJiBDb21wb25lbnQuX19maWxlKSB7XHJcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBDb21wb25lbnQuX19maWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyk7XHJcbiAgICAgICAgaWYgKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSBtYXRjaFsxXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIW5hbWUgJiYgaW5zdGFuY2UgJiYgaW5zdGFuY2UucGFyZW50KSB7XHJcbiAgICAgICAgLy8gdHJ5IHRvIGluZmVyIHRoZSBuYW1lIGJhc2VkIG9uIHJldmVyc2UgcmVzb2x1dGlvblxyXG4gICAgICAgIGNvbnN0IGluZmVyRnJvbVJlZ2lzdHJ5ID0gKHJlZ2lzdHJ5KSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlZ2lzdHJ5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVnaXN0cnlba2V5XSA9PT0gQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbmFtZSA9XHJcbiAgICAgICAgICAgIGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmNvbXBvbmVudHMgfHxcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLnBhcmVudC50eXBlLmNvbXBvbmVudHMpIHx8IGluZmVyRnJvbVJlZ2lzdHJ5KGluc3RhbmNlLmFwcENvbnRleHQuY29tcG9uZW50cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmFtZSA/IGNsYXNzaWZ5KG5hbWUpIDogaXNSb290ID8gYEFwcGAgOiBgQW5vbnltb3VzYDtcclxufVxyXG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSkgJiYgJ19fdmNjT3B0cycgaW4gdmFsdWU7XHJcbn1cblxuY29uc3QgY29tcHV0ZWQgPSAoKGdldHRlck9yT3B0aW9ucywgZGVidWdPcHRpb25zKSA9PiB7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICByZXR1cm4gY29tcHV0ZWQkMShnZXR0ZXJPck9wdGlvbnMsIGRlYnVnT3B0aW9ucywgaXNJblNTUkNvbXBvbmVudFNldHVwKTtcclxufSk7XG5cbi8vIGRldiBvbmx5XHJcbmNvbnN0IHdhcm5SdW50aW1lVXNhZ2UgPSAobWV0aG9kKSA9PiB3YXJuKGAke21ldGhvZH0oKSBpcyBhIGNvbXBpbGVyLWhpbnQgaGVscGVyIHRoYXQgaXMgb25seSB1c2FibGUgaW5zaWRlIGAgK1xyXG4gICAgYDxzY3JpcHQgc2V0dXA+IG9mIGEgc2luZ2xlIGZpbGUgY29tcG9uZW50LiBJdHMgYXJndW1lbnRzIHNob3VsZCBiZSBgICtcclxuICAgIGBjb21waWxlZCBhd2F5IGFuZCBwYXNzaW5nIGl0IGF0IHJ1bnRpbWUgaGFzIG5vIGVmZmVjdC5gKTtcclxuLy8gaW1wbGVtZW50YXRpb25cclxuZnVuY3Rpb24gZGVmaW5lUHJvcHMoKSB7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICAgICAgd2FyblJ1bnRpbWVVc2FnZShgZGVmaW5lUHJvcHNgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcbi8vIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIGRlZmluZUVtaXRzKCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUVtaXRzYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG4vKipcclxuICogVnVlIGA8c2NyaXB0IHNldHVwPmAgY29tcGlsZXIgbWFjcm8gZm9yIGRlY2xhcmluZyBhIGNvbXBvbmVudCdzIGV4cG9zZWRcclxuICogaW5zdGFuY2UgcHJvcGVydGllcyB3aGVuIGl0IGlzIGFjY2Vzc2VkIGJ5IGEgcGFyZW50IGNvbXBvbmVudCB2aWEgdGVtcGxhdGVcclxuICogcmVmcy5cclxuICpcclxuICogYDxzY3JpcHQgc2V0dXA+YCBjb21wb25lbnRzIGFyZSBjbG9zZWQgYnkgZGVmYXVsdCAtIGkuZS4gdmFyaWFibGVzIGluc2lkZVxyXG4gKiB0aGUgYDxzY3JpcHQgc2V0dXA+YCBzY29wZSBpcyBub3QgZXhwb3NlZCB0byBwYXJlbnQgdW5sZXNzIGV4cGxpY2l0bHkgZXhwb3NlZFxyXG4gKiB2aWEgYGRlZmluZUV4cG9zZWAuXHJcbiAqXHJcbiAqIFRoaXMgaXMgb25seSB1c2FibGUgaW5zaWRlIGA8c2NyaXB0IHNldHVwPmAsIGlzIGNvbXBpbGVkIGF3YXkgaW4gdGhlXHJcbiAqIG91dHB1dCBhbmQgc2hvdWxkICoqbm90KiogYmUgYWN0dWFsbHkgY2FsbGVkIGF0IHJ1bnRpbWUuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWZpbmVFeHBvc2UoZXhwb3NlZCkge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYGRlZmluZUV4cG9zZWApO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBWdWUgYDxzY3JpcHQgc2V0dXA+YCBjb21waWxlciBtYWNybyBmb3IgcHJvdmlkaW5nIHByb3BzIGRlZmF1bHQgdmFsdWVzIHdoZW5cclxuICogdXNpbmcgdHlwZS1iYXNlZCBgZGVmaW5lUHJvcHNgIGRlY2xhcmF0aW9uLlxyXG4gKlxyXG4gKiBFeGFtcGxlIHVzYWdlOlxyXG4gKiBgYGB0c1xyXG4gKiB3aXRoRGVmYXVsdHMoZGVmaW5lUHJvcHM8e1xyXG4gKiAgIHNpemU/OiBudW1iZXJcclxuICogICBsYWJlbHM/OiBzdHJpbmdbXVxyXG4gKiB9PigpLCB7XHJcbiAqICAgc2l6ZTogMyxcclxuICogICBsYWJlbHM6ICgpID0+IFsnZGVmYXVsdCBsYWJlbCddXHJcbiAqIH0pXHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBUaGlzIGlzIG9ubHkgdXNhYmxlIGluc2lkZSBgPHNjcmlwdCBzZXR1cD5gLCBpcyBjb21waWxlZCBhd2F5IGluIHRoZSBvdXRwdXRcclxuICogYW5kIHNob3VsZCAqKm5vdCoqIGJlIGFjdHVhbGx5IGNhbGxlZCBhdCBydW50aW1lLlxyXG4gKi9cclxuZnVuY3Rpb24gd2l0aERlZmF1bHRzKHByb3BzLCBkZWZhdWx0cykge1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIHdhcm5SdW50aW1lVXNhZ2UoYHdpdGhEZWZhdWx0c2ApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuZnVuY3Rpb24gdXNlU2xvdHMoKSB7XHJcbiAgICByZXR1cm4gZ2V0Q29udGV4dCgpLnNsb3RzO1xyXG59XHJcbmZ1bmN0aW9uIHVzZUF0dHJzKCkge1xyXG4gICAgcmV0dXJuIGdldENvbnRleHQoKS5hdHRycztcclxufVxyXG5mdW5jdGlvbiBnZXRDb250ZXh0KCkge1xyXG4gICAgY29uc3QgaSA9IGdldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiAhaSkge1xyXG4gICAgICAgIHdhcm4oYHVzZUNvbnRleHQoKSBjYWxsZWQgd2l0aG91dCBhY3RpdmUgaW5zdGFuY2UuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaS5zZXR1cENvbnRleHQgfHwgKGkuc2V0dXBDb250ZXh0ID0gY3JlYXRlU2V0dXBDb250ZXh0KGkpKTtcclxufVxyXG4vKipcclxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgZGVmYXVsdCBkZWNsYXJhdGlvbnMuIEltcG9ydGVkIGJ5IGNvbXBpbGVkIGNvZGVcclxuICogb25seS5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBtZXJnZURlZmF1bHRzKHJhdywgZGVmYXVsdHMpIHtcclxuICAgIGNvbnN0IHByb3BzID0gaXNBcnJheShyYXcpXHJcbiAgICAgICAgPyByYXcucmVkdWNlKChub3JtYWxpemVkLCBwKSA9PiAoKG5vcm1hbGl6ZWRbcF0gPSB7fSksIG5vcm1hbGl6ZWQpLCB7fSlcclxuICAgICAgICA6IHJhdztcclxuICAgIGZvciAoY29uc3Qga2V5IGluIGRlZmF1bHRzKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0ID0gcHJvcHNba2V5XTtcclxuICAgICAgICBpZiAob3B0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KG9wdCkgfHwgaXNGdW5jdGlvbihvcHQpKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wc1trZXldID0geyB0eXBlOiBvcHQsIGRlZmF1bHQ6IGRlZmF1bHRzW2tleV0gfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG9wdC5kZWZhdWx0ID0gZGVmYXVsdHNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvcHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcHJvcHNba2V5XSA9IHsgZGVmYXVsdDogZGVmYXVsdHNba2V5XSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgd2FybihgcHJvcHMgZGVmYXVsdCBrZXkgXCIke2tleX1cIiBoYXMgbm8gY29ycmVzcG9uZGluZyBkZWNsYXJhdGlvbi5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvcHM7XHJcbn1cclxuLyoqXHJcbiAqIFVzZWQgdG8gY3JlYXRlIGEgcHJveHkgZm9yIHRoZSByZXN0IGVsZW1lbnQgd2hlbiBkZXN0cnVjdHVyaW5nIHByb3BzIHdpdGhcclxuICogZGVmaW5lUHJvcHMoKS5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVQcm9wc1Jlc3RQcm94eShwcm9wcywgZXhjbHVkZWRLZXlzKSB7XHJcbiAgICBjb25zdCByZXQgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XHJcbiAgICAgICAgaWYgKCFleGNsdWRlZEtleXMuaW5jbHVkZXMoa2V5KSkge1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0LCBrZXksIHtcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHByb3BzW2tleV1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxufVxyXG4vKipcclxuICogYDxzY3JpcHQgc2V0dXA+YCBoZWxwZXIgZm9yIHBlcnNpc3RpbmcgdGhlIGN1cnJlbnQgaW5zdGFuY2UgY29udGV4dCBvdmVyXHJcbiAqIGFzeW5jL2F3YWl0IGZsb3dzLlxyXG4gKlxyXG4gKiBgQHZ1ZS9jb21waWxlci1zZmNgIGNvbnZlcnRzIHRoZSBmb2xsb3dpbmc6XHJcbiAqXHJcbiAqIGBgYHRzXHJcbiAqIGNvbnN0IHggPSBhd2FpdCBmb28oKVxyXG4gKiBgYGBcclxuICpcclxuICogaW50bzpcclxuICpcclxuICogYGBgdHNcclxuICogbGV0IF9fdGVtcCwgX19yZXN0b3JlXHJcbiAqIGNvbnN0IHggPSAoKFtfX3RlbXAsIF9fcmVzdG9yZV0gPSB3aXRoQXN5bmNDb250ZXh0KCgpID0+IGZvbygpKSksX190ZW1wPWF3YWl0IF9fdGVtcCxfX3Jlc3RvcmUoKSxfX3RlbXApXHJcbiAqIGBgYFxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIHdpdGhBc3luY0NvbnRleHQoZ2V0QXdhaXRhYmxlKSB7XHJcbiAgICBjb25zdCBjdHggPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWN0eCkge1xyXG4gICAgICAgIHdhcm4oYHdpdGhBc3luY0NvbnRleHQgY2FsbGVkIHdpdGhvdXQgYWN0aXZlIGN1cnJlbnQgaW5zdGFuY2UuIGAgK1xyXG4gICAgICAgICAgICBgVGhpcyBpcyBsaWtlbHkgYSBidWcuYCk7XHJcbiAgICB9XHJcbiAgICBsZXQgYXdhaXRhYmxlID0gZ2V0QXdhaXRhYmxlKCk7XHJcbiAgICB1bnNldEN1cnJlbnRJbnN0YW5jZSgpO1xyXG4gICAgaWYgKGlzUHJvbWlzZShhd2FpdGFibGUpKSB7XHJcbiAgICAgICAgYXdhaXRhYmxlID0gYXdhaXRhYmxlLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICBzZXRDdXJyZW50SW5zdGFuY2UoY3R4KTtcclxuICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBbYXdhaXRhYmxlLCAoKSA9PiBzZXRDdXJyZW50SW5zdGFuY2UoY3R4KV07XHJcbn1cblxuLy8gQWN0dWFsIGltcGxlbWVudGF0aW9uXHJcbmZ1bmN0aW9uIGgodHlwZSwgcHJvcHNPckNoaWxkcmVuLCBjaGlsZHJlbikge1xyXG4gICAgY29uc3QgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICBpZiAobCA9PT0gMikge1xyXG4gICAgICAgIGlmIChpc09iamVjdChwcm9wc09yQ2hpbGRyZW4pICYmICFpc0FycmF5KHByb3BzT3JDaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgLy8gc2luZ2xlIHZub2RlIHdpdGhvdXQgcHJvcHNcclxuICAgICAgICAgICAgaWYgKGlzVk5vZGUocHJvcHNPckNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIG51bGwsIFtwcm9wc09yQ2hpbGRyZW5dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwcm9wcyB3aXRob3V0IGNoaWxkcmVuXHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0eXBlLCBwcm9wc09yQ2hpbGRyZW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gb21pdCBwcm9wc1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlVk5vZGUodHlwZSwgbnVsbCwgcHJvcHNPckNoaWxkcmVuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAobCA+IDMpIHtcclxuICAgICAgICAgICAgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsID09PSAzICYmIGlzVk5vZGUoY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gW2NoaWxkcmVuXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlKHR5cGUsIHByb3BzT3JDaGlsZHJlbiwgY2hpbGRyZW4pO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHNzckNvbnRleHRLZXkgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHNzckNvbnRleHRgIDogYGApO1xyXG5jb25zdCB1c2VTU1JDb250ZXh0ID0gKCkgPT4ge1xyXG4gICAge1xyXG4gICAgICAgIGNvbnN0IGN0eCA9IGluamVjdChzc3JDb250ZXh0S2V5KTtcclxuICAgICAgICBpZiAoIWN0eCkge1xyXG4gICAgICAgICAgICB3YXJuKGBTZXJ2ZXIgcmVuZGVyaW5nIGNvbnRleHQgbm90IHByb3ZpZGVkLiBNYWtlIHN1cmUgdG8gb25seSBjYWxsIGAgK1xyXG4gICAgICAgICAgICAgICAgYHVzZVNTUkNvbnRleHQoKSBjb25kaXRpb25hbGx5IGluIHRoZSBzZXJ2ZXIgYnVpbGQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjdHg7XHJcbiAgICB9XHJcbn07XG5cbmZ1bmN0aW9uIGlzU2hhbGxvdyh2YWx1ZSkge1xyXG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlW1wiX192X2lzU2hhbGxvd1wiIC8qIElTX1NIQUxMT1cgKi9dKTtcclxufVxuXG5mdW5jdGlvbiBpbml0Q3VzdG9tRm9ybWF0dGVyKCkge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzICovXHJcbiAgICBpZiAoIShwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHZ1ZVN0eWxlID0geyBzdHlsZTogJ2NvbG9yOiMzYmE3NzYnIH07XHJcbiAgICBjb25zdCBudW1iZXJTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojMGIxYmM5JyB9O1xyXG4gICAgY29uc3Qgc3RyaW5nU3R5bGUgPSB7IHN0eWxlOiAnY29sb3I6I2I2MmUyNCcgfTtcclxuICAgIGNvbnN0IGtleXdvcmRTdHlsZSA9IHsgc3R5bGU6ICdjb2xvcjojOWQyODhjJyB9O1xyXG4gICAgLy8gY3VzdG9tIGZvcm1hdHRlciBmb3IgQ2hyb21lXHJcbiAgICAvLyBodHRwczovL3d3dy5tYXR0emV1bmVydC5jb20vMjAxNi8wMi8xOS9jdXN0b20tY2hyb21lLWRldnRvb2xzLW9iamVjdC1mb3JtYXR0ZXJzLmh0bWxcclxuICAgIGNvbnN0IGZvcm1hdHRlciA9IHtcclxuICAgICAgICBoZWFkZXIob2JqKSB7XHJcbiAgICAgICAgICAgIC8vIFRPRE8gYWxzbyBmb3JtYXQgQ29tcG9uZW50UHVibGljSW5zdGFuY2UgJiBjdHguc2xvdHMvYXR0cnMgaW4gc2V0dXBcclxuICAgICAgICAgICAgaWYgKCFpc09iamVjdChvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqLl9faXNWdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbJ2RpdicsIHZ1ZVN0eWxlLCBgVnVlSW5zdGFuY2VgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlZihvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCBnZW5SZWZGbGFnKG9iaildLFxyXG4gICAgICAgICAgICAgICAgICAgICc8JyxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXRWYWx1ZShvYmoudmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgICAgIGA+YFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1JlYWN0aXZlKG9iaikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgWydzcGFuJywgdnVlU3R5bGUsIGlzU2hhbGxvdyhvYmopID8gJ1NoYWxsb3dSZWFjdGl2ZScgOiAnUmVhY3RpdmUnXSxcclxuICAgICAgICAgICAgICAgICAgICAnPCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0VmFsdWUob2JqKSxcclxuICAgICAgICAgICAgICAgICAgICBgPiR7aXNSZWFkb25seShvYmopID8gYCAocmVhZG9ubHkpYCA6IGBgfWBcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNSZWFkb25seShvYmopKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIHZ1ZVN0eWxlLCBpc1NoYWxsb3cob2JqKSA/ICdTaGFsbG93UmVhZG9ubHknIDogJ1JlYWRvbmx5J10sXHJcbiAgICAgICAgICAgICAgICAgICAgJzwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKG9iaiksXHJcbiAgICAgICAgICAgICAgICAgICAgJz4nXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzQm9keShvYmopIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1Z1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJvZHkob2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqLl9faXNWdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uZm9ybWF0SW5zdGFuY2Uob2JqLiQpXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZ1bmN0aW9uIGZvcm1hdEluc3RhbmNlKGluc3RhbmNlKSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2tzID0gW107XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnR5cGUucHJvcHMgJiYgaW5zdGFuY2UucHJvcHMpIHtcclxuICAgICAgICAgICAgYmxvY2tzLnB1c2goY3JlYXRlSW5zdGFuY2VCbG9jaygncHJvcHMnLCB0b1JhdyhpbnN0YW5jZS5wcm9wcykpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLnNldHVwU3RhdGUgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdzZXR1cCcsIGluc3RhbmNlLnNldHVwU3RhdGUpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmRhdGEgIT09IEVNUFRZX09CSikge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdkYXRhJywgdG9SYXcoaW5zdGFuY2UuZGF0YSkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29tcHV0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2NvbXB1dGVkJyk7XHJcbiAgICAgICAgaWYgKGNvbXB1dGVkKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUluc3RhbmNlQmxvY2soJ2NvbXB1dGVkJywgY29tcHV0ZWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaW5qZWN0ZWQgPSBleHRyYWN0S2V5cyhpbnN0YW5jZSwgJ2luamVjdCcpO1xyXG4gICAgICAgIGlmIChpbmplY3RlZCkge1xyXG4gICAgICAgICAgICBibG9ja3MucHVzaChjcmVhdGVJbnN0YW5jZUJsb2NrKCdpbmplY3RlZCcsIGluamVjdGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJsb2Nrcy5wdXNoKFtcclxuICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgIHt9LFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnc3BhbicsXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGtleXdvcmRTdHlsZS5zdHlsZSArICc7b3BhY2l0eTowLjY2J1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICckIChpbnRlcm5hbCk6ICdcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgWydvYmplY3QnLCB7IG9iamVjdDogaW5zdGFuY2UgfV1cclxuICAgICAgICBdKTtcclxuICAgICAgICByZXR1cm4gYmxvY2tzO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VCbG9jayh0eXBlLCB0YXJnZXQpIHtcclxuICAgICAgICB0YXJnZXQgPSBleHRlbmQoe30sIHRhcmdldCk7XHJcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyh0YXJnZXQpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywge31dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgeyBzdHlsZTogJ2xpbmUtaGVpZ2h0OjEuMjVlbTttYXJnaW4tYm90dG9tOjAuNmVtJyB9LFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ2NvbG9yOiM0NzY1ODInXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdHlwZVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ3BhZGRpbmctbGVmdDoxLjI1ZW0nXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmtleXModGFyZ2V0KS5tYXAoa2V5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc3BhbicsIGtleXdvcmRTdHlsZSwga2V5ICsgJzogJ10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdFZhbHVlKHRhcmdldFtrZXldLCBmYWxzZSlcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2LCBhc1JhdyA9IHRydWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbJ3NwYW4nLCBudW1iZXJTdHlsZSwgdl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywgc3RyaW5nU3R5bGUsIEpTT04uc3RyaW5naWZ5KHYpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHYgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICByZXR1cm4gWydzcGFuJywga2V5d29yZFN0eWxlLCB2XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3QodikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnb2JqZWN0JywgeyBvYmplY3Q6IGFzUmF3ID8gdG9SYXcodikgOiB2IH1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnc3BhbicsIHN0cmluZ1N0eWxlLCBTdHJpbmcodildO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGV4dHJhY3RLZXlzKGluc3RhbmNlLCB0eXBlKSB7XHJcbiAgICAgICAgY29uc3QgQ29tcCA9IGluc3RhbmNlLnR5cGU7XHJcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oQ29tcCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBleHRyYWN0ZWQgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBpbnN0YW5jZS5jdHgpIHtcclxuICAgICAgICAgICAgaWYgKGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIGV4dHJhY3RlZFtrZXldID0gaW5zdGFuY2UuY3R4W2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGV4dHJhY3RlZDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzS2V5T2ZUeXBlKENvbXAsIGtleSwgdHlwZSkge1xyXG4gICAgICAgIGNvbnN0IG9wdHMgPSBDb21wW3R5cGVdO1xyXG4gICAgICAgIGlmICgoaXNBcnJheShvcHRzKSAmJiBvcHRzLmluY2x1ZGVzKGtleSkpIHx8XHJcbiAgICAgICAgICAgIChpc09iamVjdChvcHRzKSAmJiBrZXkgaW4gb3B0cykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChDb21wLmV4dGVuZHMgJiYgaXNLZXlPZlR5cGUoQ29tcC5leHRlbmRzLCBrZXksIHR5cGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQ29tcC5taXhpbnMgJiYgQ29tcC5taXhpbnMuc29tZShtID0+IGlzS2V5T2ZUeXBlKG0sIGtleSwgdHlwZSkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdlblJlZkZsYWcodikge1xyXG4gICAgICAgIGlmIChpc1NoYWxsb3codikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGBTaGFsbG93UmVmYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHYuZWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgQ29tcHV0ZWRSZWZgO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYFJlZmA7XHJcbiAgICB9XHJcbiAgICBpZiAod2luZG93LmRldnRvb2xzRm9ybWF0dGVycykge1xyXG4gICAgICAgIHdpbmRvdy5kZXZ0b29sc0Zvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2luZG93LmRldnRvb2xzRm9ybWF0dGVycyA9IFtmb3JtYXR0ZXJdO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIHdpdGhNZW1vKG1lbW8sIHJlbmRlciwgY2FjaGUsIGluZGV4KSB7XHJcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtpbmRleF07XHJcbiAgICBpZiAoY2FjaGVkICYmIGlzTWVtb1NhbWUoY2FjaGVkLCBtZW1vKSkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCByZXQgPSByZW5kZXIoKTtcclxuICAgIC8vIHNoYWxsb3cgY2xvbmVcclxuICAgIHJldC5tZW1vID0gbWVtby5zbGljZSgpO1xyXG4gICAgcmV0dXJuIChjYWNoZVtpbmRleF0gPSByZXQpO1xyXG59XHJcbmZ1bmN0aW9uIGlzTWVtb1NhbWUoY2FjaGVkLCBtZW1vKSB7XHJcbiAgICBjb25zdCBwcmV2ID0gY2FjaGVkLm1lbW87XHJcbiAgICBpZiAocHJldi5sZW5ndGggIT0gbWVtby5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXYubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAocHJldltpXSAhPT0gbWVtb1tpXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gbWFrZSBzdXJlIHRvIGxldCBwYXJlbnQgYmxvY2sgdHJhY2sgaXQgd2hlbiByZXR1cm5pbmcgY2FjaGVkXHJcbiAgICBpZiAoaXNCbG9ja1RyZWVFbmFibGVkID4gMCAmJiBjdXJyZW50QmxvY2spIHtcclxuICAgICAgICBjdXJyZW50QmxvY2sucHVzaChjYWNoZWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cblxuLy8gQ29yZSBBUEkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmNvbnN0IHZlcnNpb24gPSBcIjMuMi4yOVwiO1xyXG5jb25zdCBfc3NyVXRpbHMgPSB7XHJcbiAgICBjcmVhdGVDb21wb25lbnRJbnN0YW5jZSxcclxuICAgIHNldHVwQ29tcG9uZW50LFxyXG4gICAgcmVuZGVyQ29tcG9uZW50Um9vdCxcclxuICAgIHNldEN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSxcclxuICAgIGlzVk5vZGUsXHJcbiAgICBub3JtYWxpemVWTm9kZVxyXG59O1xyXG4vKipcclxuICogU1NSIHV0aWxzIGZvciBcXEB2dWUvc2VydmVyLXJlbmRlcmVyLiBPbmx5IGV4cG9zZWQgaW4gY2pzIGJ1aWxkcy5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBzc3JVdGlscyA9IChfc3NyVXRpbHMgKTtcclxuLyoqXHJcbiAqIEBpbnRlcm5hbCBvbmx5IGV4cG9zZWQgaW4gY29tcGF0IGJ1aWxkc1xyXG4gKi9cclxuY29uc3QgcmVzb2x2ZUZpbHRlciA9IG51bGw7XHJcbi8qKlxyXG4gKiBAaW50ZXJuYWwgb25seSBleHBvc2VkIGluIGNvbXBhdCBidWlsZHMuXHJcbiAqL1xyXG5jb25zdCBjb21wYXRVdGlscyA9IChudWxsKTtcblxuZXhwb3J0IHsgQmFzZVRyYW5zaXRpb24sIENvbW1lbnQsIEZyYWdtZW50LCBLZWVwQWxpdmUsIFN0YXRpYywgU3VzcGVuc2UsIFRlbGVwb3J0LCBUZXh0LCBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZywgY2FsbFdpdGhFcnJvckhhbmRsaW5nLCBjbG9uZVZOb2RlLCBjb21wYXRVdGlscywgY29tcHV0ZWQsIGNyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUsIGNyZWF0ZUVsZW1lbnRCbG9jaywgY3JlYXRlQmFzZVZOb2RlIGFzIGNyZWF0ZUVsZW1lbnRWTm9kZSwgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsIGNyZWF0ZVByb3BzUmVzdFByb3h5LCBjcmVhdGVSZW5kZXJlciwgY3JlYXRlU2xvdHMsIGNyZWF0ZVN0YXRpY1ZOb2RlLCBjcmVhdGVUZXh0Vk5vZGUsIGNyZWF0ZVZOb2RlLCBkZWZpbmVBc3luY0NvbXBvbmVudCwgZGVmaW5lQ29tcG9uZW50LCBkZWZpbmVFbWl0cywgZGVmaW5lRXhwb3NlLCBkZWZpbmVQcm9wcywgZGV2dG9vbHMsIGdldEN1cnJlbnRJbnN0YW5jZSwgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLCBndWFyZFJlYWN0aXZlUHJvcHMsIGgsIGhhbmRsZUVycm9yLCBpbml0Q3VzdG9tRm9ybWF0dGVyLCBpbmplY3QsIGlzTWVtb1NhbWUsIGlzUnVudGltZU9ubHksIGlzVk5vZGUsIG1lcmdlRGVmYXVsdHMsIG1lcmdlUHJvcHMsIG5leHRUaWNrLCBvbkFjdGl2YXRlZCwgb25CZWZvcmVNb3VudCwgb25CZWZvcmVVbm1vdW50LCBvbkJlZm9yZVVwZGF0ZSwgb25EZWFjdGl2YXRlZCwgb25FcnJvckNhcHR1cmVkLCBvbk1vdW50ZWQsIG9uUmVuZGVyVHJhY2tlZCwgb25SZW5kZXJUcmlnZ2VyZWQsIG9uU2VydmVyUHJlZmV0Y2gsIG9uVW5tb3VudGVkLCBvblVwZGF0ZWQsIG9wZW5CbG9jaywgcG9wU2NvcGVJZCwgcHJvdmlkZSwgcHVzaFNjb3BlSWQsIHF1ZXVlUG9zdEZsdXNoQ2IsIHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyLCByZW5kZXJMaXN0LCByZW5kZXJTbG90LCByZXNvbHZlQ29tcG9uZW50LCByZXNvbHZlRGlyZWN0aXZlLCByZXNvbHZlRHluYW1pY0NvbXBvbmVudCwgcmVzb2x2ZUZpbHRlciwgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcywgc2V0QmxvY2tUcmFja2luZywgc2V0RGV2dG9vbHNIb29rLCBzZXRUcmFuc2l0aW9uSG9va3MsIHNzckNvbnRleHRLZXksIHNzclV0aWxzLCB0b0hhbmRsZXJzLCB0cmFuc2Zvcm1WTm9kZUFyZ3MsIHVzZUF0dHJzLCB1c2VTU1JDb250ZXh0LCB1c2VTbG90cywgdXNlVHJhbnNpdGlvblN0YXRlLCB2ZXJzaW9uLCB3YXJuLCB3YXRjaCwgd2F0Y2hFZmZlY3QsIHdhdGNoUG9zdEVmZmVjdCwgd2F0Y2hTeW5jRWZmZWN0LCB3aXRoQXN5bmNDb250ZXh0LCB3aXRoQ3R4LCB3aXRoRGVmYXVsdHMsIHdpdGhEaXJlY3RpdmVzLCB3aXRoTWVtbywgd2l0aFNjb3BlSWQgfTtcbiIsImltcG9ydCB7IGNhbWVsaXplLCB3YXJuLCBjYWxsV2l0aEFzeW5jRXJyb3JIYW5kbGluZywgZGVmaW5lQ29tcG9uZW50LCBuZXh0VGljaywgY3JlYXRlVk5vZGUsIGdldEN1cnJlbnRJbnN0YW5jZSwgd2F0Y2hQb3N0RWZmZWN0LCBvbk1vdW50ZWQsIG9uVW5tb3VudGVkLCBGcmFnbWVudCwgU3RhdGljLCBoLCBCYXNlVHJhbnNpdGlvbiwgdXNlVHJhbnNpdGlvblN0YXRlLCBvblVwZGF0ZWQsIHRvUmF3LCBnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4sIHNldFRyYW5zaXRpb25Ib29rcywgcmVzb2x2ZVRyYW5zaXRpb25Ib29rcywgY3JlYXRlUmVuZGVyZXIsIGlzUnVudGltZU9ubHksIGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyIH0gZnJvbSAnQHZ1ZS9ydW50aW1lLWNvcmUnO1xuZXhwb3J0ICogZnJvbSAnQHZ1ZS9ydW50aW1lLWNvcmUnO1xuaW1wb3J0IHsgaXNTdHJpbmcsIGlzQXJyYXksIGh5cGhlbmF0ZSwgY2FwaXRhbGl6ZSwgaXNTcGVjaWFsQm9vbGVhbkF0dHIsIGluY2x1ZGVCb29sZWFuQXR0ciwgaXNPbiwgaXNNb2RlbExpc3RlbmVyLCBpc0Z1bmN0aW9uLCB0b051bWJlciwgY2FtZWxpemUgYXMgY2FtZWxpemUkMSwgZXh0ZW5kLCBFTVBUWV9PQkosIGlzT2JqZWN0LCBpbnZva2VBcnJheUZucywgbG9vc2VJbmRleE9mLCBpc1NldCwgbG9vc2VFcXVhbCwgaXNIVE1MVGFnLCBpc1NWR1RhZyB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3Qgc3ZnTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xyXG5jb25zdCBkb2MgPSAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogbnVsbCk7XHJcbmNvbnN0IHRlbXBsYXRlQ29udGFpbmVyID0gZG9jICYmIGRvYy5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xyXG5jb25zdCBub2RlT3BzID0ge1xyXG4gICAgaW5zZXJ0OiAoY2hpbGQsIHBhcmVudCwgYW5jaG9yKSA9PiB7XHJcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgYW5jaG9yIHx8IG51bGwpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZTogY2hpbGQgPT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGNoaWxkLnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVFbGVtZW50OiAodGFnLCBpc1NWRywgaXMsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBpc1NWR1xyXG4gICAgICAgICAgICA/IGRvYy5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHRhZylcclxuICAgICAgICAgICAgOiBkb2MuY3JlYXRlRWxlbWVudCh0YWcsIGlzID8geyBpcyB9IDogdW5kZWZpbmVkKTtcclxuICAgICAgICBpZiAodGFnID09PSAnc2VsZWN0JyAmJiBwcm9wcyAmJiBwcm9wcy5tdWx0aXBsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCBwcm9wcy5tdWx0aXBsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbDtcclxuICAgIH0sXHJcbiAgICBjcmVhdGVUZXh0OiB0ZXh0ID0+IGRvYy5jcmVhdGVUZXh0Tm9kZSh0ZXh0KSxcclxuICAgIGNyZWF0ZUNvbW1lbnQ6IHRleHQgPT4gZG9jLmNyZWF0ZUNvbW1lbnQodGV4dCksXHJcbiAgICBzZXRUZXh0OiAobm9kZSwgdGV4dCkgPT4ge1xyXG4gICAgICAgIG5vZGUubm9kZVZhbHVlID0gdGV4dDtcclxuICAgIH0sXHJcbiAgICBzZXRFbGVtZW50VGV4dDogKGVsLCB0ZXh0KSA9PiB7XHJcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgfSxcclxuICAgIHBhcmVudE5vZGU6IG5vZGUgPT4gbm9kZS5wYXJlbnROb2RlLFxyXG4gICAgbmV4dFNpYmxpbmc6IG5vZGUgPT4gbm9kZS5uZXh0U2libGluZyxcclxuICAgIHF1ZXJ5U2VsZWN0b3I6IHNlbGVjdG9yID0+IGRvYy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKSxcclxuICAgIHNldFNjb3BlSWQoZWwsIGlkKSB7XHJcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKGlkLCAnJyk7XHJcbiAgICB9LFxyXG4gICAgY2xvbmVOb2RlKGVsKSB7XHJcbiAgICAgICAgY29uc3QgY2xvbmVkID0gZWwuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgIC8vICMzMDcyXHJcbiAgICAgICAgLy8gLSBpbiBgcGF0Y2hET01Qcm9wYCwgd2Ugc3RvcmUgdGhlIGFjdHVhbCB2YWx1ZSBpbiB0aGUgYGVsLl92YWx1ZWAgcHJvcGVydHkuXHJcbiAgICAgICAgLy8gLSBub3JtYWxseSwgZWxlbWVudHMgdXNpbmcgYDp2YWx1ZWAgYmluZGluZ3Mgd2lsbCBub3QgYmUgaG9pc3RlZCwgYnV0IGlmXHJcbiAgICAgICAgLy8gICB0aGUgYm91bmQgdmFsdWUgaXMgYSBjb25zdGFudCwgZS5nLiBgOnZhbHVlPVwidHJ1ZVwiYCAtIHRoZXkgZG8gZ2V0XHJcbiAgICAgICAgLy8gICBob2lzdGVkLlxyXG4gICAgICAgIC8vIC0gaW4gcHJvZHVjdGlvbiwgaG9pc3RlZCBub2RlcyBhcmUgY2xvbmVkIHdoZW4gc3Vic2VxdWVudCBpbnNlcnRzLCBidXRcclxuICAgICAgICAvLyAgIGNsb25lTm9kZSgpIGRvZXMgbm90IGNvcHkgdGhlIGN1c3RvbSBwcm9wZXJ0eSB3ZSBhdHRhY2hlZC5cclxuICAgICAgICAvLyAtIFRoaXMgbWF5IG5lZWQgdG8gYWNjb3VudCBmb3Igb3RoZXIgY3VzdG9tIERPTSBwcm9wZXJ0aWVzIHdlIGF0dGFjaCB0b1xyXG4gICAgICAgIC8vICAgZWxlbWVudHMgaW4gYWRkaXRpb24gdG8gYF92YWx1ZWAgaW4gdGhlIGZ1dHVyZS5cclxuICAgICAgICBpZiAoYF92YWx1ZWAgaW4gZWwpIHtcclxuICAgICAgICAgICAgY2xvbmVkLl92YWx1ZSA9IGVsLl92YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsb25lZDtcclxuICAgIH0sXHJcbiAgICAvLyBfX1VOU0FGRV9fXHJcbiAgICAvLyBSZWFzb246IGlubmVySFRNTC5cclxuICAgIC8vIFN0YXRpYyBjb250ZW50IGhlcmUgY2FuIG9ubHkgY29tZSBmcm9tIGNvbXBpbGVkIHRlbXBsYXRlcy5cclxuICAgIC8vIEFzIGxvbmcgYXMgdGhlIHVzZXIgb25seSB1c2VzIHRydXN0ZWQgdGVtcGxhdGVzLCB0aGlzIGlzIHNhZmUuXHJcbiAgICBpbnNlcnRTdGF0aWNDb250ZW50KGNvbnRlbnQsIHBhcmVudCwgYW5jaG9yLCBpc1NWRywgc3RhcnQsIGVuZCkge1xyXG4gICAgICAgIC8vIDxwYXJlbnQ+IGJlZm9yZSB8IGZpcnN0IC4uLiBsYXN0IHwgYW5jaG9yIDwvcGFyZW50PlxyXG4gICAgICAgIGNvbnN0IGJlZm9yZSA9IGFuY2hvciA/IGFuY2hvci5wcmV2aW91c1NpYmxpbmcgOiBwYXJlbnQubGFzdENoaWxkO1xyXG4gICAgICAgIC8vICM1MzA4IGNhbiBvbmx5IHRha2UgY2FjaGVkIHBhdGggaWY6XHJcbiAgICAgICAgLy8gLSBoYXMgYSBzaW5nbGUgcm9vdCBub2RlXHJcbiAgICAgICAgLy8gLSBuZXh0U2libGluZyBpbmZvIGlzIHN0aWxsIGF2YWlsYWJsZVxyXG4gICAgICAgIGlmIChzdGFydCAmJiAoc3RhcnQgPT09IGVuZCB8fCBzdGFydC5uZXh0U2libGluZykpIHtcclxuICAgICAgICAgICAgLy8gY2FjaGVkXHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHN0YXJ0LmNsb25lTm9kZSh0cnVlKSwgYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PT0gZW5kIHx8ICEoc3RhcnQgPSBzdGFydC5uZXh0U2libGluZykpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGZyZXNoIGluc2VydFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZUNvbnRhaW5lci5pbm5lckhUTUwgPSBpc1NWRyA/IGA8c3ZnPiR7Y29udGVudH08L3N2Zz5gIDogY29udGVudDtcclxuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNvbnRhaW5lci5jb250ZW50O1xyXG4gICAgICAgICAgICBpZiAoaXNTVkcpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBvdXRlciBzdmcgd3JhcHBlclxyXG4gICAgICAgICAgICAgICAgY29uc3Qgd3JhcHBlciA9IHRlbXBsYXRlLmZpcnN0Q2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAod3JhcHBlci5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUuYXBwZW5kQ2hpbGQod3JhcHBlci5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnJlbW92ZUNoaWxkKHdyYXBwZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUodGVtcGxhdGUsIGFuY2hvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIC8vIGZpcnN0XHJcbiAgICAgICAgICAgIGJlZm9yZSA/IGJlZm9yZS5uZXh0U2libGluZyA6IHBhcmVudC5maXJzdENoaWxkLFxyXG4gICAgICAgICAgICAvLyBsYXN0XHJcbiAgICAgICAgICAgIGFuY2hvciA/IGFuY2hvci5wcmV2aW91c1NpYmxpbmcgOiBwYXJlbnQubGFzdENoaWxkXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxufTtcblxuLy8gY29tcGlsZXIgc2hvdWxkIG5vcm1hbGl6ZSBjbGFzcyArIDpjbGFzcyBiaW5kaW5ncyBvbiB0aGUgc2FtZSBlbGVtZW50XHJcbi8vIGludG8gYSBzaW5nbGUgYmluZGluZyBbJ3N0YXRpY0NsYXNzJywgZHluYW1pY11cclxuZnVuY3Rpb24gcGF0Y2hDbGFzcyhlbCwgdmFsdWUsIGlzU1ZHKSB7XHJcbiAgICAvLyBkaXJlY3RseSBzZXR0aW5nIGNsYXNzTmFtZSBzaG91bGQgYmUgZmFzdGVyIHRoYW4gc2V0QXR0cmlidXRlIGluIHRoZW9yeVxyXG4gICAgLy8gaWYgdGhpcyBpcyBhbiBlbGVtZW50IGR1cmluZyBhIHRyYW5zaXRpb24sIHRha2UgdGhlIHRlbXBvcmFyeSB0cmFuc2l0aW9uXHJcbiAgICAvLyBjbGFzc2VzIGludG8gYWNjb3VudC5cclxuICAgIGNvbnN0IHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3Z0YztcclxuICAgIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcykge1xyXG4gICAgICAgIHZhbHVlID0gKHZhbHVlID8gW3ZhbHVlLCAuLi50cmFuc2l0aW9uQ2xhc3Nlc10gOiBbLi4udHJhbnNpdGlvbkNsYXNzZXNdKS5qb2luKCcgJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU1ZHKSB7XHJcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIHBhdGNoU3R5bGUoZWwsIHByZXYsIG5leHQpIHtcclxuICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XHJcbiAgICBjb25zdCBpc0Nzc1N0cmluZyA9IGlzU3RyaW5nKG5leHQpO1xyXG4gICAgaWYgKG5leHQgJiYgIWlzQ3NzU3RyaW5nKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbmV4dCkge1xyXG4gICAgICAgICAgICBzZXRTdHlsZShzdHlsZSwga2V5LCBuZXh0W2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocHJldiAmJiAhaXNTdHJpbmcocHJldikpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcHJldikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRba2V5XSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0U3R5bGUoc3R5bGUsIGtleSwgJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudERpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xyXG4gICAgICAgIGlmIChpc0Nzc1N0cmluZykge1xyXG4gICAgICAgICAgICBpZiAocHJldiAhPT0gbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgc3R5bGUuY3NzVGV4dCA9IG5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocHJldikge1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGluZGljYXRlcyB0aGF0IHRoZSBgZGlzcGxheWAgb2YgdGhlIGVsZW1lbnQgaXMgY29udHJvbGxlZCBieSBgdi1zaG93YCxcclxuICAgICAgICAvLyBzbyB3ZSBhbHdheXMga2VlcCB0aGUgY3VycmVudCBgZGlzcGxheWAgdmFsdWUgcmVnYXJkbGVzcyBvZiB0aGUgYHN0eWxlYFxyXG4gICAgICAgIC8vIHZhbHVlLCB0aHVzIGhhbmRpbmcgb3ZlciBjb250cm9sIHRvIGB2LXNob3dgLlxyXG4gICAgICAgIGlmICgnX3ZvZCcgaW4gZWwpIHtcclxuICAgICAgICAgICAgc3R5bGUuZGlzcGxheSA9IGN1cnJlbnREaXNwbGF5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jb25zdCBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xyXG5mdW5jdGlvbiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdmFsKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWwpKSB7XHJcbiAgICAgICAgdmFsLmZvckVhY2godiA9PiBzZXRTdHlsZShzdHlsZSwgbmFtZSwgdikpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKG5hbWUuc3RhcnRzV2l0aCgnLS0nKSkge1xyXG4gICAgICAgICAgICAvLyBjdXN0b20gcHJvcGVydHkgZGVmaW5pdGlvblxyXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgcHJlZml4ZWQgPSBhdXRvUHJlZml4KHN0eWxlLCBuYW1lKTtcclxuICAgICAgICAgICAgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gIWltcG9ydGFudFxyXG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0UHJvcGVydHkoaHlwaGVuYXRlKHByZWZpeGVkKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3R5bGVbcHJlZml4ZWRdID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IHByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ21zJ107XHJcbmNvbnN0IHByZWZpeENhY2hlID0ge307XHJcbmZ1bmN0aW9uIGF1dG9QcmVmaXgoc3R5bGUsIHJhd05hbWUpIHtcclxuICAgIGNvbnN0IGNhY2hlZCA9IHByZWZpeENhY2hlW3Jhd05hbWVdO1xyXG4gICAgaWYgKGNhY2hlZCkge1xyXG4gICAgICAgIHJldHVybiBjYWNoZWQ7XHJcbiAgICB9XHJcbiAgICBsZXQgbmFtZSA9IGNhbWVsaXplKHJhd05hbWUpO1xyXG4gICAgaWYgKG5hbWUgIT09ICdmaWx0ZXInICYmIG5hbWUgaW4gc3R5bGUpIHtcclxuICAgICAgICByZXR1cm4gKHByZWZpeENhY2hlW3Jhd05hbWVdID0gbmFtZSk7XHJcbiAgICB9XHJcbiAgICBuYW1lID0gY2FwaXRhbGl6ZShuYW1lKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwcmVmaXhlZCA9IHByZWZpeGVzW2ldICsgbmFtZTtcclxuICAgICAgICBpZiAocHJlZml4ZWQgaW4gc3R5bGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChwcmVmaXhDYWNoZVtyYXdOYW1lXSA9IHByZWZpeGVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmF3TmFtZTtcclxufVxuXG5jb25zdCB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xyXG5mdW5jdGlvbiBwYXRjaEF0dHIoZWwsIGtleSwgdmFsdWUsIGlzU1ZHLCBpbnN0YW5jZSkge1xyXG4gICAgaWYgKGlzU1ZHICYmIGtleS5zdGFydHNXaXRoKCd4bGluazonKSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleS5zbGljZSg2LCBrZXkubGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBub3RlIHdlIGFyZSBvbmx5IGNoZWNraW5nIGJvb2xlYW4gYXR0cmlidXRlcyB0aGF0IGRvbid0IGhhdmUgYVxyXG4gICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgZG9tIHByb3Agb2YgdGhlIHNhbWUgbmFtZSBoZXJlLlxyXG4gICAgICAgIGNvbnN0IGlzQm9vbGVhbiA9IGlzU3BlY2lhbEJvb2xlYW5BdHRyKGtleSk7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGlzQm9vbGVhbiAmJiAhaW5jbHVkZUJvb2xlYW5BdHRyKHZhbHVlKSkpIHtcclxuICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBpc0Jvb2xlYW4gPyAnJyA6IHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLy8gX19VTlNBRkVfX1xyXG4vLyBmdW5jdGlvbnMuIFRoZSB1c2VyIGlzIHJlc3BvbnNpYmxlIGZvciB1c2luZyB0aGVtIHdpdGggb25seSB0cnVzdGVkIGNvbnRlbnQuXHJcbmZ1bmN0aW9uIHBhdGNoRE9NUHJvcChlbCwga2V5LCB2YWx1ZSwgXHJcbi8vIHRoZSBmb2xsb3dpbmcgYXJncyBhcmUgcGFzc2VkIG9ubHkgZHVlIHRvIHBvdGVudGlhbCBpbm5lckhUTUwvdGV4dENvbnRlbnRcclxuLy8gb3ZlcnJpZGluZyBleGlzdGluZyBWTm9kZXMsIGluIHdoaWNoIGNhc2UgdGhlIG9sZCB0cmVlIG11c3QgYmUgcHJvcGVybHlcclxuLy8gdW5tb3VudGVkLlxyXG5wcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbikge1xyXG4gICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgfHwga2V5ID09PSAndGV4dENvbnRlbnQnKSB7XHJcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xyXG4gICAgICAgICAgICB1bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuLCBwYXJlbnRDb21wb25lbnQsIHBhcmVudFN1c3BlbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxba2V5XSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChrZXkgPT09ICd2YWx1ZScgJiZcclxuICAgICAgICBlbC50YWdOYW1lICE9PSAnUFJPR1JFU1MnICYmXHJcbiAgICAgICAgLy8gY3VzdG9tIGVsZW1lbnRzIG1heSB1c2UgX3ZhbHVlIGludGVybmFsbHlcclxuICAgICAgICAhZWwudGFnTmFtZS5pbmNsdWRlcygnLScpKSB7XHJcbiAgICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcclxuICAgICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxyXG4gICAgICAgIGVsLl92YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XHJcbiAgICAgICAgaWYgKGVsLnZhbHVlICE9PSBuZXdWYWx1ZSB8fFxyXG4gICAgICAgICAgICAvLyAjNDk1NjogYWx3YXlzIHNldCBmb3IgT1BUSU9OIGVsZW1lbnRzIGJlY2F1c2UgaXRzIHZhbHVlIGZhbGxzIGJhY2sgdG9cclxuICAgICAgICAgICAgLy8gdGV4dENvbnRlbnQgaWYgbm8gdmFsdWUgYXR0cmlidXRlIGlzIHByZXNlbnQuIEFuZCBzZXR0aW5nIC52YWx1ZSBmb3JcclxuICAgICAgICAgICAgLy8gT1BUSU9OIGhhcyBubyBzaWRlIGVmZmVjdFxyXG4gICAgICAgICAgICBlbC50YWdOYW1lID09PSAnT1BUSU9OJykge1xyXG4gICAgICAgICAgICBlbC52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PSBudWxsKSB7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVvZiBlbFtrZXldO1xyXG4gICAgICAgIGlmICh0eXBlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgLy8gZS5nLiA8c2VsZWN0IG11bHRpcGxlPiBjb21waWxlcyB0byB7IG11bHRpcGxlOiAnJyB9XHJcbiAgICAgICAgICAgIGVsW2tleV0gPSBpbmNsdWRlQm9vbGVhbkF0dHIodmFsdWUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09IG51bGwgJiYgdHlwZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgLy8gZS5nLiA8ZGl2IDppZD1cIm51bGxcIj5cclxuICAgICAgICAgICAgZWxba2V5XSA9ICcnO1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAvLyBlLmcuIDxpbWcgOndpZHRoPVwibnVsbFwiPlxyXG4gICAgICAgICAgICAvLyB0aGUgdmFsdWUgb2Ygc29tZSBJREwgYXR0ciBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLCBlLmcuIGlucHV0LnNpemUgPSAwIC0+IGVycm9yXHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBlbFtrZXldID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoX2EpIHsgfVxyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHNvbWUgcHJvcGVydGllcyBwZXJmb3JtIHZhbHVlIHZhbGlkYXRpb24gYW5kIHRocm93XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGVsW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgc2V0dGluZyBwcm9wIFwiJHtrZXl9XCIgb24gPCR7ZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpfT46IGAgK1xyXG4gICAgICAgICAgICAgICAgYHZhbHVlICR7dmFsdWV9IGlzIGludmFsaWQuYCwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXHJcbmxldCBfZ2V0Tm93ID0gRGF0ZS5ub3c7XHJcbmxldCBza2lwVGltZXN0YW1wQ2hlY2sgPSBmYWxzZTtcclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAvLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxyXG4gICAgLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcclxuICAgIC8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxyXG4gICAgLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxyXG4gICAgaWYgKF9nZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcCkge1xyXG4gICAgICAgIC8vIGlmIHRoZSBsb3ctcmVzIHRpbWVzdGFtcCB3aGljaCBpcyBiaWdnZXIgdGhhbiB0aGUgZXZlbnQgdGltZXN0YW1wXHJcbiAgICAgICAgLy8gKHdoaWNoIGlzIGV2YWx1YXRlZCBBRlRFUikgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcclxuICAgICAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lcnMgYXMgd2VsbC5cclxuICAgICAgICBfZ2V0Tm93ID0gKCkgPT4gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICB9XHJcbiAgICAvLyAjMzQ4NTogRmlyZWZveCA8PSA1MyBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvblxyXG4gICAgLy8gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzbyBzYWZlIHRvIGV4Y2x1ZGUuXHJcbiAgICBjb25zdCBmZk1hdGNoID0gbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS9pKTtcclxuICAgIHNraXBUaW1lc3RhbXBDaGVjayA9ICEhKGZmTWF0Y2ggJiYgTnVtYmVyKGZmTWF0Y2hbMV0pIDw9IDUzKTtcclxufVxyXG4vLyBUbyBhdm9pZCB0aGUgb3ZlcmhlYWQgb2YgcmVwZWF0ZWRseSBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpLCB3ZSBjYWNoZVxyXG4vLyBhbmQgdXNlIHRoZSBzYW1lIHRpbWVzdGFtcCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVycyBhdHRhY2hlZCBpbiB0aGUgc2FtZSB0aWNrLlxyXG5sZXQgY2FjaGVkTm93ID0gMDtcclxuY29uc3QgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG5jb25zdCByZXNldCA9ICgpID0+IHtcclxuICAgIGNhY2hlZE5vdyA9IDA7XHJcbn07XHJcbmNvbnN0IGdldE5vdyA9ICgpID0+IGNhY2hlZE5vdyB8fCAocC50aGVuKHJlc2V0KSwgKGNhY2hlZE5vdyA9IF9nZXROb3coKSkpO1xyXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKGVsLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcclxuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xyXG59XHJcbmZ1bmN0aW9uIHBhdGNoRXZlbnQoZWwsIHJhd05hbWUsIHByZXZWYWx1ZSwgbmV4dFZhbHVlLCBpbnN0YW5jZSA9IG51bGwpIHtcclxuICAgIC8vIHZlaSA9IHZ1ZSBldmVudCBpbnZva2Vyc1xyXG4gICAgY29uc3QgaW52b2tlcnMgPSBlbC5fdmVpIHx8IChlbC5fdmVpID0ge30pO1xyXG4gICAgY29uc3QgZXhpc3RpbmdJbnZva2VyID0gaW52b2tlcnNbcmF3TmFtZV07XHJcbiAgICBpZiAobmV4dFZhbHVlICYmIGV4aXN0aW5nSW52b2tlcikge1xyXG4gICAgICAgIC8vIHBhdGNoXHJcbiAgICAgICAgZXhpc3RpbmdJbnZva2VyLnZhbHVlID0gbmV4dFZhbHVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgW25hbWUsIG9wdGlvbnNdID0gcGFyc2VOYW1lKHJhd05hbWUpO1xyXG4gICAgICAgIGlmIChuZXh0VmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gYWRkXHJcbiAgICAgICAgICAgIGNvbnN0IGludm9rZXIgPSAoaW52b2tlcnNbcmF3TmFtZV0gPSBjcmVhdGVJbnZva2VyKG5leHRWYWx1ZSwgaW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgaW52b2tlciwgb3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV4aXN0aW5nSW52b2tlcikge1xyXG4gICAgICAgICAgICAvLyByZW1vdmVcclxuICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbCwgbmFtZSwgZXhpc3RpbmdJbnZva2VyLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgaW52b2tlcnNbcmF3TmFtZV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IG9wdGlvbnNNb2RpZmllclJFID0gLyg/Ok9uY2V8UGFzc2l2ZXxDYXB0dXJlKSQvO1xyXG5mdW5jdGlvbiBwYXJzZU5hbWUobmFtZSkge1xyXG4gICAgbGV0IG9wdGlvbnM7XHJcbiAgICBpZiAob3B0aW9uc01vZGlmaWVyUkUudGVzdChuYW1lKSkge1xyXG4gICAgICAgIG9wdGlvbnMgPSB7fTtcclxuICAgICAgICBsZXQgbTtcclxuICAgICAgICB3aGlsZSAoKG0gPSBuYW1lLm1hdGNoKG9wdGlvbnNNb2RpZmllclJFKSkpIHtcclxuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgbmFtZS5sZW5ndGggLSBtWzBdLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIG9wdGlvbnNbbVswXS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtoeXBoZW5hdGUobmFtZS5zbGljZSgyKSksIG9wdGlvbnNdO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUludm9rZXIoaW5pdGlhbFZhbHVlLCBpbnN0YW5jZSkge1xyXG4gICAgY29uc3QgaW52b2tlciA9IChlKSA9PiB7XHJcbiAgICAgICAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxyXG4gICAgICAgIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXHJcbiAgICAgICAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXHJcbiAgICAgICAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxyXG4gICAgICAgIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcclxuICAgICAgICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXHJcbiAgICAgICAgY29uc3QgdGltZVN0YW1wID0gZS50aW1lU3RhbXAgfHwgX2dldE5vdygpO1xyXG4gICAgICAgIGlmIChza2lwVGltZXN0YW1wQ2hlY2sgfHwgdGltZVN0YW1wID49IGludm9rZXIuYXR0YWNoZWQgLSAxKSB7XHJcbiAgICAgICAgICAgIGNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nKHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIGludm9rZXIudmFsdWUpLCBpbnN0YW5jZSwgNSAvKiBOQVRJVkVfRVZFTlRfSEFORExFUiAqLywgW2VdKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaW52b2tlci52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuICAgIGludm9rZXIuYXR0YWNoZWQgPSBnZXROb3coKTtcclxuICAgIHJldHVybiBpbnZva2VyO1xyXG59XHJcbmZ1bmN0aW9uIHBhdGNoU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKGUsIHZhbHVlKSB7XHJcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbFN0b3AgPSBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcclxuICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgb3JpZ2luYWxTdG9wLmNhbGwoZSk7XHJcbiAgICAgICAgICAgIGUuX3N0b3BwZWQgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChmbiA9PiAoZSkgPT4gIWUuX3N0b3BwZWQgJiYgZm4gJiYgZm4oZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IG5hdGl2ZU9uUkUgPSAvXm9uW2Etel0vO1xyXG5jb25zdCBwYXRjaFByb3AgPSAoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIGlzU1ZHID0gZmFsc2UsIHByZXZDaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBwYXJlbnRTdXNwZW5zZSwgdW5tb3VudENoaWxkcmVuKSA9PiB7XHJcbiAgICBpZiAoa2V5ID09PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgcGF0Y2hDbGFzcyhlbCwgbmV4dFZhbHVlLCBpc1NWRyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcclxuICAgICAgICBwYXRjaFN0eWxlKGVsLCBwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09uKGtleSkpIHtcclxuICAgICAgICAvLyBpZ25vcmUgdi1tb2RlbCBsaXN0ZW5lcnNcclxuICAgICAgICBpZiAoIWlzTW9kZWxMaXN0ZW5lcihrZXkpKSB7XHJcbiAgICAgICAgICAgIHBhdGNoRXZlbnQoZWwsIGtleSwgcHJldlZhbHVlLCBuZXh0VmFsdWUsIHBhcmVudENvbXBvbmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoa2V5WzBdID09PSAnLidcclxuICAgICAgICA/ICgoa2V5ID0ga2V5LnNsaWNlKDEpKSwgdHJ1ZSlcclxuICAgICAgICA6IGtleVswXSA9PT0gJ14nXHJcbiAgICAgICAgICAgID8gKChrZXkgPSBrZXkuc2xpY2UoMSkpLCBmYWxzZSlcclxuICAgICAgICAgICAgOiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBpc1NWRykpIHtcclxuICAgICAgICBwYXRjaERPTVByb3AoZWwsIGtleSwgbmV4dFZhbHVlLCBwcmV2Q2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgcGFyZW50U3VzcGVuc2UsIHVubW91bnRDaGlsZHJlbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBzcGVjaWFsIGNhc2UgZm9yIDxpbnB1dCB2LW1vZGVsIHR5cGU9XCJjaGVja2JveFwiPiB3aXRoXHJcbiAgICAgICAgLy8gOnRydWUtdmFsdWUgJiA6ZmFsc2UtdmFsdWVcclxuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBkb20gcHJvcGVydGllcyBzaW5jZSBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlXHJcbiAgICAgICAgLy8gc3RyaW5naWZpZWQuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ3RydWUtdmFsdWUnKSB7XHJcbiAgICAgICAgICAgIGVsLl90cnVlVmFsdWUgPSBuZXh0VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ2ZhbHNlLXZhbHVlJykge1xyXG4gICAgICAgICAgICBlbC5fZmFsc2VWYWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGF0Y2hBdHRyKGVsLCBrZXksIG5leHRWYWx1ZSwgaXNTVkcpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzaG91bGRTZXRBc1Byb3AoZWwsIGtleSwgdmFsdWUsIGlzU1ZHKSB7XHJcbiAgICBpZiAoaXNTVkcpIHtcclxuICAgICAgICAvLyBtb3N0IGtleXMgbXVzdCBiZSBzZXQgYXMgYXR0cmlidXRlIG9uIHN2ZyBlbGVtZW50cyB0byB3b3JrXHJcbiAgICAgICAgLy8gLi4uZXhjZXB0IGlubmVySFRNTCAmIHRleHRDb250ZW50XHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgfHwga2V5ID09PSAndGV4dENvbnRlbnQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBvciBuYXRpdmUgb25jbGljayB3aXRoIGZ1bmN0aW9uIHZhbHVlc1xyXG4gICAgICAgIGlmIChrZXkgaW4gZWwgJiYgbmF0aXZlT25SRS50ZXN0KGtleSkgJiYgaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIHNwZWxsY2hlY2sgYW5kIGRyYWdnYWJsZSBhcmUgbnVtZXJhdGVkIGF0dHJzLCBob3dldmVyIHRoZWlyXHJcbiAgICAvLyBjb3JyZXNwb25kaW5nIERPTSBwcm9wZXJ0aWVzIGFyZSBhY3R1YWxseSBib29sZWFucyAtIHRoaXMgbGVhZHMgdG9cclxuICAgIC8vIHNldHRpbmcgaXQgd2l0aCBhIHN0cmluZyBcImZhbHNlXCIgdmFsdWUgbGVhZGluZyBpdCB0byBiZSBjb2VyY2VkIHRvXHJcbiAgICAvLyBgdHJ1ZWAsIHNvIHdlIG5lZWQgdG8gYWx3YXlzIHRyZWF0IHRoZW0gYXMgYXR0cmlidXRlcy5cclxuICAgIC8vIE5vdGUgdGhhdCBgY29udGVudEVkaXRhYmxlYCBkb2Vzbid0IGhhdmUgdGhpcyBwcm9ibGVtOiBpdHMgRE9NXHJcbiAgICAvLyBwcm9wZXJ0eSBpcyBhbHNvIGVudW1lcmF0ZWQgc3RyaW5nIHZhbHVlcy5cclxuICAgIGlmIChrZXkgPT09ICdzcGVsbGNoZWNrJyB8fCBrZXkgPT09ICdkcmFnZ2FibGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gIzE3ODcsICMyODQwIGZvcm0gcHJvcGVydHkgb24gZm9ybSBlbGVtZW50cyBpcyByZWFkb25seSBhbmQgbXVzdCBiZSBzZXQgYXNcclxuICAgIC8vIGF0dHJpYnV0ZS5cclxuICAgIGlmIChrZXkgPT09ICdmb3JtJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vICMxNTI2IDxpbnB1dCBsaXN0PiBtdXN0IGJlIHNldCBhcyBhdHRyaWJ1dGVcclxuICAgIGlmIChrZXkgPT09ICdsaXN0JyAmJiBlbC50YWdOYW1lID09PSAnSU5QVVQnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLy8gIzI3NjYgPHRleHRhcmVhIHR5cGU+IG11c3QgYmUgc2V0IGFzIGF0dHJpYnV0ZVxyXG4gICAgaWYgKGtleSA9PT0gJ3R5cGUnICYmIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBuYXRpdmUgb25jbGljayB3aXRoIHN0cmluZyB2YWx1ZSwgbXVzdCBiZSBzZXQgYXMgYXR0cmlidXRlXHJcbiAgICBpZiAobmF0aXZlT25SRS50ZXN0KGtleSkgJiYgaXNTdHJpbmcodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGtleSBpbiBlbDtcclxufVxuXG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGh5ZGF0ZSkge1xyXG4gICAgY29uc3QgQ29tcCA9IGRlZmluZUNvbXBvbmVudChvcHRpb25zKTtcclxuICAgIGNsYXNzIFZ1ZUN1c3RvbUVsZW1lbnQgZXh0ZW5kcyBWdWVFbGVtZW50IHtcclxuICAgICAgICBjb25zdHJ1Y3Rvcihpbml0aWFsUHJvcHMpIHtcclxuICAgICAgICAgICAgc3VwZXIoQ29tcCwgaW5pdGlhbFByb3BzLCBoeWRhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFZ1ZUN1c3RvbUVsZW1lbnQuZGVmID0gQ29tcDtcclxuICAgIHJldHVybiBWdWVDdXN0b21FbGVtZW50O1xyXG59XHJcbmNvbnN0IGRlZmluZVNTUkN1c3RvbUVsZW1lbnQgPSAoKG9wdGlvbnMpID0+IHtcclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIHJldHVybiBkZWZpbmVDdXN0b21FbGVtZW50KG9wdGlvbnMsIGh5ZHJhdGUpO1xyXG59KTtcclxuY29uc3QgQmFzZUNsYXNzID0gKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBIVE1MRWxlbWVudCA6IGNsYXNzIHtcclxufSk7XHJcbmNsYXNzIFZ1ZUVsZW1lbnQgZXh0ZW5kcyBCYXNlQ2xhc3Mge1xyXG4gICAgY29uc3RydWN0b3IoX2RlZiwgX3Byb3BzID0ge30sIGh5ZHJhdGUpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX2RlZiA9IF9kZWY7XHJcbiAgICAgICAgdGhpcy5fcHJvcHMgPSBfcHJvcHM7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQGludGVybmFsXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3Jlc29sdmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudWxsO1xyXG4gICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QgJiYgaHlkcmF0ZSkge1xyXG4gICAgICAgICAgICBoeWRyYXRlKHRoaXMuX2NyZWF0ZVZOb2RlKCksIHRoaXMuc2hhZG93Um9vdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHRoaXMuc2hhZG93Um9vdCkge1xyXG4gICAgICAgICAgICAgICAgd2FybihgQ3VzdG9tIGVsZW1lbnQgaGFzIHByZS1yZW5kZXJlZCBkZWNsYXJhdGl2ZSBzaGFkb3cgcm9vdCBidXQgaXMgbm90IGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBkZWZpbmVkIGFzIGh5ZHJhdGFibGUuIFVzZSBcXGBkZWZpbmVTU1JDdXN0b21FbGVtZW50XFxgLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xyXG4gICAgICAgIHRoaXMuX2Nvbm5lY3RlZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlRGVmKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgdGhpcy5fY29ubmVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2Nvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyKG51bGwsIHRoaXMuc2hhZG93Um9vdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogcmVzb2x2ZSBpbm5lciBjb21wb25lbnQgZGVmaW5pdGlvbiAoaGFuZGxlIHBvc3NpYmxlIGFzeW5jIGNvbXBvbmVudClcclxuICAgICAqL1xyXG4gICAgX3Jlc29sdmVEZWYoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Jlc29sdmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vIHNldCBpbml0aWFsIGF0dHJzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fc2V0QXR0cih0aGlzLmF0dHJpYnV0ZXNbaV0ubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdhdGNoIGZ1dHVyZSBhdHRyIGNoYW5nZXNcclxuICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbnMgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG0gb2YgbXV0YXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBdHRyKG0uYXR0cmlidXRlTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5vYnNlcnZlKHRoaXMsIHsgYXR0cmlidXRlczogdHJ1ZSB9KTtcclxuICAgICAgICBjb25zdCByZXNvbHZlID0gKGRlZikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB7IHByb3BzLCBzdHlsZXMgfSA9IGRlZjtcclxuICAgICAgICAgICAgY29uc3QgaGFzT3B0aW9ucyA9ICFpc0FycmF5KHByb3BzKTtcclxuICAgICAgICAgICAgY29uc3QgcmF3S2V5cyA9IHByb3BzID8gKGhhc09wdGlvbnMgPyBPYmplY3Qua2V5cyhwcm9wcykgOiBwcm9wcykgOiBbXTtcclxuICAgICAgICAgICAgLy8gY2FzdCBOdW1iZXItdHlwZSBwcm9wcyBzZXQgYmVmb3JlIHJlc29sdmVcclxuICAgICAgICAgICAgbGV0IG51bWJlclByb3BzO1xyXG4gICAgICAgICAgICBpZiAoaGFzT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHQgPSBwcm9wc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHQgPT09IE51bWJlciB8fCAob3B0ICYmIG9wdC50eXBlID09PSBOdW1iZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb3BzW2tleV0gPSB0b051bWJlcih0aGlzLl9wcm9wc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKG51bWJlclByb3BzIHx8IChudW1iZXJQcm9wcyA9IE9iamVjdC5jcmVhdGUobnVsbCkpKVtrZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbnVtYmVyUHJvcHMgPSBudW1iZXJQcm9wcztcclxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIHByb3BzIHNldCBwcmUtdXBncmFkZSBvciBjb25uZWN0XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5WzBdICE9PSAnXycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdGhpc1trZXldLCB0cnVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZGVmaW5pbmcgZ2V0dGVyL3NldHRlcnMgb24gcHJvdG90eXBlXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHJhd0tleXMubWFwKGNhbWVsaXplJDEpKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywga2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0UHJvcChrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0KHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRQcm9wKGtleSwgdmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhcHBseSBDU1NcclxuICAgICAgICAgICAgdGhpcy5fYXBwbHlTdHlsZXMoc3R5bGVzKTtcclxuICAgICAgICAgICAgLy8gaW5pdGlhbCByZW5kZXJcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBhc3luY0RlZiA9IHRoaXMuX2RlZi5fX2FzeW5jTG9hZGVyO1xyXG4gICAgICAgIGlmIChhc3luY0RlZikge1xyXG4gICAgICAgICAgICBhc3luY0RlZigpLnRoZW4ocmVzb2x2ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXNvbHZlKHRoaXMuX2RlZik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX3NldEF0dHIoa2V5KSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoa2V5KTtcclxuICAgICAgICBpZiAodGhpcy5fbnVtYmVyUHJvcHMgJiYgdGhpcy5fbnVtYmVyUHJvcHNba2V5XSkge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fc2V0UHJvcChjYW1lbGl6ZSQxKGtleSksIHZhbHVlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBfZ2V0UHJvcChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvcHNba2V5XTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIF9zZXRQcm9wKGtleSwgdmFsLCBzaG91bGRSZWZsZWN0ID0gdHJ1ZSwgc2hvdWxkVXBkYXRlID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICh2YWwgIT09IHRoaXMuX3Byb3BzW2tleV0pIHtcclxuICAgICAgICAgICAgdGhpcy5fcHJvcHNba2V5XSA9IHZhbDtcclxuICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSAmJiB0aGlzLl9pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcmVmbGVjdFxyXG4gICAgICAgICAgICBpZiAoc2hvdWxkUmVmbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGh5cGhlbmF0ZShrZXkpLCAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGh5cGhlbmF0ZShrZXkpLCB2YWwgKyAnJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoaHlwaGVuYXRlKGtleSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX3VwZGF0ZSgpIHtcclxuICAgICAgICByZW5kZXIodGhpcy5fY3JlYXRlVk5vZGUoKSwgdGhpcy5zaGFkb3dSb290KTtcclxuICAgIH1cclxuICAgIF9jcmVhdGVWTm9kZSgpIHtcclxuICAgICAgICBjb25zdCB2bm9kZSA9IGNyZWF0ZVZOb2RlKHRoaXMuX2RlZiwgZXh0ZW5kKHt9LCB0aGlzLl9wcm9wcykpO1xyXG4gICAgICAgIGlmICghdGhpcy5faW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgdm5vZGUuY2UgPSBpbnN0YW5jZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuaXNDRSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvLyBITVJcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jZVJlbG9hZCA9IG5ld1N0eWxlcyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsd2F5cyByZXNldCBzdHlsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0eWxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmZvckVhY2gocyA9PiB0aGlzLnNoYWRvd1Jvb3QucmVtb3ZlQ2hpbGQocykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlTdHlsZXMobmV3U3R5bGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBhc3luYyBjb21wb25lbnQsIGNlUmVsb2FkIGlzIGNhbGxlZCBmcm9tIHRoZSBpbm5lclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgc28gbm8gbmVlZCB0byByZWxvYWQgdGhlIGFzeW5jIHdyYXBwZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kZWYuX19hc3luY0xvYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpbnRlcmNlcHQgZW1pdFxyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UuZW1pdCA9IChldmVudCwgLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoZXZlbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiBhcmdzXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vIGxvY2F0ZSBuZWFyZXN0IFZ1ZSBjdXN0b20gZWxlbWVudCBwYXJlbnQgZm9yIHByb3ZpZGUvaW5qZWN0XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50ID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHdoaWxlICgocGFyZW50ID1cclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgJiYgKHBhcmVudC5wYXJlbnROb2RlIHx8IHBhcmVudC5ob3N0KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgVnVlRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5wYXJlbnQgPSBwYXJlbnQuX2luc3RhbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2bm9kZTtcclxuICAgIH1cclxuICAgIF9hcHBseVN0eWxlcyhzdHlsZXMpIHtcclxuICAgICAgICBpZiAoc3R5bGVzKSB7XHJcbiAgICAgICAgICAgIHN0eWxlcy5mb3JFYWNoKGNzcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuICAgICAgICAgICAgICAgIHMudGV4dENvbnRlbnQgPSBjc3M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNoYWRvd1Jvb3QuYXBwZW5kQ2hpbGQocyk7XHJcbiAgICAgICAgICAgICAgICAvLyByZWNvcmQgZm9yIEhNUlxyXG4gICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLl9zdHlsZXMgfHwgKHRoaXMuX3N0eWxlcyA9IFtdKSkucHVzaChzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmZ1bmN0aW9uIHVzZUNzc01vZHVsZShuYW1lID0gJyRzdHlsZScpIHtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB3YXJuKGB1c2VDc3NNb2R1bGUgbXVzdCBiZSBjYWxsZWQgaW5zaWRlIHNldHVwKClgKTtcclxuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX09CSjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbW9kdWxlcyA9IGluc3RhbmNlLnR5cGUuX19jc3NNb2R1bGVzO1xyXG4gICAgICAgIGlmICghbW9kdWxlcykge1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGVzIGluamVjdGVkLmApO1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2QgPSBtb2R1bGVzW25hbWVdO1xyXG4gICAgICAgIGlmICghbW9kKSB7XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgd2FybihgQ3VycmVudCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIENTUyBtb2R1bGUgbmFtZWQgXCIke25hbWV9XCIuYCk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWV9PQko7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtb2Q7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBTRkMncyBDU1MgdmFyaWFibGUgaW5qZWN0aW9uIGZlYXR1cmUuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5mdW5jdGlvbiB1c2VDc3NWYXJzKGdldHRlcikge1xyXG4gICAgY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmXHJcbiAgICAgICAgICAgIHdhcm4oYHVzZUNzc1ZhcnMgaXMgY2FsbGVkIHdpdGhvdXQgY3VycmVudCBhY3RpdmUgY29tcG9uZW50IGluc3RhbmNlLmApO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHNldFZhcnMgPSAoKSA9PiBzZXRWYXJzT25WTm9kZShpbnN0YW5jZS5zdWJUcmVlLCBnZXR0ZXIoaW5zdGFuY2UucHJveHkpKTtcclxuICAgIHdhdGNoUG9zdEVmZmVjdChzZXRWYXJzKTtcclxuICAgIG9uTW91bnRlZCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgb2IgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihzZXRWYXJzKTtcclxuICAgICAgICBvYi5vYnNlcnZlKGluc3RhbmNlLnN1YlRyZWUuZWwucGFyZW50Tm9kZSwgeyBjaGlsZExpc3Q6IHRydWUgfSk7XHJcbiAgICAgICAgb25Vbm1vdW50ZWQoKCkgPT4gb2IuZGlzY29ubmVjdCgpKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHNldFZhcnNPblZOb2RlKHZub2RlLCB2YXJzKSB7XHJcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMTI4IC8qIFNVU1BFTlNFICovKSB7XHJcbiAgICAgICAgY29uc3Qgc3VzcGVuc2UgPSB2bm9kZS5zdXNwZW5zZTtcclxuICAgICAgICB2bm9kZSA9IHN1c3BlbnNlLmFjdGl2ZUJyYW5jaDtcclxuICAgICAgICBpZiAoc3VzcGVuc2UucGVuZGluZ0JyYW5jaCAmJiAhc3VzcGVuc2UuaXNIeWRyYXRpbmcpIHtcclxuICAgICAgICAgICAgc3VzcGVuc2UuZWZmZWN0cy5wdXNoKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldFZhcnNPblZOb2RlKHN1c3BlbnNlLmFjdGl2ZUJyYW5jaCwgdmFycyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGRyaWxsIGRvd24gSE9DcyB1bnRpbCBpdCdzIGEgbm9uLWNvbXBvbmVudCB2bm9kZVxyXG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudCkge1xyXG4gICAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50LnN1YlRyZWU7XHJcbiAgICB9XHJcbiAgICBpZiAodm5vZGUuc2hhcGVGbGFnICYgMSAvKiBFTEVNRU5UICovICYmIHZub2RlLmVsKSB7XHJcbiAgICAgICAgc2V0VmFyc09uTm9kZSh2bm9kZS5lbCwgdmFycyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh2bm9kZS50eXBlID09PSBGcmFnbWVudCkge1xyXG4gICAgICAgIHZub2RlLmNoaWxkcmVuLmZvckVhY2goYyA9PiBzZXRWYXJzT25WTm9kZShjLCB2YXJzKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh2bm9kZS50eXBlID09PSBTdGF0aWMpIHtcclxuICAgICAgICBsZXQgeyBlbCwgYW5jaG9yIH0gPSB2bm9kZTtcclxuICAgICAgICB3aGlsZSAoZWwpIHtcclxuICAgICAgICAgICAgc2V0VmFyc09uTm9kZShlbCwgdmFycyk7XHJcbiAgICAgICAgICAgIGlmIChlbCA9PT0gYW5jaG9yKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGVsID0gZWwubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldFZhcnNPbk5vZGUoZWwsIHZhcnMpIHtcclxuICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdmFycykge1xyXG4gICAgICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eShgLS0ke2tleX1gLCB2YXJzW2tleV0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jb25zdCBUUkFOU0lUSU9OID0gJ3RyYW5zaXRpb24nO1xyXG5jb25zdCBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcclxuLy8gRE9NIFRyYW5zaXRpb24gaXMgYSBoaWdoZXItb3JkZXItY29tcG9uZW50IGJhc2VkIG9uIHRoZSBwbGF0Zm9ybS1hZ25vc3RpY1xyXG4vLyBiYXNlIFRyYW5zaXRpb24gY29tcG9uZW50LCB3aXRoIERPTS1zcGVjaWZpYyBsb2dpYy5cclxuY29uc3QgVHJhbnNpdGlvbiA9IChwcm9wcywgeyBzbG90cyB9KSA9PiBoKEJhc2VUcmFuc2l0aW9uLCByZXNvbHZlVHJhbnNpdGlvblByb3BzKHByb3BzKSwgc2xvdHMpO1xyXG5UcmFuc2l0aW9uLmRpc3BsYXlOYW1lID0gJ1RyYW5zaXRpb24nO1xyXG5jb25zdCBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0ge1xyXG4gICAgbmFtZTogU3RyaW5nLFxyXG4gICAgdHlwZTogU3RyaW5nLFxyXG4gICAgY3NzOiB7XHJcbiAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICBkZWZhdWx0OiB0cnVlXHJcbiAgICB9LFxyXG4gICAgZHVyYXRpb246IFtTdHJpbmcsIE51bWJlciwgT2JqZWN0XSxcclxuICAgIGVudGVyRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhckZyb21DbGFzczogU3RyaW5nLFxyXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcclxuICAgIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcclxuICAgIGxlYXZlRnJvbUNsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXHJcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZ1xyXG59O1xyXG5jb25zdCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzID0gKFRyYW5zaXRpb24ucHJvcHMgPVxyXG4gICAgLyojX19QVVJFX18qLyBleHRlbmQoe30sIEJhc2VUcmFuc2l0aW9uLnByb3BzLCBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSk7XHJcbi8qKlxyXG4gKiAjMzIyNyBJbmNvbWluZyBob29rcyBtYXkgYmUgbWVyZ2VkIGludG8gYXJyYXlzIHdoZW4gd3JhcHBpbmcgVHJhbnNpdGlvblxyXG4gKiB3aXRoIGN1c3RvbSBIT0NzLlxyXG4gKi9cclxuY29uc3QgY2FsbEhvb2sgPSAoaG9vaywgYXJncyA9IFtdKSA9PiB7XHJcbiAgICBpZiAoaXNBcnJheShob29rKSkge1xyXG4gICAgICAgIGhvb2suZm9yRWFjaChoID0+IGgoLi4uYXJncykpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaG9vaykge1xyXG4gICAgICAgIGhvb2soLi4uYXJncyk7XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBDaGVjayBpZiBhIGhvb2sgZXhwZWN0cyBhIGNhbGxiYWNrICgybmQgYXJnKSwgd2hpY2ggbWVhbnMgdGhlIHVzZXJcclxuICogaW50ZW5kcyB0byBleHBsaWNpdGx5IGNvbnRyb2wgdGhlIGVuZCBvZiB0aGUgdHJhbnNpdGlvbi5cclxuICovXHJcbmNvbnN0IGhhc0V4cGxpY2l0Q2FsbGJhY2sgPSAoaG9vaykgPT4ge1xyXG4gICAgcmV0dXJuIGhvb2tcclxuICAgICAgICA/IGlzQXJyYXkoaG9vaylcclxuICAgICAgICAgICAgPyBob29rLnNvbWUoaCA9PiBoLmxlbmd0aCA+IDEpXHJcbiAgICAgICAgICAgIDogaG9vay5sZW5ndGggPiAxXHJcbiAgICAgICAgOiBmYWxzZTtcclxufTtcclxuZnVuY3Rpb24gcmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyhyYXdQcm9wcykge1xyXG4gICAgY29uc3QgYmFzZVByb3BzID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByYXdQcm9wcykge1xyXG4gICAgICAgIGlmICghKGtleSBpbiBET01UcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzKSkge1xyXG4gICAgICAgICAgICBiYXNlUHJvcHNba2V5XSA9IHJhd1Byb3BzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHJhd1Byb3BzLmNzcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gYmFzZVByb3BzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgeyBuYW1lID0gJ3YnLCB0eXBlLCBkdXJhdGlvbiwgZW50ZXJGcm9tQ2xhc3MgPSBgJHtuYW1lfS1lbnRlci1mcm9tYCwgZW50ZXJBY3RpdmVDbGFzcyA9IGAke25hbWV9LWVudGVyLWFjdGl2ZWAsIGVudGVyVG9DbGFzcyA9IGAke25hbWV9LWVudGVyLXRvYCwgYXBwZWFyRnJvbUNsYXNzID0gZW50ZXJGcm9tQ2xhc3MsIGFwcGVhckFjdGl2ZUNsYXNzID0gZW50ZXJBY3RpdmVDbGFzcywgYXBwZWFyVG9DbGFzcyA9IGVudGVyVG9DbGFzcywgbGVhdmVGcm9tQ2xhc3MgPSBgJHtuYW1lfS1sZWF2ZS1mcm9tYCwgbGVhdmVBY3RpdmVDbGFzcyA9IGAke25hbWV9LWxlYXZlLWFjdGl2ZWAsIGxlYXZlVG9DbGFzcyA9IGAke25hbWV9LWxlYXZlLXRvYCB9ID0gcmF3UHJvcHM7XHJcbiAgICBjb25zdCBkdXJhdGlvbnMgPSBub3JtYWxpemVEdXJhdGlvbihkdXJhdGlvbik7XHJcbiAgICBjb25zdCBlbnRlckR1cmF0aW9uID0gZHVyYXRpb25zICYmIGR1cmF0aW9uc1swXTtcclxuICAgIGNvbnN0IGxlYXZlRHVyYXRpb24gPSBkdXJhdGlvbnMgJiYgZHVyYXRpb25zWzFdO1xyXG4gICAgY29uc3QgeyBvbkJlZm9yZUVudGVyLCBvbkVudGVyLCBvbkVudGVyQ2FuY2VsbGVkLCBvbkxlYXZlLCBvbkxlYXZlQ2FuY2VsbGVkLCBvbkJlZm9yZUFwcGVhciA9IG9uQmVmb3JlRW50ZXIsIG9uQXBwZWFyID0gb25FbnRlciwgb25BcHBlYXJDYW5jZWxsZWQgPSBvbkVudGVyQ2FuY2VsbGVkIH0gPSBiYXNlUHJvcHM7XHJcbiAgICBjb25zdCBmaW5pc2hFbnRlciA9IChlbCwgaXNBcHBlYXIsIGRvbmUpID0+IHtcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBpc0FwcGVhciA/IGFwcGVhckFjdGl2ZUNsYXNzIDogZW50ZXJBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgZG9uZSAmJiBkb25lKCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZmluaXNoTGVhdmUgPSAoZWwsIGRvbmUpID0+IHtcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XHJcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcclxuICAgICAgICBkb25lICYmIGRvbmUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBtYWtlRW50ZXJIb29rID0gKGlzQXBwZWFyKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIChlbCwgZG9uZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBob29rID0gaXNBcHBlYXIgPyBvbkFwcGVhciA6IG9uRW50ZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hFbnRlcihlbCwgaXNBcHBlYXIsIGRvbmUpO1xyXG4gICAgICAgICAgICBjYWxsSG9vayhob29rLCBbZWwsIHJlc29sdmVdKTtcclxuICAgICAgICAgICAgbmV4dEZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgaXNBcHBlYXIgPyBhcHBlYXJGcm9tQ2xhc3MgOiBlbnRlckZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGlzQXBwZWFyID8gYXBwZWFyVG9DbGFzcyA6IGVudGVyVG9DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0V4cGxpY2l0Q2FsbGJhY2soaG9vaykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGVudGVyRHVyYXRpb24sIHJlc29sdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBleHRlbmQoYmFzZVByb3BzLCB7XHJcbiAgICAgICAgb25CZWZvcmVFbnRlcihlbCkge1xyXG4gICAgICAgICAgICBjYWxsSG9vayhvbkJlZm9yZUVudGVyLCBbZWxdKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBlbnRlckZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgZW50ZXJBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkJlZm9yZUFwcGVhcihlbCkge1xyXG4gICAgICAgICAgICBjYWxsSG9vayhvbkJlZm9yZUFwcGVhciwgW2VsXSk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYXBwZWFyRnJvbUNsYXNzKTtcclxuICAgICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhcHBlYXJBY3RpdmVDbGFzcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkVudGVyOiBtYWtlRW50ZXJIb29rKGZhbHNlKSxcclxuICAgICAgICBvbkFwcGVhcjogbWFrZUVudGVySG9vayh0cnVlKSxcclxuICAgICAgICBvbkxlYXZlKGVsLCBkb25lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmUgPSAoKSA9PiBmaW5pc2hMZWF2ZShlbCwgZG9uZSk7XHJcbiAgICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVGcm9tQ2xhc3MpO1xyXG4gICAgICAgICAgICAvLyBmb3JjZSByZWZsb3cgc28gKi1sZWF2ZS1mcm9tIGNsYXNzZXMgaW1tZWRpYXRlbHkgdGFrZSBlZmZlY3QgKCMyNTkzKVxyXG4gICAgICAgICAgICBmb3JjZVJlZmxvdygpO1xyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQWN0aXZlQ2xhc3MpO1xyXG4gICAgICAgICAgICBuZXh0RnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUZyb21DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0V4cGxpY2l0Q2FsbGJhY2sob25MZWF2ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGxlYXZlRHVyYXRpb24sIHJlc29sdmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2FsbEhvb2sob25MZWF2ZSwgW2VsLCByZXNvbHZlXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkVudGVyQ2FuY2VsbGVkKGVsKSB7XHJcbiAgICAgICAgICAgIGZpbmlzaEVudGVyKGVsLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNhbGxIb29rKG9uRW50ZXJDYW5jZWxsZWQsIFtlbF0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BcHBlYXJDYW5jZWxsZWQoZWwpIHtcclxuICAgICAgICAgICAgZmluaXNoRW50ZXIoZWwsIHRydWUpO1xyXG4gICAgICAgICAgICBjYWxsSG9vayhvbkFwcGVhckNhbmNlbGxlZCwgW2VsXSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkxlYXZlQ2FuY2VsbGVkKGVsKSB7XHJcbiAgICAgICAgICAgIGZpbmlzaExlYXZlKGVsKTtcclxuICAgICAgICAgICAgY2FsbEhvb2sob25MZWF2ZUNhbmNlbGxlZCwgW2VsXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gbm9ybWFsaXplRHVyYXRpb24oZHVyYXRpb24pIHtcclxuICAgIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc09iamVjdChkdXJhdGlvbikpIHtcclxuICAgICAgICByZXR1cm4gW051bWJlck9mKGR1cmF0aW9uLmVudGVyKSwgTnVtYmVyT2YoZHVyYXRpb24ubGVhdmUpXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG4gPSBOdW1iZXJPZihkdXJhdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIFtuLCBuXTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBOdW1iZXJPZih2YWwpIHtcclxuICAgIGNvbnN0IHJlcyA9IHRvTnVtYmVyKHZhbCk7XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKVxyXG4gICAgICAgIHZhbGlkYXRlRHVyYXRpb24ocmVzKTtcclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVEdXJhdGlvbih2YWwpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHdhcm4oYDx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBgICtcclxuICAgICAgICAgICAgYGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbCl9LmApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNOYU4odmFsKSkge1xyXG4gICAgICAgIHdhcm4oYDx0cmFuc2l0aW9uPiBleHBsaWNpdCBkdXJhdGlvbiBpcyBOYU4gLSBgICtcclxuICAgICAgICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGNscykge1xyXG4gICAgY2xzLnNwbGl0KC9cXHMrLykuZm9yRWFjaChjID0+IGMgJiYgZWwuY2xhc3NMaXN0LmFkZChjKSk7XHJcbiAgICAoZWwuX3Z0YyB8fFxyXG4gICAgICAgIChlbC5fdnRjID0gbmV3IFNldCgpKSkuYWRkKGNscyk7XHJcbn1cclxuZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBjbHMpIHtcclxuICAgIGNscy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGVsLmNsYXNzTGlzdC5yZW1vdmUoYykpO1xyXG4gICAgY29uc3QgeyBfdnRjIH0gPSBlbDtcclxuICAgIGlmIChfdnRjKSB7XHJcbiAgICAgICAgX3Z0Yy5kZWxldGUoY2xzKTtcclxuICAgICAgICBpZiAoIV92dGMuc2l6ZSkge1xyXG4gICAgICAgICAgICBlbC5fdnRjID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBuZXh0RnJhbWUoY2IpIHtcclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKTtcclxuICAgIH0pO1xyXG59XHJcbmxldCBlbmRJZCA9IDA7XHJcbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgZXhwZWN0ZWRUeXBlLCBleHBsaWNpdFRpbWVvdXQsIHJlc29sdmUpIHtcclxuICAgIGNvbnN0IGlkID0gKGVsLl9lbmRJZCA9ICsrZW5kSWQpO1xyXG4gICAgY29uc3QgcmVzb2x2ZUlmTm90U3RhbGUgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGlkID09PSBlbC5fZW5kSWQpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBpZiAoZXhwbGljaXRUaW1lb3V0KSB7XHJcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZUlmTm90U3RhbGUsIGV4cGxpY2l0VGltZW91dCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IHR5cGUsIHRpbWVvdXQsIHByb3BDb3VudCB9ID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XHJcbiAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZW5kRXZlbnQgPSB0eXBlICsgJ2VuZCc7XHJcbiAgICBsZXQgZW5kZWQgPSAwO1xyXG4gICAgY29uc3QgZW5kID0gKCkgPT4ge1xyXG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIG9uRW5kKTtcclxuICAgICAgICByZXNvbHZlSWZOb3RTdGFsZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IG9uRW5kID0gKGUpID0+IHtcclxuICAgICAgICBpZiAoZS50YXJnZXQgPT09IGVsICYmICsrZW5kZWQgPj0gcHJvcENvdW50KSB7XHJcbiAgICAgICAgICAgIGVuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcclxuICAgICAgICAgICAgZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdGltZW91dCArIDEpO1xyXG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgb25FbmQpO1xyXG59XHJcbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpIHtcclxuICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcclxuICAgIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcclxuICAgIGNvbnN0IGdldFN0eWxlUHJvcGVydGllcyA9IChrZXkpID0+IChzdHlsZXNba2V5XSB8fCAnJykuc3BsaXQoJywgJyk7XHJcbiAgICBjb25zdCB0cmFuc2l0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKFRSQU5TSVRJT04gKyAnRGVsYXknKTtcclxuICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbnMgPSBnZXRTdHlsZVByb3BlcnRpZXMoVFJBTlNJVElPTiArICdEdXJhdGlvbicpO1xyXG4gICAgY29uc3QgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uRGVsYXlzID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKEFOSU1BVElPTiArICdEZWxheScpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uRHVyYXRpb25zID0gZ2V0U3R5bGVQcm9wZXJ0aWVzKEFOSU1BVElPTiArICdEdXJhdGlvbicpO1xyXG4gICAgY29uc3QgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xyXG4gICAgbGV0IHR5cGUgPSBudWxsO1xyXG4gICAgbGV0IHRpbWVvdXQgPSAwO1xyXG4gICAgbGV0IHByb3BDb3VudCA9IDA7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcclxuICAgICAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xyXG4gICAgICAgICAgICB0aW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XHJcbiAgICAgICAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XHJcbiAgICAgICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBBTklNQVRJT047XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xyXG4gICAgICAgICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XHJcbiAgICAgICAgdHlwZSA9XHJcbiAgICAgICAgICAgIHRpbWVvdXQgPiAwXHJcbiAgICAgICAgICAgICAgICA/IHRyYW5zaXRpb25UaW1lb3V0ID4gYW5pbWF0aW9uVGltZW91dFxyXG4gICAgICAgICAgICAgICAgICAgID8gVFJBTlNJVElPTlxyXG4gICAgICAgICAgICAgICAgICAgIDogQU5JTUFUSU9OXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgcHJvcENvdW50ID0gdHlwZVxyXG4gICAgICAgICAgICA/IHR5cGUgPT09IFRSQU5TSVRJT05cclxuICAgICAgICAgICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcclxuICAgICAgICAgICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxyXG4gICAgICAgICAgICA6IDA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBoYXNUcmFuc2Zvcm0gPSB0eXBlID09PSBUUkFOU0lUSU9OICYmXHJcbiAgICAgICAgL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLy50ZXN0KHN0eWxlc1tUUkFOU0lUSU9OICsgJ1Byb3BlcnR5J10pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHRpbWVvdXQsXHJcbiAgICAgICAgcHJvcENvdW50LFxyXG4gICAgICAgIGhhc1RyYW5zZm9ybVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBnZXRUaW1lb3V0KGRlbGF5cywgZHVyYXRpb25zKSB7XHJcbiAgICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gTWF0aC5tYXgoLi4uZHVyYXRpb25zLm1hcCgoZCwgaSkgPT4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKSkpO1xyXG59XHJcbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyXHJcbi8vIG51bWJlcnMgaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxyXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duXHJcbi8vIChpLmUuIGFjdGluZyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXHJcbmZ1bmN0aW9uIHRvTXMocykge1xyXG4gICAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwO1xyXG59XHJcbi8vIHN5bmNocm9ub3VzbHkgZm9yY2UgbGF5b3V0IHRvIHB1dCBlbGVtZW50cyBpbnRvIGEgY2VydGFpbiBzdGF0ZVxyXG5mdW5jdGlvbiBmb3JjZVJlZmxvdygpIHtcclxuICAgIHJldHVybiBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcclxufVxuXG5jb25zdCBwb3NpdGlvbk1hcCA9IG5ldyBXZWFrTWFwKCk7XHJcbmNvbnN0IG5ld1Bvc2l0aW9uTWFwID0gbmV3IFdlYWtNYXAoKTtcclxuY29uc3QgVHJhbnNpdGlvbkdyb3VwSW1wbCA9IHtcclxuICAgIG5hbWU6ICdUcmFuc2l0aW9uR3JvdXAnLFxyXG4gICAgcHJvcHM6IC8qI19fUFVSRV9fKi8gZXh0ZW5kKHt9LCBUcmFuc2l0aW9uUHJvcHNWYWxpZGF0b3JzLCB7XHJcbiAgICAgICAgdGFnOiBTdHJpbmcsXHJcbiAgICAgICAgbW92ZUNsYXNzOiBTdHJpbmdcclxuICAgIH0pLFxyXG4gICAgc2V0dXAocHJvcHMsIHsgc2xvdHMgfSkge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB1c2VUcmFuc2l0aW9uU3RhdGUoKTtcclxuICAgICAgICBsZXQgcHJldkNoaWxkcmVuO1xyXG4gICAgICAgIGxldCBjaGlsZHJlbjtcclxuICAgICAgICBvblVwZGF0ZWQoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjaGlsZHJlbiBpcyBndWFyYW50ZWVkIHRvIGV4aXN0IGFmdGVyIGluaXRpYWwgcmVuZGVyXHJcbiAgICAgICAgICAgIGlmICghcHJldkNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG1vdmVDbGFzcyA9IHByb3BzLm1vdmVDbGFzcyB8fCBgJHtwcm9wcy5uYW1lIHx8ICd2J30tbW92ZWA7XHJcbiAgICAgICAgICAgIGlmICghaGFzQ1NTVHJhbnNmb3JtKHByZXZDaGlsZHJlblswXS5lbCwgaW5zdGFuY2Uudm5vZGUuZWwsIG1vdmVDbGFzcykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcclxuICAgICAgICAgICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXHJcbiAgICAgICAgICAgIHByZXZDaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcclxuICAgICAgICAgICAgcHJldkNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xyXG4gICAgICAgICAgICBjb25zdCBtb3ZlZENoaWxkcmVuID0gcHJldkNoaWxkcmVuLmZpbHRlcihhcHBseVRyYW5zbGF0aW9uKTtcclxuICAgICAgICAgICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIGZvcmNlUmVmbG93KCk7XHJcbiAgICAgICAgICAgIG1vdmVkQ2hpbGRyZW4uZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gYy5lbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gZWwuc3R5bGU7XHJcbiAgICAgICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XHJcbiAgICAgICAgICAgICAgICBzdHlsZS50cmFuc2Zvcm0gPSBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gKGVsLl9tb3ZlQ2IgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBjYik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhd1Byb3BzID0gdG9SYXcocHJvcHMpO1xyXG4gICAgICAgICAgICBjb25zdCBjc3NUcmFuc2l0aW9uUHJvcHMgPSByZXNvbHZlVHJhbnNpdGlvblByb3BzKHJhd1Byb3BzKTtcclxuICAgICAgICAgICAgbGV0IHRhZyA9IHJhd1Byb3BzLnRhZyB8fCBGcmFnbWVudDtcclxuICAgICAgICAgICAgcHJldkNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICAgICAgICAgIGNoaWxkcmVuID0gc2xvdHMuZGVmYXVsdCA/IGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbihzbG90cy5kZWZhdWx0KCkpIDogW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQua2V5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUcmFuc2l0aW9uSG9va3MoY2hpbGQsIHJlc29sdmVUcmFuc2l0aW9uSG9va3MoY2hpbGQsIGNzc1RyYW5zaXRpb25Qcm9wcywgc3RhdGUsIGluc3RhbmNlKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXJuKGA8VHJhbnNpdGlvbkdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkLmApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBwcmV2Q2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VHJhbnNpdGlvbkhvb2tzKGNoaWxkLCByZXNvbHZlVHJhbnNpdGlvbkhvb2tzKGNoaWxkLCBjc3NUcmFuc2l0aW9uUHJvcHMsIHN0YXRlLCBpbnN0YW5jZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uTWFwLnNldChjaGlsZCwgY2hpbGQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVWTm9kZSh0YWcsIG51bGwsIGNoaWxkcmVuKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBUcmFuc2l0aW9uR3JvdXAgPSBUcmFuc2l0aW9uR3JvdXBJbXBsO1xyXG5mdW5jdGlvbiBjYWxsUGVuZGluZ0NicyhjKSB7XHJcbiAgICBjb25zdCBlbCA9IGMuZWw7XHJcbiAgICBpZiAoZWwuX21vdmVDYikge1xyXG4gICAgICAgIGVsLl9tb3ZlQ2IoKTtcclxuICAgIH1cclxuICAgIGlmIChlbC5fZW50ZXJDYikge1xyXG4gICAgICAgIGVsLl9lbnRlckNiKCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24oYykge1xyXG4gICAgbmV3UG9zaXRpb25NYXAuc2V0KGMsIGMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xyXG59XHJcbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24oYykge1xyXG4gICAgY29uc3Qgb2xkUG9zID0gcG9zaXRpb25NYXAuZ2V0KGMpO1xyXG4gICAgY29uc3QgbmV3UG9zID0gbmV3UG9zaXRpb25NYXAuZ2V0KGMpO1xyXG4gICAgY29uc3QgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xyXG4gICAgY29uc3QgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcclxuICAgIGlmIChkeCB8fCBkeSkge1xyXG4gICAgICAgIGNvbnN0IHMgPSBjLmVsLnN0eWxlO1xyXG4gICAgICAgIHMudHJhbnNmb3JtID0gcy53ZWJraXRUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlKCR7ZHh9cHgsJHtkeX1weClgO1xyXG4gICAgICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcclxuICAgICAgICByZXR1cm4gYztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBoYXNDU1NUcmFuc2Zvcm0oZWwsIHJvb3QsIG1vdmVDbGFzcykge1xyXG4gICAgLy8gRGV0ZWN0IHdoZXRoZXIgYW4gZWxlbWVudCB3aXRoIHRoZSBtb3ZlIGNsYXNzIGFwcGxpZWQgaGFzXHJcbiAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcclxuICAgIC8vIHRyYW5zaXRpb24gYXQgdGhpcyB2ZXJ5IG1vbWVudCwgd2UgbWFrZSBhIGNsb25lIG9mIGl0IGFuZCByZW1vdmVcclxuICAgIC8vIGFsbCBvdGhlciB0cmFuc2l0aW9uIGNsYXNzZXMgYXBwbGllZCB0byBlbnN1cmUgb25seSB0aGUgbW92ZSBjbGFzc1xyXG4gICAgLy8gaXMgYXBwbGllZC5cclxuICAgIGNvbnN0IGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XHJcbiAgICBpZiAoZWwuX3Z0Yykge1xyXG4gICAgICAgIGVsLl92dGMuZm9yRWFjaChjbHMgPT4ge1xyXG4gICAgICAgICAgICBjbHMuc3BsaXQoL1xccysvKS5mb3JFYWNoKGMgPT4gYyAmJiBjbG9uZS5jbGFzc0xpc3QucmVtb3ZlKGMpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG1vdmVDbGFzcy5zcGxpdCgvXFxzKy8pLmZvckVhY2goYyA9PiBjICYmIGNsb25lLmNsYXNzTGlzdC5hZGQoYykpO1xyXG4gICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IChyb290Lm5vZGVUeXBlID09PSAxID8gcm9vdCA6IHJvb3QucGFyZW50Tm9kZSk7XHJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2xvbmUpO1xyXG4gICAgY29uc3QgeyBoYXNUcmFuc2Zvcm0gfSA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcclxuICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjbG9uZSk7XHJcbiAgICByZXR1cm4gaGFzVHJhbnNmb3JtO1xyXG59XG5cbmNvbnN0IGdldE1vZGVsQXNzaWduZXIgPSAodm5vZGUpID0+IHtcclxuICAgIGNvbnN0IGZuID0gdm5vZGUucHJvcHNbJ29uVXBkYXRlOm1vZGVsVmFsdWUnXTtcclxuICAgIHJldHVybiBpc0FycmF5KGZuKSA/IHZhbHVlID0+IGludm9rZUFycmF5Rm5zKGZuLCB2YWx1ZSkgOiBmbjtcclxufTtcclxuZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0KGUpIHtcclxuICAgIGUudGFyZ2V0LmNvbXBvc2luZyA9IHRydWU7XHJcbn1cclxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZChlKSB7XHJcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcclxuICAgIGlmICh0YXJnZXQuY29tcG9zaW5nKSB7XHJcbiAgICAgICAgdGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCAnaW5wdXQnKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmlnZ2VyKGVsLCB0eXBlKSB7XHJcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcclxuICAgIGUuaW5pdEV2ZW50KHR5cGUsIHRydWUsIHRydWUpO1xyXG4gICAgZWwuZGlzcGF0Y2hFdmVudChlKTtcclxufVxyXG4vLyBXZSBhcmUgZXhwb3J0aW5nIHRoZSB2LW1vZGVsIHJ1bnRpbWUgZGlyZWN0bHkgYXMgdm5vZGUgaG9va3Mgc28gdGhhdCBpdCBjYW5cclxuLy8gYmUgdHJlZS1zaGFrZW4gaW4gY2FzZSB2LW1vZGVsIGlzIG5ldmVyIHVzZWQuXHJcbmNvbnN0IHZNb2RlbFRleHQgPSB7XHJcbiAgICBjcmVhdGVkKGVsLCB7IG1vZGlmaWVyczogeyBsYXp5LCB0cmltLCBudW1iZXIgfSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBjb25zdCBjYXN0VG9OdW1iZXIgPSBudW1iZXIgfHwgKHZub2RlLnByb3BzICYmIHZub2RlLnByb3BzLnR5cGUgPT09ICdudW1iZXInKTtcclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCBsYXp5ID8gJ2NoYW5nZScgOiAnaW5wdXQnLCBlID0+IHtcclxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNvbXBvc2luZylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgbGV0IGRvbVZhbHVlID0gZWwudmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh0cmltKSB7XHJcbiAgICAgICAgICAgICAgICBkb21WYWx1ZSA9IGRvbVZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjYXN0VG9OdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGRvbVZhbHVlID0gdG9OdW1iZXIoZG9tVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsLl9hc3NpZ24oZG9tVmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0cmltKSB7XHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlbC52YWx1ZSA9IGVsLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbGF6eSkge1xyXG4gICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY29tcG9zaXRpb25zdGFydCcsIG9uQ29tcG9zaXRpb25TdGFydCk7XHJcbiAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjb21wb3NpdGlvbmVuZCcsIG9uQ29tcG9zaXRpb25FbmQpO1xyXG4gICAgICAgICAgICAvLyBTYWZhcmkgPCAxMC4yICYgVUlXZWJWaWV3IGRvZXNuJ3QgZmlyZSBjb21wb3NpdGlvbmVuZCB3aGVuXHJcbiAgICAgICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcclxuICAgICAgICAgICAgLy8gdGhpcyBhbHNvIGZpeGVzIHRoZSBpc3N1ZSB3aGVyZSBzb21lIGJyb3dzZXJzIGUuZy4gaU9TIENocm9tZVxyXG4gICAgICAgICAgICAvLyBmaXJlcyBcImNoYW5nZVwiIGluc3RlYWQgb2YgXCJpbnB1dFwiIG9uIGF1dG9jb21wbGV0ZS5cclxuICAgICAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBzZXQgdmFsdWUgb24gbW91bnRlZCBzbyBpdCdzIGFmdGVyIG1pbi9tYXggZm9yIHR5cGU9XCJyYW5nZVwiXHJcbiAgICBtb3VudGVkKGVsLCB7IHZhbHVlIH0pIHtcclxuICAgICAgICBlbC52YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xyXG4gICAgfSxcclxuICAgIGJlZm9yZVVwZGF0ZShlbCwgeyB2YWx1ZSwgbW9kaWZpZXJzOiB7IGxhenksIHRyaW0sIG51bWJlciB9IH0sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIC8vIGF2b2lkIGNsZWFyaW5nIHVucmVzb2x2ZWQgdGV4dC4gIzIzMDJcclxuICAgICAgICBpZiAoZWwuY29tcG9zaW5nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsKSB7XHJcbiAgICAgICAgICAgIGlmIChsYXp5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRyaW0gJiYgZWwudmFsdWUudHJpbSgpID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgobnVtYmVyIHx8IGVsLnR5cGUgPT09ICdudW1iZXInKSAmJiB0b051bWJlcihlbC52YWx1ZSkgPT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcclxuICAgICAgICBpZiAoZWwudmFsdWUgIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVsLnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5jb25zdCB2TW9kZWxDaGVja2JveCA9IHtcclxuICAgIC8vICM0MDk2IGFycmF5IGNoZWNrYm94ZXMgbmVlZCB0byBiZSBkZWVwIHRyYXZlcnNlZFxyXG4gICAgZGVlcDogdHJ1ZSxcclxuICAgIGNyZWF0ZWQoZWwsIF8sIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXIoZWwsICdjaGFuZ2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsVmFsdWUgPSBlbC5fbW9kZWxWYWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudFZhbHVlID0gZ2V0VmFsdWUoZWwpO1xyXG4gICAgICAgICAgICBjb25zdCBjaGVja2VkID0gZWwuY2hlY2tlZDtcclxuICAgICAgICAgICAgY29uc3QgYXNzaWduID0gZWwuX2Fzc2lnbjtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkobW9kZWxWYWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbG9vc2VJbmRleE9mKG1vZGVsVmFsdWUsIGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZCA9IGluZGV4ICE9PSAtMTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGVja2VkICYmICFmb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbihtb2RlbFZhbHVlLmNvbmNhdChlbGVtZW50VmFsdWUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFjaGVja2VkICYmIGZvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBbLi4ubW9kZWxWYWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWQuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBhc3NpZ24oZmlsdGVyZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzU2V0KG1vZGVsVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZWQgPSBuZXcgU2V0KG1vZGVsVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuYWRkKGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjbG9uZWQuZGVsZXRlKGVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhc3NpZ24oY2xvbmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFzc2lnbihnZXRDaGVja2JveFZhbHVlKGVsLCBjaGVja2VkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICAvLyBzZXQgaW5pdGlhbCBjaGVja2VkIG9uIG1vdW50IHRvIHdhaXQgZm9yIHRydWUtdmFsdWUvZmFsc2UtdmFsdWVcclxuICAgIG1vdW50ZWQ6IHNldENoZWNrZWQsXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIGJpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgICAgIHNldENoZWNrZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2V0Q2hlY2tlZChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgdm5vZGUpIHtcclxuICAgIGVsLl9tb2RlbFZhbHVlID0gdmFsdWU7XHJcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VJbmRleE9mKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSkgPiAtMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGlzU2V0KHZhbHVlKSkge1xyXG4gICAgICAgIGVsLmNoZWNrZWQgPSB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XHJcbiAgICAgICAgZWwuY2hlY2tlZCA9IGxvb3NlRXF1YWwodmFsdWUsIGdldENoZWNrYm94VmFsdWUoZWwsIHRydWUpKTtcclxuICAgIH1cclxufVxyXG5jb25zdCB2TW9kZWxSYWRpbyA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIHsgdmFsdWUgfSwgdm5vZGUpIHtcclxuICAgICAgICBlbC5jaGVja2VkID0gbG9vc2VFcXVhbCh2YWx1ZSwgdm5vZGUucHJvcHMudmFsdWUpO1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBlbC5fYXNzaWduKGdldFZhbHVlKGVsKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB2bm9kZSkge1xyXG4gICAgICAgIGVsLl9hc3NpZ24gPSBnZXRNb2RlbEFzc2lnbmVyKHZub2RlKTtcclxuICAgICAgICBpZiAodmFsdWUgIT09IG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSBsb29zZUVxdWFsKHZhbHVlLCB2bm9kZS5wcm9wcy52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5jb25zdCB2TW9kZWxTZWxlY3QgPSB7XHJcbiAgICAvLyA8c2VsZWN0IG11bHRpcGxlPiB2YWx1ZSBuZWVkIHRvIGJlIGRlZXAgdHJhdmVyc2VkXHJcbiAgICBkZWVwOiB0cnVlLFxyXG4gICAgY3JlYXRlZChlbCwgeyB2YWx1ZSwgbW9kaWZpZXJzOiB7IG51bWJlciB9IH0sIHZub2RlKSB7XHJcbiAgICAgICAgY29uc3QgaXNTZXRNb2RlbCA9IGlzU2V0KHZhbHVlKTtcclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKGVsLCAnY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcclxuICAgICAgICAgICAgICAgIC5jYWxsKGVsLm9wdGlvbnMsIChvKSA9PiBvLnNlbGVjdGVkKVxyXG4gICAgICAgICAgICAgICAgLm1hcCgobykgPT4gbnVtYmVyID8gdG9OdW1iZXIoZ2V0VmFsdWUobykpIDogZ2V0VmFsdWUobykpO1xyXG4gICAgICAgICAgICBlbC5fYXNzaWduKGVsLm11bHRpcGxlXHJcbiAgICAgICAgICAgICAgICA/IGlzU2V0TW9kZWxcclxuICAgICAgICAgICAgICAgICAgICA/IG5ldyBTZXQoc2VsZWN0ZWRWYWwpXHJcbiAgICAgICAgICAgICAgICAgICAgOiBzZWxlY3RlZFZhbFxyXG4gICAgICAgICAgICAgICAgOiBzZWxlY3RlZFZhbFswXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZWwuX2Fzc2lnbiA9IGdldE1vZGVsQXNzaWduZXIodm5vZGUpO1xyXG4gICAgfSxcclxuICAgIC8vIHNldCB2YWx1ZSBpbiBtb3VudGVkICYgdXBkYXRlZCBiZWNhdXNlIDxzZWxlY3Q+IHJlbGllcyBvbiBpdHMgY2hpbGRyZW5cclxuICAgIC8vIDxvcHRpb24+cy5cclxuICAgIG1vdW50ZWQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCB2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgYmVmb3JlVXBkYXRlKGVsLCBfYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBlbC5fYXNzaWduID0gZ2V0TW9kZWxBc3NpZ25lcih2bm9kZSk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZChlbCwgeyB2YWx1ZSB9KSB7XHJcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQoZWwsIHZhbHVlKSB7XHJcbiAgICBjb25zdCBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XHJcbiAgICBpZiAoaXNNdWx0aXBsZSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgIWlzU2V0KHZhbHVlKSkge1xyXG4gICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICB3YXJuKGA8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw+IGV4cGVjdHMgYW4gQXJyYXkgb3IgU2V0IHZhbHVlIGZvciBpdHMgYmluZGluZywgYCArXHJcbiAgICAgICAgICAgICAgICBgYnV0IGdvdCAke09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpfS5gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcclxuICAgICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IGdldFZhbHVlKG9wdGlvbik7XHJcbiAgICAgICAgaWYgKGlzTXVsdGlwbGUpIHtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIG9wdGlvblZhbHVlKSA+IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdmFsdWUuaGFzKG9wdGlvblZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSlcclxuICAgICAgICAgICAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghaXNNdWx0aXBsZSAmJiBlbC5zZWxlY3RlZEluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcclxuICAgIH1cclxufVxyXG4vLyByZXRyaWV2ZSByYXcgdmFsdWUgc2V0IHZpYSA6dmFsdWUgYmluZGluZ3NcclxuZnVuY3Rpb24gZ2V0VmFsdWUoZWwpIHtcclxuICAgIHJldHVybiAnX3ZhbHVlJyBpbiBlbCA/IGVsLl92YWx1ZSA6IGVsLnZhbHVlO1xyXG59XHJcbi8vIHJldHJpZXZlIHJhdyB2YWx1ZSBmb3IgdHJ1ZS12YWx1ZSBhbmQgZmFsc2UtdmFsdWUgc2V0IHZpYSA6dHJ1ZS12YWx1ZSBvciA6ZmFsc2UtdmFsdWUgYmluZGluZ3NcclxuZnVuY3Rpb24gZ2V0Q2hlY2tib3hWYWx1ZShlbCwgY2hlY2tlZCkge1xyXG4gICAgY29uc3Qga2V5ID0gY2hlY2tlZCA/ICdfdHJ1ZVZhbHVlJyA6ICdfZmFsc2VWYWx1ZSc7XHJcbiAgICByZXR1cm4ga2V5IGluIGVsID8gZWxba2V5XSA6IGNoZWNrZWQ7XHJcbn1cclxuY29uc3Qgdk1vZGVsRHluYW1pYyA9IHtcclxuICAgIGNyZWF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKSB7XHJcbiAgICAgICAgY2FsbE1vZGVsSG9vayhlbCwgYmluZGluZywgdm5vZGUsIG51bGwsICdjcmVhdGVkJyk7XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZChlbCwgYmluZGluZywgdm5vZGUpIHtcclxuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgbnVsbCwgJ21vdW50ZWQnKTtcclxuICAgIH0sXHJcbiAgICBiZWZvcmVVcGRhdGUoZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUpIHtcclxuICAgICAgICBjYWxsTW9kZWxIb29rKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlLCAnYmVmb3JlVXBkYXRlJyk7XHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZChlbCwgYmluZGluZywgdm5vZGUsIHByZXZWTm9kZSkge1xyXG4gICAgICAgIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsICd1cGRhdGVkJyk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGNhbGxNb2RlbEhvb2soZWwsIGJpbmRpbmcsIHZub2RlLCBwcmV2Vk5vZGUsIGhvb2spIHtcclxuICAgIGxldCBtb2RlbFRvVXNlO1xyXG4gICAgc3dpdGNoIChlbC50YWdOYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnU0VMRUNUJzpcclxuICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbFNlbGVjdDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnVEVYVEFSRUEnOlxyXG4gICAgICAgICAgICBtb2RlbFRvVXNlID0gdk1vZGVsVGV4dDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgc3dpdGNoICh2bm9kZS5wcm9wcyAmJiB2bm9kZS5wcm9wcy50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbENoZWNrYm94O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmFkaW8nOlxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsVG9Vc2UgPSB2TW9kZWxSYWRpbztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxUb1VzZSA9IHZNb2RlbFRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGZuID0gbW9kZWxUb1VzZVtob29rXTtcclxuICAgIGZuICYmIGZuKGVsLCBiaW5kaW5nLCB2bm9kZSwgcHJldlZOb2RlKTtcclxufVxyXG4vLyBTU1Igdm5vZGUgdHJhbnNmb3Jtcywgb25seSB1c2VkIHdoZW4gdXNlciBpbmNsdWRlcyBjbGllbnQtb3JpZW50ZWQgcmVuZGVyXHJcbi8vIGZ1bmN0aW9uIGluIFNTUlxyXG5mdW5jdGlvbiBpbml0Vk1vZGVsRm9yU1NSKCkge1xyXG4gICAgdk1vZGVsVGV4dC5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0pID0+ICh7IHZhbHVlIH0pO1xyXG4gICAgdk1vZGVsUmFkaW8uZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9LCB2bm9kZSkgPT4ge1xyXG4gICAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiBsb29zZUVxdWFsKHZub2RlLnByb3BzLnZhbHVlLCB2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB2TW9kZWxDaGVja2JveC5nZXRTU1JQcm9wcyA9ICh7IHZhbHVlIH0sIHZub2RlKSA9PiB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiBsb29zZUluZGV4T2YodmFsdWUsIHZub2RlLnByb3BzLnZhbHVlKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNTZXQodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmICh2bm9kZS5wcm9wcyAmJiB2YWx1ZS5oYXModm5vZGUucHJvcHMudmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBjaGVja2VkOiB0cnVlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgY2hlY2tlZDogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cblxuY29uc3Qgc3lzdGVtTW9kaWZpZXJzID0gWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ107XHJcbmNvbnN0IG1vZGlmaWVyR3VhcmRzID0ge1xyXG4gICAgc3RvcDogZSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgcHJldmVudDogZSA9PiBlLnByZXZlbnREZWZhdWx0KCksXHJcbiAgICBzZWxmOiBlID0+IGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQsXHJcbiAgICBjdHJsOiBlID0+ICFlLmN0cmxLZXksXHJcbiAgICBzaGlmdDogZSA9PiAhZS5zaGlmdEtleSxcclxuICAgIGFsdDogZSA9PiAhZS5hbHRLZXksXHJcbiAgICBtZXRhOiBlID0+ICFlLm1ldGFLZXksXHJcbiAgICBsZWZ0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDAsXHJcbiAgICBtaWRkbGU6IGUgPT4gJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiAhPT0gMSxcclxuICAgIHJpZ2h0OiBlID0+ICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gIT09IDIsXHJcbiAgICBleGFjdDogKGUsIG1vZGlmaWVycykgPT4gc3lzdGVtTW9kaWZpZXJzLnNvbWUobSA9PiBlW2Ake219S2V5YF0gJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhtKSlcclxufTtcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCB3aXRoTW9kaWZpZXJzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcclxuICAgIHJldHVybiAoZXZlbnQsIC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1vZGlmaWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBndWFyZCA9IG1vZGlmaWVyR3VhcmRzW21vZGlmaWVyc1tpXV07XHJcbiAgICAgICAgICAgIGlmIChndWFyZCAmJiBndWFyZChldmVudCwgbW9kaWZpZXJzKSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZuKGV2ZW50LCAuLi5hcmdzKTtcclxuICAgIH07XHJcbn07XHJcbi8vIEtlcHQgZm9yIDIueCBjb21wYXQuXHJcbi8vIE5vdGU6IElFMTEgY29tcGF0IGZvciBgc3BhY2ViYXJgIGFuZCBgZGVsYCBpcyByZW1vdmVkIGZvciBub3cuXHJcbmNvbnN0IGtleU5hbWVzID0ge1xyXG4gICAgZXNjOiAnZXNjYXBlJyxcclxuICAgIHNwYWNlOiAnICcsXHJcbiAgICB1cDogJ2Fycm93LXVwJyxcclxuICAgIGxlZnQ6ICdhcnJvdy1sZWZ0JyxcclxuICAgIHJpZ2h0OiAnYXJyb3ctcmlnaHQnLFxyXG4gICAgZG93bjogJ2Fycm93LWRvd24nLFxyXG4gICAgZGVsZXRlOiAnYmFja3NwYWNlJ1xyXG59O1xyXG4vKipcclxuICogQHByaXZhdGVcclxuICovXHJcbmNvbnN0IHdpdGhLZXlzID0gKGZuLCBtb2RpZmllcnMpID0+IHtcclxuICAgIHJldHVybiAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoISgna2V5JyBpbiBldmVudCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBldmVudEtleSA9IGh5cGhlbmF0ZShldmVudC5rZXkpO1xyXG4gICAgICAgIGlmIChtb2RpZmllcnMuc29tZShrID0+IGsgPT09IGV2ZW50S2V5IHx8IGtleU5hbWVzW2tdID09PSBldmVudEtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZuKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59O1xuXG5jb25zdCB2U2hvdyA9IHtcclxuICAgIGJlZm9yZU1vdW50KGVsLCB7IHZhbHVlIH0sIHsgdHJhbnNpdGlvbiB9KSB7XHJcbiAgICAgICAgZWwuX3ZvZCA9IGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcclxuICAgICAgICBpZiAodHJhbnNpdGlvbiAmJiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLmJlZm9yZUVudGVyKGVsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbW91bnRlZChlbCwgeyB2YWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uICYmIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICB1cGRhdGVkKGVsLCB7IHZhbHVlLCBvbGRWYWx1ZSB9LCB7IHRyYW5zaXRpb24gfSkge1xyXG4gICAgICAgIGlmICghdmFsdWUgPT09ICFvbGRWYWx1ZSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5iZWZvcmVFbnRlcihlbCk7XHJcbiAgICAgICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb24uZW50ZXIoZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbi5sZWF2ZShlbCwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldERpc3BsYXkoZWwsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBzZXREaXNwbGF5KGVsLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlZm9yZVVubW91bnQoZWwsIHsgdmFsdWUgfSkge1xyXG4gICAgICAgIHNldERpc3BsYXkoZWwsIHZhbHVlKTtcclxuICAgIH1cclxufTtcclxuZnVuY3Rpb24gc2V0RGlzcGxheShlbCwgdmFsdWUpIHtcclxuICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl92b2QgOiAnbm9uZSc7XHJcbn1cclxuLy8gU1NSIHZub2RlIHRyYW5zZm9ybXMsIG9ubHkgdXNlZCB3aGVuIHVzZXIgaW5jbHVkZXMgY2xpZW50LW9yaWVudGVkIHJlbmRlclxyXG4vLyBmdW5jdGlvbiBpbiBTU1JcclxuZnVuY3Rpb24gaW5pdFZTaG93Rm9yU1NSKCkge1xyXG4gICAgdlNob3cuZ2V0U1NSUHJvcHMgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4geyBzdHlsZTogeyBkaXNwbGF5OiAnbm9uZScgfSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cblxuY29uc3QgcmVuZGVyZXJPcHRpb25zID0gZXh0ZW5kKHsgcGF0Y2hQcm9wIH0sIG5vZGVPcHMpO1xyXG4vLyBsYXp5IGNyZWF0ZSB0aGUgcmVuZGVyZXIgLSB0aGlzIG1ha2VzIGNvcmUgcmVuZGVyZXIgbG9naWMgdHJlZS1zaGFrYWJsZVxyXG4vLyBpbiBjYXNlIHRoZSB1c2VyIG9ubHkgaW1wb3J0cyByZWFjdGl2aXR5IHV0aWxpdGllcyBmcm9tIFZ1ZS5cclxubGV0IHJlbmRlcmVyO1xyXG5sZXQgZW5hYmxlZEh5ZHJhdGlvbiA9IGZhbHNlO1xyXG5mdW5jdGlvbiBlbnN1cmVSZW5kZXJlcigpIHtcclxuICAgIHJldHVybiAocmVuZGVyZXIgfHxcclxuICAgICAgICAocmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpKSk7XHJcbn1cclxuZnVuY3Rpb24gZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKSB7XHJcbiAgICByZW5kZXJlciA9IGVuYWJsZWRIeWRyYXRpb25cclxuICAgICAgICA/IHJlbmRlcmVyXHJcbiAgICAgICAgOiBjcmVhdGVIeWRyYXRpb25SZW5kZXJlcihyZW5kZXJlck9wdGlvbnMpO1xyXG4gICAgZW5hYmxlZEh5ZHJhdGlvbiA9IHRydWU7XHJcbiAgICByZXR1cm4gcmVuZGVyZXI7XHJcbn1cclxuLy8gdXNlIGV4cGxpY2l0IHR5cGUgY2FzdHMgaGVyZSB0byBhdm9pZCBpbXBvcnQoKSBjYWxscyBpbiByb2xsZWQtdXAgZC50c1xyXG5jb25zdCByZW5kZXIgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGVuc3VyZVJlbmRlcmVyKCkucmVuZGVyKC4uLmFyZ3MpO1xyXG59KTtcclxuY29uc3QgaHlkcmF0ZSA9ICgoLi4uYXJncykgPT4ge1xyXG4gICAgZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIoKS5oeWRyYXRlKC4uLmFyZ3MpO1xyXG59KTtcclxuY29uc3QgY3JlYXRlQXBwID0gKCguLi5hcmdzKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBlbnN1cmVSZW5kZXJlcigpLmNyZWF0ZUFwcCguLi5hcmdzKTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApO1xyXG4gICAgICAgIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IG1vdW50IH0gPSBhcHA7XHJcbiAgICBhcHAubW91bnQgPSAoY29udGFpbmVyT3JTZWxlY3RvcikgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXJPclNlbGVjdG9yKTtcclxuICAgICAgICBpZiAoIWNvbnRhaW5lcilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGFwcC5fY29tcG9uZW50O1xyXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihjb21wb25lbnQpICYmICFjb21wb25lbnQucmVuZGVyICYmICFjb21wb25lbnQudGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgLy8gX19VTlNBRkVfX1xyXG4gICAgICAgICAgICAvLyBSZWFzb246IHBvdGVudGlhbCBleGVjdXRpb24gb2YgSlMgZXhwcmVzc2lvbnMgaW4gaW4tRE9NIHRlbXBsYXRlLlxyXG4gICAgICAgICAgICAvLyBUaGUgdXNlciBtdXN0IG1ha2Ugc3VyZSB0aGUgaW4tRE9NIHRlbXBsYXRlIGlzIHRydXN0ZWQuIElmIGl0J3NcclxuICAgICAgICAgICAgLy8gcmVuZGVyZWQgYnkgdGhlIHNlcnZlciwgdGhlIHRlbXBsYXRlIHNob3VsZCBub3QgY29udGFpbiBhbnkgdXNlciBkYXRhLlxyXG4gICAgICAgICAgICBjb21wb25lbnQudGVtcGxhdGUgPSBjb250YWluZXIuaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjbGVhciBjb250ZW50IGJlZm9yZSBtb3VudGluZ1xyXG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBjb25zdCBwcm94eSA9IG1vdW50KGNvbnRhaW5lciwgZmFsc2UsIGNvbnRhaW5lciBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO1xyXG4gICAgICAgIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ3YtY2xvYWsnKTtcclxuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnZGF0YS12LWFwcCcsICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb3h5O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBhcHA7XHJcbn0pO1xyXG5jb25zdCBjcmVhdGVTU1JBcHAgPSAoKC4uLmFyZ3MpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGVuc3VyZUh5ZHJhdGlvblJlbmRlcmVyKCkuY3JlYXRlQXBwKC4uLmFyZ3MpO1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgIGluamVjdE5hdGl2ZVRhZ0NoZWNrKGFwcCk7XHJcbiAgICAgICAgaW5qZWN0Q29tcGlsZXJPcHRpb25zQ2hlY2soYXBwKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgbW91bnQgfSA9IGFwcDtcclxuICAgIGFwcC5tb3VudCA9IChjb250YWluZXJPclNlbGVjdG9yKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9ybWFsaXplQ29udGFpbmVyKGNvbnRhaW5lck9yU2VsZWN0b3IpO1xyXG4gICAgICAgIGlmIChjb250YWluZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1vdW50KGNvbnRhaW5lciwgdHJ1ZSwgY29udGFpbmVyIGluc3RhbmNlb2YgU1ZHRWxlbWVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBhcHA7XHJcbn0pO1xyXG5mdW5jdGlvbiBpbmplY3ROYXRpdmVUYWdDaGVjayhhcHApIHtcclxuICAgIC8vIEluamVjdCBgaXNOYXRpdmVUYWdgXHJcbiAgICAvLyB0aGlzIGlzIHVzZWQgZm9yIGNvbXBvbmVudCBuYW1lIHZhbGlkYXRpb24gKGRldiBvbmx5KVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdpc05hdGl2ZVRhZycsIHtcclxuICAgICAgICB2YWx1ZTogKHRhZykgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSxcclxuICAgICAgICB3cml0YWJsZTogZmFsc2VcclxuICAgIH0pO1xyXG59XHJcbi8vIGRldiBvbmx5XHJcbmZ1bmN0aW9uIGluamVjdENvbXBpbGVyT3B0aW9uc0NoZWNrKGFwcCkge1xyXG4gICAgaWYgKGlzUnVudGltZU9ubHkoKSkge1xyXG4gICAgICAgIGNvbnN0IGlzQ3VzdG9tRWxlbWVudCA9IGFwcC5jb25maWcuaXNDdXN0b21FbGVtZW50O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcHAuY29uZmlnLCAnaXNDdXN0b21FbGVtZW50Jywge1xyXG4gICAgICAgICAgICBnZXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNDdXN0b21FbGVtZW50O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBUaGUgXFxgaXNDdXN0b21FbGVtZW50XFxgIGNvbmZpZyBvcHRpb24gaXMgZGVwcmVjYXRlZC4gVXNlIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBcXGBjb21waWxlck9wdGlvbnMuaXNDdXN0b21FbGVtZW50XFxgIGluc3RlYWQuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBjb21waWxlck9wdGlvbnMgPSBhcHAuY29uZmlnLmNvbXBpbGVyT3B0aW9ucztcclxuICAgICAgICBjb25zdCBtc2cgPSBgVGhlIFxcYGNvbXBpbGVyT3B0aW9uc1xcYCBjb25maWcgb3B0aW9uIGlzIG9ubHkgcmVzcGVjdGVkIHdoZW4gdXNpbmcgYCArXHJcbiAgICAgICAgICAgIGBhIGJ1aWxkIG9mIFZ1ZS5qcyB0aGF0IGluY2x1ZGVzIHRoZSBydW50aW1lIGNvbXBpbGVyIChha2EgXCJmdWxsIGJ1aWxkXCIpLiBgICtcclxuICAgICAgICAgICAgYFNpbmNlIHlvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCwgXFxgY29tcGlsZXJPcHRpb25zXFxgIGAgK1xyXG4gICAgICAgICAgICBgbXVzdCBiZSBwYXNzZWQgdG8gXFxgQHZ1ZS9jb21waWxlci1kb21cXGAgaW4gdGhlIGJ1aWxkIHNldHVwIGluc3RlYWQuXFxuYCArXHJcbiAgICAgICAgICAgIGAtIEZvciB2dWUtbG9hZGVyOiBwYXNzIGl0IHZpYSB2dWUtbG9hZGVyJ3MgXFxgY29tcGlsZXJPcHRpb25zXFxgIGxvYWRlciBvcHRpb24uXFxuYCArXHJcbiAgICAgICAgICAgIGAtIEZvciB2dWUtY2xpOiBzZWUgaHR0cHM6Ly9jbGkudnVlanMub3JnL2d1aWRlL3dlYnBhY2suaHRtbCNtb2RpZnlpbmctb3B0aW9ucy1vZi1hLWxvYWRlclxcbmAgK1xyXG4gICAgICAgICAgICBgLSBGb3Igdml0ZTogcGFzcyBpdCB2aWEgQHZpdGVqcy9wbHVnaW4tdnVlIG9wdGlvbnMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdml0ZWpzL3ZpdGUvdHJlZS9tYWluL3BhY2thZ2VzL3BsdWdpbi12dWUjZXhhbXBsZS1mb3ItcGFzc2luZy1vcHRpb25zLXRvLXZ1ZWNvbXBpbGVyLWRvbWA7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFwcC5jb25maWcsICdjb21waWxlck9wdGlvbnMnLCB7XHJcbiAgICAgICAgICAgIGdldCgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4obXNnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21waWxlck9wdGlvbnM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldCgpIHtcclxuICAgICAgICAgICAgICAgIHdhcm4obXNnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRhaW5lcihjb250YWluZXIpIHtcclxuICAgIGlmIChpc1N0cmluZyhjb250YWluZXIpKSB7XHJcbiAgICAgICAgY29uc3QgcmVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIXJlcykge1xyXG4gICAgICAgICAgICB3YXJuKGBGYWlsZWQgdG8gbW91bnQgYXBwOiBtb3VudCB0YXJnZXQgc2VsZWN0b3IgXCIke2NvbnRhaW5lcn1cIiByZXR1cm5lZCBudWxsLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgfVxyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgIHdpbmRvdy5TaGFkb3dSb290ICYmXHJcbiAgICAgICAgY29udGFpbmVyIGluc3RhbmNlb2Ygd2luZG93LlNoYWRvd1Jvb3QgJiZcclxuICAgICAgICBjb250YWluZXIubW9kZSA9PT0gJ2Nsb3NlZCcpIHtcclxuICAgICAgICB3YXJuKGBtb3VudGluZyBvbiBhIFNoYWRvd1Jvb3Qgd2l0aCBcXGB7bW9kZTogXCJjbG9zZWRcIn1cXGAgbWF5IGxlYWQgdG8gdW5wcmVkaWN0YWJsZSBidWdzYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGFpbmVyO1xyXG59XHJcbmxldCBzc3JEaXJlY3RpdmVJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBpbml0RGlyZWN0aXZlc0ZvclNTUiA9ICgpID0+IHtcclxuICAgICAgICBpZiAoIXNzckRpcmVjdGl2ZUluaXRpYWxpemVkKSB7XHJcbiAgICAgICAgICAgIHNzckRpcmVjdGl2ZUluaXRpYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaW5pdFZNb2RlbEZvclNTUigpO1xyXG4gICAgICAgICAgICBpbml0VlNob3dGb3JTU1IoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICA7XG5cbmV4cG9ydCB7IFRyYW5zaXRpb24sIFRyYW5zaXRpb25Hcm91cCwgVnVlRWxlbWVudCwgY3JlYXRlQXBwLCBjcmVhdGVTU1JBcHAsIGRlZmluZUN1c3RvbUVsZW1lbnQsIGRlZmluZVNTUkN1c3RvbUVsZW1lbnQsIGh5ZHJhdGUsIGluaXREaXJlY3RpdmVzRm9yU1NSLCByZW5kZXIsIHVzZUNzc01vZHVsZSwgdXNlQ3NzVmFycywgdk1vZGVsQ2hlY2tib3gsIHZNb2RlbER5bmFtaWMsIHZNb2RlbFJhZGlvLCB2TW9kZWxTZWxlY3QsIHZNb2RlbFRleHQsIHZTaG93LCB3aXRoS2V5cywgd2l0aE1vZGlmaWVycyB9O1xuIiwiaW1wb3J0IHsgaXNTdHJpbmcsIGh5cGhlbmF0ZSwgTk9PUCwgZXh0ZW5kLCBpc09iamVjdCwgTk8sIGlzQXJyYXksIG1ha2VNYXAsIGlzU3ltYm9sLCBFTVBUWV9PQkosIGNhcGl0YWxpemUsIGNhbWVsaXplIGFzIGNhbWVsaXplJDEsIFBhdGNoRmxhZ05hbWVzLCBzbG90RmxhZ3NUZXh0LCBpc09uLCBpc1Jlc2VydmVkUHJvcCwgdG9IYW5kbGVyS2V5IH0gZnJvbSAnQHZ1ZS9zaGFyZWQnO1xuZXhwb3J0IHsgZ2VuZXJhdGVDb2RlRnJhbWUgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRPbkVycm9yKGVycm9yKSB7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxufVxyXG5mdW5jdGlvbiBkZWZhdWx0T25XYXJuKG1zZykge1xyXG4gICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNvbnNvbGUud2FybihgW1Z1ZSB3YXJuXSAke21zZy5tZXNzYWdlfWApO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyRXJyb3IoY29kZSwgbG9jLCBtZXNzYWdlcywgYWRkaXRpb25hbE1lc3NhZ2UpIHtcclxuICAgIGNvbnN0IG1zZyA9IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB8fCAhdHJ1ZVxyXG4gICAgICAgID8gKG1lc3NhZ2VzIHx8IGVycm9yTWVzc2FnZXMpW2NvZGVdICsgKGFkZGl0aW9uYWxNZXNzYWdlIHx8IGBgKVxyXG4gICAgICAgIDogY29kZTtcclxuICAgIGNvbnN0IGVycm9yID0gbmV3IFN5bnRheEVycm9yKFN0cmluZyhtc2cpKTtcclxuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xyXG4gICAgZXJyb3IubG9jID0gbG9jO1xyXG4gICAgcmV0dXJuIGVycm9yO1xyXG59XHJcbmNvbnN0IGVycm9yTWVzc2FnZXMgPSB7XHJcbiAgICAvLyBwYXJzZSBlcnJvcnNcclxuICAgIFswIC8qIEFCUlVQVF9DTE9TSU5HX09GX0VNUFRZX0NPTU1FTlQgKi9dOiAnSWxsZWdhbCBjb21tZW50LicsXHJcbiAgICBbMSAvKiBDREFUQV9JTl9IVE1MX0NPTlRFTlQgKi9dOiAnQ0RBVEEgc2VjdGlvbiBpcyBhbGxvd2VkIG9ubHkgaW4gWE1MIGNvbnRleHQuJyxcclxuICAgIFsyIC8qIERVUExJQ0FURV9BVFRSSUJVVEUgKi9dOiAnRHVwbGljYXRlIGF0dHJpYnV0ZS4nLFxyXG4gICAgWzMgLyogRU5EX1RBR19XSVRIX0FUVFJJQlVURVMgKi9dOiAnRW5kIHRhZyBjYW5ub3QgaGF2ZSBhdHRyaWJ1dGVzLicsXHJcbiAgICBbNCAvKiBFTkRfVEFHX1dJVEhfVFJBSUxJTkdfU09MSURVUyAqL106IFwiSWxsZWdhbCAnLycgaW4gdGFncy5cIixcclxuICAgIFs1IC8qIEVPRl9CRUZPUkVfVEFHX05BTUUgKi9dOiAnVW5leHBlY3RlZCBFT0YgaW4gdGFnLicsXHJcbiAgICBbNiAvKiBFT0ZfSU5fQ0RBVEEgKi9dOiAnVW5leHBlY3RlZCBFT0YgaW4gQ0RBVEEgc2VjdGlvbi4nLFxyXG4gICAgWzcgLyogRU9GX0lOX0NPTU1FTlQgKi9dOiAnVW5leHBlY3RlZCBFT0YgaW4gY29tbWVudC4nLFxyXG4gICAgWzggLyogRU9GX0lOX1NDUklQVF9IVE1MX0NPTU1FTlRfTElLRV9URVhUICovXTogJ1VuZXhwZWN0ZWQgRU9GIGluIHNjcmlwdC4nLFxyXG4gICAgWzkgLyogRU9GX0lOX1RBRyAqL106ICdVbmV4cGVjdGVkIEVPRiBpbiB0YWcuJyxcclxuICAgIFsxMCAvKiBJTkNPUlJFQ1RMWV9DTE9TRURfQ09NTUVOVCAqL106ICdJbmNvcnJlY3RseSBjbG9zZWQgY29tbWVudC4nLFxyXG4gICAgWzExIC8qIElOQ09SUkVDVExZX09QRU5FRF9DT01NRU5UICovXTogJ0luY29ycmVjdGx5IG9wZW5lZCBjb21tZW50LicsXHJcbiAgICBbMTIgLyogSU5WQUxJRF9GSVJTVF9DSEFSQUNURVJfT0ZfVEFHX05BTUUgKi9dOiBcIklsbGVnYWwgdGFnIG5hbWUuIFVzZSAnJmx0OycgdG8gcHJpbnQgJzwnLlwiLFxyXG4gICAgWzEzIC8qIE1JU1NJTkdfQVRUUklCVVRFX1ZBTFVFICovXTogJ0F0dHJpYnV0ZSB2YWx1ZSB3YXMgZXhwZWN0ZWQuJyxcclxuICAgIFsxNCAvKiBNSVNTSU5HX0VORF9UQUdfTkFNRSAqL106ICdFbmQgdGFnIG5hbWUgd2FzIGV4cGVjdGVkLicsXHJcbiAgICBbMTUgLyogTUlTU0lOR19XSElURVNQQUNFX0JFVFdFRU5fQVRUUklCVVRFUyAqL106ICdXaGl0ZXNwYWNlIHdhcyBleHBlY3RlZC4nLFxyXG4gICAgWzE2IC8qIE5FU1RFRF9DT01NRU5UICovXTogXCJVbmV4cGVjdGVkICc8IS0tJyBpbiBjb21tZW50LlwiLFxyXG4gICAgWzE3IC8qIFVORVhQRUNURURfQ0hBUkFDVEVSX0lOX0FUVFJJQlVURV9OQU1FICovXTogJ0F0dHJpYnV0ZSBuYW1lIGNhbm5vdCBjb250YWluIFUrMDAyMiAoXCIpLCBVKzAwMjcgKFxcJyksIGFuZCBVKzAwM0MgKDwpLicsXHJcbiAgICBbMTggLyogVU5FWFBFQ1RFRF9DSEFSQUNURVJfSU5fVU5RVU9URURfQVRUUklCVVRFX1ZBTFVFICovXTogJ1VucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZSBjYW5ub3QgY29udGFpbiBVKzAwMjIgKFwiKSwgVSswMDI3IChcXCcpLCBVKzAwM0MgKDwpLCBVKzAwM0QgKD0pLCBhbmQgVSswMDYwIChgKS4nLFxyXG4gICAgWzE5IC8qIFVORVhQRUNURURfRVFVQUxTX1NJR05fQkVGT1JFX0FUVFJJQlVURV9OQU1FICovXTogXCJBdHRyaWJ1dGUgbmFtZSBjYW5ub3Qgc3RhcnQgd2l0aCAnPScuXCIsXHJcbiAgICBbMjEgLyogVU5FWFBFQ1RFRF9RVUVTVElPTl9NQVJLX0lOU1RFQURfT0ZfVEFHX05BTUUgKi9dOiBcIic8PycgaXMgYWxsb3dlZCBvbmx5IGluIFhNTCBjb250ZXh0LlwiLFxyXG4gICAgWzIwIC8qIFVORVhQRUNURURfTlVMTF9DSEFSQUNURVIgKi9dOiBgVW5leHBlY3RlZCBudWxsIGNoYXJhY3Rlci5gLFxyXG4gICAgWzIyIC8qIFVORVhQRUNURURfU09MSURVU19JTl9UQUcgKi9dOiBcIklsbGVnYWwgJy8nIGluIHRhZ3MuXCIsXHJcbiAgICAvLyBWdWUtc3BlY2lmaWMgcGFyc2UgZXJyb3JzXHJcbiAgICBbMjMgLyogWF9JTlZBTElEX0VORF9UQUcgKi9dOiAnSW52YWxpZCBlbmQgdGFnLicsXHJcbiAgICBbMjQgLyogWF9NSVNTSU5HX0VORF9UQUcgKi9dOiAnRWxlbWVudCBpcyBtaXNzaW5nIGVuZCB0YWcuJyxcclxuICAgIFsyNSAvKiBYX01JU1NJTkdfSU5URVJQT0xBVElPTl9FTkQgKi9dOiAnSW50ZXJwb2xhdGlvbiBlbmQgc2lnbiB3YXMgbm90IGZvdW5kLicsXHJcbiAgICBbMjcgLyogWF9NSVNTSU5HX0RZTkFNSUNfRElSRUNUSVZFX0FSR1VNRU5UX0VORCAqL106ICdFbmQgYnJhY2tldCBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgd2FzIG5vdCBmb3VuZC4gJyArXHJcbiAgICAgICAgJ05vdGUgdGhhdCBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCBjYW5ub3QgY29udGFpbiBzcGFjZXMuJyxcclxuICAgIFsyNiAvKiBYX01JU1NJTkdfRElSRUNUSVZFX05BTUUgKi9dOiAnTGVnYWwgZGlyZWN0aXZlIG5hbWUgd2FzIGV4cGVjdGVkLicsXHJcbiAgICAvLyB0cmFuc2Zvcm0gZXJyb3JzXHJcbiAgICBbMjggLyogWF9WX0lGX05PX0VYUFJFU1NJT04gKi9dOiBgdi1pZi92LWVsc2UtaWYgaXMgbWlzc2luZyBleHByZXNzaW9uLmAsXHJcbiAgICBbMjkgLyogWF9WX0lGX1NBTUVfS0VZICovXTogYHYtaWYvZWxzZSBicmFuY2hlcyBtdXN0IHVzZSB1bmlxdWUga2V5cy5gLFxyXG4gICAgWzMwIC8qIFhfVl9FTFNFX05PX0FESkFDRU5UX0lGICovXTogYHYtZWxzZS92LWVsc2UtaWYgaGFzIG5vIGFkamFjZW50IHYtaWYgb3Igdi1lbHNlLWlmLmAsXHJcbiAgICBbMzEgLyogWF9WX0ZPUl9OT19FWFBSRVNTSU9OICovXTogYHYtZm9yIGlzIG1pc3NpbmcgZXhwcmVzc2lvbi5gLFxyXG4gICAgWzMyIC8qIFhfVl9GT1JfTUFMRk9STUVEX0VYUFJFU1NJT04gKi9dOiBgdi1mb3IgaGFzIGludmFsaWQgZXhwcmVzc2lvbi5gLFxyXG4gICAgWzMzIC8qIFhfVl9GT1JfVEVNUExBVEVfS0VZX1BMQUNFTUVOVCAqL106IGA8dGVtcGxhdGUgdi1mb3I+IGtleSBzaG91bGQgYmUgcGxhY2VkIG9uIHRoZSA8dGVtcGxhdGU+IHRhZy5gLFxyXG4gICAgWzM0IC8qIFhfVl9CSU5EX05PX0VYUFJFU1NJT04gKi9dOiBgdi1iaW5kIGlzIG1pc3NpbmcgZXhwcmVzc2lvbi5gLFxyXG4gICAgWzM1IC8qIFhfVl9PTl9OT19FWFBSRVNTSU9OICovXTogYHYtb24gaXMgbWlzc2luZyBleHByZXNzaW9uLmAsXHJcbiAgICBbMzYgLyogWF9WX1NMT1RfVU5FWFBFQ1RFRF9ESVJFQ1RJVkVfT05fU0xPVF9PVVRMRVQgKi9dOiBgVW5leHBlY3RlZCBjdXN0b20gZGlyZWN0aXZlIG9uIDxzbG90PiBvdXRsZXQuYCxcclxuICAgIFszNyAvKiBYX1ZfU0xPVF9NSVhFRF9TTE9UX1VTQUdFICovXTogYE1peGVkIHYtc2xvdCB1c2FnZSBvbiBib3RoIHRoZSBjb21wb25lbnQgYW5kIG5lc3RlZCA8dGVtcGxhdGU+LmAgK1xyXG4gICAgICAgIGBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBuYW1lZCBzbG90cywgYWxsIHNsb3RzIHNob3VsZCB1c2UgPHRlbXBsYXRlPiBgICtcclxuICAgICAgICBgc3ludGF4IHRvIGF2b2lkIHNjb3BlIGFtYmlndWl0eS5gLFxyXG4gICAgWzM4IC8qIFhfVl9TTE9UX0RVUExJQ0FURV9TTE9UX05BTUVTICovXTogYER1cGxpY2F0ZSBzbG90IG5hbWVzIGZvdW5kLiBgLFxyXG4gICAgWzM5IC8qIFhfVl9TTE9UX0VYVFJBTkVPVVNfREVGQVVMVF9TTE9UX0NISUxEUkVOICovXTogYEV4dHJhbmVvdXMgY2hpbGRyZW4gZm91bmQgd2hlbiBjb21wb25lbnQgYWxyZWFkeSBoYXMgZXhwbGljaXRseSBuYW1lZCBgICtcclxuICAgICAgICBgZGVmYXVsdCBzbG90LiBUaGVzZSBjaGlsZHJlbiB3aWxsIGJlIGlnbm9yZWQuYCxcclxuICAgIFs0MCAvKiBYX1ZfU0xPVF9NSVNQTEFDRUQgKi9dOiBgdi1zbG90IGNhbiBvbmx5IGJlIHVzZWQgb24gY29tcG9uZW50cyBvciA8dGVtcGxhdGU+IHRhZ3MuYCxcclxuICAgIFs0MSAvKiBYX1ZfTU9ERUxfTk9fRVhQUkVTU0lPTiAqL106IGB2LW1vZGVsIGlzIG1pc3NpbmcgZXhwcmVzc2lvbi5gLFxyXG4gICAgWzQyIC8qIFhfVl9NT0RFTF9NQUxGT1JNRURfRVhQUkVTU0lPTiAqL106IGB2LW1vZGVsIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBKYXZhU2NyaXB0IG1lbWJlciBleHByZXNzaW9uLmAsXHJcbiAgICBbNDMgLyogWF9WX01PREVMX09OX1NDT1BFX1ZBUklBQkxFICovXTogYHYtbW9kZWwgY2Fubm90IGJlIHVzZWQgb24gdi1mb3Igb3Igdi1zbG90IHNjb3BlIHZhcmlhYmxlcyBiZWNhdXNlIHRoZXkgYXJlIG5vdCB3cml0YWJsZS5gLFxyXG4gICAgWzQ0IC8qIFhfSU5WQUxJRF9FWFBSRVNTSU9OICovXTogYEVycm9yIHBhcnNpbmcgSmF2YVNjcmlwdCBleHByZXNzaW9uOiBgLFxyXG4gICAgWzQ1IC8qIFhfS0VFUF9BTElWRV9JTlZBTElEX0NISUxEUkVOICovXTogYDxLZWVwQWxpdmU+IGV4cGVjdHMgZXhhY3RseSBvbmUgY2hpbGQgY29tcG9uZW50LmAsXHJcbiAgICAvLyBnZW5lcmljIGVycm9yc1xyXG4gICAgWzQ2IC8qIFhfUFJFRklYX0lEX05PVF9TVVBQT1JURUQgKi9dOiBgXCJwcmVmaXhJZGVudGlmaWVyc1wiIG9wdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnVpbGQgb2YgY29tcGlsZXIuYCxcclxuICAgIFs0NyAvKiBYX01PRFVMRV9NT0RFX05PVF9TVVBQT1JURUQgKi9dOiBgRVMgbW9kdWxlIG1vZGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJ1aWxkIG9mIGNvbXBpbGVyLmAsXHJcbiAgICBbNDggLyogWF9DQUNIRV9IQU5ETEVSX05PVF9TVVBQT1JURUQgKi9dOiBgXCJjYWNoZUhhbmRsZXJzXCIgb3B0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIHdoZW4gdGhlIFwicHJlZml4SWRlbnRpZmllcnNcIiBvcHRpb24gaXMgZW5hYmxlZC5gLFxyXG4gICAgWzQ5IC8qIFhfU0NPUEVfSURfTk9UX1NVUFBPUlRFRCAqL106IGBcInNjb3BlSWRcIiBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgaW4gbW9kdWxlIG1vZGUuYCxcclxuICAgIC8vIGp1c3QgdG8gZnVsZmlsbCB0eXBlc1xyXG4gICAgWzUwIC8qIF9fRVhURU5EX1BPSU5UX18gKi9dOiBgYFxyXG59O1xuXG5jb25zdCBGUkFHTUVOVCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgRnJhZ21lbnRgIDogYGApO1xyXG5jb25zdCBURUxFUE9SVCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgVGVsZXBvcnRgIDogYGApO1xyXG5jb25zdCBTVVNQRU5TRSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgU3VzcGVuc2VgIDogYGApO1xyXG5jb25zdCBLRUVQX0FMSVZFID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBLZWVwQWxpdmVgIDogYGApO1xyXG5jb25zdCBCQVNFX1RSQU5TSVRJT04gPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYEJhc2VUcmFuc2l0aW9uYCA6IGBgKTtcclxuY29uc3QgT1BFTl9CTE9DSyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgb3BlbkJsb2NrYCA6IGBgKTtcclxuY29uc3QgQ1JFQVRFX0JMT0NLID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBjcmVhdGVCbG9ja2AgOiBgYCk7XHJcbmNvbnN0IENSRUFURV9FTEVNRU5UX0JMT0NLID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBjcmVhdGVFbGVtZW50QmxvY2tgIDogYGApO1xyXG5jb25zdCBDUkVBVEVfVk5PREUgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYGNyZWF0ZVZOb2RlYCA6IGBgKTtcclxuY29uc3QgQ1JFQVRFX0VMRU1FTlRfVk5PREUgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYGNyZWF0ZUVsZW1lbnRWTm9kZWAgOiBgYCk7XHJcbmNvbnN0IENSRUFURV9DT01NRU5UID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBjcmVhdGVDb21tZW50Vk5vZGVgIDogYGApO1xyXG5jb25zdCBDUkVBVEVfVEVYVCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgY3JlYXRlVGV4dFZOb2RlYCA6IGBgKTtcclxuY29uc3QgQ1JFQVRFX1NUQVRJQyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgY3JlYXRlU3RhdGljVk5vZGVgIDogYGApO1xyXG5jb25zdCBSRVNPTFZFX0NPTVBPTkVOVCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgcmVzb2x2ZUNvbXBvbmVudGAgOiBgYCk7XHJcbmNvbnN0IFJFU09MVkVfRFlOQU1JQ19DT01QT05FTlQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHJlc29sdmVEeW5hbWljQ29tcG9uZW50YCA6IGBgKTtcclxuY29uc3QgUkVTT0xWRV9ESVJFQ1RJVkUgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHJlc29sdmVEaXJlY3RpdmVgIDogYGApO1xyXG5jb25zdCBSRVNPTFZFX0ZJTFRFUiA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgcmVzb2x2ZUZpbHRlcmAgOiBgYCk7XHJcbmNvbnN0IFdJVEhfRElSRUNUSVZFUyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgd2l0aERpcmVjdGl2ZXNgIDogYGApO1xyXG5jb25zdCBSRU5ERVJfTElTVCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgcmVuZGVyTGlzdGAgOiBgYCk7XHJcbmNvbnN0IFJFTkRFUl9TTE9UID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGByZW5kZXJTbG90YCA6IGBgKTtcclxuY29uc3QgQ1JFQVRFX1NMT1RTID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBjcmVhdGVTbG90c2AgOiBgYCk7XHJcbmNvbnN0IFRPX0RJU1BMQVlfU1RSSU5HID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGB0b0Rpc3BsYXlTdHJpbmdgIDogYGApO1xyXG5jb25zdCBNRVJHRV9QUk9QUyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgbWVyZ2VQcm9wc2AgOiBgYCk7XHJcbmNvbnN0IE5PUk1BTElaRV9DTEFTUyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgbm9ybWFsaXplQ2xhc3NgIDogYGApO1xyXG5jb25zdCBOT1JNQUxJWkVfU1RZTEUgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYG5vcm1hbGl6ZVN0eWxlYCA6IGBgKTtcclxuY29uc3QgTk9STUFMSVpFX1BST1BTID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBub3JtYWxpemVQcm9wc2AgOiBgYCk7XHJcbmNvbnN0IEdVQVJEX1JFQUNUSVZFX1BST1BTID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBndWFyZFJlYWN0aXZlUHJvcHNgIDogYGApO1xyXG5jb25zdCBUT19IQU5ETEVSUyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgdG9IYW5kbGVyc2AgOiBgYCk7XHJcbmNvbnN0IENBTUVMSVpFID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBjYW1lbGl6ZWAgOiBgYCk7XHJcbmNvbnN0IENBUElUQUxJWkUgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYGNhcGl0YWxpemVgIDogYGApO1xyXG5jb25zdCBUT19IQU5ETEVSX0tFWSA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgdG9IYW5kbGVyS2V5YCA6IGBgKTtcclxuY29uc3QgU0VUX0JMT0NLX1RSQUNLSU5HID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBzZXRCbG9ja1RyYWNraW5nYCA6IGBgKTtcclxuY29uc3QgUFVTSF9TQ09QRV9JRCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgcHVzaFNjb3BlSWRgIDogYGApO1xyXG5jb25zdCBQT1BfU0NPUEVfSUQgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHBvcFNjb3BlSWRgIDogYGApO1xyXG5jb25zdCBXSVRIX0NUWCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgd2l0aEN0eGAgOiBgYCk7XHJcbmNvbnN0IFVOUkVGID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGB1bnJlZmAgOiBgYCk7XHJcbmNvbnN0IElTX1JFRiA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgaXNSZWZgIDogYGApO1xyXG5jb25zdCBXSVRIX01FTU8gPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHdpdGhNZW1vYCA6IGBgKTtcclxuY29uc3QgSVNfTUVNT19TQU1FID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGBpc01lbW9TYW1lYCA6IGBgKTtcclxuLy8gTmFtZSBtYXBwaW5nIGZvciBydW50aW1lIGhlbHBlcnMgdGhhdCBuZWVkIHRvIGJlIGltcG9ydGVkIGZyb20gJ3Z1ZScgaW5cclxuLy8gZ2VuZXJhdGVkIGNvZGUuIE1ha2Ugc3VyZSB0aGVzZSBhcmUgY29ycmVjdGx5IGV4cG9ydGVkIGluIHRoZSBydW50aW1lIVxyXG4vLyBVc2luZyBgYW55YCBoZXJlIGJlY2F1c2UgVFMgZG9lc24ndCBhbGxvdyBzeW1ib2xzIGFzIGluZGV4IHR5cGUuXHJcbmNvbnN0IGhlbHBlck5hbWVNYXAgPSB7XHJcbiAgICBbRlJBR01FTlRdOiBgRnJhZ21lbnRgLFxyXG4gICAgW1RFTEVQT1JUXTogYFRlbGVwb3J0YCxcclxuICAgIFtTVVNQRU5TRV06IGBTdXNwZW5zZWAsXHJcbiAgICBbS0VFUF9BTElWRV06IGBLZWVwQWxpdmVgLFxyXG4gICAgW0JBU0VfVFJBTlNJVElPTl06IGBCYXNlVHJhbnNpdGlvbmAsXHJcbiAgICBbT1BFTl9CTE9DS106IGBvcGVuQmxvY2tgLFxyXG4gICAgW0NSRUFURV9CTE9DS106IGBjcmVhdGVCbG9ja2AsXHJcbiAgICBbQ1JFQVRFX0VMRU1FTlRfQkxPQ0tdOiBgY3JlYXRlRWxlbWVudEJsb2NrYCxcclxuICAgIFtDUkVBVEVfVk5PREVdOiBgY3JlYXRlVk5vZGVgLFxyXG4gICAgW0NSRUFURV9FTEVNRU5UX1ZOT0RFXTogYGNyZWF0ZUVsZW1lbnRWTm9kZWAsXHJcbiAgICBbQ1JFQVRFX0NPTU1FTlRdOiBgY3JlYXRlQ29tbWVudFZOb2RlYCxcclxuICAgIFtDUkVBVEVfVEVYVF06IGBjcmVhdGVUZXh0Vk5vZGVgLFxyXG4gICAgW0NSRUFURV9TVEFUSUNdOiBgY3JlYXRlU3RhdGljVk5vZGVgLFxyXG4gICAgW1JFU09MVkVfQ09NUE9ORU5UXTogYHJlc29sdmVDb21wb25lbnRgLFxyXG4gICAgW1JFU09MVkVfRFlOQU1JQ19DT01QT05FTlRdOiBgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnRgLFxyXG4gICAgW1JFU09MVkVfRElSRUNUSVZFXTogYHJlc29sdmVEaXJlY3RpdmVgLFxyXG4gICAgW1JFU09MVkVfRklMVEVSXTogYHJlc29sdmVGaWx0ZXJgLFxyXG4gICAgW1dJVEhfRElSRUNUSVZFU106IGB3aXRoRGlyZWN0aXZlc2AsXHJcbiAgICBbUkVOREVSX0xJU1RdOiBgcmVuZGVyTGlzdGAsXHJcbiAgICBbUkVOREVSX1NMT1RdOiBgcmVuZGVyU2xvdGAsXHJcbiAgICBbQ1JFQVRFX1NMT1RTXTogYGNyZWF0ZVNsb3RzYCxcclxuICAgIFtUT19ESVNQTEFZX1NUUklOR106IGB0b0Rpc3BsYXlTdHJpbmdgLFxyXG4gICAgW01FUkdFX1BST1BTXTogYG1lcmdlUHJvcHNgLFxyXG4gICAgW05PUk1BTElaRV9DTEFTU106IGBub3JtYWxpemVDbGFzc2AsXHJcbiAgICBbTk9STUFMSVpFX1NUWUxFXTogYG5vcm1hbGl6ZVN0eWxlYCxcclxuICAgIFtOT1JNQUxJWkVfUFJPUFNdOiBgbm9ybWFsaXplUHJvcHNgLFxyXG4gICAgW0dVQVJEX1JFQUNUSVZFX1BST1BTXTogYGd1YXJkUmVhY3RpdmVQcm9wc2AsXHJcbiAgICBbVE9fSEFORExFUlNdOiBgdG9IYW5kbGVyc2AsXHJcbiAgICBbQ0FNRUxJWkVdOiBgY2FtZWxpemVgLFxyXG4gICAgW0NBUElUQUxJWkVdOiBgY2FwaXRhbGl6ZWAsXHJcbiAgICBbVE9fSEFORExFUl9LRVldOiBgdG9IYW5kbGVyS2V5YCxcclxuICAgIFtTRVRfQkxPQ0tfVFJBQ0tJTkddOiBgc2V0QmxvY2tUcmFja2luZ2AsXHJcbiAgICBbUFVTSF9TQ09QRV9JRF06IGBwdXNoU2NvcGVJZGAsXHJcbiAgICBbUE9QX1NDT1BFX0lEXTogYHBvcFNjb3BlSWRgLFxyXG4gICAgW1dJVEhfQ1RYXTogYHdpdGhDdHhgLFxyXG4gICAgW1VOUkVGXTogYHVucmVmYCxcclxuICAgIFtJU19SRUZdOiBgaXNSZWZgLFxyXG4gICAgW1dJVEhfTUVNT106IGB3aXRoTWVtb2AsXHJcbiAgICBbSVNfTUVNT19TQU1FXTogYGlzTWVtb1NhbWVgXHJcbn07XHJcbmZ1bmN0aW9uIHJlZ2lzdGVyUnVudGltZUhlbHBlcnMoaGVscGVycykge1xyXG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhoZWxwZXJzKS5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgIGhlbHBlck5hbWVNYXBbc10gPSBoZWxwZXJzW3NdO1xyXG4gICAgfSk7XHJcbn1cblxuLy8gQVNUIFV0aWxpdGllcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy8gU29tZSBleHByZXNzaW9ucywgZS5nLiBzZXF1ZW5jZSBhbmQgY29uZGl0aW9uYWwgZXhwcmVzc2lvbnMsIGFyZSBuZXZlclxyXG4vLyBhc3NvY2lhdGVkIHdpdGggdGVtcGxhdGUgbm9kZXMsIHNvIHRoZWlyIHNvdXJjZSBsb2NhdGlvbnMgYXJlIGp1c3QgYSBzdHViLlxyXG4vLyBDb250YWluZXIgdHlwZXMgbGlrZSBDb21wb3VuZEV4cHJlc3Npb24gYWxzbyBkb24ndCBuZWVkIGEgcmVhbCBsb2NhdGlvbi5cclxuY29uc3QgbG9jU3R1YiA9IHtcclxuICAgIHNvdXJjZTogJycsXHJcbiAgICBzdGFydDogeyBsaW5lOiAxLCBjb2x1bW46IDEsIG9mZnNldDogMCB9LFxyXG4gICAgZW5kOiB7IGxpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwIH1cclxufTtcclxuZnVuY3Rpb24gY3JlYXRlUm9vdChjaGlsZHJlbiwgbG9jID0gbG9jU3R1Yikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiAwIC8qIFJPT1QgKi8sXHJcbiAgICAgICAgY2hpbGRyZW4sXHJcbiAgICAgICAgaGVscGVyczogW10sXHJcbiAgICAgICAgY29tcG9uZW50czogW10sXHJcbiAgICAgICAgZGlyZWN0aXZlczogW10sXHJcbiAgICAgICAgaG9pc3RzOiBbXSxcclxuICAgICAgICBpbXBvcnRzOiBbXSxcclxuICAgICAgICBjYWNoZWQ6IDAsXHJcbiAgICAgICAgdGVtcHM6IDAsXHJcbiAgICAgICAgY29kZWdlbk5vZGU6IHVuZGVmaW5lZCxcclxuICAgICAgICBsb2NcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlVk5vZGVDYWxsKGNvbnRleHQsIHRhZywgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgZGlyZWN0aXZlcywgaXNCbG9jayA9IGZhbHNlLCBkaXNhYmxlVHJhY2tpbmcgPSBmYWxzZSwgaXNDb21wb25lbnQgPSBmYWxzZSwgbG9jID0gbG9jU3R1Yikge1xyXG4gICAgaWYgKGNvbnRleHQpIHtcclxuICAgICAgICBpZiAoaXNCbG9jaykge1xyXG4gICAgICAgICAgICBjb250ZXh0LmhlbHBlcihPUEVOX0JMT0NLKTtcclxuICAgICAgICAgICAgY29udGV4dC5oZWxwZXIoZ2V0Vk5vZGVCbG9ja0hlbHBlcihjb250ZXh0LmluU1NSLCBpc0NvbXBvbmVudCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29udGV4dC5oZWxwZXIoZ2V0Vk5vZGVIZWxwZXIoY29udGV4dC5pblNTUiwgaXNDb21wb25lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRpcmVjdGl2ZXMpIHtcclxuICAgICAgICAgICAgY29udGV4dC5oZWxwZXIoV0lUSF9ESVJFQ1RJVkVTKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDEzIC8qIFZOT0RFX0NBTEwgKi8sXHJcbiAgICAgICAgdGFnLFxyXG4gICAgICAgIHByb3BzLFxyXG4gICAgICAgIGNoaWxkcmVuLFxyXG4gICAgICAgIHBhdGNoRmxhZyxcclxuICAgICAgICBkeW5hbWljUHJvcHMsXHJcbiAgICAgICAgZGlyZWN0aXZlcyxcclxuICAgICAgICBpc0Jsb2NrLFxyXG4gICAgICAgIGRpc2FibGVUcmFja2luZyxcclxuICAgICAgICBpc0NvbXBvbmVudCxcclxuICAgICAgICBsb2NcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlQXJyYXlFeHByZXNzaW9uKGVsZW1lbnRzLCBsb2MgPSBsb2NTdHViKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDE3IC8qIEpTX0FSUkFZX0VYUFJFU1NJT04gKi8sXHJcbiAgICAgICAgbG9jLFxyXG4gICAgICAgIGVsZW1lbnRzXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdEV4cHJlc3Npb24ocHJvcGVydGllcywgbG9jID0gbG9jU3R1Yikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiAxNSAvKiBKU19PQkpFQ1RfRVhQUkVTU0lPTiAqLyxcclxuICAgICAgICBsb2MsXHJcbiAgICAgICAgcHJvcGVydGllc1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVPYmplY3RQcm9wZXJ0eShrZXksIHZhbHVlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDE2IC8qIEpTX1BST1BFUlRZICovLFxyXG4gICAgICAgIGxvYzogbG9jU3R1YixcclxuICAgICAgICBrZXk6IGlzU3RyaW5nKGtleSkgPyBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGtleSwgdHJ1ZSkgOiBrZXksXHJcbiAgICAgICAgdmFsdWVcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihjb250ZW50LCBpc1N0YXRpYyA9IGZhbHNlLCBsb2MgPSBsb2NTdHViLCBjb25zdFR5cGUgPSAwIC8qIE5PVF9DT05TVEFOVCAqLykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovLFxyXG4gICAgICAgIGxvYyxcclxuICAgICAgICBjb250ZW50LFxyXG4gICAgICAgIGlzU3RhdGljLFxyXG4gICAgICAgIGNvbnN0VHlwZTogaXNTdGF0aWMgPyAzIC8qIENBTl9TVFJJTkdJRlkgKi8gOiBjb25zdFR5cGVcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSW50ZXJwb2xhdGlvbihjb250ZW50LCBsb2MpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogNSAvKiBJTlRFUlBPTEFUSU9OICovLFxyXG4gICAgICAgIGxvYyxcclxuICAgICAgICBjb250ZW50OiBpc1N0cmluZyhjb250ZW50KVxyXG4gICAgICAgICAgICA/IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oY29udGVudCwgZmFsc2UsIGxvYylcclxuICAgICAgICAgICAgOiBjb250ZW50XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihjaGlsZHJlbiwgbG9jID0gbG9jU3R1Yikge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiA4IC8qIENPTVBPVU5EX0VYUFJFU1NJT04gKi8sXHJcbiAgICAgICAgbG9jLFxyXG4gICAgICAgIGNoaWxkcmVuXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNhbGxlZSwgYXJncyA9IFtdLCBsb2MgPSBsb2NTdHViKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDE0IC8qIEpTX0NBTExfRVhQUkVTU0lPTiAqLyxcclxuICAgICAgICBsb2MsXHJcbiAgICAgICAgY2FsbGVlLFxyXG4gICAgICAgIGFyZ3VtZW50czogYXJnc1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbkV4cHJlc3Npb24ocGFyYW1zLCByZXR1cm5zID0gdW5kZWZpbmVkLCBuZXdsaW5lID0gZmFsc2UsIGlzU2xvdCA9IGZhbHNlLCBsb2MgPSBsb2NTdHViKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDE4IC8qIEpTX0ZVTkNUSU9OX0VYUFJFU1NJT04gKi8sXHJcbiAgICAgICAgcGFyYW1zLFxyXG4gICAgICAgIHJldHVybnMsXHJcbiAgICAgICAgbmV3bGluZSxcclxuICAgICAgICBpc1Nsb3QsXHJcbiAgICAgICAgbG9jXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbih0ZXN0LCBjb25zZXF1ZW50LCBhbHRlcm5hdGUsIG5ld2xpbmUgPSB0cnVlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDE5IC8qIEpTX0NPTkRJVElPTkFMX0VYUFJFU1NJT04gKi8sXHJcbiAgICAgICAgdGVzdCxcclxuICAgICAgICBjb25zZXF1ZW50LFxyXG4gICAgICAgIGFsdGVybmF0ZSxcclxuICAgICAgICBuZXdsaW5lLFxyXG4gICAgICAgIGxvYzogbG9jU3R1YlxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVDYWNoZUV4cHJlc3Npb24oaW5kZXgsIHZhbHVlLCBpc1ZOb2RlID0gZmFsc2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogMjAgLyogSlNfQ0FDSEVfRVhQUkVTU0lPTiAqLyxcclxuICAgICAgICBpbmRleCxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBpc1ZOb2RlLFxyXG4gICAgICAgIGxvYzogbG9jU3R1YlxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVCbG9ja1N0YXRlbWVudChib2R5KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDIxIC8qIEpTX0JMT0NLX1NUQVRFTUVOVCAqLyxcclxuICAgICAgICBib2R5LFxyXG4gICAgICAgIGxvYzogbG9jU3R1YlxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVUZW1wbGF0ZUxpdGVyYWwoZWxlbWVudHMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogMjIgLyogSlNfVEVNUExBVEVfTElURVJBTCAqLyxcclxuICAgICAgICBlbGVtZW50cyxcclxuICAgICAgICBsb2M6IGxvY1N0dWJcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlSWZTdGF0ZW1lbnQodGVzdCwgY29uc2VxdWVudCwgYWx0ZXJuYXRlKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDIzIC8qIEpTX0lGX1NUQVRFTUVOVCAqLyxcclxuICAgICAgICB0ZXN0LFxyXG4gICAgICAgIGNvbnNlcXVlbnQsXHJcbiAgICAgICAgYWx0ZXJuYXRlLFxyXG4gICAgICAgIGxvYzogbG9jU3R1YlxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVBc3NpZ25tZW50RXhwcmVzc2lvbihsZWZ0LCByaWdodCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiAyNCAvKiBKU19BU1NJR05NRU5UX0VYUFJFU1NJT04gKi8sXHJcbiAgICAgICAgbGVmdCxcclxuICAgICAgICByaWdodCxcclxuICAgICAgICBsb2M6IGxvY1N0dWJcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2VxdWVuY2VFeHByZXNzaW9uKGV4cHJlc3Npb25zKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDI1IC8qIEpTX1NFUVVFTkNFX0VYUFJFU1NJT04gKi8sXHJcbiAgICAgICAgZXhwcmVzc2lvbnMsXHJcbiAgICAgICAgbG9jOiBsb2NTdHViXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVJldHVyblN0YXRlbWVudChyZXR1cm5zKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDI2IC8qIEpTX1JFVFVSTl9TVEFURU1FTlQgKi8sXHJcbiAgICAgICAgcmV0dXJucyxcclxuICAgICAgICBsb2M6IGxvY1N0dWJcclxuICAgIH07XHJcbn1cblxuY29uc3QgaXNTdGF0aWNFeHAgPSAocCkgPT4gcC50eXBlID09PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovICYmIHAuaXNTdGF0aWM7XHJcbmNvbnN0IGlzQnVpbHRJblR5cGUgPSAodGFnLCBleHBlY3RlZCkgPT4gdGFnID09PSBleHBlY3RlZCB8fCB0YWcgPT09IGh5cGhlbmF0ZShleHBlY3RlZCk7XHJcbmZ1bmN0aW9uIGlzQ29yZUNvbXBvbmVudCh0YWcpIHtcclxuICAgIGlmIChpc0J1aWx0SW5UeXBlKHRhZywgJ1RlbGVwb3J0JykpIHtcclxuICAgICAgICByZXR1cm4gVEVMRVBPUlQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0J1aWx0SW5UeXBlKHRhZywgJ1N1c3BlbnNlJykpIHtcclxuICAgICAgICByZXR1cm4gU1VTUEVOU0U7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0J1aWx0SW5UeXBlKHRhZywgJ0tlZXBBbGl2ZScpKSB7XHJcbiAgICAgICAgcmV0dXJuIEtFRVBfQUxJVkU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc0J1aWx0SW5UeXBlKHRhZywgJ0Jhc2VUcmFuc2l0aW9uJykpIHtcclxuICAgICAgICByZXR1cm4gQkFTRV9UUkFOU0lUSU9OO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IG5vbklkZW50aWZpZXJSRSA9IC9eXFxkfFteXFwkXFx3XS87XHJcbmNvbnN0IGlzU2ltcGxlSWRlbnRpZmllciA9IChuYW1lKSA9PiAhbm9uSWRlbnRpZmllclJFLnRlc3QobmFtZSk7XHJcbmNvbnN0IHZhbGlkRmlyc3RJZGVudENoYXJSRSA9IC9bQS1aYS16XyRcXHhBMC1cXHVGRkZGXS87XHJcbmNvbnN0IHZhbGlkSWRlbnRDaGFyUkUgPSAvW1xcLlxcP1xcdyRcXHhBMC1cXHVGRkZGXS87XHJcbmNvbnN0IHdoaXRlc3BhY2VSRSA9IC9cXHMrWy5bXVxccyp8XFxzKlsuW11cXHMrL2c7XHJcbi8qKlxyXG4gKiBTaW1wbGUgbGV4ZXIgdG8gY2hlY2sgaWYgYW4gZXhwcmVzc2lvbiBpcyBhIG1lbWJlciBleHByZXNzaW9uLiBUaGlzIGlzXHJcbiAqIGxheCBhbmQgb25seSBjaGVja3MgdmFsaWRpdHkgYXQgdGhlIHJvb3QgbGV2ZWwgKGkuZS4gZG9lcyBub3QgdmFsaWRhdGUgZXhwc1xyXG4gKiBpbnNpZGUgc3F1YXJlIGJyYWNrZXRzKSwgYnV0IGl0J3Mgb2sgc2luY2UgdGhlc2UgYXJlIG9ubHkgdXNlZCBvbiB0ZW1wbGF0ZVxyXG4gKiBleHByZXNzaW9ucyBhbmQgZmFsc2UgcG9zaXRpdmVzIGFyZSBpbnZhbGlkIGV4cHJlc3Npb25zIGluIHRoZSBmaXJzdCBwbGFjZS5cclxuICovXHJcbmNvbnN0IGlzTWVtYmVyRXhwcmVzc2lvbkJyb3dzZXIgPSAocGF0aCkgPT4ge1xyXG4gICAgLy8gcmVtb3ZlIHdoaXRlc3BhY2VzIGFyb3VuZCAuIG9yIFsgZmlyc3RcclxuICAgIHBhdGggPSBwYXRoLnRyaW0oKS5yZXBsYWNlKHdoaXRlc3BhY2VSRSwgcyA9PiBzLnRyaW0oKSk7XHJcbiAgICBsZXQgc3RhdGUgPSAwIC8qIGluTWVtYmVyRXhwICovO1xyXG4gICAgbGV0IHN0YXRlU3RhY2sgPSBbXTtcclxuICAgIGxldCBjdXJyZW50T3BlbkJyYWNrZXRDb3VudCA9IDA7XHJcbiAgICBsZXQgY3VycmVudE9wZW5QYXJlbnNDb3VudCA9IDA7XHJcbiAgICBsZXQgY3VycmVudFN0cmluZ1R5cGUgPSBudWxsO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY2hhciA9IHBhdGguY2hhckF0KGkpO1xyXG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSAwIC8qIGluTWVtYmVyRXhwICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdbJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlU3RhY2sucHVzaChzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAxIC8qIGluQnJhY2tldHMgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5CcmFja2V0Q291bnQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09ICcoJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlU3RhY2sucHVzaChzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSAyIC8qIGluUGFyZW5zICovO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuUGFyZW5zQ291bnQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCEoaSA9PT0gMCA/IHZhbGlkRmlyc3RJZGVudENoYXJSRSA6IHZhbGlkSWRlbnRDaGFyUkUpLnRlc3QoY2hhcikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxIC8qIGluQnJhY2tldHMgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gYCdgIHx8IGNoYXIgPT09IGBcImAgfHwgY2hhciA9PT0gJ2AnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVTdGFjay5wdXNoKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IDMgLyogaW5TdHJpbmcgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0cmluZ1R5cGUgPSBjaGFyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gYFtgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5CcmFja2V0Q291bnQrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IGBdYCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghLS1jdXJyZW50T3BlbkJyYWNrZXRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgMiAvKiBpblBhcmVucyAqLzpcclxuICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSBgJ2AgfHwgY2hhciA9PT0gYFwiYCB8fCBjaGFyID09PSAnYCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZVN0YWNrLnB1c2goc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gMyAvKiBpblN0cmluZyAqLztcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RyaW5nVHlwZSA9IGNoYXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBgKGApIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlblBhcmVuc0NvdW50Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBgKWApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZXhwIGVuZHMgYXMgYSBjYWxsIHRoZW4gaXQgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIHZhbGlkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHBhdGgubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghLS1jdXJyZW50T3BlblBhcmVuc0NvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVTdGFjay5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAzIC8qIGluU3RyaW5nICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09IGN1cnJlbnRTdHJpbmdUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZVN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdHJpbmdUeXBlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAhY3VycmVudE9wZW5CcmFja2V0Q291bnQgJiYgIWN1cnJlbnRPcGVuUGFyZW5zQ291bnQ7XHJcbn07XHJcbmNvbnN0IGlzTWVtYmVyRXhwcmVzc2lvbk5vZGUgPSBOT09QXHJcbiAgICA7XHJcbmNvbnN0IGlzTWVtYmVyRXhwcmVzc2lvbiA9IGlzTWVtYmVyRXhwcmVzc2lvbkJyb3dzZXJcclxuICAgIDtcclxuZnVuY3Rpb24gZ2V0SW5uZXJSYW5nZShsb2MsIG9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICBjb25zdCBzb3VyY2UgPSBsb2Muc291cmNlLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTtcclxuICAgIGNvbnN0IG5ld0xvYyA9IHtcclxuICAgICAgICBzb3VyY2UsXHJcbiAgICAgICAgc3RhcnQ6IGFkdmFuY2VQb3NpdGlvbldpdGhDbG9uZShsb2Muc3RhcnQsIGxvYy5zb3VyY2UsIG9mZnNldCksXHJcbiAgICAgICAgZW5kOiBsb2MuZW5kXHJcbiAgICB9O1xyXG4gICAgaWYgKGxlbmd0aCAhPSBudWxsKSB7XHJcbiAgICAgICAgbmV3TG9jLmVuZCA9IGFkdmFuY2VQb3NpdGlvbldpdGhDbG9uZShsb2Muc3RhcnQsIGxvYy5zb3VyY2UsIG9mZnNldCArIGxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3TG9jO1xyXG59XHJcbmZ1bmN0aW9uIGFkdmFuY2VQb3NpdGlvbldpdGhDbG9uZShwb3MsIHNvdXJjZSwgbnVtYmVyT2ZDaGFyYWN0ZXJzID0gc291cmNlLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGFkdmFuY2VQb3NpdGlvbldpdGhNdXRhdGlvbihleHRlbmQoe30sIHBvcyksIHNvdXJjZSwgbnVtYmVyT2ZDaGFyYWN0ZXJzKTtcclxufVxyXG4vLyBhZHZhbmNlIGJ5IG11dGF0aW9uIHdpdGhvdXQgY2xvbmluZyAoZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMpLCBzaW5jZSB0aGlzXHJcbi8vIGdldHMgY2FsbGVkIGEgbG90IGluIHRoZSBwYXJzZXJcclxuZnVuY3Rpb24gYWR2YW5jZVBvc2l0aW9uV2l0aE11dGF0aW9uKHBvcywgc291cmNlLCBudW1iZXJPZkNoYXJhY3RlcnMgPSBzb3VyY2UubGVuZ3RoKSB7XHJcbiAgICBsZXQgbGluZXNDb3VudCA9IDA7XHJcbiAgICBsZXQgbGFzdE5ld0xpbmVQb3MgPSAtMTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZDaGFyYWN0ZXJzOyBpKyspIHtcclxuICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoaSkgPT09IDEwIC8qIG5ld2xpbmUgY2hhciBjb2RlICovKSB7XHJcbiAgICAgICAgICAgIGxpbmVzQ291bnQrKztcclxuICAgICAgICAgICAgbGFzdE5ld0xpbmVQb3MgPSBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBvcy5vZmZzZXQgKz0gbnVtYmVyT2ZDaGFyYWN0ZXJzO1xyXG4gICAgcG9zLmxpbmUgKz0gbGluZXNDb3VudDtcclxuICAgIHBvcy5jb2x1bW4gPVxyXG4gICAgICAgIGxhc3ROZXdMaW5lUG9zID09PSAtMVxyXG4gICAgICAgICAgICA/IHBvcy5jb2x1bW4gKyBudW1iZXJPZkNoYXJhY3RlcnNcclxuICAgICAgICAgICAgOiBudW1iZXJPZkNoYXJhY3RlcnMgLSBsYXN0TmV3TGluZVBvcztcclxuICAgIHJldHVybiBwb3M7XHJcbn1cclxuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbXNnKSB7XHJcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cclxuICAgIGlmICghY29uZGl0aW9uKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCBgdW5leHBlY3RlZCBjb21waWxlciBjb25kaXRpb25gKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBmaW5kRGlyKG5vZGUsIG5hbWUsIGFsbG93RW1wdHkgPSBmYWxzZSkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLnByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcCA9IG5vZGUucHJvcHNbaV07XHJcbiAgICAgICAgaWYgKHAudHlwZSA9PT0gNyAvKiBESVJFQ1RJVkUgKi8gJiZcclxuICAgICAgICAgICAgKGFsbG93RW1wdHkgfHwgcC5leHApICYmXHJcbiAgICAgICAgICAgIChpc1N0cmluZyhuYW1lKSA/IHAubmFtZSA9PT0gbmFtZSA6IG5hbWUudGVzdChwLm5hbWUpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZmluZFByb3Aobm9kZSwgbmFtZSwgZHluYW1pY09ubHkgPSBmYWxzZSwgYWxsb3dFbXB0eSA9IGZhbHNlKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUucHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwID0gbm9kZS5wcm9wc1tpXTtcclxuICAgICAgICBpZiAocC50eXBlID09PSA2IC8qIEFUVFJJQlVURSAqLykge1xyXG4gICAgICAgICAgICBpZiAoZHluYW1pY09ubHkpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKHAubmFtZSA9PT0gbmFtZSAmJiAocC52YWx1ZSB8fCBhbGxvd0VtcHR5KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocC5uYW1lID09PSAnYmluZCcgJiZcclxuICAgICAgICAgICAgKHAuZXhwIHx8IGFsbG93RW1wdHkpICYmXHJcbiAgICAgICAgICAgIGlzU3RhdGljQXJnT2YocC5hcmcsIG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc1N0YXRpY0FyZ09mKGFyZywgbmFtZSkge1xyXG4gICAgcmV0dXJuICEhKGFyZyAmJiBpc1N0YXRpY0V4cChhcmcpICYmIGFyZy5jb250ZW50ID09PSBuYW1lKTtcclxufVxyXG5mdW5jdGlvbiBoYXNEeW5hbWljS2V5VkJpbmQobm9kZSkge1xyXG4gICAgcmV0dXJuIG5vZGUucHJvcHMuc29tZShwID0+IHAudHlwZSA9PT0gNyAvKiBESVJFQ1RJVkUgKi8gJiZcclxuICAgICAgICBwLm5hbWUgPT09ICdiaW5kJyAmJlxyXG4gICAgICAgICghcC5hcmcgfHwgLy8gdi1iaW5kPVwib2JqXCJcclxuICAgICAgICAgICAgcC5hcmcudHlwZSAhPT0gNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLyB8fCAvLyB2LWJpbmQ6W19jdHguZm9vXVxyXG4gICAgICAgICAgICAhcC5hcmcuaXNTdGF0aWMpIC8vIHYtYmluZDpbZm9vXVxyXG4gICAgKTtcclxufVxyXG5mdW5jdGlvbiBpc1RleHQobm9kZSkge1xyXG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gNSAvKiBJTlRFUlBPTEFUSU9OICovIHx8IG5vZGUudHlwZSA9PT0gMiAvKiBURVhUICovO1xyXG59XHJcbmZ1bmN0aW9uIGlzVlNsb3QocCkge1xyXG4gICAgcmV0dXJuIHAudHlwZSA9PT0gNyAvKiBESVJFQ1RJVkUgKi8gJiYgcC5uYW1lID09PSAnc2xvdCc7XHJcbn1cclxuZnVuY3Rpb24gaXNUZW1wbGF0ZU5vZGUobm9kZSkge1xyXG4gICAgcmV0dXJuIChub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJiBub2RlLnRhZ1R5cGUgPT09IDMgLyogVEVNUExBVEUgKi8pO1xyXG59XHJcbmZ1bmN0aW9uIGlzU2xvdE91dGxldChub2RlKSB7XHJcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSAxIC8qIEVMRU1FTlQgKi8gJiYgbm9kZS50YWdUeXBlID09PSAyIC8qIFNMT1QgKi87XHJcbn1cclxuZnVuY3Rpb24gZ2V0Vk5vZGVIZWxwZXIoc3NyLCBpc0NvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIHNzciB8fCBpc0NvbXBvbmVudCA/IENSRUFURV9WTk9ERSA6IENSRUFURV9FTEVNRU5UX1ZOT0RFO1xyXG59XHJcbmZ1bmN0aW9uIGdldFZOb2RlQmxvY2tIZWxwZXIoc3NyLCBpc0NvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIHNzciB8fCBpc0NvbXBvbmVudCA/IENSRUFURV9CTE9DSyA6IENSRUFURV9FTEVNRU5UX0JMT0NLO1xyXG59XHJcbmNvbnN0IHByb3BzSGVscGVyU2V0ID0gbmV3IFNldChbTk9STUFMSVpFX1BST1BTLCBHVUFSRF9SRUFDVElWRV9QUk9QU10pO1xyXG5mdW5jdGlvbiBnZXRVbm5vcm1hbGl6ZWRQcm9wcyhwcm9wcywgY2FsbFBhdGggPSBbXSkge1xyXG4gICAgaWYgKHByb3BzICYmXHJcbiAgICAgICAgIWlzU3RyaW5nKHByb3BzKSAmJlxyXG4gICAgICAgIHByb3BzLnR5cGUgPT09IDE0IC8qIEpTX0NBTExfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgIGNvbnN0IGNhbGxlZSA9IHByb3BzLmNhbGxlZTtcclxuICAgICAgICBpZiAoIWlzU3RyaW5nKGNhbGxlZSkgJiYgcHJvcHNIZWxwZXJTZXQuaGFzKGNhbGxlZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldFVubm9ybWFsaXplZFByb3BzKHByb3BzLmFyZ3VtZW50c1swXSwgY2FsbFBhdGguY29uY2F0KHByb3BzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtwcm9wcywgY2FsbFBhdGhdO1xyXG59XHJcbmZ1bmN0aW9uIGluamVjdFByb3Aobm9kZSwgcHJvcCwgY29udGV4dCkge1xyXG4gICAgbGV0IHByb3BzV2l0aEluamVjdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogMS4gbWVyZ2VQcm9wcyguLi4pXHJcbiAgICAgKiAyLiB0b0hhbmRsZXJzKC4uLilcclxuICAgICAqIDMuIG5vcm1hbGl6ZVByb3BzKC4uLilcclxuICAgICAqIDQuIG5vcm1hbGl6ZVByb3BzKGd1YXJkUmVhY3RpdmVQcm9wcyguLi4pKVxyXG4gICAgICpcclxuICAgICAqIHdlIG5lZWQgdG8gZ2V0IHRoZSByZWFsIHByb3BzIGJlZm9yZSBub3JtYWxpemF0aW9uXHJcbiAgICAgKi9cclxuICAgIGxldCBwcm9wcyA9IG5vZGUudHlwZSA9PT0gMTMgLyogVk5PREVfQ0FMTCAqLyA/IG5vZGUucHJvcHMgOiBub2RlLmFyZ3VtZW50c1syXTtcclxuICAgIGxldCBjYWxsUGF0aCA9IFtdO1xyXG4gICAgbGV0IHBhcmVudENhbGw7XHJcbiAgICBpZiAocHJvcHMgJiZcclxuICAgICAgICAhaXNTdHJpbmcocHJvcHMpICYmXHJcbiAgICAgICAgcHJvcHMudHlwZSA9PT0gMTQgLyogSlNfQ0FMTF9FWFBSRVNTSU9OICovKSB7XHJcbiAgICAgICAgY29uc3QgcmV0ID0gZ2V0VW5ub3JtYWxpemVkUHJvcHMocHJvcHMpO1xyXG4gICAgICAgIHByb3BzID0gcmV0WzBdO1xyXG4gICAgICAgIGNhbGxQYXRoID0gcmV0WzFdO1xyXG4gICAgICAgIHBhcmVudENhbGwgPSBjYWxsUGF0aFtjYWxsUGF0aC5sZW5ndGggLSAxXTtcclxuICAgIH1cclxuICAgIGlmIChwcm9wcyA9PSBudWxsIHx8IGlzU3RyaW5nKHByb3BzKSkge1xyXG4gICAgICAgIHByb3BzV2l0aEluamVjdGlvbiA9IGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oW3Byb3BdKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByb3BzLnR5cGUgPT09IDE0IC8qIEpTX0NBTExfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgIC8vIG1lcmdlZCBwcm9wcy4uLiBhZGQgb3Vyc1xyXG4gICAgICAgIC8vIG9ubHkgaW5qZWN0IGtleSB0byBvYmplY3QgbGl0ZXJhbCBpZiBpdCdzIHRoZSBmaXJzdCBhcmd1bWVudCBzbyB0aGF0XHJcbiAgICAgICAgLy8gaWYgZG9lc24ndCBvdmVycmlkZSB1c2VyIHByb3ZpZGVkIGtleXNcclxuICAgICAgICBjb25zdCBmaXJzdCA9IHByb3BzLmFyZ3VtZW50c1swXTtcclxuICAgICAgICBpZiAoIWlzU3RyaW5nKGZpcnN0KSAmJiBmaXJzdC50eXBlID09PSAxNSAvKiBKU19PQkpFQ1RfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgICAgICBmaXJzdC5wcm9wZXJ0aWVzLnVuc2hpZnQocHJvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocHJvcHMuY2FsbGVlID09PSBUT19IQU5ETEVSUykge1xyXG4gICAgICAgICAgICAgICAgLy8gIzIzNjZcclxuICAgICAgICAgICAgICAgIHByb3BzV2l0aEluamVjdGlvbiA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKE1FUkdFX1BST1BTKSwgW1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oW3Byb3BdKSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9wc1xyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wcy5hcmd1bWVudHMudW5zaGlmdChjcmVhdGVPYmplY3RFeHByZXNzaW9uKFtwcm9wXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgICFwcm9wc1dpdGhJbmplY3Rpb24gJiYgKHByb3BzV2l0aEluamVjdGlvbiA9IHByb3BzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByb3BzLnR5cGUgPT09IDE1IC8qIEpTX09CSkVDVF9FWFBSRVNTSU9OICovKSB7XHJcbiAgICAgICAgbGV0IGFscmVhZHlFeGlzdHMgPSBmYWxzZTtcclxuICAgICAgICAvLyBjaGVjayBleGlzdGluZyBrZXkgdG8gYXZvaWQgb3ZlcnJpZGluZyB1c2VyIHByb3ZpZGVkIGtleXNcclxuICAgICAgICBpZiAocHJvcC5rZXkudHlwZSA9PT0gNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wS2V5TmFtZSA9IHByb3Aua2V5LmNvbnRlbnQ7XHJcbiAgICAgICAgICAgIGFscmVhZHlFeGlzdHMgPSBwcm9wcy5wcm9wZXJ0aWVzLnNvbWUocCA9PiBwLmtleS50eXBlID09PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovICYmXHJcbiAgICAgICAgICAgICAgICBwLmtleS5jb250ZW50ID09PSBwcm9wS2V5TmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghYWxyZWFkeUV4aXN0cykge1xyXG4gICAgICAgICAgICBwcm9wcy5wcm9wZXJ0aWVzLnVuc2hpZnQocHJvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3BzV2l0aEluamVjdGlvbiA9IHByb3BzO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gc2luZ2xlIHYtYmluZCB3aXRoIGV4cHJlc3Npb24sIHJldHVybiBhIG1lcmdlZCByZXBsYWNlbWVudFxyXG4gICAgICAgIHByb3BzV2l0aEluamVjdGlvbiA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKE1FUkdFX1BST1BTKSwgW1xyXG4gICAgICAgICAgICBjcmVhdGVPYmplY3RFeHByZXNzaW9uKFtwcm9wXSksXHJcbiAgICAgICAgICAgIHByb3BzXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgbmVzdGVkIGhlbHBlciBjYWxsLCBlLmcuIGBub3JtYWxpemVQcm9wcyhndWFyZFJlYWN0aXZlUHJvcHMocHJvcHMpKWAsXHJcbiAgICAgICAgLy8gaXQgd2lsbCBiZSByZXdyaXR0ZW4gYXMgYG5vcm1hbGl6ZVByb3BzKG1lcmdlUHJvcHMoeyBrZXk6IDAgfSwgcHJvcHMpKWAsXHJcbiAgICAgICAgLy8gdGhlIGBndWFyZFJlYWN0aXZlUHJvcHNgIHdpbGwgbm8gbG9uZ2VyIGJlIG5lZWRlZFxyXG4gICAgICAgIGlmIChwYXJlbnRDYWxsICYmIHBhcmVudENhbGwuY2FsbGVlID09PSBHVUFSRF9SRUFDVElWRV9QUk9QUykge1xyXG4gICAgICAgICAgICBwYXJlbnRDYWxsID0gY2FsbFBhdGhbY2FsbFBhdGgubGVuZ3RoIC0gMl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMTMgLyogVk5PREVfQ0FMTCAqLykge1xyXG4gICAgICAgIGlmIChwYXJlbnRDYWxsKSB7XHJcbiAgICAgICAgICAgIHBhcmVudENhbGwuYXJndW1lbnRzWzBdID0gcHJvcHNXaXRoSW5qZWN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbm9kZS5wcm9wcyA9IHByb3BzV2l0aEluamVjdGlvbjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAocGFyZW50Q2FsbCkge1xyXG4gICAgICAgICAgICBwYXJlbnRDYWxsLmFyZ3VtZW50c1swXSA9IHByb3BzV2l0aEluamVjdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG5vZGUuYXJndW1lbnRzWzJdID0gcHJvcHNXaXRoSW5qZWN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0b1ZhbGlkQXNzZXRJZChuYW1lLCB0eXBlKSB7XHJcbiAgICAvLyBzZWUgaXNzdWUjNDQyMiwgd2UgbmVlZCBhZGRpbmcgaWRlbnRpZmllciBvbiB2YWxpZEFzc2V0SWQgaWYgdmFyaWFibGUgYG5hbWVgIGhhcyBzcGVjaWZpYyBjaGFyYWN0ZXJcclxuICAgIHJldHVybiBgXyR7dHlwZX1fJHtuYW1lLnJlcGxhY2UoL1teXFx3XS9nLCAoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBzZWFyY2hWYWx1ZSA9PT0gJy0nID8gJ18nIDogbmFtZS5jaGFyQ29kZUF0KHJlcGxhY2VWYWx1ZSkudG9TdHJpbmcoKTtcclxuICAgIH0pfWA7XHJcbn1cclxuLy8gQ2hlY2sgaWYgYSBub2RlIGNvbnRhaW5zIGV4cHJlc3Npb25zIHRoYXQgcmVmZXJlbmNlIGN1cnJlbnQgY29udGV4dCBzY29wZSBpZHNcclxuZnVuY3Rpb24gaGFzU2NvcGVSZWYobm9kZSwgaWRzKSB7XHJcbiAgICBpZiAoIW5vZGUgfHwgT2JqZWN0LmtleXMoaWRzKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xyXG4gICAgICAgIGNhc2UgMSAvKiBFTEVNRU5UICovOlxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUucHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub2RlLnByb3BzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHAudHlwZSA9PT0gNyAvKiBESVJFQ1RJVkUgKi8gJiZcclxuICAgICAgICAgICAgICAgICAgICAoaGFzU2NvcGVSZWYocC5hcmcsIGlkcykgfHwgaGFzU2NvcGVSZWYocC5leHAsIGlkcykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW4uc29tZShjID0+IGhhc1Njb3BlUmVmKGMsIGlkcykpO1xyXG4gICAgICAgIGNhc2UgMTEgLyogRk9SICovOlxyXG4gICAgICAgICAgICBpZiAoaGFzU2NvcGVSZWYobm9kZS5zb3VyY2UsIGlkcykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuLnNvbWUoYyA9PiBoYXNTY29wZVJlZihjLCBpZHMpKTtcclxuICAgICAgICBjYXNlIDkgLyogSUYgKi86XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlLmJyYW5jaGVzLnNvbWUoYiA9PiBoYXNTY29wZVJlZihiLCBpZHMpKTtcclxuICAgICAgICBjYXNlIDEwIC8qIElGX0JSQU5DSCAqLzpcclxuICAgICAgICAgICAgaWYgKGhhc1Njb3BlUmVmKG5vZGUuY29uZGl0aW9uLCBpZHMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbm9kZS5jaGlsZHJlbi5zb21lKGMgPT4gaGFzU2NvcGVSZWYoYywgaWRzKSk7XHJcbiAgICAgICAgY2FzZSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovOlxyXG4gICAgICAgICAgICByZXR1cm4gKCFub2RlLmlzU3RhdGljICYmXHJcbiAgICAgICAgICAgICAgICBpc1NpbXBsZUlkZW50aWZpZXIobm9kZS5jb250ZW50KSAmJlxyXG4gICAgICAgICAgICAgICAgISFpZHNbbm9kZS5jb250ZW50XSk7XHJcbiAgICAgICAgY2FzZSA4IC8qIENPTVBPVU5EX0VYUFJFU1NJT04gKi86XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuLnNvbWUoYyA9PiBpc09iamVjdChjKSAmJiBoYXNTY29wZVJlZihjLCBpZHMpKTtcclxuICAgICAgICBjYXNlIDUgLyogSU5URVJQT0xBVElPTiAqLzpcclxuICAgICAgICBjYXNlIDEyIC8qIFRFWFRfQ0FMTCAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIGhhc1Njb3BlUmVmKG5vZGUuY29udGVudCwgaWRzKTtcclxuICAgICAgICBjYXNlIDIgLyogVEVYVCAqLzpcclxuICAgICAgICBjYXNlIDMgLyogQ09NTUVOVCAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIDtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldE1lbW9lZFZOb2RlQ2FsbChub2RlKSB7XHJcbiAgICBpZiAobm9kZS50eXBlID09PSAxNCAvKiBKU19DQUxMX0VYUFJFU1NJT04gKi8gJiYgbm9kZS5jYWxsZWUgPT09IFdJVEhfTUVNTykge1xyXG4gICAgICAgIHJldHVybiBub2RlLmFyZ3VtZW50c1sxXS5yZXR1cm5zO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gbWFrZUJsb2NrKG5vZGUsIHsgaGVscGVyLCByZW1vdmVIZWxwZXIsIGluU1NSIH0pIHtcclxuICAgIGlmICghbm9kZS5pc0Jsb2NrKSB7XHJcbiAgICAgICAgbm9kZS5pc0Jsb2NrID0gdHJ1ZTtcclxuICAgICAgICByZW1vdmVIZWxwZXIoZ2V0Vk5vZGVIZWxwZXIoaW5TU1IsIG5vZGUuaXNDb21wb25lbnQpKTtcclxuICAgICAgICBoZWxwZXIoT1BFTl9CTE9DSyk7XHJcbiAgICAgICAgaGVscGVyKGdldFZOb2RlQmxvY2tIZWxwZXIoaW5TU1IsIG5vZGUuaXNDb21wb25lbnQpKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBkZXByZWNhdGlvbkRhdGEgPSB7XHJcbiAgICBbXCJDT01QSUxFUl9JU19PTl9FTEVNRU5UXCIgLyogQ09NUElMRVJfSVNfT05fRUxFTUVOVCAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgUGxhdGZvcm0tbmF0aXZlIGVsZW1lbnRzIHdpdGggXCJpc1wiIHByb3Agd2lsbCBubyBsb25nZXIgYmUgYCArXHJcbiAgICAgICAgICAgIGB0cmVhdGVkIGFzIGNvbXBvbmVudHMgaW4gVnVlIDMgdW5sZXNzIHRoZSBcImlzXCIgdmFsdWUgaXMgZXhwbGljaXRseSBgICtcclxuICAgICAgICAgICAgYHByZWZpeGVkIHdpdGggXCJ2dWU6XCIuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL2N1c3RvbS1lbGVtZW50cy1pbnRlcm9wLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiQ09NUElMRVJfVl9CSU5EX1NZTkNcIiAvKiBDT01QSUxFUl9WX0JJTkRfU1lOQyAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBrZXkgPT4gYC5zeW5jIG1vZGlmaWVyIGZvciB2LWJpbmQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHYtbW9kZWwgd2l0aCBgICtcclxuICAgICAgICAgICAgYGFyZ3VtZW50IGluc3RlYWQuIFxcYHYtYmluZDoke2tleX0uc3luY1xcYCBzaG91bGQgYmUgY2hhbmdlZCB0byBgICtcclxuICAgICAgICAgICAgYFxcYHYtbW9kZWw6JHtrZXl9XFxgLmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi92LW1vZGVsLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiQ09NUElMRVJfVl9CSU5EX1BST1BcIiAvKiBDT01QSUxFUl9WX0JJTkRfUFJPUCAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgLnByb3AgbW9kaWZpZXIgZm9yIHYtYmluZCBoYXMgYmVlbiByZW1vdmVkIGFuZCBubyBsb25nZXIgbmVjZXNzYXJ5LiBgICtcclxuICAgICAgICAgICAgYFZ1ZSAzIHdpbGwgYXV0b21hdGljYWxseSBzZXQgYSBiaW5kaW5nIGFzIERPTSBwcm9wZXJ0eSB3aGVuIGFwcHJvcHJpYXRlLmBcclxuICAgIH0sXHJcbiAgICBbXCJDT01QSUxFUl9WX0JJTkRfT0JKRUNUX09SREVSXCIgLyogQ09NUElMRVJfVl9CSU5EX09CSkVDVF9PUkRFUiAqL106IHtcclxuICAgICAgICBtZXNzYWdlOiBgdi1iaW5kPVwib2JqXCIgdXNhZ2UgaXMgbm93IG9yZGVyIHNlbnNpdGl2ZSBhbmQgYmVoYXZlcyBsaWtlIEphdmFTY3JpcHQgYCArXHJcbiAgICAgICAgICAgIGBvYmplY3Qgc3ByZWFkOiBpdCB3aWxsIG5vdyBvdmVyd3JpdGUgYW4gZXhpc3Rpbmcgbm9uLW1lcmdlYWJsZSBhdHRyaWJ1dGUgYCArXHJcbiAgICAgICAgICAgIGB0aGF0IGFwcGVhcnMgYmVmb3JlIHYtYmluZCBpbiB0aGUgY2FzZSBvZiBjb25mbGljdC4gYCArXHJcbiAgICAgICAgICAgIGBUbyByZXRhaW4gMi54IGJlaGF2aW9yLCBtb3ZlIHYtYmluZCB0byBtYWtlIGl0IHRoZSBmaXJzdCBhdHRyaWJ1dGUuIGAgK1xyXG4gICAgICAgICAgICBgWW91IGNhbiBhbHNvIHN1cHByZXNzIHRoaXMgd2FybmluZyBpZiB0aGUgdXNhZ2UgaXMgaW50ZW5kZWQuYCxcclxuICAgICAgICBsaW5rOiBgaHR0cHM6Ly92My52dWVqcy5vcmcvZ3VpZGUvbWlncmF0aW9uL3YtYmluZC5odG1sYFxyXG4gICAgfSxcclxuICAgIFtcIkNPTVBJTEVSX1ZfT05fTkFUSVZFXCIgLyogQ09NUElMRVJfVl9PTl9OQVRJVkUgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYC5uYXRpdmUgbW9kaWZpZXIgZm9yIHYtb24gaGFzIGJlZW4gcmVtb3ZlZCBhcyBpcyBubyBsb25nZXIgbmVjZXNzYXJ5LmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi92LW9uLW5hdGl2ZS1tb2RpZmllci1yZW1vdmVkLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiQ09NUElMRVJfVl9JRl9WX0ZPUl9QUkVDRURFTkNFXCIgLyogQ09NUElMRVJfVl9JRl9WX0ZPUl9QUkVDRURFTkNFICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGB2LWlmIC8gdi1mb3IgcHJlY2VkZW5jZSB3aGVuIHVzZWQgb24gdGhlIHNhbWUgZWxlbWVudCBoYXMgY2hhbmdlZCBgICtcclxuICAgICAgICAgICAgYGluIFZ1ZSAzOiB2LWlmIG5vdyB0YWtlcyBoaWdoZXIgcHJlY2VkZW5jZSBhbmQgd2lsbCBubyBsb25nZXIgaGF2ZSBgICtcclxuICAgICAgICAgICAgYGFjY2VzcyB0byB2LWZvciBzY29wZSB2YXJpYWJsZXMuIEl0IGlzIGJlc3QgdG8gYXZvaWQgdGhlIGFtYmlndWl0eSBgICtcclxuICAgICAgICAgICAgYHdpdGggPHRlbXBsYXRlPiB0YWdzIG9yIHVzZSBhIGNvbXB1dGVkIHByb3BlcnR5IHRoYXQgZmlsdGVycyB2LWZvciBgICtcclxuICAgICAgICAgICAgYGRhdGEgc291cmNlLmAsXHJcbiAgICAgICAgbGluazogYGh0dHBzOi8vdjMudnVlanMub3JnL2d1aWRlL21pZ3JhdGlvbi92LWlmLXYtZm9yLmh0bWxgXHJcbiAgICB9LFxyXG4gICAgW1wiQ09NUElMRVJfTkFUSVZFX1RFTVBMQVRFXCIgLyogQ09NUElMRVJfTkFUSVZFX1RFTVBMQVRFICovXToge1xyXG4gICAgICAgIG1lc3NhZ2U6IGA8dGVtcGxhdGU+IHdpdGggbm8gc3BlY2lhbCBkaXJlY3RpdmVzIHdpbGwgcmVuZGVyIGFzIGEgbmF0aXZlIHRlbXBsYXRlIGAgK1xyXG4gICAgICAgICAgICBgZWxlbWVudCBpbnN0ZWFkIG9mIGl0cyBpbm5lciBjb250ZW50IGluIFZ1ZSAzLmBcclxuICAgIH0sXHJcbiAgICBbXCJDT01QSUxFUl9JTkxJTkVfVEVNUExBVEVcIiAvKiBDT01QSUxFUl9JTkxJTkVfVEVNUExBVEUgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYFwiaW5saW5lLXRlbXBsYXRlXCIgaGFzIGJlZW4gcmVtb3ZlZCBpbiBWdWUgMy5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vaW5saW5lLXRlbXBsYXRlLWF0dHJpYnV0ZS5odG1sYFxyXG4gICAgfSxcclxuICAgIFtcIkNPTVBJTEVSX0ZJTFRFUlwiIC8qIENPTVBJTEVSX0ZJTFRFUlMgKi9dOiB7XHJcbiAgICAgICAgbWVzc2FnZTogYGZpbHRlcnMgaGF2ZSBiZWVuIHJlbW92ZWQgaW4gVnVlIDMuIGAgK1xyXG4gICAgICAgICAgICBgVGhlIFwifFwiIHN5bWJvbCB3aWxsIGJlIHRyZWF0ZWQgYXMgbmF0aXZlIEphdmFTY3JpcHQgYml0d2lzZSBPUiBvcGVyYXRvci4gYCArXHJcbiAgICAgICAgICAgIGBVc2UgbWV0aG9kIGNhbGxzIG9yIGNvbXB1dGVkIHByb3BlcnRpZXMgaW5zdGVhZC5gLFxyXG4gICAgICAgIGxpbms6IGBodHRwczovL3YzLnZ1ZWpzLm9yZy9ndWlkZS9taWdyYXRpb24vZmlsdGVycy5odG1sYFxyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBnZXRDb21wYXRWYWx1ZShrZXksIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IGNvbmZpZyA9IGNvbnRleHQub3B0aW9uc1xyXG4gICAgICAgID8gY29udGV4dC5vcHRpb25zLmNvbXBhdENvbmZpZ1xyXG4gICAgICAgIDogY29udGV4dC5jb21wYXRDb25maWc7XHJcbiAgICBjb25zdCB2YWx1ZSA9IGNvbmZpZyAmJiBjb25maWdba2V5XTtcclxuICAgIGlmIChrZXkgPT09ICdNT0RFJykge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSB8fCAzOyAvLyBjb21waWxlciBkZWZhdWx0cyB0byB2MyBiZWhhdmlvclxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzQ29tcGF0RW5hYmxlZChrZXksIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IG1vZGUgPSBnZXRDb21wYXRWYWx1ZSgnTU9ERScsIGNvbnRleHQpO1xyXG4gICAgY29uc3QgdmFsdWUgPSBnZXRDb21wYXRWYWx1ZShrZXksIGNvbnRleHQpO1xyXG4gICAgLy8gaW4gdjMgbW9kZSwgb25seSBlbmFibGUgaWYgZXhwbGljaXRseSBzZXQgdG8gdHJ1ZVxyXG4gICAgLy8gb3RoZXJ3aXNlIGVuYWJsZSBmb3IgYW55IG5vbi1mYWxzZSB2YWx1ZVxyXG4gICAgcmV0dXJuIG1vZGUgPT09IDMgPyB2YWx1ZSA9PT0gdHJ1ZSA6IHZhbHVlICE9PSBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBjaGVja0NvbXBhdEVuYWJsZWQoa2V5LCBjb250ZXh0LCBsb2MsIC4uLmFyZ3MpIHtcclxuICAgIGNvbnN0IGVuYWJsZWQgPSBpc0NvbXBhdEVuYWJsZWQoa2V5LCBjb250ZXh0KTtcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgZW5hYmxlZCkge1xyXG4gICAgICAgIHdhcm5EZXByZWNhdGlvbihrZXksIGNvbnRleHQsIGxvYywgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW5hYmxlZDtcclxufVxyXG5mdW5jdGlvbiB3YXJuRGVwcmVjYXRpb24oa2V5LCBjb250ZXh0LCBsb2MsIC4uLmFyZ3MpIHtcclxuICAgIGNvbnN0IHZhbCA9IGdldENvbXBhdFZhbHVlKGtleSwgY29udGV4dCk7XHJcbiAgICBpZiAodmFsID09PSAnc3VwcHJlc3Mtd2FybmluZycpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IG1lc3NhZ2UsIGxpbmsgfSA9IGRlcHJlY2F0aW9uRGF0YVtrZXldO1xyXG4gICAgY29uc3QgbXNnID0gYChkZXByZWNhdGlvbiAke2tleX0pICR7dHlwZW9mIG1lc3NhZ2UgPT09ICdmdW5jdGlvbicgPyBtZXNzYWdlKC4uLmFyZ3MpIDogbWVzc2FnZX0ke2xpbmsgPyBgXFxuICBEZXRhaWxzOiAke2xpbmt9YCA6IGBgfWA7XHJcbiAgICBjb25zdCBlcnIgPSBuZXcgU3ludGF4RXJyb3IobXNnKTtcclxuICAgIGVyci5jb2RlID0ga2V5O1xyXG4gICAgaWYgKGxvYylcclxuICAgICAgICBlcnIubG9jID0gbG9jO1xyXG4gICAgY29udGV4dC5vbldhcm4oZXJyKTtcclxufVxuXG4vLyBUaGUgZGVmYXVsdCBkZWNvZGVyIG9ubHkgcHJvdmlkZXMgZXNjYXBlcyBmb3IgY2hhcmFjdGVycyByZXNlcnZlZCBhcyBwYXJ0IG9mXHJcbi8vIHRoZSB0ZW1wbGF0ZSBzeW50YXgsIGFuZCBpcyBvbmx5IHVzZWQgaWYgdGhlIGN1c3RvbSByZW5kZXJlciBkaWQgbm90IHByb3ZpZGVcclxuLy8gYSBwbGF0Zm9ybS1zcGVjaWZpYyBkZWNvZGVyLlxyXG5jb25zdCBkZWNvZGVSRSA9IC8mKGd0fGx0fGFtcHxhcG9zfHF1b3QpOy9nO1xyXG5jb25zdCBkZWNvZGVNYXAgPSB7XHJcbiAgICBndDogJz4nLFxyXG4gICAgbHQ6ICc8JyxcclxuICAgIGFtcDogJyYnLFxyXG4gICAgYXBvczogXCInXCIsXHJcbiAgICBxdW90OiAnXCInXHJcbn07XHJcbmNvbnN0IGRlZmF1bHRQYXJzZXJPcHRpb25zID0ge1xyXG4gICAgZGVsaW1pdGVyczogW2B7e2AsIGB9fWBdLFxyXG4gICAgZ2V0TmFtZXNwYWNlOiAoKSA9PiAwIC8qIEhUTUwgKi8sXHJcbiAgICBnZXRUZXh0TW9kZTogKCkgPT4gMCAvKiBEQVRBICovLFxyXG4gICAgaXNWb2lkVGFnOiBOTyxcclxuICAgIGlzUHJlVGFnOiBOTyxcclxuICAgIGlzQ3VzdG9tRWxlbWVudDogTk8sXHJcbiAgICBkZWNvZGVFbnRpdGllczogKHJhd1RleHQpID0+IHJhd1RleHQucmVwbGFjZShkZWNvZGVSRSwgKF8sIHAxKSA9PiBkZWNvZGVNYXBbcDFdKSxcclxuICAgIG9uRXJyb3I6IGRlZmF1bHRPbkVycm9yLFxyXG4gICAgb25XYXJuOiBkZWZhdWx0T25XYXJuLFxyXG4gICAgY29tbWVudHM6IChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG59O1xyXG5mdW5jdGlvbiBiYXNlUGFyc2UoY29udGVudCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlUGFyc2VyQ29udGV4dChjb250ZW50LCBvcHRpb25zKTtcclxuICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Q3Vyc29yKGNvbnRleHQpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVJvb3QocGFyc2VDaGlsZHJlbihjb250ZXh0LCAwIC8qIERBVEEgKi8sIFtdKSwgZ2V0U2VsZWN0aW9uKGNvbnRleHQsIHN0YXJ0KSk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUGFyc2VyQ29udGV4dChjb250ZW50LCByYXdPcHRpb25zKSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0gZXh0ZW5kKHt9LCBkZWZhdWx0UGFyc2VyT3B0aW9ucyk7XHJcbiAgICBsZXQga2V5O1xyXG4gICAgZm9yIChrZXkgaW4gcmF3T3B0aW9ucykge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBvcHRpb25zW2tleV0gPVxyXG4gICAgICAgICAgICByYXdPcHRpb25zW2tleV0gPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0UGFyc2VyT3B0aW9uc1trZXldXHJcbiAgICAgICAgICAgICAgICA6IHJhd09wdGlvbnNba2V5XTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgb3B0aW9ucyxcclxuICAgICAgICBjb2x1bW46IDEsXHJcbiAgICAgICAgbGluZTogMSxcclxuICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgb3JpZ2luYWxTb3VyY2U6IGNvbnRlbnQsXHJcbiAgICAgICAgc291cmNlOiBjb250ZW50LFxyXG4gICAgICAgIGluUHJlOiBmYWxzZSxcclxuICAgICAgICBpblZQcmU6IGZhbHNlLFxyXG4gICAgICAgIG9uV2Fybjogb3B0aW9ucy5vbldhcm5cclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VDaGlsZHJlbihjb250ZXh0LCBtb2RlLCBhbmNlc3RvcnMpIHtcclxuICAgIGNvbnN0IHBhcmVudCA9IGxhc3QoYW5jZXN0b3JzKTtcclxuICAgIGNvbnN0IG5zID0gcGFyZW50ID8gcGFyZW50Lm5zIDogMCAvKiBIVE1MICovO1xyXG4gICAgY29uc3Qgbm9kZXMgPSBbXTtcclxuICAgIHdoaWxlICghaXNFbmQoY29udGV4dCwgbW9kZSwgYW5jZXN0b3JzKSkge1xyXG4gICAgICAgIGNvbnN0IHMgPSBjb250ZXh0LnNvdXJjZTtcclxuICAgICAgICBsZXQgbm9kZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAobW9kZSA9PT0gMCAvKiBEQVRBICovIHx8IG1vZGUgPT09IDEgLyogUkNEQVRBICovKSB7XHJcbiAgICAgICAgICAgIGlmICghY29udGV4dC5pblZQcmUgJiYgc3RhcnRzV2l0aChzLCBjb250ZXh0Lm9wdGlvbnMuZGVsaW1pdGVyc1swXSkpIHtcclxuICAgICAgICAgICAgICAgIC8vICd7eydcclxuICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJzZUludGVycG9sYXRpb24oY29udGV4dCwgbW9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobW9kZSA9PT0gMCAvKiBEQVRBICovICYmIHNbMF0gPT09ICc8Jykge1xyXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI3RhZy1vcGVuLXN0YXRlXHJcbiAgICAgICAgICAgICAgICBpZiAocy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbWl0RXJyb3IoY29udGV4dCwgNSAvKiBFT0ZfQkVGT1JFX1RBR19OQU1FICovLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNbMV0gPT09ICchJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNtYXJrdXAtZGVjbGFyYXRpb24tb3Blbi1zdGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydHNXaXRoKHMsICc8IS0tJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHBhcnNlQ29tbWVudChjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnRzV2l0aChzLCAnPCFET0NUWVBFJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIERPQ1RZUEUgYnkgYSBsaW1pdGF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gcGFyc2VCb2d1c0NvbW1lbnQoY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0c1dpdGgocywgJzwhW0NEQVRBWycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChucyAhPT0gMCAvKiBIVE1MICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gcGFyc2VDREFUQShjb250ZXh0LCBhbmNlc3RvcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDEgLyogQ0RBVEFfSU5fSFRNTF9DT05URU5UICovKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJzZUJvZ3VzQ29tbWVudChjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDExIC8qIElOQ09SUkVDVExZX09QRU5FRF9DT01NRU5UICovKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHBhcnNlQm9ndXNDb21tZW50KGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNbMV0gPT09ICcvJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNlbmQtdGFnLW9wZW4tc3RhdGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAocy5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDUgLyogRU9GX0JFRk9SRV9UQUdfTkFNRSAqLywgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNbMl0gPT09ICc+Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbWl0RXJyb3IoY29udGV4dCwgMTQgLyogTUlTU0lOR19FTkRfVEFHX05BTUUgKi8sIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZHZhbmNlQnkoY29udGV4dCwgMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgvW2Etel0vaS50ZXN0KHNbMl0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAyMyAvKiBYX0lOVkFMSURfRU5EX1RBRyAqLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlVGFnKGNvbnRleHQsIDEgLyogRW5kICovLCBwYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAxMiAvKiBJTlZBTElEX0ZJUlNUX0NIQVJBQ1RFUl9PRl9UQUdfTkFNRSAqLywgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJzZUJvZ3VzQ29tbWVudChjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgvW2Etel0vaS50ZXN0KHNbMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHBhcnNlRWxlbWVudChjb250ZXh0LCBhbmNlc3RvcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIDIueCA8dGVtcGxhdGU+IHdpdGggbm8gZGlyZWN0aXZlIGNvbXBhdFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBhdEVuYWJsZWQoXCJDT01QSUxFUl9OQVRJVkVfVEVNUExBVEVcIiAvKiBDT01QSUxFUl9OQVRJVkVfVEVNUExBVEUgKi8sIGNvbnRleHQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50YWcgPT09ICd0ZW1wbGF0ZScgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgIW5vZGUucHJvcHMuc29tZShwID0+IHAudHlwZSA9PT0gNyAvKiBESVJFQ1RJVkUgKi8gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU3BlY2lhbFRlbXBsYXRlRGlyZWN0aXZlKHAubmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybkRlcHJlY2F0aW9uKFwiQ09NUElMRVJfTkFUSVZFX1RFTVBMQVRFXCIgLyogQ09NUElMRVJfTkFUSVZFX1RFTVBMQVRFICovLCBjb250ZXh0LCBub2RlLmxvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNbMV0gPT09ICc/Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAyMSAvKiBVTkVYUEVDVEVEX1FVRVNUSU9OX01BUktfSU5TVEVBRF9PRl9UQUdfTkFNRSAqLywgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHBhcnNlQm9ndXNDb21tZW50KGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDEyIC8qIElOVkFMSURfRklSU1RfQ0hBUkFDVEVSX09GX1RBR19OQU1FICovLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW5vZGUpIHtcclxuICAgICAgICAgICAgbm9kZSA9IHBhcnNlVGV4dChjb250ZXh0LCBtb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzQXJyYXkobm9kZSkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBwdXNoTm9kZShub2Rlcywgbm9kZVtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHB1c2hOb2RlKG5vZGVzLCBub2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBXaGl0ZXNwYWNlIGhhbmRsaW5nIHN0cmF0ZWd5IGxpa2UgdjJcclxuICAgIGxldCByZW1vdmVkV2hpdGVzcGFjZSA9IGZhbHNlO1xyXG4gICAgaWYgKG1vZGUgIT09IDIgLyogUkFXVEVYVCAqLyAmJiBtb2RlICE9PSAxIC8qIFJDREFUQSAqLykge1xyXG4gICAgICAgIGNvbnN0IHNob3VsZENvbmRlbnNlID0gY29udGV4dC5vcHRpb25zLndoaXRlc3BhY2UgIT09ICdwcmVzZXJ2ZSc7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XHJcbiAgICAgICAgICAgIGlmICghY29udGV4dC5pblByZSAmJiBub2RlLnR5cGUgPT09IDIgLyogVEVYVCAqLykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEvW15cXHRcXHJcXG5cXGYgXS8udGVzdChub2RlLmNvbnRlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldiA9IG5vZGVzW2kgLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gbm9kZXNbaSArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBpZjpcclxuICAgICAgICAgICAgICAgICAgICAvLyAtIHRoZSB3aGl0ZXNwYWNlIGlzIHRoZSBmaXJzdCBvciBsYXN0IG5vZGUsIG9yOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC0gKGNvbmRlbnNlIG1vZGUpIHRoZSB3aGl0ZXNwYWNlIGlzIGFkamFjZW50IHRvIGEgY29tbWVudCwgb3I6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLSAoY29uZGVuc2UgbW9kZSkgdGhlIHdoaXRlc3BhY2UgaXMgYmV0d2VlbiB0d28gZWxlbWVudHMgQU5EIGNvbnRhaW5zIG5ld2xpbmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXByZXYgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIW5leHQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHNob3VsZENvbmRlbnNlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocHJldi50eXBlID09PSAzIC8qIENPTU1FTlQgKi8gfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LnR5cGUgPT09IDMgLyogQ09NTUVOVCAqLyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcmV2LnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0LnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvW1xcclxcbl0vLnRlc3Qobm9kZS5jb250ZW50KSkpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkV2hpdGVzcGFjZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgdGhlIHdoaXRlc3BhY2UgaXMgY29uZGVuc2VkIGludG8gYSBzaW5nbGUgc3BhY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5jb250ZW50ID0gJyAnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNob3VsZENvbmRlbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gY29uZGVuc2UgbW9kZSwgY29uc2VjdXRpdmUgd2hpdGVzcGFjZXMgaW4gdGV4dCBhcmUgY29uZGVuc2VkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZG93biB0byBhIHNpbmdsZSBzcGFjZS5cclxuICAgICAgICAgICAgICAgICAgICBub2RlLmNvbnRlbnQgPSBub2RlLmNvbnRlbnQucmVwbGFjZSgvW1xcdFxcclxcblxcZiBdKy9nLCAnICcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBjb21tZW50IG5vZGVzIGlmIGRlc2lyZWQgYnkgY29uZmlndXJhdGlvbi5cclxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZS50eXBlID09PSAzIC8qIENPTU1FTlQgKi8gJiYgIWNvbnRleHQub3B0aW9ucy5jb21tZW50cykge1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlZFdoaXRlc3BhY2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbm9kZXNbaV0gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250ZXh0LmluUHJlICYmIHBhcmVudCAmJiBjb250ZXh0Lm9wdGlvbnMuaXNQcmVUYWcocGFyZW50LnRhZykpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGxlYWRpbmcgbmV3bGluZSBwZXIgaHRtbCBzcGVjXHJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2dyb3VwaW5nLWNvbnRlbnQuaHRtbCN0aGUtcHJlLWVsZW1lbnRcclxuICAgICAgICAgICAgY29uc3QgZmlyc3QgPSBub2Rlc1swXTtcclxuICAgICAgICAgICAgaWYgKGZpcnN0ICYmIGZpcnN0LnR5cGUgPT09IDIgLyogVEVYVCAqLykge1xyXG4gICAgICAgICAgICAgICAgZmlyc3QuY29udGVudCA9IGZpcnN0LmNvbnRlbnQucmVwbGFjZSgvXlxccj9cXG4vLCAnJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVtb3ZlZFdoaXRlc3BhY2UgPyBub2Rlcy5maWx0ZXIoQm9vbGVhbikgOiBub2RlcztcclxufVxyXG5mdW5jdGlvbiBwdXNoTm9kZShub2Rlcywgbm9kZSkge1xyXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMiAvKiBURVhUICovKSB7XHJcbiAgICAgICAgY29uc3QgcHJldiA9IGxhc3Qobm9kZXMpO1xyXG4gICAgICAgIC8vIE1lcmdlIGlmIGJvdGggdGhpcyBhbmQgdGhlIHByZXZpb3VzIG5vZGUgYXJlIHRleHQgYW5kIHRob3NlIGFyZVxyXG4gICAgICAgIC8vIGNvbnNlY3V0aXZlLiBUaGlzIGhhcHBlbnMgZm9yIGNhc2VzIGxpa2UgXCJhIDwgYlwiLlxyXG4gICAgICAgIGlmIChwcmV2ICYmXHJcbiAgICAgICAgICAgIHByZXYudHlwZSA9PT0gMiAvKiBURVhUICovICYmXHJcbiAgICAgICAgICAgIHByZXYubG9jLmVuZC5vZmZzZXQgPT09IG5vZGUubG9jLnN0YXJ0Lm9mZnNldCkge1xyXG4gICAgICAgICAgICBwcmV2LmNvbnRlbnQgKz0gbm9kZS5jb250ZW50O1xyXG4gICAgICAgICAgICBwcmV2LmxvYy5lbmQgPSBub2RlLmxvYy5lbmQ7XHJcbiAgICAgICAgICAgIHByZXYubG9jLnNvdXJjZSArPSBub2RlLmxvYy5zb3VyY2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG59XHJcbmZ1bmN0aW9uIHBhcnNlQ0RBVEEoY29udGV4dCwgYW5jZXN0b3JzKSB7XHJcbiAgICBhZHZhbmNlQnkoY29udGV4dCwgOSk7XHJcbiAgICBjb25zdCBub2RlcyA9IHBhcnNlQ2hpbGRyZW4oY29udGV4dCwgMyAvKiBDREFUQSAqLywgYW5jZXN0b3JzKTtcclxuICAgIGlmIChjb250ZXh0LnNvdXJjZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBlbWl0RXJyb3IoY29udGV4dCwgNiAvKiBFT0ZfSU5fQ0RBVEEgKi8pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgYWR2YW5jZUJ5KGNvbnRleHQsIDMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGVzO1xyXG59XHJcbmZ1bmN0aW9uIHBhcnNlQ29tbWVudChjb250ZXh0KSB7XHJcbiAgICBjb25zdCBzdGFydCA9IGdldEN1cnNvcihjb250ZXh0KTtcclxuICAgIGxldCBjb250ZW50O1xyXG4gICAgLy8gUmVndWxhciBjb21tZW50LlxyXG4gICAgY29uc3QgbWF0Y2ggPSAvLS0oXFwhKT8+Ly5leGVjKGNvbnRleHQuc291cmNlKTtcclxuICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICBjb250ZW50ID0gY29udGV4dC5zb3VyY2Uuc2xpY2UoNCk7XHJcbiAgICAgICAgYWR2YW5jZUJ5KGNvbnRleHQsIGNvbnRleHQuc291cmNlLmxlbmd0aCk7XHJcbiAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDcgLyogRU9GX0lOX0NPTU1FTlQgKi8pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKG1hdGNoLmluZGV4IDw9IDMpIHtcclxuICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDAgLyogQUJSVVBUX0NMT1NJTkdfT0ZfRU1QVFlfQ09NTUVOVCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtYXRjaFsxXSkge1xyXG4gICAgICAgICAgICBlbWl0RXJyb3IoY29udGV4dCwgMTAgLyogSU5DT1JSRUNUTFlfQ0xPU0VEX0NPTU1FTlQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb250ZW50ID0gY29udGV4dC5zb3VyY2Uuc2xpY2UoNCwgbWF0Y2guaW5kZXgpO1xyXG4gICAgICAgIC8vIEFkdmFuY2luZyB3aXRoIHJlcG9ydGluZyBuZXN0ZWQgY29tbWVudHMuXHJcbiAgICAgICAgY29uc3QgcyA9IGNvbnRleHQuc291cmNlLnNsaWNlKDAsIG1hdGNoLmluZGV4KTtcclxuICAgICAgICBsZXQgcHJldkluZGV4ID0gMSwgbmVzdGVkSW5kZXggPSAwO1xyXG4gICAgICAgIHdoaWxlICgobmVzdGVkSW5kZXggPSBzLmluZGV4T2YoJzwhLS0nLCBwcmV2SW5kZXgpKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgYWR2YW5jZUJ5KGNvbnRleHQsIG5lc3RlZEluZGV4IC0gcHJldkluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgIGlmIChuZXN0ZWRJbmRleCArIDQgPCBzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDE2IC8qIE5FU1RFRF9DT01NRU5UICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcmV2SW5kZXggPSBuZXN0ZWRJbmRleCArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkdmFuY2VCeShjb250ZXh0LCBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCAtIHByZXZJbmRleCArIDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiAzIC8qIENPTU1FTlQgKi8sXHJcbiAgICAgICAgY29udGVudCxcclxuICAgICAgICBsb2M6IGdldFNlbGVjdGlvbihjb250ZXh0LCBzdGFydClcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VCb2d1c0NvbW1lbnQoY29udGV4dCkge1xyXG4gICAgY29uc3Qgc3RhcnQgPSBnZXRDdXJzb3IoY29udGV4dCk7XHJcbiAgICBjb25zdCBjb250ZW50U3RhcnQgPSBjb250ZXh0LnNvdXJjZVsxXSA9PT0gJz8nID8gMSA6IDI7XHJcbiAgICBsZXQgY29udGVudDtcclxuICAgIGNvbnN0IGNsb3NlSW5kZXggPSBjb250ZXh0LnNvdXJjZS5pbmRleE9mKCc+Jyk7XHJcbiAgICBpZiAoY2xvc2VJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICBjb250ZW50ID0gY29udGV4dC5zb3VyY2Uuc2xpY2UoY29udGVudFN0YXJ0KTtcclxuICAgICAgICBhZHZhbmNlQnkoY29udGV4dCwgY29udGV4dC5zb3VyY2UubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnRlbnQgPSBjb250ZXh0LnNvdXJjZS5zbGljZShjb250ZW50U3RhcnQsIGNsb3NlSW5kZXgpO1xyXG4gICAgICAgIGFkdmFuY2VCeShjb250ZXh0LCBjbG9zZUluZGV4ICsgMSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDMgLyogQ09NTUVOVCAqLyxcclxuICAgICAgICBjb250ZW50LFxyXG4gICAgICAgIGxvYzogZ2V0U2VsZWN0aW9uKGNvbnRleHQsIHN0YXJ0KVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBwYXJzZUVsZW1lbnQoY29udGV4dCwgYW5jZXN0b3JzKSB7XHJcbiAgICAvLyBTdGFydCB0YWcuXHJcbiAgICBjb25zdCB3YXNJblByZSA9IGNvbnRleHQuaW5QcmU7XHJcbiAgICBjb25zdCB3YXNJblZQcmUgPSBjb250ZXh0LmluVlByZTtcclxuICAgIGNvbnN0IHBhcmVudCA9IGxhc3QoYW5jZXN0b3JzKTtcclxuICAgIGNvbnN0IGVsZW1lbnQgPSBwYXJzZVRhZyhjb250ZXh0LCAwIC8qIFN0YXJ0ICovLCBwYXJlbnQpO1xyXG4gICAgY29uc3QgaXNQcmVCb3VuZGFyeSA9IGNvbnRleHQuaW5QcmUgJiYgIXdhc0luUHJlO1xyXG4gICAgY29uc3QgaXNWUHJlQm91bmRhcnkgPSBjb250ZXh0LmluVlByZSAmJiAhd2FzSW5WUHJlO1xyXG4gICAgaWYgKGVsZW1lbnQuaXNTZWxmQ2xvc2luZyB8fCBjb250ZXh0Lm9wdGlvbnMuaXNWb2lkVGFnKGVsZW1lbnQudGFnKSkge1xyXG4gICAgICAgIC8vICM0MDMwIHNlbGYtY2xvc2luZyA8cHJlPiB0YWdcclxuICAgICAgICBpZiAoaXNQcmVCb3VuZGFyeSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmluUHJlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1ZQcmVCb3VuZGFyeSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmluVlByZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxuICAgIC8vIENoaWxkcmVuLlxyXG4gICAgYW5jZXN0b3JzLnB1c2goZWxlbWVudCk7XHJcbiAgICBjb25zdCBtb2RlID0gY29udGV4dC5vcHRpb25zLmdldFRleHRNb2RlKGVsZW1lbnQsIHBhcmVudCk7XHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IHBhcnNlQ2hpbGRyZW4oY29udGV4dCwgbW9kZSwgYW5jZXN0b3JzKTtcclxuICAgIGFuY2VzdG9ycy5wb3AoKTtcclxuICAgIC8vIDIueCBpbmxpbmUtdGVtcGxhdGUgY29tcGF0XHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgaW5saW5lVGVtcGxhdGVQcm9wID0gZWxlbWVudC5wcm9wcy5maW5kKHAgPT4gcC50eXBlID09PSA2IC8qIEFUVFJJQlVURSAqLyAmJiBwLm5hbWUgPT09ICdpbmxpbmUtdGVtcGxhdGUnKTtcclxuICAgICAgICBpZiAoaW5saW5lVGVtcGxhdGVQcm9wICYmXHJcbiAgICAgICAgICAgIGNoZWNrQ29tcGF0RW5hYmxlZChcIkNPTVBJTEVSX0lOTElORV9URU1QTEFURVwiIC8qIENPTVBJTEVSX0lOTElORV9URU1QTEFURSAqLywgY29udGV4dCwgaW5saW5lVGVtcGxhdGVQcm9wLmxvYykpIHtcclxuICAgICAgICAgICAgY29uc3QgbG9jID0gZ2V0U2VsZWN0aW9uKGNvbnRleHQsIGVsZW1lbnQubG9jLmVuZCk7XHJcbiAgICAgICAgICAgIGlubGluZVRlbXBsYXRlUHJvcC52YWx1ZSA9IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IDIgLyogVEVYVCAqLyxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGxvYy5zb3VyY2UsXHJcbiAgICAgICAgICAgICAgICBsb2NcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbGVtZW50LmNoaWxkcmVuID0gY2hpbGRyZW47XHJcbiAgICAvLyBFbmQgdGFnLlxyXG4gICAgaWYgKHN0YXJ0c1dpdGhFbmRUYWdPcGVuKGNvbnRleHQuc291cmNlLCBlbGVtZW50LnRhZykpIHtcclxuICAgICAgICBwYXJzZVRhZyhjb250ZXh0LCAxIC8qIEVuZCAqLywgcGFyZW50KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAyNCAvKiBYX01JU1NJTkdfRU5EX1RBRyAqLywgMCwgZWxlbWVudC5sb2Muc3RhcnQpO1xyXG4gICAgICAgIGlmIChjb250ZXh0LnNvdXJjZS5sZW5ndGggPT09IDAgJiYgZWxlbWVudC50YWcudG9Mb3dlckNhc2UoKSA9PT0gJ3NjcmlwdCcpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3QgPSBjaGlsZHJlblswXTtcclxuICAgICAgICAgICAgaWYgKGZpcnN0ICYmIHN0YXJ0c1dpdGgoZmlyc3QubG9jLnNvdXJjZSwgJzwhLS0nKSkge1xyXG4gICAgICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDggLyogRU9GX0lOX1NDUklQVF9IVE1MX0NPTU1FTlRfTElLRV9URVhUICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsZW1lbnQubG9jID0gZ2V0U2VsZWN0aW9uKGNvbnRleHQsIGVsZW1lbnQubG9jLnN0YXJ0KTtcclxuICAgIGlmIChpc1ByZUJvdW5kYXJ5KSB7XHJcbiAgICAgICAgY29udGV4dC5pblByZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzVlByZUJvdW5kYXJ5KSB7XHJcbiAgICAgICAgY29udGV4dC5pblZQcmUgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbGVtZW50O1xyXG59XHJcbmNvbnN0IGlzU3BlY2lhbFRlbXBsYXRlRGlyZWN0aXZlID0gLyojX19QVVJFX18qLyBtYWtlTWFwKGBpZixlbHNlLGVsc2UtaWYsZm9yLHNsb3RgKTtcclxuZnVuY3Rpb24gcGFyc2VUYWcoY29udGV4dCwgdHlwZSwgcGFyZW50KSB7XHJcbiAgICAvLyBUYWcgb3Blbi5cclxuICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Q3Vyc29yKGNvbnRleHQpO1xyXG4gICAgY29uc3QgbWF0Y2ggPSAvXjxcXC8/KFthLXpdW15cXHRcXHJcXG5cXGYgLz5dKikvaS5leGVjKGNvbnRleHQuc291cmNlKTtcclxuICAgIGNvbnN0IHRhZyA9IG1hdGNoWzFdO1xyXG4gICAgY29uc3QgbnMgPSBjb250ZXh0Lm9wdGlvbnMuZ2V0TmFtZXNwYWNlKHRhZywgcGFyZW50KTtcclxuICAgIGFkdmFuY2VCeShjb250ZXh0LCBtYXRjaFswXS5sZW5ndGgpO1xyXG4gICAgYWR2YW5jZVNwYWNlcyhjb250ZXh0KTtcclxuICAgIC8vIHNhdmUgY3VycmVudCBzdGF0ZSBpbiBjYXNlIHdlIG5lZWQgdG8gcmUtcGFyc2UgYXR0cmlidXRlcyB3aXRoIHYtcHJlXHJcbiAgICBjb25zdCBjdXJzb3IgPSBnZXRDdXJzb3IoY29udGV4dCk7XHJcbiAgICBjb25zdCBjdXJyZW50U291cmNlID0gY29udGV4dC5zb3VyY2U7XHJcbiAgICAvLyBjaGVjayA8cHJlPiB0YWdcclxuICAgIGlmIChjb250ZXh0Lm9wdGlvbnMuaXNQcmVUYWcodGFnKSkge1xyXG4gICAgICAgIGNvbnRleHQuaW5QcmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gQXR0cmlidXRlcy5cclxuICAgIGxldCBwcm9wcyA9IHBhcnNlQXR0cmlidXRlcyhjb250ZXh0LCB0eXBlKTtcclxuICAgIC8vIGNoZWNrIHYtcHJlXHJcbiAgICBpZiAodHlwZSA9PT0gMCAvKiBTdGFydCAqLyAmJlxyXG4gICAgICAgICFjb250ZXh0LmluVlByZSAmJlxyXG4gICAgICAgIHByb3BzLnNvbWUocCA9PiBwLnR5cGUgPT09IDcgLyogRElSRUNUSVZFICovICYmIHAubmFtZSA9PT0gJ3ByZScpKSB7XHJcbiAgICAgICAgY29udGV4dC5pblZQcmUgPSB0cnVlO1xyXG4gICAgICAgIC8vIHJlc2V0IGNvbnRleHRcclxuICAgICAgICBleHRlbmQoY29udGV4dCwgY3Vyc29yKTtcclxuICAgICAgICBjb250ZXh0LnNvdXJjZSA9IGN1cnJlbnRTb3VyY2U7XHJcbiAgICAgICAgLy8gcmUtcGFyc2UgYXR0cnMgYW5kIGZpbHRlciBvdXQgdi1wcmUgaXRzZWxmXHJcbiAgICAgICAgcHJvcHMgPSBwYXJzZUF0dHJpYnV0ZXMoY29udGV4dCwgdHlwZSkuZmlsdGVyKHAgPT4gcC5uYW1lICE9PSAndi1wcmUnKTtcclxuICAgIH1cclxuICAgIC8vIFRhZyBjbG9zZS5cclxuICAgIGxldCBpc1NlbGZDbG9zaW5nID0gZmFsc2U7XHJcbiAgICBpZiAoY29udGV4dC5zb3VyY2UubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDkgLyogRU9GX0lOX1RBRyAqLyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpc1NlbGZDbG9zaW5nID0gc3RhcnRzV2l0aChjb250ZXh0LnNvdXJjZSwgJy8+Jyk7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IDEgLyogRW5kICovICYmIGlzU2VsZkNsb3NpbmcpIHtcclxuICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDQgLyogRU5EX1RBR19XSVRIX1RSQUlMSU5HX1NPTElEVVMgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZHZhbmNlQnkoY29udGV4dCwgaXNTZWxmQ2xvc2luZyA/IDIgOiAxKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlID09PSAxIC8qIEVuZCAqLykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIDIueCBkZXByZWNhdGlvbiBjaGVja3NcclxuICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICBpc0NvbXBhdEVuYWJsZWQoXCJDT01QSUxFUl9WX0lGX1ZfRk9SX1BSRUNFREVOQ0VcIiAvKiBDT01QSUxFUl9WX0lGX1ZfRk9SX1BSRUNFREVOQ0UgKi8sIGNvbnRleHQpKSB7XHJcbiAgICAgICAgbGV0IGhhc0lmID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGhhc0ZvciA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcCA9IHByb3BzW2ldO1xyXG4gICAgICAgICAgICBpZiAocC50eXBlID09PSA3IC8qIERJUkVDVElWRSAqLykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHAubmFtZSA9PT0gJ2lmJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc0lmID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHAubmFtZSA9PT0gJ2ZvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBoYXNGb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChoYXNJZiAmJiBoYXNGb3IpIHtcclxuICAgICAgICAgICAgICAgIHdhcm5EZXByZWNhdGlvbihcIkNPTVBJTEVSX1ZfSUZfVl9GT1JfUFJFQ0VERU5DRVwiIC8qIENPTVBJTEVSX1ZfSUZfVl9GT1JfUFJFQ0VERU5DRSAqLywgY29udGV4dCwgZ2V0U2VsZWN0aW9uKGNvbnRleHQsIHN0YXJ0KSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCB0YWdUeXBlID0gMCAvKiBFTEVNRU5UICovO1xyXG4gICAgaWYgKCFjb250ZXh0LmluVlByZSkge1xyXG4gICAgICAgIGlmICh0YWcgPT09ICdzbG90Jykge1xyXG4gICAgICAgICAgICB0YWdUeXBlID0gMiAvKiBTTE9UICovO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0YWcgPT09ICd0ZW1wbGF0ZScpIHtcclxuICAgICAgICAgICAgaWYgKHByb3BzLnNvbWUocCA9PiBwLnR5cGUgPT09IDcgLyogRElSRUNUSVZFICovICYmIGlzU3BlY2lhbFRlbXBsYXRlRGlyZWN0aXZlKHAubmFtZSkpKSB7XHJcbiAgICAgICAgICAgICAgICB0YWdUeXBlID0gMyAvKiBURU1QTEFURSAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc0NvbXBvbmVudCh0YWcsIHByb3BzLCBjb250ZXh0KSkge1xyXG4gICAgICAgICAgICB0YWdUeXBlID0gMSAvKiBDT01QT05FTlQgKi87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiAxIC8qIEVMRU1FTlQgKi8sXHJcbiAgICAgICAgbnMsXHJcbiAgICAgICAgdGFnLFxyXG4gICAgICAgIHRhZ1R5cGUsXHJcbiAgICAgICAgcHJvcHMsXHJcbiAgICAgICAgaXNTZWxmQ2xvc2luZyxcclxuICAgICAgICBjaGlsZHJlbjogW10sXHJcbiAgICAgICAgbG9jOiBnZXRTZWxlY3Rpb24oY29udGV4dCwgc3RhcnQpLFxyXG4gICAgICAgIGNvZGVnZW5Ob2RlOiB1bmRlZmluZWQgLy8gdG8gYmUgY3JlYXRlZCBkdXJpbmcgdHJhbnNmb3JtIHBoYXNlXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzQ29tcG9uZW50KHRhZywgcHJvcHMsIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XHJcbiAgICBpZiAob3B0aW9ucy5pc0N1c3RvbUVsZW1lbnQodGFnKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh0YWcgPT09ICdjb21wb25lbnQnIHx8XHJcbiAgICAgICAgL15bQS1aXS8udGVzdCh0YWcpIHx8XHJcbiAgICAgICAgaXNDb3JlQ29tcG9uZW50KHRhZykgfHxcclxuICAgICAgICAob3B0aW9ucy5pc0J1aWx0SW5Db21wb25lbnQgJiYgb3B0aW9ucy5pc0J1aWx0SW5Db21wb25lbnQodGFnKSkgfHxcclxuICAgICAgICAob3B0aW9ucy5pc05hdGl2ZVRhZyAmJiAhb3B0aW9ucy5pc05hdGl2ZVRhZyh0YWcpKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gYXQgdGhpcyBwb2ludCB0aGUgdGFnIHNob3VsZCBiZSBhIG5hdGl2ZSB0YWcsIGJ1dCBjaGVjayBmb3IgcG90ZW50aWFsIFwiaXNcIlxyXG4gICAgLy8gY2FzdGluZ1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHAgPSBwcm9wc1tpXTtcclxuICAgICAgICBpZiAocC50eXBlID09PSA2IC8qIEFUVFJJQlVURSAqLykge1xyXG4gICAgICAgICAgICBpZiAocC5uYW1lID09PSAnaXMnICYmIHAudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwLnZhbHVlLmNvbnRlbnQuc3RhcnRzV2l0aCgndnVlOicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGVja0NvbXBhdEVuYWJsZWQoXCJDT01QSUxFUl9JU19PTl9FTEVNRU5UXCIgLyogQ09NUElMRVJfSVNfT05fRUxFTUVOVCAqLywgY29udGV4dCwgcC5sb2MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGRpcmVjdGl2ZVxyXG4gICAgICAgICAgICAvLyB2LWlzIChUT0RPIERlcHJlY2F0ZSlcclxuICAgICAgICAgICAgaWYgKHAubmFtZSA9PT0gJ2lzJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoXHJcbiAgICAgICAgICAgIC8vIDppcyBvbiBwbGFpbiBlbGVtZW50IC0gb25seSB0cmVhdCBhcyBjb21wb25lbnQgaW4gY29tcGF0IG1vZGVcclxuICAgICAgICAgICAgcC5uYW1lID09PSAnYmluZCcgJiZcclxuICAgICAgICAgICAgICAgIGlzU3RhdGljQXJnT2YocC5hcmcsICdpcycpICYmXHJcbiAgICAgICAgICAgICAgICB0cnVlICYmXHJcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBhdEVuYWJsZWQoXCJDT01QSUxFUl9JU19PTl9FTEVNRU5UXCIgLyogQ09NUElMRVJfSVNfT05fRUxFTUVOVCAqLywgY29udGV4dCwgcC5sb2MpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZXMoY29udGV4dCwgdHlwZSkge1xyXG4gICAgY29uc3QgcHJvcHMgPSBbXTtcclxuICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWVzID0gbmV3IFNldCgpO1xyXG4gICAgd2hpbGUgKGNvbnRleHQuc291cmNlLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICAhc3RhcnRzV2l0aChjb250ZXh0LnNvdXJjZSwgJz4nKSAmJlxyXG4gICAgICAgICFzdGFydHNXaXRoKGNvbnRleHQuc291cmNlLCAnLz4nKSkge1xyXG4gICAgICAgIGlmIChzdGFydHNXaXRoKGNvbnRleHQuc291cmNlLCAnLycpKSB7XHJcbiAgICAgICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAyMiAvKiBVTkVYUEVDVEVEX1NPTElEVVNfSU5fVEFHICovKTtcclxuICAgICAgICAgICAgYWR2YW5jZUJ5KGNvbnRleHQsIDEpO1xyXG4gICAgICAgICAgICBhZHZhbmNlU3BhY2VzKGNvbnRleHQpO1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IDEgLyogRW5kICovKSB7XHJcbiAgICAgICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAzIC8qIEVORF9UQUdfV0lUSF9BVFRSSUJVVEVTICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXR0ciA9IHBhcnNlQXR0cmlidXRlKGNvbnRleHQsIGF0dHJpYnV0ZU5hbWVzKTtcclxuICAgICAgICAvLyBUcmltIHdoaXRlc3BhY2UgYmV0d2VlbiBjbGFzc1xyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy9jb3JlL2lzc3Vlcy80MjUxXHJcbiAgICAgICAgaWYgKGF0dHIudHlwZSA9PT0gNiAvKiBBVFRSSUJVVEUgKi8gJiZcclxuICAgICAgICAgICAgYXR0ci52YWx1ZSAmJlxyXG4gICAgICAgICAgICBhdHRyLm5hbWUgPT09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgYXR0ci52YWx1ZS5jb250ZW50ID0gYXR0ci52YWx1ZS5jb250ZW50LnJlcGxhY2UoL1xccysvZywgJyAnKS50cmltKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSAwIC8qIFN0YXJ0ICovKSB7XHJcbiAgICAgICAgICAgIHByb3BzLnB1c2goYXR0cik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvXlteXFx0XFxyXFxuXFxmIC8+XS8udGVzdChjb250ZXh0LnNvdXJjZSkpIHtcclxuICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDE1IC8qIE1JU1NJTkdfV0hJVEVTUEFDRV9CRVRXRUVOX0FUVFJJQlVURVMgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZHZhbmNlU3BhY2VzKGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzO1xyXG59XHJcbmZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlKGNvbnRleHQsIG5hbWVTZXQpIHtcclxuICAgIC8vIE5hbWUuXHJcbiAgICBjb25zdCBzdGFydCA9IGdldEN1cnNvcihjb250ZXh0KTtcclxuICAgIGNvbnN0IG1hdGNoID0gL15bXlxcdFxcclxcblxcZiAvPl1bXlxcdFxcclxcblxcZiAvPj1dKi8uZXhlYyhjb250ZXh0LnNvdXJjZSk7XHJcbiAgICBjb25zdCBuYW1lID0gbWF0Y2hbMF07XHJcbiAgICBpZiAobmFtZVNldC5oYXMobmFtZSkpIHtcclxuICAgICAgICBlbWl0RXJyb3IoY29udGV4dCwgMiAvKiBEVVBMSUNBVEVfQVRUUklCVVRFICovKTtcclxuICAgIH1cclxuICAgIG5hbWVTZXQuYWRkKG5hbWUpO1xyXG4gICAgaWYgKG5hbWVbMF0gPT09ICc9Jykge1xyXG4gICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAxOSAvKiBVTkVYUEVDVEVEX0VRVUFMU19TSUdOX0JFRk9SRV9BVFRSSUJVVEVfTkFNRSAqLyk7XHJcbiAgICB9XHJcbiAgICB7XHJcbiAgICAgICAgY29uc3QgcGF0dGVybiA9IC9bXCInPF0vZztcclxuICAgICAgICBsZXQgbTtcclxuICAgICAgICB3aGlsZSAoKG0gPSBwYXR0ZXJuLmV4ZWMobmFtZSkpKSB7XHJcbiAgICAgICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAxNyAvKiBVTkVYUEVDVEVEX0NIQVJBQ1RFUl9JTl9BVFRSSUJVVEVfTkFNRSAqLywgbS5pbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWR2YW5jZUJ5KGNvbnRleHQsIG5hbWUubGVuZ3RoKTtcclxuICAgIC8vIFZhbHVlXHJcbiAgICBsZXQgdmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAoL15bXFx0XFxyXFxuXFxmIF0qPS8udGVzdChjb250ZXh0LnNvdXJjZSkpIHtcclxuICAgICAgICBhZHZhbmNlU3BhY2VzKGNvbnRleHQpO1xyXG4gICAgICAgIGFkdmFuY2VCeShjb250ZXh0LCAxKTtcclxuICAgICAgICBhZHZhbmNlU3BhY2VzKGNvbnRleHQpO1xyXG4gICAgICAgIHZhbHVlID0gcGFyc2VBdHRyaWJ1dGVWYWx1ZShjb250ZXh0KTtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVtaXRFcnJvcihjb250ZXh0LCAxMyAvKiBNSVNTSU5HX0FUVFJJQlVURV9WQUxVRSAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgbG9jID0gZ2V0U2VsZWN0aW9uKGNvbnRleHQsIHN0YXJ0KTtcclxuICAgIGlmICghY29udGV4dC5pblZQcmUgJiYgL14odi1bQS1aYS16MC05LV18OnxcXC58QHwjKS8udGVzdChuYW1lKSkge1xyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gLyg/Ol52LShbYS16MC05LV0rKSk/KD86KD86OnxeXFwufF5AfF4jKShcXFtbXlxcXV0rXFxdfFteXFwuXSspKT8oLispPyQvaS5leGVjKG5hbWUpO1xyXG4gICAgICAgIGxldCBpc1Byb3BTaG9ydGhhbmQgPSBzdGFydHNXaXRoKG5hbWUsICcuJyk7XHJcbiAgICAgICAgbGV0IGRpck5hbWUgPSBtYXRjaFsxXSB8fFxyXG4gICAgICAgICAgICAoaXNQcm9wU2hvcnRoYW5kIHx8IHN0YXJ0c1dpdGgobmFtZSwgJzonKVxyXG4gICAgICAgICAgICAgICAgPyAnYmluZCdcclxuICAgICAgICAgICAgICAgIDogc3RhcnRzV2l0aChuYW1lLCAnQCcpXHJcbiAgICAgICAgICAgICAgICAgICAgPyAnb24nXHJcbiAgICAgICAgICAgICAgICAgICAgOiAnc2xvdCcpO1xyXG4gICAgICAgIGxldCBhcmc7XHJcbiAgICAgICAgaWYgKG1hdGNoWzJdKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzU2xvdCA9IGRpck5hbWUgPT09ICdzbG90JztcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRPZmZzZXQgPSBuYW1lLmxhc3RJbmRleE9mKG1hdGNoWzJdKTtcclxuICAgICAgICAgICAgY29uc3QgbG9jID0gZ2V0U2VsZWN0aW9uKGNvbnRleHQsIGdldE5ld1Bvc2l0aW9uKGNvbnRleHQsIHN0YXJ0LCBzdGFydE9mZnNldCksIGdldE5ld1Bvc2l0aW9uKGNvbnRleHQsIHN0YXJ0LCBzdGFydE9mZnNldCArIG1hdGNoWzJdLmxlbmd0aCArICgoaXNTbG90ICYmIG1hdGNoWzNdKSB8fCAnJykubGVuZ3RoKSk7XHJcbiAgICAgICAgICAgIGxldCBjb250ZW50ID0gbWF0Y2hbMl07XHJcbiAgICAgICAgICAgIGxldCBpc1N0YXRpYyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50LnN0YXJ0c1dpdGgoJ1snKSkge1xyXG4gICAgICAgICAgICAgICAgaXNTdGF0aWMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmICghY29udGVudC5lbmRzV2l0aCgnXScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDI3IC8qIFhfTUlTU0lOR19EWU5BTUlDX0RJUkVDVElWRV9BUkdVTUVOVF9FTkQgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSwgY29udGVudC5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc1Nsb3QpIHtcclxuICAgICAgICAgICAgICAgIC8vICMxMjQxIHNwZWNpYWwgY2FzZSBmb3Igdi1zbG90OiB2dWV0aWZ5IHJlbGllcyBleHRlbnNpdmVseSBvbiBzbG90XHJcbiAgICAgICAgICAgICAgICAvLyBuYW1lcyBjb250YWluaW5nIGRvdHMuIHYtc2xvdCBkb2Vzbid0IGhhdmUgYW55IG1vZGlmaWVycyBhbmQgVnVlIDIueFxyXG4gICAgICAgICAgICAgICAgLy8gc3VwcG9ydHMgc3VjaCB1c2FnZSBzbyB3ZSBhcmUga2VlcGluZyBpdCBjb25zaXN0ZW50IHdpdGggMi54LlxyXG4gICAgICAgICAgICAgICAgY29udGVudCArPSBtYXRjaFszXSB8fCAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhcmcgPSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovLFxyXG4gICAgICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgICAgIGlzU3RhdGljLFxyXG4gICAgICAgICAgICAgICAgY29uc3RUeXBlOiBpc1N0YXRpY1xyXG4gICAgICAgICAgICAgICAgICAgID8gMyAvKiBDQU5fU1RSSU5HSUZZICovXHJcbiAgICAgICAgICAgICAgICAgICAgOiAwIC8qIE5PVF9DT05TVEFOVCAqLyxcclxuICAgICAgICAgICAgICAgIGxvY1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUuaXNRdW90ZWQpIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsdWVMb2MgPSB2YWx1ZS5sb2M7XHJcbiAgICAgICAgICAgIHZhbHVlTG9jLnN0YXJ0Lm9mZnNldCsrO1xyXG4gICAgICAgICAgICB2YWx1ZUxvYy5zdGFydC5jb2x1bW4rKztcclxuICAgICAgICAgICAgdmFsdWVMb2MuZW5kID0gYWR2YW5jZVBvc2l0aW9uV2l0aENsb25lKHZhbHVlTG9jLnN0YXJ0LCB2YWx1ZS5jb250ZW50KTtcclxuICAgICAgICAgICAgdmFsdWVMb2Muc291cmNlID0gdmFsdWVMb2Muc291cmNlLnNsaWNlKDEsIC0xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZXJzID0gbWF0Y2hbM10gPyBtYXRjaFszXS5zbGljZSgxKS5zcGxpdCgnLicpIDogW107XHJcbiAgICAgICAgaWYgKGlzUHJvcFNob3J0aGFuZClcclxuICAgICAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3Byb3AnKTtcclxuICAgICAgICAvLyAyLnggY29tcGF0IHYtYmluZDpmb28uc3luYyAtPiB2LW1vZGVsOmZvb1xyXG4gICAgICAgIGlmIChkaXJOYW1lID09PSAnYmluZCcgJiYgYXJnKSB7XHJcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoJ3N5bmMnKSAmJlxyXG4gICAgICAgICAgICAgICAgY2hlY2tDb21wYXRFbmFibGVkKFwiQ09NUElMRVJfVl9CSU5EX1NZTkNcIiAvKiBDT01QSUxFUl9WX0JJTkRfU1lOQyAqLywgY29udGV4dCwgbG9jLCBhcmcubG9jLnNvdXJjZSkpIHtcclxuICAgICAgICAgICAgICAgIGRpck5hbWUgPSAnbW9kZWwnO1xyXG4gICAgICAgICAgICAgICAgbW9kaWZpZXJzLnNwbGljZShtb2RpZmllcnMuaW5kZXhPZignc3luYycpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIG1vZGlmaWVycy5pbmNsdWRlcygncHJvcCcpKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBhdEVuYWJsZWQoXCJDT01QSUxFUl9WX0JJTkRfUFJPUFwiIC8qIENPTVBJTEVSX1ZfQklORF9QUk9QICovLCBjb250ZXh0LCBsb2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6IDcgLyogRElSRUNUSVZFICovLFxyXG4gICAgICAgICAgICBuYW1lOiBkaXJOYW1lLFxyXG4gICAgICAgICAgICBleHA6IHZhbHVlICYmIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi8sXHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiB2YWx1ZS5jb250ZW50LFxyXG4gICAgICAgICAgICAgICAgaXNTdGF0aWM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgLy8gVHJlYXQgYXMgbm9uLWNvbnN0YW50IGJ5IGRlZmF1bHQuIFRoaXMgY2FuIGJlIHBvdGVudGlhbGx5IHNldCB0b1xyXG4gICAgICAgICAgICAgICAgLy8gb3RoZXIgdmFsdWVzIGJ5IGB0cmFuc2Zvcm1FeHByZXNzaW9uYCB0byBtYWtlIGl0IGVsaWdpYmxlIGZvciBob2lzdGluZy5cclxuICAgICAgICAgICAgICAgIGNvbnN0VHlwZTogMCAvKiBOT1RfQ09OU1RBTlQgKi8sXHJcbiAgICAgICAgICAgICAgICBsb2M6IHZhbHVlLmxvY1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhcmcsXHJcbiAgICAgICAgICAgIG1vZGlmaWVycyxcclxuICAgICAgICAgICAgbG9jXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8vIG1pc3NpbmcgZGlyZWN0aXZlIG5hbWUgb3IgaWxsZWdhbCBkaXJlY3RpdmUgbmFtZVxyXG4gICAgaWYgKCFjb250ZXh0LmluVlByZSAmJiBzdGFydHNXaXRoKG5hbWUsICd2LScpKSB7XHJcbiAgICAgICAgZW1pdEVycm9yKGNvbnRleHQsIDI2IC8qIFhfTUlTU0lOR19ESVJFQ1RJVkVfTkFNRSAqLyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHR5cGU6IDYgLyogQVRUUklCVVRFICovLFxyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgdmFsdWU6IHZhbHVlICYmIHtcclxuICAgICAgICAgICAgdHlwZTogMiAvKiBURVhUICovLFxyXG4gICAgICAgICAgICBjb250ZW50OiB2YWx1ZS5jb250ZW50LFxyXG4gICAgICAgICAgICBsb2M6IHZhbHVlLmxvY1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9jXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlVmFsdWUoY29udGV4dCkge1xyXG4gICAgY29uc3Qgc3RhcnQgPSBnZXRDdXJzb3IoY29udGV4dCk7XHJcbiAgICBsZXQgY29udGVudDtcclxuICAgIGNvbnN0IHF1b3RlID0gY29udGV4dC5zb3VyY2VbMF07XHJcbiAgICBjb25zdCBpc1F1b3RlZCA9IHF1b3RlID09PSBgXCJgIHx8IHF1b3RlID09PSBgJ2A7XHJcbiAgICBpZiAoaXNRdW90ZWQpIHtcclxuICAgICAgICAvLyBRdW90ZWQgdmFsdWUuXHJcbiAgICAgICAgYWR2YW5jZUJ5KGNvbnRleHQsIDEpO1xyXG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0gY29udGV4dC5zb3VyY2UuaW5kZXhPZihxdW90ZSk7XHJcbiAgICAgICAgaWYgKGVuZEluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgICBjb250ZW50ID0gcGFyc2VUZXh0RGF0YShjb250ZXh0LCBjb250ZXh0LnNvdXJjZS5sZW5ndGgsIDQgLyogQVRUUklCVVRFX1ZBTFVFICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQgPSBwYXJzZVRleHREYXRhKGNvbnRleHQsIGVuZEluZGV4LCA0IC8qIEFUVFJJQlVURV9WQUxVRSAqLyk7XHJcbiAgICAgICAgICAgIGFkdmFuY2VCeShjb250ZXh0LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBVbnF1b3RlZFxyXG4gICAgICAgIGNvbnN0IG1hdGNoID0gL15bXlxcdFxcclxcblxcZiA+XSsvLmV4ZWMoY29udGV4dC5zb3VyY2UpO1xyXG4gICAgICAgIGlmICghbWF0Y2gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdW5leHBlY3RlZENoYXJzID0gL1tcIic8PWBdL2c7XHJcbiAgICAgICAgbGV0IG07XHJcbiAgICAgICAgd2hpbGUgKChtID0gdW5leHBlY3RlZENoYXJzLmV4ZWMobWF0Y2hbMF0pKSkge1xyXG4gICAgICAgICAgICBlbWl0RXJyb3IoY29udGV4dCwgMTggLyogVU5FWFBFQ1RFRF9DSEFSQUNURVJfSU5fVU5RVU9URURfQVRUUklCVVRFX1ZBTFVFICovLCBtLmluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGVudCA9IHBhcnNlVGV4dERhdGEoY29udGV4dCwgbWF0Y2hbMF0ubGVuZ3RoLCA0IC8qIEFUVFJJQlVURV9WQUxVRSAqLyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBjb250ZW50LCBpc1F1b3RlZCwgbG9jOiBnZXRTZWxlY3Rpb24oY29udGV4dCwgc3RhcnQpIH07XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VJbnRlcnBvbGF0aW9uKGNvbnRleHQsIG1vZGUpIHtcclxuICAgIGNvbnN0IFtvcGVuLCBjbG9zZV0gPSBjb250ZXh0Lm9wdGlvbnMuZGVsaW1pdGVycztcclxuICAgIGNvbnN0IGNsb3NlSW5kZXggPSBjb250ZXh0LnNvdXJjZS5pbmRleE9mKGNsb3NlLCBvcGVuLmxlbmd0aCk7XHJcbiAgICBpZiAoY2xvc2VJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICBlbWl0RXJyb3IoY29udGV4dCwgMjUgLyogWF9NSVNTSU5HX0lOVEVSUE9MQVRJT05fRU5EICovKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RhcnQgPSBnZXRDdXJzb3IoY29udGV4dCk7XHJcbiAgICBhZHZhbmNlQnkoY29udGV4dCwgb3Blbi5sZW5ndGgpO1xyXG4gICAgY29uc3QgaW5uZXJTdGFydCA9IGdldEN1cnNvcihjb250ZXh0KTtcclxuICAgIGNvbnN0IGlubmVyRW5kID0gZ2V0Q3Vyc29yKGNvbnRleHQpO1xyXG4gICAgY29uc3QgcmF3Q29udGVudExlbmd0aCA9IGNsb3NlSW5kZXggLSBvcGVuLmxlbmd0aDtcclxuICAgIGNvbnN0IHJhd0NvbnRlbnQgPSBjb250ZXh0LnNvdXJjZS5zbGljZSgwLCByYXdDb250ZW50TGVuZ3RoKTtcclxuICAgIGNvbnN0IHByZVRyaW1Db250ZW50ID0gcGFyc2VUZXh0RGF0YShjb250ZXh0LCByYXdDb250ZW50TGVuZ3RoLCBtb2RlKTtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBwcmVUcmltQ29udGVudC50cmltKCk7XHJcbiAgICBjb25zdCBzdGFydE9mZnNldCA9IHByZVRyaW1Db250ZW50LmluZGV4T2YoY29udGVudCk7XHJcbiAgICBpZiAoc3RhcnRPZmZzZXQgPiAwKSB7XHJcbiAgICAgICAgYWR2YW5jZVBvc2l0aW9uV2l0aE11dGF0aW9uKGlubmVyU3RhcnQsIHJhd0NvbnRlbnQsIHN0YXJ0T2Zmc2V0KTtcclxuICAgIH1cclxuICAgIGNvbnN0IGVuZE9mZnNldCA9IHJhd0NvbnRlbnRMZW5ndGggLSAocHJlVHJpbUNvbnRlbnQubGVuZ3RoIC0gY29udGVudC5sZW5ndGggLSBzdGFydE9mZnNldCk7XHJcbiAgICBhZHZhbmNlUG9zaXRpb25XaXRoTXV0YXRpb24oaW5uZXJFbmQsIHJhd0NvbnRlbnQsIGVuZE9mZnNldCk7XHJcbiAgICBhZHZhbmNlQnkoY29udGV4dCwgY2xvc2UubGVuZ3RoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogNSAvKiBJTlRFUlBPTEFUSU9OICovLFxyXG4gICAgICAgIGNvbnRlbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLyxcclxuICAgICAgICAgICAgaXNTdGF0aWM6IGZhbHNlLFxyXG4gICAgICAgICAgICAvLyBTZXQgYGlzQ29uc3RhbnRgIHRvIGZhbHNlIGJ5IGRlZmF1bHQgYW5kIHdpbGwgZGVjaWRlIGluIHRyYW5zZm9ybUV4cHJlc3Npb25cclxuICAgICAgICAgICAgY29uc3RUeXBlOiAwIC8qIE5PVF9DT05TVEFOVCAqLyxcclxuICAgICAgICAgICAgY29udGVudCxcclxuICAgICAgICAgICAgbG9jOiBnZXRTZWxlY3Rpb24oY29udGV4dCwgaW5uZXJTdGFydCwgaW5uZXJFbmQpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2M6IGdldFNlbGVjdGlvbihjb250ZXh0LCBzdGFydClcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gcGFyc2VUZXh0KGNvbnRleHQsIG1vZGUpIHtcclxuICAgIGNvbnN0IGVuZFRva2VucyA9IG1vZGUgPT09IDMgLyogQ0RBVEEgKi8gPyBbJ11dPiddIDogWyc8JywgY29udGV4dC5vcHRpb25zLmRlbGltaXRlcnNbMF1dO1xyXG4gICAgbGV0IGVuZEluZGV4ID0gY29udGV4dC5zb3VyY2UubGVuZ3RoO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmRUb2tlbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGNvbnRleHQuc291cmNlLmluZGV4T2YoZW5kVG9rZW5zW2ldLCAxKTtcclxuICAgICAgICBpZiAoaW5kZXggIT09IC0xICYmIGVuZEluZGV4ID4gaW5kZXgpIHtcclxuICAgICAgICAgICAgZW5kSW5kZXggPSBpbmRleDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdGFydCA9IGdldEN1cnNvcihjb250ZXh0KTtcclxuICAgIGNvbnN0IGNvbnRlbnQgPSBwYXJzZVRleHREYXRhKGNvbnRleHQsIGVuZEluZGV4LCBtb2RlKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogMiAvKiBURVhUICovLFxyXG4gICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgbG9jOiBnZXRTZWxlY3Rpb24oY29udGV4dCwgc3RhcnQpXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBHZXQgdGV4dCBkYXRhIHdpdGggYSBnaXZlbiBsZW5ndGggZnJvbSB0aGUgY3VycmVudCBsb2NhdGlvbi5cclxuICogVGhpcyB0cmFuc2xhdGVzIEhUTUwgZW50aXRpZXMgaW4gdGhlIHRleHQgZGF0YS5cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlVGV4dERhdGEoY29udGV4dCwgbGVuZ3RoLCBtb2RlKSB7XHJcbiAgICBjb25zdCByYXdUZXh0ID0gY29udGV4dC5zb3VyY2Uuc2xpY2UoMCwgbGVuZ3RoKTtcclxuICAgIGFkdmFuY2VCeShjb250ZXh0LCBsZW5ndGgpO1xyXG4gICAgaWYgKG1vZGUgPT09IDIgLyogUkFXVEVYVCAqLyB8fFxyXG4gICAgICAgIG1vZGUgPT09IDMgLyogQ0RBVEEgKi8gfHxcclxuICAgICAgICAhcmF3VGV4dC5pbmNsdWRlcygnJicpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJhd1RleHQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBEQVRBIG9yIFJDREFUQSBjb250YWluaW5nIFwiJlwiXCIuIEVudGl0eSBkZWNvZGluZyByZXF1aXJlZC5cclxuICAgICAgICByZXR1cm4gY29udGV4dC5vcHRpb25zLmRlY29kZUVudGl0aWVzKHJhd1RleHQsIG1vZGUgPT09IDQgLyogQVRUUklCVVRFX1ZBTFVFICovKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRDdXJzb3IoY29udGV4dCkge1xyXG4gICAgY29uc3QgeyBjb2x1bW4sIGxpbmUsIG9mZnNldCB9ID0gY29udGV4dDtcclxuICAgIHJldHVybiB7IGNvbHVtbiwgbGluZSwgb2Zmc2V0IH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKGNvbnRleHQsIHN0YXJ0LCBlbmQpIHtcclxuICAgIGVuZCA9IGVuZCB8fCBnZXRDdXJzb3IoY29udGV4dCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXJ0LFxyXG4gICAgICAgIGVuZCxcclxuICAgICAgICBzb3VyY2U6IGNvbnRleHQub3JpZ2luYWxTb3VyY2Uuc2xpY2Uoc3RhcnQub2Zmc2V0LCBlbmQub2Zmc2V0KVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBsYXN0KHhzKSB7XHJcbiAgICByZXR1cm4geHNbeHMubGVuZ3RoIC0gMV07XHJcbn1cclxuZnVuY3Rpb24gc3RhcnRzV2l0aChzb3VyY2UsIHNlYXJjaFN0cmluZykge1xyXG4gICAgcmV0dXJuIHNvdXJjZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyk7XHJcbn1cclxuZnVuY3Rpb24gYWR2YW5jZUJ5KGNvbnRleHQsIG51bWJlck9mQ2hhcmFjdGVycykge1xyXG4gICAgY29uc3QgeyBzb3VyY2UgfSA9IGNvbnRleHQ7XHJcbiAgICBhZHZhbmNlUG9zaXRpb25XaXRoTXV0YXRpb24oY29udGV4dCwgc291cmNlLCBudW1iZXJPZkNoYXJhY3RlcnMpO1xyXG4gICAgY29udGV4dC5zb3VyY2UgPSBzb3VyY2Uuc2xpY2UobnVtYmVyT2ZDaGFyYWN0ZXJzKTtcclxufVxyXG5mdW5jdGlvbiBhZHZhbmNlU3BhY2VzKGNvbnRleHQpIHtcclxuICAgIGNvbnN0IG1hdGNoID0gL15bXFx0XFxyXFxuXFxmIF0rLy5leGVjKGNvbnRleHQuc291cmNlKTtcclxuICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgIGFkdmFuY2VCeShjb250ZXh0LCBtYXRjaFswXS5sZW5ndGgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldE5ld1Bvc2l0aW9uKGNvbnRleHQsIHN0YXJ0LCBudW1iZXJPZkNoYXJhY3RlcnMpIHtcclxuICAgIHJldHVybiBhZHZhbmNlUG9zaXRpb25XaXRoQ2xvbmUoc3RhcnQsIGNvbnRleHQub3JpZ2luYWxTb3VyY2Uuc2xpY2Uoc3RhcnQub2Zmc2V0LCBudW1iZXJPZkNoYXJhY3RlcnMpLCBudW1iZXJPZkNoYXJhY3RlcnMpO1xyXG59XHJcbmZ1bmN0aW9uIGVtaXRFcnJvcihjb250ZXh0LCBjb2RlLCBvZmZzZXQsIGxvYyA9IGdldEN1cnNvcihjb250ZXh0KSkge1xyXG4gICAgaWYgKG9mZnNldCkge1xyXG4gICAgICAgIGxvYy5vZmZzZXQgKz0gb2Zmc2V0O1xyXG4gICAgICAgIGxvYy5jb2x1bW4gKz0gb2Zmc2V0O1xyXG4gICAgfVxyXG4gICAgY29udGV4dC5vcHRpb25zLm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcihjb2RlLCB7XHJcbiAgICAgICAgc3RhcnQ6IGxvYyxcclxuICAgICAgICBlbmQ6IGxvYyxcclxuICAgICAgICBzb3VyY2U6ICcnXHJcbiAgICB9KSk7XHJcbn1cclxuZnVuY3Rpb24gaXNFbmQoY29udGV4dCwgbW9kZSwgYW5jZXN0b3JzKSB7XHJcbiAgICBjb25zdCBzID0gY29udGV4dC5zb3VyY2U7XHJcbiAgICBzd2l0Y2ggKG1vZGUpIHtcclxuICAgICAgICBjYXNlIDAgLyogREFUQSAqLzpcclxuICAgICAgICAgICAgaWYgKHN0YXJ0c1dpdGgocywgJzwvJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE86IHByb2JhYmx5IGJhZCBwZXJmb3JtYW5jZVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGFuY2VzdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGFydHNXaXRoRW5kVGFnT3BlbihzLCBhbmNlc3RvcnNbaV0udGFnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxIC8qIFJDREFUQSAqLzpcclxuICAgICAgICBjYXNlIDIgLyogUkFXVEVYVCAqLzoge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBsYXN0KGFuY2VzdG9ycyk7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQgJiYgc3RhcnRzV2l0aEVuZFRhZ09wZW4ocywgcGFyZW50LnRhZykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIDMgLyogQ0RBVEEgKi86XHJcbiAgICAgICAgICAgIGlmIChzdGFydHNXaXRoKHMsICddXT4nKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gIXM7XHJcbn1cclxuZnVuY3Rpb24gc3RhcnRzV2l0aEVuZFRhZ09wZW4oc291cmNlLCB0YWcpIHtcclxuICAgIHJldHVybiAoc3RhcnRzV2l0aChzb3VyY2UsICc8LycpICYmXHJcbiAgICAgICAgc291cmNlLnNsaWNlKDIsIDIgKyB0YWcubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSB0YWcudG9Mb3dlckNhc2UoKSAmJlxyXG4gICAgICAgIC9bXFx0XFxyXFxuXFxmIC8+XS8udGVzdChzb3VyY2VbMiArIHRhZy5sZW5ndGhdIHx8ICc+JykpO1xyXG59XG5cbmZ1bmN0aW9uIGhvaXN0U3RhdGljKHJvb3QsIGNvbnRleHQpIHtcclxuICAgIHdhbGsocm9vdCwgY29udGV4dCwgXHJcbiAgICAvLyBSb290IG5vZGUgaXMgdW5mb3J0dW5hdGVseSBub24taG9pc3RhYmxlIGR1ZSB0byBwb3RlbnRpYWwgcGFyZW50XHJcbiAgICAvLyBmYWxsdGhyb3VnaCBhdHRyaWJ1dGVzLlxyXG4gICAgaXNTaW5nbGVFbGVtZW50Um9vdChyb290LCByb290LmNoaWxkcmVuWzBdKSk7XHJcbn1cclxuZnVuY3Rpb24gaXNTaW5nbGVFbGVtZW50Um9vdChyb290LCBjaGlsZCkge1xyXG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gcm9vdDtcclxuICAgIHJldHVybiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXHJcbiAgICAgICAgY2hpbGQudHlwZSA9PT0gMSAvKiBFTEVNRU5UICovICYmXHJcbiAgICAgICAgIWlzU2xvdE91dGxldChjaGlsZCkpO1xyXG59XHJcbmZ1bmN0aW9uIHdhbGsobm9kZSwgY29udGV4dCwgZG9Ob3RIb2lzdE5vZGUgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gbm9kZTtcclxuICAgIGNvbnN0IG9yaWdpbmFsQ291bnQgPSBjaGlsZHJlbi5sZW5ndGg7XHJcbiAgICBsZXQgaG9pc3RlZENvdW50ID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgIC8vIG9ubHkgcGxhaW4gZWxlbWVudHMgJiB0ZXh0IGNhbGxzIGFyZSBlbGlnaWJsZSBmb3IgaG9pc3RpbmcuXHJcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICBjaGlsZC50YWdUeXBlID09PSAwIC8qIEVMRU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgY29uc3QgY29uc3RhbnRUeXBlID0gZG9Ob3RIb2lzdE5vZGVcclxuICAgICAgICAgICAgICAgID8gMCAvKiBOT1RfQ09OU1RBTlQgKi9cclxuICAgICAgICAgICAgICAgIDogZ2V0Q29uc3RhbnRUeXBlKGNoaWxkLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgaWYgKGNvbnN0YW50VHlwZSA+IDAgLyogTk9UX0NPTlNUQU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uc3RhbnRUeXBlID49IDIgLyogQ0FOX0hPSVNUICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQuY29kZWdlbk5vZGUucGF0Y2hGbGFnID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLTEgLyogSE9JU1RFRCAqLyArICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgIC8qIEhPSVNURUQgKi9gIDogYGApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkLmNvZGVnZW5Ob2RlID0gY29udGV4dC5ob2lzdChjaGlsZC5jb2RlZ2VuTm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9pc3RlZENvdW50Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBub2RlIG1heSBjb250YWluIGR5bmFtaWMgY2hpbGRyZW4sIGJ1dCBpdHMgcHJvcHMgbWF5IGJlIGVsaWdpYmxlIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gaG9pc3RpbmcuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2RlZ2VuTm9kZSA9IGNoaWxkLmNvZGVnZW5Ob2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzIC8qIFZOT0RFX0NBTEwgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbGFnID0gZ2V0UGF0Y2hGbGFnKGNvZGVnZW5Ob2RlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKCFmbGFnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWcgPT09IDUxMiAvKiBORUVEX1BBVENIICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsYWcgPT09IDEgLyogVEVYVCAqLykgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0R2VuZXJhdGVkUHJvcHNDb25zdGFudFR5cGUoY2hpbGQsIGNvbnRleHQpID49XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyIC8qIENBTl9IT0lTVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wcyA9IGdldE5vZGVQcm9wcyhjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZWdlbk5vZGUucHJvcHMgPSBjb250ZXh0LmhvaXN0KHByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29kZWdlbk5vZGUuZHluYW1pY1Byb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVnZW5Ob2RlLmR5bmFtaWNQcm9wcyA9IGNvbnRleHQuaG9pc3QoY29kZWdlbk5vZGUuZHluYW1pY1Byb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2hpbGQudHlwZSA9PT0gMTIgLyogVEVYVF9DQUxMICovICYmXHJcbiAgICAgICAgICAgIGdldENvbnN0YW50VHlwZShjaGlsZC5jb250ZW50LCBjb250ZXh0KSA+PSAyIC8qIENBTl9IT0lTVCAqLykge1xyXG4gICAgICAgICAgICBjaGlsZC5jb2RlZ2VuTm9kZSA9IGNvbnRleHQuaG9pc3QoY2hpbGQuY29kZWdlbk5vZGUpO1xyXG4gICAgICAgICAgICBob2lzdGVkQ291bnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gd2FsayBmdXJ0aGVyXHJcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgICAgICBjb25zdCBpc0NvbXBvbmVudCA9IGNoaWxkLnRhZ1R5cGUgPT09IDEgLyogQ09NUE9ORU5UICovO1xyXG4gICAgICAgICAgICBpZiAoaXNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2NvcGVzLnZTbG90Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgd2FsayhjaGlsZCwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChpc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zY29wZXMudlNsb3QtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjaGlsZC50eXBlID09PSAxMSAvKiBGT1IgKi8pIHtcclxuICAgICAgICAgICAgLy8gRG8gbm90IGhvaXN0IHYtZm9yIHNpbmdsZSBjaGlsZCBiZWNhdXNlIGl0IGhhcyB0byBiZSBhIGJsb2NrXHJcbiAgICAgICAgICAgIHdhbGsoY2hpbGQsIGNvbnRleHQsIGNoaWxkLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNoaWxkLnR5cGUgPT09IDkgLyogSUYgKi8pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZC5icmFuY2hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IGhvaXN0IHYtaWYgc2luZ2xlIGNoaWxkIGJlY2F1c2UgaXQgaGFzIHRvIGJlIGEgYmxvY2tcclxuICAgICAgICAgICAgICAgIHdhbGsoY2hpbGQuYnJhbmNoZXNbaV0sIGNvbnRleHQsIGNoaWxkLmJyYW5jaGVzW2ldLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaG9pc3RlZENvdW50ICYmIGNvbnRleHQudHJhbnNmb3JtSG9pc3QpIHtcclxuICAgICAgICBjb250ZXh0LnRyYW5zZm9ybUhvaXN0KGNoaWxkcmVuLCBjb250ZXh0LCBub2RlKTtcclxuICAgIH1cclxuICAgIC8vIGFsbCBjaGlsZHJlbiB3ZXJlIGhvaXN0ZWQgLSB0aGUgZW50aXJlIGNoaWxkcmVuIGFycmF5IGlzIGhvaXN0YWJsZS5cclxuICAgIGlmIChob2lzdGVkQ291bnQgJiZcclxuICAgICAgICBob2lzdGVkQ291bnQgPT09IG9yaWdpbmFsQ291bnQgJiZcclxuICAgICAgICBub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgIG5vZGUudGFnVHlwZSA9PT0gMCAvKiBFTEVNRU5UICovICYmXHJcbiAgICAgICAgbm9kZS5jb2RlZ2VuTm9kZSAmJlxyXG4gICAgICAgIG5vZGUuY29kZWdlbk5vZGUudHlwZSA9PT0gMTMgLyogVk5PREVfQ0FMTCAqLyAmJlxyXG4gICAgICAgIGlzQXJyYXkobm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbikpIHtcclxuICAgICAgICBub2RlLmNvZGVnZW5Ob2RlLmNoaWxkcmVuID0gY29udGV4dC5ob2lzdChjcmVhdGVBcnJheUV4cHJlc3Npb24obm9kZS5jb2RlZ2VuTm9kZS5jaGlsZHJlbikpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldENvbnN0YW50VHlwZShub2RlLCBjb250ZXh0KSB7XHJcbiAgICBjb25zdCB7IGNvbnN0YW50Q2FjaGUgfSA9IGNvbnRleHQ7XHJcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xyXG4gICAgICAgIGNhc2UgMSAvKiBFTEVNRU5UICovOlxyXG4gICAgICAgICAgICBpZiAobm9kZS50YWdUeXBlICE9PSAwIC8qIEVMRU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIE5PVF9DT05TVEFOVCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBjYWNoZWQgPSBjb25zdGFudENhY2hlLmdldChub2RlKTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGVnZW5Ob2RlID0gbm9kZS5jb2RlZ2VuTm9kZTtcclxuICAgICAgICAgICAgaWYgKGNvZGVnZW5Ob2RlLnR5cGUgIT09IDEzIC8qIFZOT0RFX0NBTEwgKi8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIE5PVF9DT05TVEFOVCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29kZWdlbk5vZGUuaXNCbG9jayAmJlxyXG4gICAgICAgICAgICAgICAgbm9kZS50YWcgIT09ICdzdmcnICYmXHJcbiAgICAgICAgICAgICAgICBub2RlLnRhZyAhPT0gJ2ZvcmVpZ25PYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBOT1RfQ09OU1RBTlQgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZmxhZyA9IGdldFBhdGNoRmxhZyhjb2RlZ2VuTm9kZSk7XHJcbiAgICAgICAgICAgIGlmICghZmxhZykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHJldHVyblR5cGUgPSAzIC8qIENBTl9TVFJJTkdJRlkgKi87XHJcbiAgICAgICAgICAgICAgICAvLyBFbGVtZW50IGl0c2VsZiBoYXMgbm8gcGF0Y2ggZmxhZy4gSG93ZXZlciB3ZSBzdGlsbCBuZWVkIHRvIGNoZWNrOlxyXG4gICAgICAgICAgICAgICAgLy8gMS4gRXZlbiBmb3IgYSBub2RlIHdpdGggbm8gcGF0Y2ggZmxhZywgaXQgaXMgcG9zc2libGUgZm9yIGl0IHRvIGNvbnRhaW5cclxuICAgICAgICAgICAgICAgIC8vIG5vbi1ob2lzdGFibGUgZXhwcmVzc2lvbnMgdGhhdCByZWZlcnMgdG8gc2NvcGUgdmFyaWFibGVzLCBlLmcuIGNvbXBpbGVyXHJcbiAgICAgICAgICAgICAgICAvLyBpbmplY3RlZCBrZXlzIG9yIGNhY2hlZCBldmVudCBoYW5kbGVycy4gVGhlcmVmb3JlIHdlIG5lZWQgdG8gYWx3YXlzXHJcbiAgICAgICAgICAgICAgICAvLyBjaGVjayB0aGUgY29kZWdlbk5vZGUncyBwcm9wcyB0byBiZSBzdXJlLlxyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2VuZXJhdGVkUHJvcHNUeXBlID0gZ2V0R2VuZXJhdGVkUHJvcHNDb25zdGFudFR5cGUobm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2VuZXJhdGVkUHJvcHNUeXBlID09PSAwIC8qIE5PVF9DT05TVEFOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0YW50Q2FjaGUuc2V0KG5vZGUsIDAgLyogTk9UX0NPTlNUQU5UICovKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBOT1RfQ09OU1RBTlQgKi87XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2VuZXJhdGVkUHJvcHNUeXBlIDwgcmV0dXJuVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBnZW5lcmF0ZWRQcm9wc1R5cGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyAyLiBpdHMgY2hpbGRyZW4uXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZFR5cGUgPSBnZXRDb25zdGFudFR5cGUobm9kZS5jaGlsZHJlbltpXSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkVHlwZSA9PT0gMCAvKiBOT1RfQ09OU1RBTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRDYWNoZS5zZXQobm9kZSwgMCAvKiBOT1RfQ09OU1RBTlQgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCAvKiBOT1RfQ09OU1RBTlQgKi87XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZFR5cGUgPCByZXR1cm5UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBjaGlsZFR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gMy4gaWYgdGhlIHR5cGUgaXMgbm90IGFscmVhZHkgQ0FOX1NLSVBfUEFUQ0ggd2hpY2ggaXMgdGhlIGxvd2VzdCBub24tMFxyXG4gICAgICAgICAgICAgICAgLy8gdHlwZSwgY2hlY2sgaWYgYW55IG9mIHRoZSBwcm9wcyBjYW4gY2F1c2UgdGhlIHR5cGUgdG8gYmUgbG93ZXJlZFxyXG4gICAgICAgICAgICAgICAgLy8gd2UgY2FuIHNraXAgY2FuX3BhdGNoIGJlY2F1c2UgaXQncyBndWFyYW50ZWVkIGJ5IHRoZSBhYnNlbmNlIG9mIGFcclxuICAgICAgICAgICAgICAgIC8vIHBhdGNoRmxhZy5cclxuICAgICAgICAgICAgICAgIGlmIChyZXR1cm5UeXBlID4gMSAvKiBDQU5fU0tJUF9QQVRDSCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5wcm9wcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gbm9kZS5wcm9wc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAudHlwZSA9PT0gNyAvKiBESVJFQ1RJVkUgKi8gJiYgcC5uYW1lID09PSAnYmluZCcgJiYgcC5leHApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4cFR5cGUgPSBnZXRDb25zdGFudFR5cGUocC5leHAsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4cFR5cGUgPT09IDAgLyogTk9UX0NPTlNUQU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRDYWNoZS5zZXQobm9kZSwgMCAvKiBOT1RfQ09OU1RBTlQgKi8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIE5PVF9DT05TVEFOVCAqLztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHBUeXBlIDwgcmV0dXJuVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBleHBUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25seSBzdmcvZm9yZWlnbk9iamVjdCBjb3VsZCBiZSBibG9jayBoZXJlLCBob3dldmVyIGlmIHRoZXkgYXJlXHJcbiAgICAgICAgICAgICAgICAvLyBzdGF0aWMgdGhlbiB0aGV5IGRvbid0IG5lZWQgdG8gYmUgYmxvY2tzIHNpbmNlIHRoZXJlIHdpbGwgYmUgbm9cclxuICAgICAgICAgICAgICAgIC8vIG5lc3RlZCB1cGRhdGVzLlxyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGVnZW5Ob2RlLmlzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlbW92ZUhlbHBlcihPUEVOX0JMT0NLKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlbW92ZUhlbHBlcihnZXRWTm9kZUJsb2NrSGVscGVyKGNvbnRleHQuaW5TU1IsIGNvZGVnZW5Ob2RlLmlzQ29tcG9uZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZWdlbk5vZGUuaXNCbG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuaGVscGVyKGdldFZOb2RlSGVscGVyKGNvbnRleHQuaW5TU1IsIGNvZGVnZW5Ob2RlLmlzQ29tcG9uZW50KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdGFudENhY2hlLnNldChub2RlLCByZXR1cm5UeXBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5UeXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3RhbnRDYWNoZS5zZXQobm9kZSwgMCAvKiBOT1RfQ09OU1RBTlQgKi8pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgLyogTk9UX0NPTlNUQU5UICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgY2FzZSAyIC8qIFRFWFQgKi86XHJcbiAgICAgICAgY2FzZSAzIC8qIENPTU1FTlQgKi86XHJcbiAgICAgICAgICAgIHJldHVybiAzIC8qIENBTl9TVFJJTkdJRlkgKi87XHJcbiAgICAgICAgY2FzZSA5IC8qIElGICovOlxyXG4gICAgICAgIGNhc2UgMTEgLyogRk9SICovOlxyXG4gICAgICAgIGNhc2UgMTAgLyogSUZfQlJBTkNIICovOlxyXG4gICAgICAgICAgICByZXR1cm4gMCAvKiBOT1RfQ09OU1RBTlQgKi87XHJcbiAgICAgICAgY2FzZSA1IC8qIElOVEVSUE9MQVRJT04gKi86XHJcbiAgICAgICAgY2FzZSAxMiAvKiBURVhUX0NBTEwgKi86XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRDb25zdGFudFR5cGUobm9kZS5jb250ZW50LCBjb250ZXh0KTtcclxuICAgICAgICBjYXNlIDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi86XHJcbiAgICAgICAgICAgIHJldHVybiBub2RlLmNvbnN0VHlwZTtcclxuICAgICAgICBjYXNlIDggLyogQ09NUE9VTkRfRVhQUkVTU0lPTiAqLzpcclxuICAgICAgICAgICAgbGV0IHJldHVyblR5cGUgPSAzIC8qIENBTl9TVFJJTkdJRlkgKi87XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKGNoaWxkKSB8fCBpc1N5bWJvbChjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkVHlwZSA9IGdldENvbnN0YW50VHlwZShjaGlsZCwgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRUeXBlID09PSAwIC8qIE5PVF9DT05TVEFOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwIC8qIE5PVF9DT05TVEFOVCAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkVHlwZSA8IHJldHVyblR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlID0gY2hpbGRUeXBlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5UeXBlO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIDtcclxuICAgICAgICAgICAgcmV0dXJuIDAgLyogTk9UX0NPTlNUQU5UICovO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGFsbG93SG9pc3RlZEhlbHBlclNldCA9IG5ldyBTZXQoW1xyXG4gICAgTk9STUFMSVpFX0NMQVNTLFxyXG4gICAgTk9STUFMSVpFX1NUWUxFLFxyXG4gICAgTk9STUFMSVpFX1BST1BTLFxyXG4gICAgR1VBUkRfUkVBQ1RJVkVfUFJPUFNcclxuXSk7XHJcbmZ1bmN0aW9uIGdldENvbnN0YW50VHlwZU9mSGVscGVyQ2FsbCh2YWx1ZSwgY29udGV4dCkge1xyXG4gICAgaWYgKHZhbHVlLnR5cGUgPT09IDE0IC8qIEpTX0NBTExfRVhQUkVTU0lPTiAqLyAmJlxyXG4gICAgICAgICFpc1N0cmluZyh2YWx1ZS5jYWxsZWUpICYmXHJcbiAgICAgICAgYWxsb3dIb2lzdGVkSGVscGVyU2V0Lmhhcyh2YWx1ZS5jYWxsZWUpKSB7XHJcbiAgICAgICAgY29uc3QgYXJnID0gdmFsdWUuYXJndW1lbnRzWzBdO1xyXG4gICAgICAgIGlmIChhcmcudHlwZSA9PT0gNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0Q29uc3RhbnRUeXBlKGFyZywgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFyZy50eXBlID09PSAxNCAvKiBKU19DQUxMX0VYUFJFU1NJT04gKi8pIHtcclxuICAgICAgICAgICAgLy8gaW4gdGhlIGNhc2Ugb2YgbmVzdGVkIGhlbHBlciBjYWxsLCBlLmcuIGBub3JtYWxpemVQcm9wcyhndWFyZFJlYWN0aXZlUHJvcHMoZXhwKSlgXHJcbiAgICAgICAgICAgIHJldHVybiBnZXRDb25zdGFudFR5cGVPZkhlbHBlckNhbGwoYXJnLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMCAvKiBOT1RfQ09OU1RBTlQgKi87XHJcbn1cclxuZnVuY3Rpb24gZ2V0R2VuZXJhdGVkUHJvcHNDb25zdGFudFR5cGUobm9kZSwgY29udGV4dCkge1xyXG4gICAgbGV0IHJldHVyblR5cGUgPSAzIC8qIENBTl9TVFJJTkdJRlkgKi87XHJcbiAgICBjb25zdCBwcm9wcyA9IGdldE5vZGVQcm9wcyhub2RlKTtcclxuICAgIGlmIChwcm9wcyAmJiBwcm9wcy50eXBlID09PSAxNSAvKiBKU19PQkpFQ1RfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgIGNvbnN0IHsgcHJvcGVydGllcyB9ID0gcHJvcHM7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcHJvcGVydGllc1tpXTtcclxuICAgICAgICAgICAgY29uc3Qga2V5VHlwZSA9IGdldENvbnN0YW50VHlwZShrZXksIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBpZiAoa2V5VHlwZSA9PT0gMCAvKiBOT1RfQ09OU1RBTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBrZXlUeXBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChrZXlUeXBlIDwgcmV0dXJuVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuVHlwZSA9IGtleVR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHZhbHVlVHlwZTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09IDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi8pIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlVHlwZSA9IGdldENvbnN0YW50VHlwZSh2YWx1ZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUudHlwZSA9PT0gMTQgLyogSlNfQ0FMTF9FWFBSRVNTSU9OICovKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzb21lIGhlbHBlciBjYWxscyBjYW4gYmUgaG9pc3RlZCxcclxuICAgICAgICAgICAgICAgIC8vIHN1Y2ggYXMgdGhlIGBub3JtYWxpemVQcm9wc2AgZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlciBmb3IgcHJlLW5vcm1hbGl6ZSBjbGFzcyxcclxuICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIHJlc3BlY3QgdGhlIENvbnN0YW50VHlwZSBvZiB0aGUgaGVscGVyJ3MgYXJndW1lbnRzXHJcbiAgICAgICAgICAgICAgICB2YWx1ZVR5cGUgPSBnZXRDb25zdGFudFR5cGVPZkhlbHBlckNhbGwodmFsdWUsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVUeXBlID0gMCAvKiBOT1RfQ09OU1RBTlQgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZhbHVlVHlwZSA9PT0gMCAvKiBOT1RfQ09OU1RBTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHZhbHVlVHlwZSA8IHJldHVyblR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSB2YWx1ZVR5cGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0dXJuVHlwZTtcclxufVxyXG5mdW5jdGlvbiBnZXROb2RlUHJvcHMobm9kZSkge1xyXG4gICAgY29uc3QgY29kZWdlbk5vZGUgPSBub2RlLmNvZGVnZW5Ob2RlO1xyXG4gICAgaWYgKGNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzIC8qIFZOT0RFX0NBTEwgKi8pIHtcclxuICAgICAgICByZXR1cm4gY29kZWdlbk5vZGUucHJvcHM7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0UGF0Y2hGbGFnKG5vZGUpIHtcclxuICAgIGNvbnN0IGZsYWcgPSBub2RlLnBhdGNoRmxhZztcclxuICAgIHJldHVybiBmbGFnID8gcGFyc2VJbnQoZmxhZywgMTApIDogdW5kZWZpbmVkO1xyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zZm9ybUNvbnRleHQocm9vdCwgeyBmaWxlbmFtZSA9ICcnLCBwcmVmaXhJZGVudGlmaWVycyA9IGZhbHNlLCBob2lzdFN0YXRpYyA9IGZhbHNlLCBjYWNoZUhhbmRsZXJzID0gZmFsc2UsIG5vZGVUcmFuc2Zvcm1zID0gW10sIGRpcmVjdGl2ZVRyYW5zZm9ybXMgPSB7fSwgdHJhbnNmb3JtSG9pc3QgPSBudWxsLCBpc0J1aWx0SW5Db21wb25lbnQgPSBOT09QLCBpc0N1c3RvbUVsZW1lbnQgPSBOT09QLCBleHByZXNzaW9uUGx1Z2lucyA9IFtdLCBzY29wZUlkID0gbnVsbCwgc2xvdHRlZCA9IHRydWUsIHNzciA9IGZhbHNlLCBpblNTUiA9IGZhbHNlLCBzc3JDc3NWYXJzID0gYGAsIGJpbmRpbmdNZXRhZGF0YSA9IEVNUFRZX09CSiwgaW5saW5lID0gZmFsc2UsIGlzVFMgPSBmYWxzZSwgb25FcnJvciA9IGRlZmF1bHRPbkVycm9yLCBvbldhcm4gPSBkZWZhdWx0T25XYXJuLCBjb21wYXRDb25maWcgfSkge1xyXG4gICAgY29uc3QgbmFtZU1hdGNoID0gZmlsZW5hbWUucmVwbGFjZSgvXFw/LiokLywgJycpLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyk7XHJcbiAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgIC8vIG9wdGlvbnNcclxuICAgICAgICBzZWxmTmFtZTogbmFtZU1hdGNoICYmIGNhcGl0YWxpemUoY2FtZWxpemUkMShuYW1lTWF0Y2hbMV0pKSxcclxuICAgICAgICBwcmVmaXhJZGVudGlmaWVycyxcclxuICAgICAgICBob2lzdFN0YXRpYyxcclxuICAgICAgICBjYWNoZUhhbmRsZXJzLFxyXG4gICAgICAgIG5vZGVUcmFuc2Zvcm1zLFxyXG4gICAgICAgIGRpcmVjdGl2ZVRyYW5zZm9ybXMsXHJcbiAgICAgICAgdHJhbnNmb3JtSG9pc3QsXHJcbiAgICAgICAgaXNCdWlsdEluQ29tcG9uZW50LFxyXG4gICAgICAgIGlzQ3VzdG9tRWxlbWVudCxcclxuICAgICAgICBleHByZXNzaW9uUGx1Z2lucyxcclxuICAgICAgICBzY29wZUlkLFxyXG4gICAgICAgIHNsb3R0ZWQsXHJcbiAgICAgICAgc3NyLFxyXG4gICAgICAgIGluU1NSLFxyXG4gICAgICAgIHNzckNzc1ZhcnMsXHJcbiAgICAgICAgYmluZGluZ01ldGFkYXRhLFxyXG4gICAgICAgIGlubGluZSxcclxuICAgICAgICBpc1RTLFxyXG4gICAgICAgIG9uRXJyb3IsXHJcbiAgICAgICAgb25XYXJuLFxyXG4gICAgICAgIGNvbXBhdENvbmZpZyxcclxuICAgICAgICAvLyBzdGF0ZVxyXG4gICAgICAgIHJvb3QsXHJcbiAgICAgICAgaGVscGVyczogbmV3IE1hcCgpLFxyXG4gICAgICAgIGNvbXBvbmVudHM6IG5ldyBTZXQoKSxcclxuICAgICAgICBkaXJlY3RpdmVzOiBuZXcgU2V0KCksXHJcbiAgICAgICAgaG9pc3RzOiBbXSxcclxuICAgICAgICBpbXBvcnRzOiBbXSxcclxuICAgICAgICBjb25zdGFudENhY2hlOiBuZXcgTWFwKCksXHJcbiAgICAgICAgdGVtcHM6IDAsXHJcbiAgICAgICAgY2FjaGVkOiAwLFxyXG4gICAgICAgIGlkZW50aWZpZXJzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxyXG4gICAgICAgIHNjb3Blczoge1xyXG4gICAgICAgICAgICB2Rm9yOiAwLFxyXG4gICAgICAgICAgICB2U2xvdDogMCxcclxuICAgICAgICAgICAgdlByZTogMCxcclxuICAgICAgICAgICAgdk9uY2U6IDBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhcmVudDogbnVsbCxcclxuICAgICAgICBjdXJyZW50Tm9kZTogcm9vdCxcclxuICAgICAgICBjaGlsZEluZGV4OiAwLFxyXG4gICAgICAgIGluVk9uY2U6IGZhbHNlLFxyXG4gICAgICAgIC8vIG1ldGhvZHNcclxuICAgICAgICBoZWxwZXIobmFtZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IGNvbnRleHQuaGVscGVycy5nZXQobmFtZSkgfHwgMDtcclxuICAgICAgICAgICAgY29udGV4dC5oZWxwZXJzLnNldChuYW1lLCBjb3VudCArIDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbW92ZUhlbHBlcihuYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gY29udGV4dC5oZWxwZXJzLmdldChuYW1lKTtcclxuICAgICAgICAgICAgaWYgKGNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBjb3VudCAtIDE7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuaGVscGVycy5kZWxldGUobmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmhlbHBlcnMuc2V0KG5hbWUsIGN1cnJlbnRDb3VudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGhlbHBlclN0cmluZyhuYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgXyR7aGVscGVyTmFtZU1hcFtjb250ZXh0LmhlbHBlcihuYW1lKV19YDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlcGxhY2VOb2RlKG5vZGUpIHtcclxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY29udGV4dC5jdXJyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm9kZSBiZWluZyByZXBsYWNlZCBpcyBhbHJlYWR5IHJlbW92ZWQuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbnRleHQucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmVwbGFjZSByb290IG5vZGUuYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGV4dC5wYXJlbnQuY2hpbGRyZW5bY29udGV4dC5jaGlsZEluZGV4XSA9IGNvbnRleHQuY3VycmVudE5vZGUgPSBub2RlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVtb3ZlTm9kZShub2RlKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgIWNvbnRleHQucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZW1vdmUgcm9vdCBub2RlLmApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBjb250ZXh0LnBhcmVudC5jaGlsZHJlbjtcclxuICAgICAgICAgICAgY29uc3QgcmVtb3ZhbEluZGV4ID0gbm9kZVxyXG4gICAgICAgICAgICAgICAgPyBsaXN0LmluZGV4T2Yobm9kZSlcclxuICAgICAgICAgICAgICAgIDogY29udGV4dC5jdXJyZW50Tm9kZVxyXG4gICAgICAgICAgICAgICAgICAgID8gY29udGV4dC5jaGlsZEluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgOiAtMTtcclxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgcmVtb3ZhbEluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub2RlIGJlaW5nIHJlbW92ZWQgaXMgbm90IGEgY2hpbGQgb2YgY3VycmVudCBwYXJlbnRgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIW5vZGUgfHwgbm9kZSA9PT0gY29udGV4dC5jdXJyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gY3VycmVudCBub2RlIHJlbW92ZWRcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuY3VycmVudE5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5vbk5vZGVSZW1vdmVkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaWJsaW5nIG5vZGUgcmVtb3ZlZFxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHQuY2hpbGRJbmRleCA+IHJlbW92YWxJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2hpbGRJbmRleC0tO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQub25Ob2RlUmVtb3ZlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQucGFyZW50LmNoaWxkcmVuLnNwbGljZShyZW1vdmFsSW5kZXgsIDEpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Ob2RlUmVtb3ZlZDogKCkgPT4geyB9LFxyXG4gICAgICAgIGFkZElkZW50aWZpZXJzKGV4cCkge1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVtb3ZlSWRlbnRpZmllcnMoZXhwKSB7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBob2lzdChleHApIHtcclxuICAgICAgICAgICAgaWYgKGlzU3RyaW5nKGV4cCkpXHJcbiAgICAgICAgICAgICAgICBleHAgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGV4cCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuaG9pc3RzLnB1c2goZXhwKTtcclxuICAgICAgICAgICAgY29uc3QgaWRlbnRpZmllciA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYF9ob2lzdGVkXyR7Y29udGV4dC5ob2lzdHMubGVuZ3RofWAsIGZhbHNlLCBleHAubG9jLCAyIC8qIENBTl9IT0lTVCAqLyk7XHJcbiAgICAgICAgICAgIGlkZW50aWZpZXIuaG9pc3RlZCA9IGV4cDtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjYWNoZShleHAsIGlzVk5vZGUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2FjaGVFeHByZXNzaW9uKGNvbnRleHQuY2FjaGVkKyssIGV4cCwgaXNWTm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHtcclxuICAgICAgICBjb250ZXh0LmZpbHRlcnMgPSBuZXcgU2V0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGV4dDtcclxufVxyXG5mdW5jdGlvbiB0cmFuc2Zvcm0ocm9vdCwgb3B0aW9ucykge1xyXG4gICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZVRyYW5zZm9ybUNvbnRleHQocm9vdCwgb3B0aW9ucyk7XHJcbiAgICB0cmF2ZXJzZU5vZGUocm9vdCwgY29udGV4dCk7XHJcbiAgICBpZiAob3B0aW9ucy5ob2lzdFN0YXRpYykge1xyXG4gICAgICAgIGhvaXN0U3RhdGljKHJvb3QsIGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFvcHRpb25zLnNzcikge1xyXG4gICAgICAgIGNyZWF0ZVJvb3RDb2RlZ2VuKHJvb3QsIGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgLy8gZmluYWxpemUgbWV0YSBpbmZvcm1hdGlvblxyXG4gICAgcm9vdC5oZWxwZXJzID0gWy4uLmNvbnRleHQuaGVscGVycy5rZXlzKCldO1xyXG4gICAgcm9vdC5jb21wb25lbnRzID0gWy4uLmNvbnRleHQuY29tcG9uZW50c107XHJcbiAgICByb290LmRpcmVjdGl2ZXMgPSBbLi4uY29udGV4dC5kaXJlY3RpdmVzXTtcclxuICAgIHJvb3QuaW1wb3J0cyA9IGNvbnRleHQuaW1wb3J0cztcclxuICAgIHJvb3QuaG9pc3RzID0gY29udGV4dC5ob2lzdHM7XHJcbiAgICByb290LnRlbXBzID0gY29udGV4dC50ZW1wcztcclxuICAgIHJvb3QuY2FjaGVkID0gY29udGV4dC5jYWNoZWQ7XHJcbiAgICB7XHJcbiAgICAgICAgcm9vdC5maWx0ZXJzID0gWy4uLmNvbnRleHQuZmlsdGVyc107XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUm9vdENvZGVnZW4ocm9vdCwgY29udGV4dCkge1xyXG4gICAgY29uc3QgeyBoZWxwZXIgfSA9IGNvbnRleHQ7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuIH0gPSByb290O1xyXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5bMF07XHJcbiAgICAgICAgLy8gaWYgdGhlIHNpbmdsZSBjaGlsZCBpcyBhbiBlbGVtZW50LCB0dXJuIGl0IGludG8gYSBibG9jay5cclxuICAgICAgICBpZiAoaXNTaW5nbGVFbGVtZW50Um9vdChyb290LCBjaGlsZCkgJiYgY2hpbGQuY29kZWdlbk5vZGUpIHtcclxuICAgICAgICAgICAgLy8gc2luZ2xlIGVsZW1lbnQgcm9vdCBpcyBuZXZlciBob2lzdGVkIHNvIGNvZGVnZW5Ob2RlIHdpbGwgbmV2ZXIgYmVcclxuICAgICAgICAgICAgLy8gU2ltcGxlRXhwcmVzc2lvbk5vZGVcclxuICAgICAgICAgICAgY29uc3QgY29kZWdlbk5vZGUgPSBjaGlsZC5jb2RlZ2VuTm9kZTtcclxuICAgICAgICAgICAgaWYgKGNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzIC8qIFZOT0RFX0NBTEwgKi8pIHtcclxuICAgICAgICAgICAgICAgIG1ha2VCbG9jayhjb2RlZ2VuTm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcm9vdC5jb2RlZ2VuTm9kZSA9IGNvZGVnZW5Ob2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gLSBzaW5nbGUgPHNsb3QvPiwgSWZOb2RlLCBGb3JOb2RlOiBhbHJlYWR5IGJsb2Nrcy5cclxuICAgICAgICAgICAgLy8gLSBzaW5nbGUgdGV4dCBub2RlOiBhbHdheXMgcGF0Y2hlZC5cclxuICAgICAgICAgICAgLy8gcm9vdCBjb2RlZ2VuIGZhbGxzIHRocm91Z2ggdmlhIGdlbk5vZGUoKVxyXG4gICAgICAgICAgICByb290LmNvZGVnZW5Ob2RlID0gY2hpbGQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIC8vIHJvb3QgaGFzIG11bHRpcGxlIG5vZGVzIC0gcmV0dXJuIGEgZnJhZ21lbnQgYmxvY2suXHJcbiAgICAgICAgbGV0IHBhdGNoRmxhZyA9IDY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqLztcclxuICAgICAgICBsZXQgcGF0Y2hGbGFnVGV4dCA9IFBhdGNoRmxhZ05hbWVzWzY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqL107XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGZyYWdtZW50IGFjdHVhbGx5IGNvbnRhaW5zIGEgc2luZ2xlIHZhbGlkIGNoaWxkIHdpdGhcclxuICAgICAgICAvLyB0aGUgcmVzdCBiZWluZyBjb21tZW50c1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgY2hpbGRyZW4uZmlsdGVyKGMgPT4gYy50eXBlICE9PSAzIC8qIENPTU1FTlQgKi8pLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICBwYXRjaEZsYWcgfD0gMjA0OCAvKiBERVZfUk9PVF9GUkFHTUVOVCAqLztcclxuICAgICAgICAgICAgcGF0Y2hGbGFnVGV4dCArPSBgLCAke1BhdGNoRmxhZ05hbWVzWzIwNDggLyogREVWX1JPT1RfRlJBR01FTlQgKi9dfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJvb3QuY29kZWdlbk5vZGUgPSBjcmVhdGVWTm9kZUNhbGwoY29udGV4dCwgaGVscGVyKEZSQUdNRU5UKSwgdW5kZWZpbmVkLCByb290LmNoaWxkcmVuLCBwYXRjaEZsYWcgKyAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYCAvKiAke3BhdGNoRmxhZ1RleHR9ICovYCA6IGBgKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUsIHVuZGVmaW5lZCwgZmFsc2UgLyogaXNDb21wb25lbnQgKi8pO1xyXG4gICAgfVxyXG4gICAgZWxzZSA7XHJcbn1cclxuZnVuY3Rpb24gdHJhdmVyc2VDaGlsZHJlbihwYXJlbnQsIGNvbnRleHQpIHtcclxuICAgIGxldCBpID0gMDtcclxuICAgIGNvbnN0IG5vZGVSZW1vdmVkID0gKCkgPT4ge1xyXG4gICAgICAgIGktLTtcclxuICAgIH07XHJcbiAgICBmb3IgKDsgaSA8IHBhcmVudC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGNoaWxkID0gcGFyZW50LmNoaWxkcmVuW2ldO1xyXG4gICAgICAgIGlmIChpc1N0cmluZyhjaGlsZCkpXHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIGNvbnRleHQucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIGNvbnRleHQuY2hpbGRJbmRleCA9IGk7XHJcbiAgICAgICAgY29udGV4dC5vbk5vZGVSZW1vdmVkID0gbm9kZVJlbW92ZWQ7XHJcbiAgICAgICAgdHJhdmVyc2VOb2RlKGNoaWxkLCBjb250ZXh0KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB0cmF2ZXJzZU5vZGUobm9kZSwgY29udGV4dCkge1xyXG4gICAgY29udGV4dC5jdXJyZW50Tm9kZSA9IG5vZGU7XHJcbiAgICAvLyBhcHBseSB0cmFuc2Zvcm0gcGx1Z2luc1xyXG4gICAgY29uc3QgeyBub2RlVHJhbnNmb3JtcyB9ID0gY29udGV4dDtcclxuICAgIGNvbnN0IGV4aXRGbnMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZVRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBvbkV4aXQgPSBub2RlVHJhbnNmb3Jtc1tpXShub2RlLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAob25FeGl0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc0FycmF5KG9uRXhpdCkpIHtcclxuICAgICAgICAgICAgICAgIGV4aXRGbnMucHVzaCguLi5vbkV4aXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXhpdEZucy5wdXNoKG9uRXhpdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFjb250ZXh0LmN1cnJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgIC8vIG5vZGUgd2FzIHJlbW92ZWRcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gbm9kZSBtYXkgaGF2ZSBiZWVuIHJlcGxhY2VkXHJcbiAgICAgICAgICAgIG5vZGUgPSBjb250ZXh0LmN1cnJlbnROb2RlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XHJcbiAgICAgICAgY2FzZSAzIC8qIENPTU1FTlQgKi86XHJcbiAgICAgICAgICAgIGlmICghY29udGV4dC5zc3IpIHtcclxuICAgICAgICAgICAgICAgIC8vIGluamVjdCBpbXBvcnQgZm9yIHRoZSBDb21tZW50IHN5bWJvbCwgd2hpY2ggaXMgbmVlZGVkIGZvciBjcmVhdGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gY29tbWVudCBub2RlcyB3aXRoIGBjcmVhdGVWTm9kZWBcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuaGVscGVyKENSRUFURV9DT01NRU5UKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDUgLyogSU5URVJQT0xBVElPTiAqLzpcclxuICAgICAgICAgICAgLy8gbm8gbmVlZCB0byB0cmF2ZXJzZSwgYnV0IHdlIG5lZWQgdG8gaW5qZWN0IHRvU3RyaW5nIGhlbHBlclxyXG4gICAgICAgICAgICBpZiAoIWNvbnRleHQuc3NyKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmhlbHBlcihUT19ESVNQTEFZX1NUUklORyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgLy8gZm9yIGNvbnRhaW5lciB0eXBlcywgZnVydGhlciB0cmF2ZXJzZSBkb3dud2FyZHNcclxuICAgICAgICBjYXNlIDkgLyogSUYgKi86XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5icmFuY2hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdHJhdmVyc2VOb2RlKG5vZGUuYnJhbmNoZXNbaV0sIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTAgLyogSUZfQlJBTkNIICovOlxyXG4gICAgICAgIGNhc2UgMTEgLyogRk9SICovOlxyXG4gICAgICAgIGNhc2UgMSAvKiBFTEVNRU5UICovOlxyXG4gICAgICAgIGNhc2UgMCAvKiBST09UICovOlxyXG4gICAgICAgICAgICB0cmF2ZXJzZUNoaWxkcmVuKG5vZGUsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIC8vIGV4aXQgdHJhbnNmb3Jtc1xyXG4gICAgY29udGV4dC5jdXJyZW50Tm9kZSA9IG5vZGU7XHJcbiAgICBsZXQgaSA9IGV4aXRGbnMubGVuZ3RoO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIGV4aXRGbnNbaV0oKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmFsRGlyZWN0aXZlVHJhbnNmb3JtKG5hbWUsIGZuKSB7XHJcbiAgICBjb25zdCBtYXRjaGVzID0gaXNTdHJpbmcobmFtZSlcclxuICAgICAgICA/IChuKSA9PiBuID09PSBuYW1lXHJcbiAgICAgICAgOiAobikgPT4gbmFtZS50ZXN0KG4pO1xyXG4gICAgcmV0dXJuIChub2RlLCBjb250ZXh0KSA9PiB7XHJcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IG5vZGU7XHJcbiAgICAgICAgICAgIC8vIHN0cnVjdHVyYWwgZGlyZWN0aXZlIHRyYW5zZm9ybXMgYXJlIG5vdCBjb25jZXJuZWQgd2l0aCBzbG90c1xyXG4gICAgICAgICAgICAvLyBhcyB0aGV5IGFyZSBoYW5kbGVkIHNlcGFyYXRlbHkgaW4gdlNsb3QudHNcclxuICAgICAgICAgICAgaWYgKG5vZGUudGFnVHlwZSA9PT0gMyAvKiBURU1QTEFURSAqLyAmJiBwcm9wcy5zb21lKGlzVlNsb3QpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZXhpdEZucyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gcHJvcHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAocHJvcC50eXBlID09PSA3IC8qIERJUkVDVElWRSAqLyAmJiBtYXRjaGVzKHByb3AubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZXMgYXJlIHJlbW92ZWQgdG8gYXZvaWQgaW5maW5pdGUgcmVjdXJzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWxzbyB3ZSByZW1vdmUgdGhlbSAqYmVmb3JlKiBhcHBseWluZyBzbyB0aGF0IGl0IGNhbiBmdXJ0aGVyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJhdmVyc2UgaXRzZWxmIGluIGNhc2UgaXQgbW92ZXMgdGhlIG5vZGUgYXJvdW5kXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvbkV4aXQgPSBmbihub2RlLCBwcm9wLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob25FeGl0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGl0Rm5zLnB1c2gob25FeGl0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZXhpdEZucztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XG5cbmNvbnN0IFBVUkVfQU5OT1RBVElPTiA9IGAvKiNfX1BVUkVfXyovYDtcclxuZnVuY3Rpb24gY3JlYXRlQ29kZWdlbkNvbnRleHQoYXN0LCB7IG1vZGUgPSAnZnVuY3Rpb24nLCBwcmVmaXhJZGVudGlmaWVycyA9IG1vZGUgPT09ICdtb2R1bGUnLCBzb3VyY2VNYXAgPSBmYWxzZSwgZmlsZW5hbWUgPSBgdGVtcGxhdGUudnVlLmh0bWxgLCBzY29wZUlkID0gbnVsbCwgb3B0aW1pemVJbXBvcnRzID0gZmFsc2UsIHJ1bnRpbWVHbG9iYWxOYW1lID0gYFZ1ZWAsIHJ1bnRpbWVNb2R1bGVOYW1lID0gYHZ1ZWAsIHNzclJ1bnRpbWVNb2R1bGVOYW1lID0gJ3Z1ZS9zZXJ2ZXItcmVuZGVyZXInLCBzc3IgPSBmYWxzZSwgaXNUUyA9IGZhbHNlLCBpblNTUiA9IGZhbHNlIH0pIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgbW9kZSxcclxuICAgICAgICBwcmVmaXhJZGVudGlmaWVycyxcclxuICAgICAgICBzb3VyY2VNYXAsXHJcbiAgICAgICAgZmlsZW5hbWUsXHJcbiAgICAgICAgc2NvcGVJZCxcclxuICAgICAgICBvcHRpbWl6ZUltcG9ydHMsXHJcbiAgICAgICAgcnVudGltZUdsb2JhbE5hbWUsXHJcbiAgICAgICAgcnVudGltZU1vZHVsZU5hbWUsXHJcbiAgICAgICAgc3NyUnVudGltZU1vZHVsZU5hbWUsXHJcbiAgICAgICAgc3NyLFxyXG4gICAgICAgIGlzVFMsXHJcbiAgICAgICAgaW5TU1IsXHJcbiAgICAgICAgc291cmNlOiBhc3QubG9jLnNvdXJjZSxcclxuICAgICAgICBjb2RlOiBgYCxcclxuICAgICAgICBjb2x1bW46IDEsXHJcbiAgICAgICAgbGluZTogMSxcclxuICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgaW5kZW50TGV2ZWw6IDAsXHJcbiAgICAgICAgcHVyZTogZmFsc2UsXHJcbiAgICAgICAgbWFwOiB1bmRlZmluZWQsXHJcbiAgICAgICAgaGVscGVyKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYF8ke2hlbHBlck5hbWVNYXBba2V5XX1gO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHVzaChjb2RlLCBub2RlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY29kZSArPSBjb2RlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5kZW50KCkge1xyXG4gICAgICAgICAgICBuZXdsaW5lKCsrY29udGV4dC5pbmRlbnRMZXZlbCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWluZGVudCh3aXRob3V0TmV3TGluZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGlmICh3aXRob3V0TmV3TGluZSkge1xyXG4gICAgICAgICAgICAgICAgLS1jb250ZXh0LmluZGVudExldmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbmV3bGluZSgtLWNvbnRleHQuaW5kZW50TGV2ZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBuZXdsaW5lKCkge1xyXG4gICAgICAgICAgICBuZXdsaW5lKGNvbnRleHQuaW5kZW50TGV2ZWwpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBuZXdsaW5lKG4pIHtcclxuICAgICAgICBjb250ZXh0LnB1c2goJ1xcbicgKyBgICBgLnJlcGVhdChuKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29udGV4dDtcclxufVxyXG5mdW5jdGlvbiBnZW5lcmF0ZShhc3QsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUNvZGVnZW5Db250ZXh0KGFzdCwgb3B0aW9ucyk7XHJcbiAgICBpZiAob3B0aW9ucy5vbkNvbnRleHRDcmVhdGVkKVxyXG4gICAgICAgIG9wdGlvbnMub25Db250ZXh0Q3JlYXRlZChjb250ZXh0KTtcclxuICAgIGNvbnN0IHsgbW9kZSwgcHVzaCwgcHJlZml4SWRlbnRpZmllcnMsIGluZGVudCwgZGVpbmRlbnQsIG5ld2xpbmUsIHNjb3BlSWQsIHNzciB9ID0gY29udGV4dDtcclxuICAgIGNvbnN0IGhhc0hlbHBlcnMgPSBhc3QuaGVscGVycy5sZW5ndGggPiAwO1xyXG4gICAgY29uc3QgdXNlV2l0aEJsb2NrID0gIXByZWZpeElkZW50aWZpZXJzICYmIG1vZGUgIT09ICdtb2R1bGUnO1xyXG4gICAgLy8gcHJlYW1ibGVzXHJcbiAgICAvLyBpbiBzZXR1cCgpIGlubGluZSBtb2RlLCB0aGUgcHJlYW1ibGUgaXMgZ2VuZXJhdGVkIGluIGEgc3ViIGNvbnRleHRcclxuICAgIC8vIGFuZCByZXR1cm5lZCBzZXBhcmF0ZWx5LlxyXG4gICAgY29uc3QgcHJlYW1ibGVDb250ZXh0ID0gY29udGV4dDtcclxuICAgIHtcclxuICAgICAgICBnZW5GdW5jdGlvblByZWFtYmxlKGFzdCwgcHJlYW1ibGVDb250ZXh0KTtcclxuICAgIH1cclxuICAgIC8vIGVudGVyIHJlbmRlciBmdW5jdGlvblxyXG4gICAgY29uc3QgZnVuY3Rpb25OYW1lID0gc3NyID8gYHNzclJlbmRlcmAgOiBgcmVuZGVyYDtcclxuICAgIGNvbnN0IGFyZ3MgPSBzc3IgPyBbJ19jdHgnLCAnX3B1c2gnLCAnX3BhcmVudCcsICdfYXR0cnMnXSA6IFsnX2N0eCcsICdfY2FjaGUnXTtcclxuICAgIGNvbnN0IHNpZ25hdHVyZSA9IGFyZ3Muam9pbignLCAnKTtcclxuICAgIHtcclxuICAgICAgICBwdXNoKGBmdW5jdGlvbiAke2Z1bmN0aW9uTmFtZX0oJHtzaWduYXR1cmV9KSB7YCk7XHJcbiAgICB9XHJcbiAgICBpbmRlbnQoKTtcclxuICAgIGlmICh1c2VXaXRoQmxvY2spIHtcclxuICAgICAgICBwdXNoKGB3aXRoIChfY3R4KSB7YCk7XHJcbiAgICAgICAgaW5kZW50KCk7XHJcbiAgICAgICAgLy8gZnVuY3Rpb24gbW9kZSBjb25zdCBkZWNsYXJhdGlvbnMgc2hvdWxkIGJlIGluc2lkZSB3aXRoIGJsb2NrXHJcbiAgICAgICAgLy8gYWxzbyB0aGV5IHNob3VsZCBiZSByZW5hbWVkIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIHVzZXIgcHJvcGVydGllc1xyXG4gICAgICAgIGlmIChoYXNIZWxwZXJzKSB7XHJcbiAgICAgICAgICAgIHB1c2goYGNvbnN0IHsgJHthc3QuaGVscGVyc1xyXG4gICAgICAgICAgICAgICAgLm1hcChzID0+IGAke2hlbHBlck5hbWVNYXBbc119OiBfJHtoZWxwZXJOYW1lTWFwW3NdfWApXHJcbiAgICAgICAgICAgICAgICAuam9pbignLCAnKX0gfSA9IF9WdWVgKTtcclxuICAgICAgICAgICAgcHVzaChgXFxuYCk7XHJcbiAgICAgICAgICAgIG5ld2xpbmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBnZW5lcmF0ZSBhc3NldCByZXNvbHV0aW9uIHN0YXRlbWVudHNcclxuICAgIGlmIChhc3QuY29tcG9uZW50cy5sZW5ndGgpIHtcclxuICAgICAgICBnZW5Bc3NldHMoYXN0LmNvbXBvbmVudHMsICdjb21wb25lbnQnLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoYXN0LmRpcmVjdGl2ZXMubGVuZ3RoIHx8IGFzdC50ZW1wcyA+IDApIHtcclxuICAgICAgICAgICAgbmV3bGluZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChhc3QuZGlyZWN0aXZlcy5sZW5ndGgpIHtcclxuICAgICAgICBnZW5Bc3NldHMoYXN0LmRpcmVjdGl2ZXMsICdkaXJlY3RpdmUnLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoYXN0LnRlbXBzID4gMCkge1xyXG4gICAgICAgICAgICBuZXdsaW5lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGFzdC5maWx0ZXJzICYmIGFzdC5maWx0ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgIG5ld2xpbmUoKTtcclxuICAgICAgICBnZW5Bc3NldHMoYXN0LmZpbHRlcnMsICdmaWx0ZXInLCBjb250ZXh0KTtcclxuICAgICAgICBuZXdsaW5lKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoYXN0LnRlbXBzID4gMCkge1xyXG4gICAgICAgIHB1c2goYGxldCBgKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFzdC50ZW1wczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHB1c2goYCR7aSA+IDAgPyBgLCBgIDogYGB9X3RlbXAke2l9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGFzdC5jb21wb25lbnRzLmxlbmd0aCB8fCBhc3QuZGlyZWN0aXZlcy5sZW5ndGggfHwgYXN0LnRlbXBzKSB7XHJcbiAgICAgICAgcHVzaChgXFxuYCk7XHJcbiAgICAgICAgbmV3bGluZSgpO1xyXG4gICAgfVxyXG4gICAgLy8gZ2VuZXJhdGUgdGhlIFZOb2RlIHRyZWUgZXhwcmVzc2lvblxyXG4gICAgaWYgKCFzc3IpIHtcclxuICAgICAgICBwdXNoKGByZXR1cm4gYCk7XHJcbiAgICB9XHJcbiAgICBpZiAoYXN0LmNvZGVnZW5Ob2RlKSB7XHJcbiAgICAgICAgZ2VuTm9kZShhc3QuY29kZWdlbk5vZGUsIGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcHVzaChgbnVsbGApO1xyXG4gICAgfVxyXG4gICAgaWYgKHVzZVdpdGhCbG9jaykge1xyXG4gICAgICAgIGRlaW5kZW50KCk7XHJcbiAgICAgICAgcHVzaChgfWApO1xyXG4gICAgfVxyXG4gICAgZGVpbmRlbnQoKTtcclxuICAgIHB1c2goYH1gKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXN0LFxyXG4gICAgICAgIGNvZGU6IGNvbnRleHQuY29kZSxcclxuICAgICAgICBwcmVhbWJsZTogYGAsXHJcbiAgICAgICAgLy8gU291cmNlTWFwR2VuZXJhdG9yIGRvZXMgaGF2ZSB0b0pTT04oKSBtZXRob2QgYnV0IGl0J3Mgbm90IGluIHRoZSB0eXBlc1xyXG4gICAgICAgIG1hcDogY29udGV4dC5tYXAgPyBjb250ZXh0Lm1hcC50b0pTT04oKSA6IHVuZGVmaW5lZFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBnZW5GdW5jdGlvblByZWFtYmxlKGFzdCwgY29udGV4dCkge1xyXG4gICAgY29uc3QgeyBzc3IsIHByZWZpeElkZW50aWZpZXJzLCBwdXNoLCBuZXdsaW5lLCBydW50aW1lTW9kdWxlTmFtZSwgcnVudGltZUdsb2JhbE5hbWUsIHNzclJ1bnRpbWVNb2R1bGVOYW1lIH0gPSBjb250ZXh0O1xyXG4gICAgY29uc3QgVnVlQmluZGluZyA9IHJ1bnRpbWVHbG9iYWxOYW1lO1xyXG4gICAgY29uc3QgYWxpYXNIZWxwZXIgPSAocykgPT4gYCR7aGVscGVyTmFtZU1hcFtzXX06IF8ke2hlbHBlck5hbWVNYXBbc119YDtcclxuICAgIC8vIEdlbmVyYXRlIGNvbnN0IGRlY2xhcmF0aW9uIGZvciBoZWxwZXJzXHJcbiAgICAvLyBJbiBwcmVmaXggbW9kZSwgd2UgcGxhY2UgdGhlIGNvbnN0IGRlY2xhcmF0aW9uIGF0IHRvcCBzbyBpdCdzIGRvbmVcclxuICAgIC8vIG9ubHkgb25jZTsgQnV0IGlmIHdlIG5vdCBwcmVmaXhpbmcsIHdlIHBsYWNlIHRoZSBkZWNsYXJhdGlvbiBpbnNpZGUgdGhlXHJcbiAgICAvLyB3aXRoIGJsb2NrIHNvIGl0IGRvZXNuJ3QgaW5jdXIgdGhlIGBpbmAgY2hlY2sgY29zdCBmb3IgZXZlcnkgaGVscGVyIGFjY2Vzcy5cclxuICAgIGlmIChhc3QuaGVscGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBcIndpdGhcIiBtb2RlLlxyXG4gICAgICAgICAgICAvLyBzYXZlIFZ1ZSBpbiBhIHNlcGFyYXRlIHZhcmlhYmxlIHRvIGF2b2lkIGNvbGxpc2lvblxyXG4gICAgICAgICAgICBwdXNoKGBjb25zdCBfVnVlID0gJHtWdWVCaW5kaW5nfVxcbmApO1xyXG4gICAgICAgICAgICAvLyBpbiBcIndpdGhcIiBtb2RlLCBoZWxwZXJzIGFyZSBkZWNsYXJlZCBpbnNpZGUgdGhlIHdpdGggYmxvY2sgdG8gYXZvaWRcclxuICAgICAgICAgICAgLy8gaGFzIGNoZWNrIGNvc3QsIGJ1dCBob2lzdHMgYXJlIGxpZnRlZCBvdXQgb2YgdGhlIGZ1bmN0aW9uIC0gd2UgbmVlZFxyXG4gICAgICAgICAgICAvLyB0byBwcm92aWRlIHRoZSBoZWxwZXIgaGVyZS5cclxuICAgICAgICAgICAgaWYgKGFzdC5ob2lzdHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0aWNIZWxwZXJzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIENSRUFURV9WTk9ERSxcclxuICAgICAgICAgICAgICAgICAgICBDUkVBVEVfRUxFTUVOVF9WTk9ERSxcclxuICAgICAgICAgICAgICAgICAgICBDUkVBVEVfQ09NTUVOVCxcclxuICAgICAgICAgICAgICAgICAgICBDUkVBVEVfVEVYVCxcclxuICAgICAgICAgICAgICAgICAgICBDUkVBVEVfU1RBVElDXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihoZWxwZXIgPT4gYXN0LmhlbHBlcnMuaW5jbHVkZXMoaGVscGVyKSlcclxuICAgICAgICAgICAgICAgICAgICAubWFwKGFsaWFzSGVscGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcsICcpO1xyXG4gICAgICAgICAgICAgICAgcHVzaChgY29uc3QgeyAke3N0YXRpY0hlbHBlcnN9IH0gPSBfVnVlXFxuYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZW5Ib2lzdHMoYXN0LmhvaXN0cywgY29udGV4dCk7XHJcbiAgICBuZXdsaW5lKCk7XHJcbiAgICBwdXNoKGByZXR1cm4gYCk7XHJcbn1cclxuZnVuY3Rpb24gZ2VuQXNzZXRzKGFzc2V0cywgdHlwZSwgeyBoZWxwZXIsIHB1c2gsIG5ld2xpbmUsIGlzVFMgfSkge1xyXG4gICAgY29uc3QgcmVzb2x2ZXIgPSBoZWxwZXIodHlwZSA9PT0gJ2ZpbHRlcidcclxuICAgICAgICA/IFJFU09MVkVfRklMVEVSXHJcbiAgICAgICAgOiB0eXBlID09PSAnY29tcG9uZW50J1xyXG4gICAgICAgICAgICA/IFJFU09MVkVfQ09NUE9ORU5UXHJcbiAgICAgICAgICAgIDogUkVTT0xWRV9ESVJFQ1RJVkUpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc3NldHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgaWQgPSBhc3NldHNbaV07XHJcbiAgICAgICAgLy8gcG90ZW50aWFsIGNvbXBvbmVudCBpbXBsaWNpdCBzZWxmLXJlZmVyZW5jZSBpbmZlcnJlZCBmcm9tIFNGQyBmaWxlbmFtZVxyXG4gICAgICAgIGNvbnN0IG1heWJlU2VsZlJlZmVyZW5jZSA9IGlkLmVuZHNXaXRoKCdfX3NlbGYnKTtcclxuICAgICAgICBpZiAobWF5YmVTZWxmUmVmZXJlbmNlKSB7XHJcbiAgICAgICAgICAgIGlkID0gaWQuc2xpY2UoMCwgLTYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwdXNoKGBjb25zdCAke3RvVmFsaWRBc3NldElkKGlkLCB0eXBlKX0gPSAke3Jlc29sdmVyfSgke0pTT04uc3RyaW5naWZ5KGlkKX0ke21heWJlU2VsZlJlZmVyZW5jZSA/IGAsIHRydWVgIDogYGB9KSR7aXNUUyA/IGAhYCA6IGBgfWApO1xyXG4gICAgICAgIGlmIChpIDwgYXNzZXRzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgbmV3bGluZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZW5Ib2lzdHMoaG9pc3RzLCBjb250ZXh0KSB7XHJcbiAgICBpZiAoIWhvaXN0cy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb250ZXh0LnB1cmUgPSB0cnVlO1xyXG4gICAgY29uc3QgeyBwdXNoLCBuZXdsaW5lLCBoZWxwZXIsIHNjb3BlSWQsIG1vZGUgfSA9IGNvbnRleHQ7XHJcbiAgICBuZXdsaW5lKCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhvaXN0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGV4cCA9IGhvaXN0c1tpXTtcclxuICAgICAgICBpZiAoZXhwKSB7XHJcbiAgICAgICAgICAgIHB1c2goYGNvbnN0IF9ob2lzdGVkXyR7aSArIDF9ID0gJHtgYH1gKTtcclxuICAgICAgICAgICAgZ2VuTm9kZShleHAsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBuZXdsaW5lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29udGV4dC5wdXJlID0gZmFsc2U7XHJcbn1cclxuZnVuY3Rpb24gaXNUZXh0JDEobikge1xyXG4gICAgcmV0dXJuIChpc1N0cmluZyhuKSB8fFxyXG4gICAgICAgIG4udHlwZSA9PT0gNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLyB8fFxyXG4gICAgICAgIG4udHlwZSA9PT0gMiAvKiBURVhUICovIHx8XHJcbiAgICAgICAgbi50eXBlID09PSA1IC8qIElOVEVSUE9MQVRJT04gKi8gfHxcclxuICAgICAgICBuLnR5cGUgPT09IDggLyogQ09NUE9VTkRfRVhQUkVTU0lPTiAqLyk7XHJcbn1cclxuZnVuY3Rpb24gZ2VuTm9kZUxpc3RBc0FycmF5KG5vZGVzLCBjb250ZXh0KSB7XHJcbiAgICBjb25zdCBtdWx0aWxpbmVzID0gbm9kZXMubGVuZ3RoID4gMyB8fFxyXG4gICAgICAgICgoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSAmJiBub2Rlcy5zb21lKG4gPT4gaXNBcnJheShuKSB8fCAhaXNUZXh0JDEobikpKTtcclxuICAgIGNvbnRleHQucHVzaChgW2ApO1xyXG4gICAgbXVsdGlsaW5lcyAmJiBjb250ZXh0LmluZGVudCgpO1xyXG4gICAgZ2VuTm9kZUxpc3Qobm9kZXMsIGNvbnRleHQsIG11bHRpbGluZXMpO1xyXG4gICAgbXVsdGlsaW5lcyAmJiBjb250ZXh0LmRlaW5kZW50KCk7XHJcbiAgICBjb250ZXh0LnB1c2goYF1gKTtcclxufVxyXG5mdW5jdGlvbiBnZW5Ob2RlTGlzdChub2RlcywgY29udGV4dCwgbXVsdGlsaW5lcyA9IGZhbHNlLCBjb21tYSA9IHRydWUpIHtcclxuICAgIGNvbnN0IHsgcHVzaCwgbmV3bGluZSB9ID0gY29udGV4dDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKG5vZGUpKSB7XHJcbiAgICAgICAgICAgIHB1c2gobm9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzQXJyYXkobm9kZSkpIHtcclxuICAgICAgICAgICAgZ2VuTm9kZUxpc3RBc0FycmF5KG5vZGUsIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZ2VuTm9kZShub2RlLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGkgPCBub2Rlcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgIGlmIChtdWx0aWxpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb21tYSAmJiBwdXNoKCcsJyk7XHJcbiAgICAgICAgICAgICAgICBuZXdsaW5lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb21tYSAmJiBwdXNoKCcsICcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdlbk5vZGUobm9kZSwgY29udGV4dCkge1xyXG4gICAgaWYgKGlzU3RyaW5nKG5vZGUpKSB7XHJcbiAgICAgICAgY29udGV4dC5wdXNoKG5vZGUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpc1N5bWJvbChub2RlKSkge1xyXG4gICAgICAgIGNvbnRleHQucHVzaChjb250ZXh0LmhlbHBlcihub2RlKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcclxuICAgICAgICBjYXNlIDEgLyogRUxFTUVOVCAqLzpcclxuICAgICAgICBjYXNlIDkgLyogSUYgKi86XHJcbiAgICAgICAgY2FzZSAxMSAvKiBGT1IgKi86XHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJlxyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KG5vZGUuY29kZWdlbk5vZGUgIT0gbnVsbCwgYENvZGVnZW4gbm9kZSBpcyBtaXNzaW5nIGZvciBlbGVtZW50L2lmL2ZvciBub2RlLiBgICtcclxuICAgICAgICAgICAgICAgICAgICBgQXBwbHkgYXBwcm9wcmlhdGUgdHJhbnNmb3JtcyBmaXJzdC5gKTtcclxuICAgICAgICAgICAgZ2VuTm9kZShub2RlLmNvZGVnZW5Ob2RlLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyIC8qIFRFWFQgKi86XHJcbiAgICAgICAgICAgIGdlblRleHQobm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLzpcclxuICAgICAgICAgICAgZ2VuRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSA1IC8qIElOVEVSUE9MQVRJT04gKi86XHJcbiAgICAgICAgICAgIGdlbkludGVycG9sYXRpb24obm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTIgLyogVEVYVF9DQUxMICovOlxyXG4gICAgICAgICAgICBnZW5Ob2RlKG5vZGUuY29kZWdlbk5vZGUsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDggLyogQ09NUE9VTkRfRVhQUkVTU0lPTiAqLzpcclxuICAgICAgICAgICAgZ2VuQ29tcG91bmRFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDMgLyogQ09NTUVOVCAqLzpcclxuICAgICAgICAgICAgZ2VuQ29tbWVudChub2RlLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxMyAvKiBWTk9ERV9DQUxMICovOlxyXG4gICAgICAgICAgICBnZW5WTm9kZUNhbGwobm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTQgLyogSlNfQ0FMTF9FWFBSRVNTSU9OICovOlxyXG4gICAgICAgICAgICBnZW5DYWxsRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxNSAvKiBKU19PQkpFQ1RfRVhQUkVTU0lPTiAqLzpcclxuICAgICAgICAgICAgZ2VuT2JqZWN0RXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAxNyAvKiBKU19BUlJBWV9FWFBSRVNTSU9OICovOlxyXG4gICAgICAgICAgICBnZW5BcnJheUV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTggLyogSlNfRlVOQ1RJT05fRVhQUkVTU0lPTiAqLzpcclxuICAgICAgICAgICAgZ2VuRnVuY3Rpb25FeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDE5IC8qIEpTX0NPTkRJVElPTkFMX0VYUFJFU1NJT04gKi86XHJcbiAgICAgICAgICAgIGdlbkNvbmRpdGlvbmFsRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyMCAvKiBKU19DQUNIRV9FWFBSRVNTSU9OICovOlxyXG4gICAgICAgICAgICBnZW5DYWNoZUV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjEgLyogSlNfQkxPQ0tfU1RBVEVNRU5UICovOlxyXG4gICAgICAgICAgICBnZW5Ob2RlTGlzdChub2RlLmJvZHksIGNvbnRleHQsIHRydWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgLy8gU1NSIG9ubHkgdHlwZXNcclxuICAgICAgICBjYXNlIDIyIC8qIEpTX1RFTVBMQVRFX0xJVEVSQUwgKi86XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMjMgLyogSlNfSUZfU1RBVEVNRU5UICovOlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI0IC8qIEpTX0FTU0lHTk1FTlRfRVhQUkVTU0lPTiAqLzpcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAyNSAvKiBKU19TRVFVRU5DRV9FWFBSRVNTSU9OICovOlxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIDI2IC8qIEpTX1JFVFVSTl9TVEFURU1FTlQgKi86XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbiAgICAgICAgY2FzZSAxMCAvKiBJRl9CUkFOQ0ggKi86XHJcbiAgICAgICAgICAgIC8vIG5vb3BcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgdW5oYW5kbGVkIGNvZGVnZW4gbm9kZSB0eXBlOiAke25vZGUudHlwZX1gKTtcclxuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBleGhhdXN0IGFsbCBwb3NzaWJsZSB0eXBlc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhoYXVzdGl2ZUNoZWNrID0gbm9kZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBleGhhdXN0aXZlQ2hlY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZW5UZXh0KG5vZGUsIGNvbnRleHQpIHtcclxuICAgIGNvbnRleHQucHVzaChKU09OLnN0cmluZ2lmeShub2RlLmNvbnRlbnQpLCBub2RlKTtcclxufVxyXG5mdW5jdGlvbiBnZW5FeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IHsgY29udGVudCwgaXNTdGF0aWMgfSA9IG5vZGU7XHJcbiAgICBjb250ZXh0LnB1c2goaXNTdGF0aWMgPyBKU09OLnN0cmluZ2lmeShjb250ZW50KSA6IGNvbnRlbnQsIG5vZGUpO1xyXG59XHJcbmZ1bmN0aW9uIGdlbkludGVycG9sYXRpb24obm9kZSwgY29udGV4dCkge1xyXG4gICAgY29uc3QgeyBwdXNoLCBoZWxwZXIsIHB1cmUgfSA9IGNvbnRleHQ7XHJcbiAgICBpZiAocHVyZSlcclxuICAgICAgICBwdXNoKFBVUkVfQU5OT1RBVElPTik7XHJcbiAgICBwdXNoKGAke2hlbHBlcihUT19ESVNQTEFZX1NUUklORyl9KGApO1xyXG4gICAgZ2VuTm9kZShub2RlLmNvbnRlbnQsIGNvbnRleHQpO1xyXG4gICAgcHVzaChgKWApO1xyXG59XHJcbmZ1bmN0aW9uIGdlbkNvbXBvdW5kRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XHJcbiAgICAgICAgaWYgKGlzU3RyaW5nKGNoaWxkKSkge1xyXG4gICAgICAgICAgICBjb250ZXh0LnB1c2goY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZ2VuTm9kZShjaGlsZCwgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdlbkV4cHJlc3Npb25Bc1Byb3BlcnR5S2V5KG5vZGUsIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IHsgcHVzaCB9ID0gY29udGV4dDtcclxuICAgIGlmIChub2RlLnR5cGUgPT09IDggLyogQ09NUE9VTkRfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgIHB1c2goYFtgKTtcclxuICAgICAgICBnZW5Db21wb3VuZEV4cHJlc3Npb24obm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgcHVzaChgXWApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobm9kZS5pc1N0YXRpYykge1xyXG4gICAgICAgIC8vIG9ubHkgcXVvdGUga2V5cyBpZiBuZWNlc3NhcnlcclxuICAgICAgICBjb25zdCB0ZXh0ID0gaXNTaW1wbGVJZGVudGlmaWVyKG5vZGUuY29udGVudClcclxuICAgICAgICAgICAgPyBub2RlLmNvbnRlbnRcclxuICAgICAgICAgICAgOiBKU09OLnN0cmluZ2lmeShub2RlLmNvbnRlbnQpO1xyXG4gICAgICAgIHB1c2godGV4dCwgbm9kZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBwdXNoKGBbJHtub2RlLmNvbnRlbnR9XWAsIG5vZGUpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdlbkNvbW1lbnQobm9kZSwgY29udGV4dCkge1xyXG4gICAgY29uc3QgeyBwdXNoLCBoZWxwZXIsIHB1cmUgfSA9IGNvbnRleHQ7XHJcbiAgICBpZiAocHVyZSkge1xyXG4gICAgICAgIHB1c2goUFVSRV9BTk5PVEFUSU9OKTtcclxuICAgIH1cclxuICAgIHB1c2goYCR7aGVscGVyKENSRUFURV9DT01NRU5UKX0oJHtKU09OLnN0cmluZ2lmeShub2RlLmNvbnRlbnQpfSlgLCBub2RlKTtcclxufVxyXG5mdW5jdGlvbiBnZW5WTm9kZUNhbGwobm9kZSwgY29udGV4dCkge1xyXG4gICAgY29uc3QgeyBwdXNoLCBoZWxwZXIsIHB1cmUgfSA9IGNvbnRleHQ7XHJcbiAgICBjb25zdCB7IHRhZywgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wcywgZGlyZWN0aXZlcywgaXNCbG9jaywgZGlzYWJsZVRyYWNraW5nLCBpc0NvbXBvbmVudCB9ID0gbm9kZTtcclxuICAgIGlmIChkaXJlY3RpdmVzKSB7XHJcbiAgICAgICAgcHVzaChoZWxwZXIoV0lUSF9ESVJFQ1RJVkVTKSArIGAoYCk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNCbG9jaykge1xyXG4gICAgICAgIHB1c2goYCgke2hlbHBlcihPUEVOX0JMT0NLKX0oJHtkaXNhYmxlVHJhY2tpbmcgPyBgdHJ1ZWAgOiBgYH0pLCBgKTtcclxuICAgIH1cclxuICAgIGlmIChwdXJlKSB7XHJcbiAgICAgICAgcHVzaChQVVJFX0FOTk9UQVRJT04pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY2FsbEhlbHBlciA9IGlzQmxvY2tcclxuICAgICAgICA/IGdldFZOb2RlQmxvY2tIZWxwZXIoY29udGV4dC5pblNTUiwgaXNDb21wb25lbnQpXHJcbiAgICAgICAgOiBnZXRWTm9kZUhlbHBlcihjb250ZXh0LmluU1NSLCBpc0NvbXBvbmVudCk7XHJcbiAgICBwdXNoKGhlbHBlcihjYWxsSGVscGVyKSArIGAoYCwgbm9kZSk7XHJcbiAgICBnZW5Ob2RlTGlzdChnZW5OdWxsYWJsZUFyZ3MoW3RhZywgcHJvcHMsIGNoaWxkcmVuLCBwYXRjaEZsYWcsIGR5bmFtaWNQcm9wc10pLCBjb250ZXh0KTtcclxuICAgIHB1c2goYClgKTtcclxuICAgIGlmIChpc0Jsb2NrKSB7XHJcbiAgICAgICAgcHVzaChgKWApO1xyXG4gICAgfVxyXG4gICAgaWYgKGRpcmVjdGl2ZXMpIHtcclxuICAgICAgICBwdXNoKGAsIGApO1xyXG4gICAgICAgIGdlbk5vZGUoZGlyZWN0aXZlcywgY29udGV4dCk7XHJcbiAgICAgICAgcHVzaChgKWApO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdlbk51bGxhYmxlQXJncyhhcmdzKSB7XHJcbiAgICBsZXQgaSA9IGFyZ3MubGVuZ3RoO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIGlmIChhcmdzW2ldICE9IG51bGwpXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyZ3Muc2xpY2UoMCwgaSArIDEpLm1hcChhcmcgPT4gYXJnIHx8IGBudWxsYCk7XHJcbn1cclxuLy8gSmF2YVNjcmlwdFxyXG5mdW5jdGlvbiBnZW5DYWxsRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KSB7XHJcbiAgICBjb25zdCB7IHB1c2gsIGhlbHBlciwgcHVyZSB9ID0gY29udGV4dDtcclxuICAgIGNvbnN0IGNhbGxlZSA9IGlzU3RyaW5nKG5vZGUuY2FsbGVlKSA/IG5vZGUuY2FsbGVlIDogaGVscGVyKG5vZGUuY2FsbGVlKTtcclxuICAgIGlmIChwdXJlKSB7XHJcbiAgICAgICAgcHVzaChQVVJFX0FOTk9UQVRJT04pO1xyXG4gICAgfVxyXG4gICAgcHVzaChjYWxsZWUgKyBgKGAsIG5vZGUpO1xyXG4gICAgZ2VuTm9kZUxpc3Qobm9kZS5hcmd1bWVudHMsIGNvbnRleHQpO1xyXG4gICAgcHVzaChgKWApO1xyXG59XHJcbmZ1bmN0aW9uIGdlbk9iamVjdEV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xyXG4gICAgY29uc3QgeyBwdXNoLCBpbmRlbnQsIGRlaW5kZW50LCBuZXdsaW5lIH0gPSBjb250ZXh0O1xyXG4gICAgY29uc3QgeyBwcm9wZXJ0aWVzIH0gPSBub2RlO1xyXG4gICAgaWYgKCFwcm9wZXJ0aWVzLmxlbmd0aCkge1xyXG4gICAgICAgIHB1c2goYHt9YCwgbm9kZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbXVsdGlsaW5lcyA9IHByb3BlcnRpZXMubGVuZ3RoID4gMSB8fFxyXG4gICAgICAgICgoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSAmJlxyXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNvbWUocCA9PiBwLnZhbHVlLnR5cGUgIT09IDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi8pKTtcclxuICAgIHB1c2gobXVsdGlsaW5lcyA/IGB7YCA6IGB7IGApO1xyXG4gICAgbXVsdGlsaW5lcyAmJiBpbmRlbnQoKTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHsga2V5LCB2YWx1ZSB9ID0gcHJvcGVydGllc1tpXTtcclxuICAgICAgICAvLyBrZXlcclxuICAgICAgICBnZW5FeHByZXNzaW9uQXNQcm9wZXJ0eUtleShrZXksIGNvbnRleHQpO1xyXG4gICAgICAgIHB1c2goYDogYCk7XHJcbiAgICAgICAgLy8gdmFsdWVcclxuICAgICAgICBnZW5Ob2RlKHZhbHVlLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoaSA8IHByb3BlcnRpZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAvLyB3aWxsIG9ubHkgcmVhY2ggdGhpcyBpZiBpdCdzIG11bHRpbGluZXNcclxuICAgICAgICAgICAgcHVzaChgLGApO1xyXG4gICAgICAgICAgICBuZXdsaW5lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbXVsdGlsaW5lcyAmJiBkZWluZGVudCgpO1xyXG4gICAgcHVzaChtdWx0aWxpbmVzID8gYH1gIDogYCB9YCk7XHJcbn1cclxuZnVuY3Rpb24gZ2VuQXJyYXlFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcclxuICAgIGdlbk5vZGVMaXN0QXNBcnJheShub2RlLmVsZW1lbnRzLCBjb250ZXh0KTtcclxufVxyXG5mdW5jdGlvbiBnZW5GdW5jdGlvbkV4cHJlc3Npb24obm9kZSwgY29udGV4dCkge1xyXG4gICAgY29uc3QgeyBwdXNoLCBpbmRlbnQsIGRlaW5kZW50IH0gPSBjb250ZXh0O1xyXG4gICAgY29uc3QgeyBwYXJhbXMsIHJldHVybnMsIGJvZHksIG5ld2xpbmUsIGlzU2xvdCB9ID0gbm9kZTtcclxuICAgIGlmIChpc1Nsb3QpIHtcclxuICAgICAgICAvLyB3cmFwIHNsb3QgZnVuY3Rpb25zIHdpdGggb3duZXIgY29udGV4dFxyXG4gICAgICAgIHB1c2goYF8ke2hlbHBlck5hbWVNYXBbV0lUSF9DVFhdfShgKTtcclxuICAgIH1cclxuICAgIHB1c2goYChgLCBub2RlKTtcclxuICAgIGlmIChpc0FycmF5KHBhcmFtcykpIHtcclxuICAgICAgICBnZW5Ob2RlTGlzdChwYXJhbXMsIGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocGFyYW1zKSB7XHJcbiAgICAgICAgZ2VuTm9kZShwYXJhbXMsIGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgcHVzaChgKSA9PiBgKTtcclxuICAgIGlmIChuZXdsaW5lIHx8IGJvZHkpIHtcclxuICAgICAgICBwdXNoKGB7YCk7XHJcbiAgICAgICAgaW5kZW50KCk7XHJcbiAgICB9XHJcbiAgICBpZiAocmV0dXJucykge1xyXG4gICAgICAgIGlmIChuZXdsaW5lKSB7XHJcbiAgICAgICAgICAgIHB1c2goYHJldHVybiBgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzQXJyYXkocmV0dXJucykpIHtcclxuICAgICAgICAgICAgZ2VuTm9kZUxpc3RBc0FycmF5KHJldHVybnMsIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZ2VuTm9kZShyZXR1cm5zLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChib2R5KSB7XHJcbiAgICAgICAgZ2VuTm9kZShib2R5LCBjb250ZXh0KTtcclxuICAgIH1cclxuICAgIGlmIChuZXdsaW5lIHx8IGJvZHkpIHtcclxuICAgICAgICBkZWluZGVudCgpO1xyXG4gICAgICAgIHB1c2goYH1gKTtcclxuICAgIH1cclxuICAgIGlmIChpc1Nsb3QpIHtcclxuICAgICAgICBpZiAobm9kZS5pc05vblNjb3BlZFNsb3QpIHtcclxuICAgICAgICAgICAgcHVzaChgLCB1bmRlZmluZWQsIHRydWVgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHVzaChgKWApO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdlbkNvbmRpdGlvbmFsRXhwcmVzc2lvbihub2RlLCBjb250ZXh0KSB7XHJcbiAgICBjb25zdCB7IHRlc3QsIGNvbnNlcXVlbnQsIGFsdGVybmF0ZSwgbmV3bGluZTogbmVlZE5ld2xpbmUgfSA9IG5vZGU7XHJcbiAgICBjb25zdCB7IHB1c2gsIGluZGVudCwgZGVpbmRlbnQsIG5ld2xpbmUgfSA9IGNvbnRleHQ7XHJcbiAgICBpZiAodGVzdC50eXBlID09PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovKSB7XHJcbiAgICAgICAgY29uc3QgbmVlZHNQYXJlbnMgPSAhaXNTaW1wbGVJZGVudGlmaWVyKHRlc3QuY29udGVudCk7XHJcbiAgICAgICAgbmVlZHNQYXJlbnMgJiYgcHVzaChgKGApO1xyXG4gICAgICAgIGdlbkV4cHJlc3Npb24odGVzdCwgY29udGV4dCk7XHJcbiAgICAgICAgbmVlZHNQYXJlbnMgJiYgcHVzaChgKWApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcHVzaChgKGApO1xyXG4gICAgICAgIGdlbk5vZGUodGVzdCwgY29udGV4dCk7XHJcbiAgICAgICAgcHVzaChgKWApO1xyXG4gICAgfVxyXG4gICAgbmVlZE5ld2xpbmUgJiYgaW5kZW50KCk7XHJcbiAgICBjb250ZXh0LmluZGVudExldmVsKys7XHJcbiAgICBuZWVkTmV3bGluZSB8fCBwdXNoKGAgYCk7XHJcbiAgICBwdXNoKGA/IGApO1xyXG4gICAgZ2VuTm9kZShjb25zZXF1ZW50LCBjb250ZXh0KTtcclxuICAgIGNvbnRleHQuaW5kZW50TGV2ZWwtLTtcclxuICAgIG5lZWROZXdsaW5lICYmIG5ld2xpbmUoKTtcclxuICAgIG5lZWROZXdsaW5lIHx8IHB1c2goYCBgKTtcclxuICAgIHB1c2goYDogYCk7XHJcbiAgICBjb25zdCBpc05lc3RlZCA9IGFsdGVybmF0ZS50eXBlID09PSAxOSAvKiBKU19DT05ESVRJT05BTF9FWFBSRVNTSU9OICovO1xyXG4gICAgaWYgKCFpc05lc3RlZCkge1xyXG4gICAgICAgIGNvbnRleHQuaW5kZW50TGV2ZWwrKztcclxuICAgIH1cclxuICAgIGdlbk5vZGUoYWx0ZXJuYXRlLCBjb250ZXh0KTtcclxuICAgIGlmICghaXNOZXN0ZWQpIHtcclxuICAgICAgICBjb250ZXh0LmluZGVudExldmVsLS07XHJcbiAgICB9XHJcbiAgICBuZWVkTmV3bGluZSAmJiBkZWluZGVudCh0cnVlIC8qIHdpdGhvdXQgbmV3bGluZSAqLyk7XHJcbn1cclxuZnVuY3Rpb24gZ2VuQ2FjaGVFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IHsgcHVzaCwgaGVscGVyLCBpbmRlbnQsIGRlaW5kZW50LCBuZXdsaW5lIH0gPSBjb250ZXh0O1xyXG4gICAgcHVzaChgX2NhY2hlWyR7bm9kZS5pbmRleH1dIHx8IChgKTtcclxuICAgIGlmIChub2RlLmlzVk5vZGUpIHtcclxuICAgICAgICBpbmRlbnQoKTtcclxuICAgICAgICBwdXNoKGAke2hlbHBlcihTRVRfQkxPQ0tfVFJBQ0tJTkcpfSgtMSksYCk7XHJcbiAgICAgICAgbmV3bGluZSgpO1xyXG4gICAgfVxyXG4gICAgcHVzaChgX2NhY2hlWyR7bm9kZS5pbmRleH1dID0gYCk7XHJcbiAgICBnZW5Ob2RlKG5vZGUudmFsdWUsIGNvbnRleHQpO1xyXG4gICAgaWYgKG5vZGUuaXNWTm9kZSkge1xyXG4gICAgICAgIHB1c2goYCxgKTtcclxuICAgICAgICBuZXdsaW5lKCk7XHJcbiAgICAgICAgcHVzaChgJHtoZWxwZXIoU0VUX0JMT0NLX1RSQUNLSU5HKX0oMSksYCk7XHJcbiAgICAgICAgbmV3bGluZSgpO1xyXG4gICAgICAgIHB1c2goYF9jYWNoZVske25vZGUuaW5kZXh9XWApO1xyXG4gICAgICAgIGRlaW5kZW50KCk7XHJcbiAgICB9XHJcbiAgICBwdXNoKGApYCk7XHJcbn1cblxuZnVuY3Rpb24gd2Fsa0lkZW50aWZpZXJzKHJvb3QsIG9uSWRlbnRpZmllciwgaW5jbHVkZUFsbCA9IGZhbHNlLCBwYXJlbnRTdGFjayA9IFtdLCBrbm93bklkcyA9IE9iamVjdC5jcmVhdGUobnVsbCkpIHtcclxuICAgIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNSZWZlcmVuY2VkSWRlbnRpZmllcihpZCwgcGFyZW50LCBwYXJlbnRTdGFjaykge1xyXG4gICAge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0luRGVzdHJ1Y3R1cmVBc3NpZ25tZW50KHBhcmVudCwgcGFyZW50U3RhY2spIHtcclxuICAgIGlmIChwYXJlbnQgJiZcclxuICAgICAgICAocGFyZW50LnR5cGUgPT09ICdPYmplY3RQcm9wZXJ0eScgfHwgcGFyZW50LnR5cGUgPT09ICdBcnJheVBhdHRlcm4nKSkge1xyXG4gICAgICAgIGxldCBpID0gcGFyZW50U3RhY2subGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgY29uc3QgcCA9IHBhcmVudFN0YWNrW2ldO1xyXG4gICAgICAgICAgICBpZiAocC50eXBlID09PSAnQXNzaWdubWVudEV4cHJlc3Npb24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwLnR5cGUgIT09ICdPYmplY3RQcm9wZXJ0eScgJiYgIXAudHlwZS5lbmRzV2l0aCgnUGF0dGVybicpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiB3YWxrRnVuY3Rpb25QYXJhbXMobm9kZSwgb25JZGVudCkge1xyXG4gICAgZm9yIChjb25zdCBwIG9mIG5vZGUucGFyYW1zKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiBleHRyYWN0SWRlbnRpZmllcnMocCkpIHtcclxuICAgICAgICAgICAgb25JZGVudChpZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHdhbGtCbG9ja0RlY2xhcmF0aW9ucyhibG9jaywgb25JZGVudCkge1xyXG4gICAgZm9yIChjb25zdCBzdG10IG9mIGJsb2NrLmJvZHkpIHtcclxuICAgICAgICBpZiAoc3RtdC50eXBlID09PSAnVmFyaWFibGVEZWNsYXJhdGlvbicpIHtcclxuICAgICAgICAgICAgaWYgKHN0bXQuZGVjbGFyZSlcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRlY2wgb2Ygc3RtdC5kZWNsYXJhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaWQgb2YgZXh0cmFjdElkZW50aWZpZXJzKGRlY2wuaWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25JZGVudChpZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoc3RtdC50eXBlID09PSAnRnVuY3Rpb25EZWNsYXJhdGlvbicgfHxcclxuICAgICAgICAgICAgc3RtdC50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicpIHtcclxuICAgICAgICAgICAgaWYgKHN0bXQuZGVjbGFyZSB8fCAhc3RtdC5pZClcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBvbklkZW50KHN0bXQuaWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBleHRyYWN0SWRlbnRpZmllcnMocGFyYW0sIG5vZGVzID0gW10pIHtcclxuICAgIHN3aXRjaCAocGFyYW0udHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ0lkZW50aWZpZXInOlxyXG4gICAgICAgICAgICBub2Rlcy5wdXNoKHBhcmFtKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnTWVtYmVyRXhwcmVzc2lvbic6XHJcbiAgICAgICAgICAgIGxldCBvYmplY3QgPSBwYXJhbTtcclxuICAgICAgICAgICAgd2hpbGUgKG9iamVjdC50eXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbicpIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5vYmplY3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbm9kZXMucHVzaChvYmplY3QpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdPYmplY3RQYXR0ZXJuJzpcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIHBhcmFtLnByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwcm9wLnR5cGUgPT09ICdSZXN0RWxlbWVudCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHRyYWN0SWRlbnRpZmllcnMocHJvcC5hcmd1bWVudCwgbm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFjdElkZW50aWZpZXJzKHByb3AudmFsdWUsIG5vZGVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdBcnJheVBhdHRlcm4nOlxyXG4gICAgICAgICAgICBwYXJhbS5lbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgZXh0cmFjdElkZW50aWZpZXJzKGVsZW1lbnQsIG5vZGVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ1Jlc3RFbGVtZW50JzpcclxuICAgICAgICAgICAgZXh0cmFjdElkZW50aWZpZXJzKHBhcmFtLmFyZ3VtZW50LCBub2Rlcyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ0Fzc2lnbm1lbnRQYXR0ZXJuJzpcclxuICAgICAgICAgICAgZXh0cmFjdElkZW50aWZpZXJzKHBhcmFtLmxlZnQsIG5vZGVzKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9kZXM7XHJcbn1cclxuY29uc3QgaXNGdW5jdGlvblR5cGUgPSAobm9kZSkgPT4ge1xyXG4gICAgcmV0dXJuIC9GdW5jdGlvbig/OkV4cHJlc3Npb258RGVjbGFyYXRpb24pJHxNZXRob2QkLy50ZXN0KG5vZGUudHlwZSk7XHJcbn07XHJcbmNvbnN0IGlzU3RhdGljUHJvcGVydHkgPSAobm9kZSkgPT4gbm9kZSAmJlxyXG4gICAgKG5vZGUudHlwZSA9PT0gJ09iamVjdFByb3BlcnR5JyB8fCBub2RlLnR5cGUgPT09ICdPYmplY3RNZXRob2QnKSAmJlxyXG4gICAgIW5vZGUuY29tcHV0ZWQ7XHJcbmNvbnN0IGlzU3RhdGljUHJvcGVydHlLZXkgPSAobm9kZSwgcGFyZW50KSA9PiBpc1N0YXRpY1Byb3BlcnR5KHBhcmVudCkgJiYgcGFyZW50LmtleSA9PT0gbm9kZTtcblxuLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2VcclxuLy8gdHlwZW9mLCBpbnN0YW5jZW9mIGFuZCBpbiBhcmUgYWxsb3dlZFxyXG5jb25zdCBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICtcclxuICAgICgnZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCwnICtcclxuICAgICAgICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgK1xyXG4gICAgICAgICdleHRlbmRzLGZpbmFsbHksY29udGludWUsZGVidWdnZXIsZnVuY3Rpb24sYXJndW1lbnRzLHR5cGVvZix2b2lkJylcclxuICAgICAgICAuc3BsaXQoJywnKVxyXG4gICAgICAgIC5qb2luKCdcXFxcYnxcXFxcYicpICtcclxuICAgICdcXFxcYicpO1xyXG4vLyBzdHJpcCBzdHJpbmdzIGluIGV4cHJlc3Npb25zXHJcbmNvbnN0IHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcclxuLyoqXHJcbiAqIFZhbGlkYXRlIGEgbm9uLXByZWZpeGVkIGV4cHJlc3Npb24uXHJcbiAqIFRoaXMgaXMgb25seSBjYWxsZWQgd2hlbiB1c2luZyB0aGUgaW4tYnJvd3NlciBydW50aW1lIGNvbXBpbGVyIHNpbmNlIGl0XHJcbiAqIGRvZXNuJ3QgcHJlZml4IGV4cHJlc3Npb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVCcm93c2VyRXhwcmVzc2lvbihub2RlLCBjb250ZXh0LCBhc1BhcmFtcyA9IGZhbHNlLCBhc1Jhd1N0YXRlbWVudHMgPSBmYWxzZSkge1xyXG4gICAgY29uc3QgZXhwID0gbm9kZS5jb250ZW50O1xyXG4gICAgLy8gZW1wdHkgZXhwcmVzc2lvbnMgYXJlIHZhbGlkYXRlZCBwZXItZGlyZWN0aXZlIHNpbmNlIHNvbWUgZGlyZWN0aXZlc1xyXG4gICAgLy8gZG8gYWxsb3cgZW1wdHkgZXhwcmVzc2lvbnMuXHJcbiAgICBpZiAoIWV4cC50cmltKCkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIG5ldyBGdW5jdGlvbihhc1Jhd1N0YXRlbWVudHNcclxuICAgICAgICAgICAgPyBgICR7ZXhwfSBgXHJcbiAgICAgICAgICAgIDogYHJldHVybiAke2FzUGFyYW1zID8gYCgke2V4cH0pID0+IHt9YCA6IGAoJHtleHB9KWB9YCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGxldCBtZXNzYWdlID0gZS5tZXNzYWdlO1xyXG4gICAgICAgIGNvbnN0IGtleXdvcmRNYXRjaCA9IGV4cFxyXG4gICAgICAgICAgICAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJylcclxuICAgICAgICAgICAgLm1hdGNoKHByb2hpYml0ZWRLZXl3b3JkUkUpO1xyXG4gICAgICAgIGlmIChrZXl3b3JkTWF0Y2gpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IGBhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogXCIke2tleXdvcmRNYXRjaFswXX1cImA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQub25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKDQ0IC8qIFhfSU5WQUxJRF9FWFBSRVNTSU9OICovLCBub2RlLmxvYywgdW5kZWZpbmVkLCBtZXNzYWdlKSk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgdHJhbnNmb3JtRXhwcmVzc2lvbiA9IChub2RlLCBjb250ZXh0KSA9PiB7XHJcbiAgICBpZiAobm9kZS50eXBlID09PSA1IC8qIElOVEVSUE9MQVRJT04gKi8pIHtcclxuICAgICAgICBub2RlLmNvbnRlbnQgPSBwcm9jZXNzRXhwcmVzc2lvbihub2RlLmNvbnRlbnQsIGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobm9kZS50eXBlID09PSAxIC8qIEVMRU1FTlQgKi8pIHtcclxuICAgICAgICAvLyBoYW5kbGUgZGlyZWN0aXZlcyBvbiBlbGVtZW50XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLnByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpciA9IG5vZGUucHJvcHNbaV07XHJcbiAgICAgICAgICAgIC8vIGRvIG5vdCBwcm9jZXNzIGZvciB2LW9uICYgdi1mb3Igc2luY2UgdGhleSBhcmUgc3BlY2lhbCBoYW5kbGVkXHJcbiAgICAgICAgICAgIGlmIChkaXIudHlwZSA9PT0gNyAvKiBESVJFQ1RJVkUgKi8gJiYgZGlyLm5hbWUgIT09ICdmb3InKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleHAgPSBkaXIuZXhwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJnID0gZGlyLmFyZztcclxuICAgICAgICAgICAgICAgIC8vIGRvIG5vdCBwcm9jZXNzIGV4cCBpZiB0aGlzIGlzIHYtb246YXJnIC0gd2UgbmVlZCBzcGVjaWFsIGhhbmRsaW5nXHJcbiAgICAgICAgICAgICAgICAvLyBmb3Igd3JhcHBpbmcgaW5saW5lIHN0YXRlbWVudHMuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXhwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwLnR5cGUgPT09IDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi8gJiZcclxuICAgICAgICAgICAgICAgICAgICAhKGRpci5uYW1lID09PSAnb24nICYmIGFyZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXIuZXhwID0gcHJvY2Vzc0V4cHJlc3Npb24oZXhwLCBjb250ZXh0LCBcclxuICAgICAgICAgICAgICAgICAgICAvLyBzbG90IGFyZ3MgbXVzdCBiZSBwcm9jZXNzZWQgYXMgZnVuY3Rpb24gcGFyYW1zXHJcbiAgICAgICAgICAgICAgICAgICAgZGlyLm5hbWUgPT09ICdzbG90Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJnICYmIGFyZy50eXBlID09PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovICYmICFhcmcuaXNTdGF0aWMpIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXIuYXJnID0gcHJvY2Vzc0V4cHJlc3Npb24oYXJnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLy8gSW1wb3J0YW50OiBzaW5jZSB0aGlzIGZ1bmN0aW9uIHVzZXMgTm9kZS5qcyBvbmx5IGRlcGVuZGVuY2llcywgaXQgc2hvdWxkXHJcbi8vIGFsd2F5cyBiZSB1c2VkIHdpdGggYSBsZWFkaW5nICF0cnVlIGNoZWNrIHNvIHRoYXQgaXQgY2FuIGJlXHJcbi8vIHRyZWUtc2hha2VuIGZyb20gdGhlIGJyb3dzZXIgYnVpbGQuXHJcbmZ1bmN0aW9uIHByb2Nlc3NFeHByZXNzaW9uKG5vZGUsIGNvbnRleHQsIFxyXG4vLyBzb21lIGV4cHJlc3Npb25zIGxpa2Ugdi1zbG90IHByb3BzICYgdi1mb3IgYWxpYXNlcyBzaG91bGQgYmUgcGFyc2VkIGFzXHJcbi8vIGZ1bmN0aW9uIHBhcmFtc1xyXG5hc1BhcmFtcyA9IGZhbHNlLCBcclxuLy8gdi1vbiBoYW5kbGVyIHZhbHVlcyBtYXkgY29udGFpbiBtdWx0aXBsZSBzdGF0ZW1lbnRzXHJcbmFzUmF3U3RhdGVtZW50cyA9IGZhbHNlLCBsb2NhbFZhcnMgPSBPYmplY3QuY3JlYXRlKGNvbnRleHQuaWRlbnRpZmllcnMpKSB7XHJcbiAgICB7XHJcbiAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAvLyBzaW1wbGUgaW4tYnJvd3NlciB2YWxpZGF0aW9uIChzYW1lIGxvZ2ljIGluIDIueClcclxuICAgICAgICAgICAgdmFsaWRhdGVCcm93c2VyRXhwcmVzc2lvbihub2RlLCBjb250ZXh0LCBhc1BhcmFtcywgYXNSYXdTdGF0ZW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgdHJhbnNmb3JtSWYgPSBjcmVhdGVTdHJ1Y3R1cmFsRGlyZWN0aXZlVHJhbnNmb3JtKC9eKGlmfGVsc2V8ZWxzZS1pZikkLywgKG5vZGUsIGRpciwgY29udGV4dCkgPT4ge1xyXG4gICAgcmV0dXJuIHByb2Nlc3NJZihub2RlLCBkaXIsIGNvbnRleHQsIChpZk5vZGUsIGJyYW5jaCwgaXNSb290KSA9PiB7XHJcbiAgICAgICAgLy8gIzE1ODc6IFdlIG5lZWQgdG8gZHluYW1pY2FsbHkgaW5jcmVtZW50IHRoZSBrZXkgYmFzZWQgb24gdGhlIGN1cnJlbnRcclxuICAgICAgICAvLyBub2RlJ3Mgc2libGluZyBub2Rlcywgc2luY2UgY2hhaW5lZCB2LWlmL2Vsc2UgYnJhbmNoZXMgYXJlXHJcbiAgICAgICAgLy8gcmVuZGVyZWQgYXQgdGhlIHNhbWUgZGVwdGhcclxuICAgICAgICBjb25zdCBzaWJsaW5ncyA9IGNvbnRleHQucGFyZW50LmNoaWxkcmVuO1xyXG4gICAgICAgIGxldCBpID0gc2libGluZ3MuaW5kZXhPZihpZk5vZGUpO1xyXG4gICAgICAgIGxldCBrZXkgPSAwO1xyXG4gICAgICAgIHdoaWxlIChpLS0gPj0gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBzaWJsaW5nID0gc2libGluZ3NbaV07XHJcbiAgICAgICAgICAgIGlmIChzaWJsaW5nICYmIHNpYmxpbmcudHlwZSA9PT0gOSAvKiBJRiAqLykge1xyXG4gICAgICAgICAgICAgICAga2V5ICs9IHNpYmxpbmcuYnJhbmNoZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEV4aXQgY2FsbGJhY2suIENvbXBsZXRlIHRoZSBjb2RlZ2VuTm9kZSB3aGVuIGFsbCBjaGlsZHJlbiBoYXZlIGJlZW5cclxuICAgICAgICAvLyB0cmFuc2Zvcm1lZC5cclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNSb290KSB7XHJcbiAgICAgICAgICAgICAgICBpZk5vZGUuY29kZWdlbk5vZGUgPSBjcmVhdGVDb2RlZ2VuTm9kZUZvckJyYW5jaChicmFuY2gsIGtleSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhdHRhY2ggdGhpcyBicmFuY2gncyBjb2RlZ2VuIG5vZGUgdG8gdGhlIHYtaWYgcm9vdC5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudENvbmRpdGlvbiA9IGdldFBhcmVudENvbmRpdGlvbihpZk5vZGUuY29kZWdlbk5vZGUpO1xyXG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZGl0aW9uLmFsdGVybmF0ZSA9IGNyZWF0ZUNvZGVnZW5Ob2RlRm9yQnJhbmNoKGJyYW5jaCwga2V5ICsgaWZOb2RlLmJyYW5jaGVzLmxlbmd0aCAtIDEsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59KTtcclxuLy8gdGFyZ2V0LWFnbm9zdGljIHRyYW5zZm9ybSB1c2VkIGZvciBib3RoIENsaWVudCBhbmQgU1NSXHJcbmZ1bmN0aW9uIHByb2Nlc3NJZihub2RlLCBkaXIsIGNvbnRleHQsIHByb2Nlc3NDb2RlZ2VuKSB7XHJcbiAgICBpZiAoZGlyLm5hbWUgIT09ICdlbHNlJyAmJlxyXG4gICAgICAgICghZGlyLmV4cCB8fCAhZGlyLmV4cC5jb250ZW50LnRyaW0oKSkpIHtcclxuICAgICAgICBjb25zdCBsb2MgPSBkaXIuZXhwID8gZGlyLmV4cC5sb2MgOiBub2RlLmxvYztcclxuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcigyOCAvKiBYX1ZfSUZfTk9fRVhQUkVTU0lPTiAqLywgZGlyLmxvYykpO1xyXG4gICAgICAgIGRpci5leHAgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGB0cnVlYCwgZmFsc2UsIGxvYyk7XHJcbiAgICB9XHJcbiAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHRydWUgJiYgZGlyLmV4cCkge1xyXG4gICAgICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24oZGlyLmV4cCwgY29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBpZiAoZGlyLm5hbWUgPT09ICdpZicpIHtcclxuICAgICAgICBjb25zdCBicmFuY2ggPSBjcmVhdGVJZkJyYW5jaChub2RlLCBkaXIpO1xyXG4gICAgICAgIGNvbnN0IGlmTm9kZSA9IHtcclxuICAgICAgICAgICAgdHlwZTogOSAvKiBJRiAqLyxcclxuICAgICAgICAgICAgbG9jOiBub2RlLmxvYyxcclxuICAgICAgICAgICAgYnJhbmNoZXM6IFticmFuY2hdXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb250ZXh0LnJlcGxhY2VOb2RlKGlmTm9kZSk7XHJcbiAgICAgICAgaWYgKHByb2Nlc3NDb2RlZ2VuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzQ29kZWdlbihpZk5vZGUsIGJyYW5jaCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gbG9jYXRlIHRoZSBhZGphY2VudCB2LWlmXHJcbiAgICAgICAgY29uc3Qgc2libGluZ3MgPSBjb250ZXh0LnBhcmVudC5jaGlsZHJlbjtcclxuICAgICAgICBjb25zdCBjb21tZW50cyA9IFtdO1xyXG4gICAgICAgIGxldCBpID0gc2libGluZ3MuaW5kZXhPZihub2RlKTtcclxuICAgICAgICB3aGlsZSAoaS0tID49IC0xKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpYmxpbmcgPSBzaWJsaW5nc1tpXTtcclxuICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBzaWJsaW5nICYmIHNpYmxpbmcudHlwZSA9PT0gMyAvKiBDT01NRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlbW92ZU5vZGUoc2libGluZyk7XHJcbiAgICAgICAgICAgICAgICBjb21tZW50cy51bnNoaWZ0KHNpYmxpbmcpO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNpYmxpbmcgJiZcclxuICAgICAgICAgICAgICAgIHNpYmxpbmcudHlwZSA9PT0gMiAvKiBURVhUICovICYmXHJcbiAgICAgICAgICAgICAgICAhc2libGluZy5jb250ZW50LnRyaW0oKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVtb3ZlTm9kZShzaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChzaWJsaW5nICYmIHNpYmxpbmcudHlwZSA9PT0gOSAvKiBJRiAqLykge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdi1lbHNlIHdhcyBmb2xsb3dlZCBieSB2LWVsc2UtaWZcclxuICAgICAgICAgICAgICAgIGlmIChkaXIubmFtZSA9PT0gJ2Vsc2UtaWYnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc2libGluZy5icmFuY2hlc1tzaWJsaW5nLmJyYW5jaGVzLmxlbmd0aCAtIDFdLmNvbmRpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzAgLyogWF9WX0VMU0VfTk9fQURKQUNFTlRfSUYgKi8sIG5vZGUubG9jKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBtb3ZlIHRoZSBub2RlIHRvIHRoZSBpZiBub2RlJ3MgYnJhbmNoZXNcclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVtb3ZlTm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnJhbmNoID0gY3JlYXRlSWZCcmFuY2gobm9kZSwgZGlyKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgICAgICBjb21tZW50cy5sZW5ndGggJiZcclxuICAgICAgICAgICAgICAgICAgICAvLyAjMzYxOSBpZ25vcmUgY29tbWVudHMgaWYgdGhlIHYtaWYgaXMgZGlyZWN0IGNoaWxkIG9mIDx0cmFuc2l0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICEoY29udGV4dC5wYXJlbnQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5wYXJlbnQudHlwZSA9PT0gMSAvKiBFTEVNRU5UICovICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQnVpbHRJblR5cGUoY29udGV4dC5wYXJlbnQudGFnLCAndHJhbnNpdGlvbicpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyYW5jaC5jaGlsZHJlbiA9IFsuLi5jb21tZW50cywgLi4uYnJhbmNoLmNoaWxkcmVuXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHVzZXIgaXMgZm9yY2luZyBzYW1lIGtleSBvbiBkaWZmZXJlbnQgYnJhbmNoZXNcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgfHwgIXRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBicmFuY2gudXNlcktleTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpYmxpbmcuYnJhbmNoZXMuZm9yRWFjaCgoeyB1c2VyS2V5IH0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1NhbWVLZXkodXNlcktleSwga2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQub25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKDI5IC8qIFhfVl9JRl9TQU1FX0tFWSAqLywgYnJhbmNoLnVzZXJLZXkubG9jKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNpYmxpbmcuYnJhbmNoZXMucHVzaChicmFuY2gpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb25FeGl0ID0gcHJvY2Vzc0NvZGVnZW4gJiYgcHJvY2Vzc0NvZGVnZW4oc2libGluZywgYnJhbmNoLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgYnJhbmNoIHdhcyByZW1vdmVkLCBpdCB3aWxsIG5vdCBiZSB0cmF2ZXJzZWQuXHJcbiAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgdG8gdHJhdmVyc2UgaGVyZS5cclxuICAgICAgICAgICAgICAgIHRyYXZlcnNlTm9kZShicmFuY2gsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgLy8gY2FsbCBvbiBleGl0XHJcbiAgICAgICAgICAgICAgICBpZiAob25FeGl0KVxyXG4gICAgICAgICAgICAgICAgICAgIG9uRXhpdCgpO1xyXG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRvIHJlc2V0IGN1cnJlbnROb2RlIGFmdGVyIHRyYXZlcnNhbCB0byBpbmRpY2F0ZSB0aGlzXHJcbiAgICAgICAgICAgICAgICAvLyBub2RlIGhhcyBiZWVuIHJlbW92ZWQuXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmN1cnJlbnROb2RlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQub25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKDMwIC8qIFhfVl9FTFNFX05PX0FESkFDRU5UX0lGICovLCBub2RlLmxvYykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJZkJyYW5jaChub2RlLCBkaXIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogMTAgLyogSUZfQlJBTkNIICovLFxyXG4gICAgICAgIGxvYzogbm9kZS5sb2MsXHJcbiAgICAgICAgY29uZGl0aW9uOiBkaXIubmFtZSA9PT0gJ2Vsc2UnID8gdW5kZWZpbmVkIDogZGlyLmV4cCxcclxuICAgICAgICBjaGlsZHJlbjogbm9kZS50YWdUeXBlID09PSAzIC8qIFRFTVBMQVRFICovICYmICFmaW5kRGlyKG5vZGUsICdmb3InKVxyXG4gICAgICAgICAgICA/IG5vZGUuY2hpbGRyZW5cclxuICAgICAgICAgICAgOiBbbm9kZV0sXHJcbiAgICAgICAgdXNlcktleTogZmluZFByb3Aobm9kZSwgYGtleWApXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUNvZGVnZW5Ob2RlRm9yQnJhbmNoKGJyYW5jaCwga2V5SW5kZXgsIGNvbnRleHQpIHtcclxuICAgIGlmIChicmFuY2guY29uZGl0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbihicmFuY2guY29uZGl0aW9uLCBjcmVhdGVDaGlsZHJlbkNvZGVnZW5Ob2RlKGJyYW5jaCwga2V5SW5kZXgsIGNvbnRleHQpLCBcclxuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gcGFzcyBpbiBhc0Jsb2NrOiB0cnVlIHNvIHRoYXQgdGhlIGNvbW1lbnQgbm9kZSBjYWxsXHJcbiAgICAgICAgLy8gY2xvc2VzIHRoZSBjdXJyZW50IGJsb2NrLlxyXG4gICAgICAgIGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKENSRUFURV9DT01NRU5UKSwgW1xyXG4gICAgICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyAnXCJ2LWlmXCInIDogJ1wiXCInLFxyXG4gICAgICAgICAgICAndHJ1ZSdcclxuICAgICAgICBdKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRyZW5Db2RlZ2VuTm9kZShicmFuY2gsIGtleUluZGV4LCBjb250ZXh0KTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjcmVhdGVDaGlsZHJlbkNvZGVnZW5Ob2RlKGJyYW5jaCwga2V5SW5kZXgsIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IHsgaGVscGVyIH0gPSBjb250ZXh0O1xyXG4gICAgY29uc3Qga2V5UHJvcGVydHkgPSBjcmVhdGVPYmplY3RQcm9wZXJ0eShga2V5YCwgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihgJHtrZXlJbmRleH1gLCBmYWxzZSwgbG9jU3R1YiwgMiAvKiBDQU5fSE9JU1QgKi8pKTtcclxuICAgIGNvbnN0IHsgY2hpbGRyZW4gfSA9IGJyYW5jaDtcclxuICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSBjaGlsZHJlblswXTtcclxuICAgIGNvbnN0IG5lZWRGcmFnbWVudFdyYXBwZXIgPSBjaGlsZHJlbi5sZW5ndGggIT09IDEgfHwgZmlyc3RDaGlsZC50eXBlICE9PSAxIC8qIEVMRU1FTlQgKi87XHJcbiAgICBpZiAobmVlZEZyYWdtZW50V3JhcHBlcikge1xyXG4gICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgZmlyc3RDaGlsZC50eXBlID09PSAxMSAvKiBGT1IgKi8pIHtcclxuICAgICAgICAgICAgLy8gb3B0aW1pemUgYXdheSBuZXN0ZWQgZnJhZ21lbnRzIHdoZW4gY2hpbGQgaXMgYSBGb3JOb2RlXHJcbiAgICAgICAgICAgIGNvbnN0IHZub2RlQ2FsbCA9IGZpcnN0Q2hpbGQuY29kZWdlbk5vZGU7XHJcbiAgICAgICAgICAgIGluamVjdFByb3Aodm5vZGVDYWxsLCBrZXlQcm9wZXJ0eSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHJldHVybiB2bm9kZUNhbGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcGF0Y2hGbGFnID0gNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovO1xyXG4gICAgICAgICAgICBsZXQgcGF0Y2hGbGFnVGV4dCA9IFBhdGNoRmxhZ05hbWVzWzY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqL107XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBmcmFnbWVudCBhY3R1YWxseSBjb250YWlucyBhIHNpbmdsZSB2YWxpZCBjaGlsZCB3aXRoXHJcbiAgICAgICAgICAgIC8vIHRoZSByZXN0IGJlaW5nIGNvbW1lbnRzXHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZpbHRlcihjID0+IGMudHlwZSAhPT0gMyAvKiBDT01NRU5UICovKS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIHBhdGNoRmxhZyB8PSAyMDQ4IC8qIERFVl9ST09UX0ZSQUdNRU5UICovO1xyXG4gICAgICAgICAgICAgICAgcGF0Y2hGbGFnVGV4dCArPSBgLCAke1BhdGNoRmxhZ05hbWVzWzIwNDggLyogREVWX1JPT1RfRlJBR01FTlQgKi9dfWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVZOb2RlQ2FsbChjb250ZXh0LCBoZWxwZXIoRlJBR01FTlQpLCBjcmVhdGVPYmplY3RFeHByZXNzaW9uKFtrZXlQcm9wZXJ0eV0pLCBjaGlsZHJlbiwgcGF0Y2hGbGFnICsgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGAgLyogJHtwYXRjaEZsYWdUZXh0fSAqL2AgOiBgYCksIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlLCBmYWxzZSwgZmFsc2UgLyogaXNDb21wb25lbnQgKi8sIGJyYW5jaC5sb2MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IHJldCA9IGZpcnN0Q2hpbGQuY29kZWdlbk5vZGU7XHJcbiAgICAgICAgY29uc3Qgdm5vZGVDYWxsID0gZ2V0TWVtb2VkVk5vZGVDYWxsKHJldCk7XHJcbiAgICAgICAgLy8gQ2hhbmdlIGNyZWF0ZVZOb2RlIHRvIGNyZWF0ZUJsb2NrLlxyXG4gICAgICAgIGlmICh2bm9kZUNhbGwudHlwZSA9PT0gMTMgLyogVk5PREVfQ0FMTCAqLykge1xyXG4gICAgICAgICAgICBtYWtlQmxvY2sodm5vZGVDYWxsLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaW5qZWN0IGJyYW5jaCBrZXlcclxuICAgICAgICBpbmplY3RQcm9wKHZub2RlQ2FsbCwga2V5UHJvcGVydHksIGNvbnRleHQpO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNTYW1lS2V5KGEsIGIpIHtcclxuICAgIGlmICghYSB8fCBhLnR5cGUgIT09IGIudHlwZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChhLnR5cGUgPT09IDYgLyogQVRUUklCVVRFICovKSB7XHJcbiAgICAgICAgaWYgKGEudmFsdWUuY29udGVudCAhPT0gYi52YWx1ZS5jb250ZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBkaXJlY3RpdmVcclxuICAgICAgICBjb25zdCBleHAgPSBhLmV4cDtcclxuICAgICAgICBjb25zdCBicmFuY2hFeHAgPSBiLmV4cDtcclxuICAgICAgICBpZiAoZXhwLnR5cGUgIT09IGJyYW5jaEV4cC50eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGV4cC50eXBlICE9PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovIHx8XHJcbiAgICAgICAgICAgIGV4cC5pc1N0YXRpYyAhPT0gYnJhbmNoRXhwLmlzU3RhdGljIHx8XHJcbiAgICAgICAgICAgIGV4cC5jb250ZW50ICE9PSBicmFuY2hFeHAuY29udGVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gZ2V0UGFyZW50Q29uZGl0aW9uKG5vZGUpIHtcclxuICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgaWYgKG5vZGUudHlwZSA9PT0gMTkgLyogSlNfQ09ORElUSU9OQUxfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgICAgICBpZiAobm9kZS5hbHRlcm5hdGUudHlwZSA9PT0gMTkgLyogSlNfQ09ORElUSU9OQUxfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUuYWx0ZXJuYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobm9kZS50eXBlID09PSAyMCAvKiBKU19DQUNIRV9FWFBSRVNTSU9OICovKSB7XHJcbiAgICAgICAgICAgIG5vZGUgPSBub2RlLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5jb25zdCB0cmFuc2Zvcm1Gb3IgPSBjcmVhdGVTdHJ1Y3R1cmFsRGlyZWN0aXZlVHJhbnNmb3JtKCdmb3InLCAobm9kZSwgZGlyLCBjb250ZXh0KSA9PiB7XHJcbiAgICBjb25zdCB7IGhlbHBlciwgcmVtb3ZlSGVscGVyIH0gPSBjb250ZXh0O1xyXG4gICAgcmV0dXJuIHByb2Nlc3NGb3Iobm9kZSwgZGlyLCBjb250ZXh0LCBmb3JOb2RlID0+IHtcclxuICAgICAgICAvLyBjcmVhdGUgdGhlIGxvb3AgcmVuZGVyIGZ1bmN0aW9uIGV4cHJlc3Npb24gbm93LCBhbmQgYWRkIHRoZVxyXG4gICAgICAgIC8vIGl0ZXJhdG9yIG9uIGV4aXQgYWZ0ZXIgYWxsIGNoaWxkcmVuIGhhdmUgYmVlbiB0cmF2ZXJzZWRcclxuICAgICAgICBjb25zdCByZW5kZXJFeHAgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihoZWxwZXIoUkVOREVSX0xJU1QpLCBbXHJcbiAgICAgICAgICAgIGZvck5vZGUuc291cmNlXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgY29uc3QgaXNUZW1wbGF0ZSA9IGlzVGVtcGxhdGVOb2RlKG5vZGUpO1xyXG4gICAgICAgIGNvbnN0IG1lbW8gPSBmaW5kRGlyKG5vZGUsICdtZW1vJyk7XHJcbiAgICAgICAgY29uc3Qga2V5UHJvcCA9IGZpbmRQcm9wKG5vZGUsIGBrZXlgKTtcclxuICAgICAgICBjb25zdCBrZXlFeHAgPSBrZXlQcm9wICYmXHJcbiAgICAgICAgICAgIChrZXlQcm9wLnR5cGUgPT09IDYgLyogQVRUUklCVVRFICovXHJcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oa2V5UHJvcC52YWx1ZS5jb250ZW50LCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgOiBrZXlQcm9wLmV4cCk7XHJcbiAgICAgICAgY29uc3Qga2V5UHJvcGVydHkgPSBrZXlQcm9wID8gY3JlYXRlT2JqZWN0UHJvcGVydHkoYGtleWAsIGtleUV4cCkgOiBudWxsO1xyXG4gICAgICAgIGNvbnN0IGlzU3RhYmxlRnJhZ21lbnQgPSBmb3JOb2RlLnNvdXJjZS50eXBlID09PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovICYmXHJcbiAgICAgICAgICAgIGZvck5vZGUuc291cmNlLmNvbnN0VHlwZSA+IDAgLyogTk9UX0NPTlNUQU5UICovO1xyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50RmxhZyA9IGlzU3RhYmxlRnJhZ21lbnRcclxuICAgICAgICAgICAgPyA2NCAvKiBTVEFCTEVfRlJBR01FTlQgKi9cclxuICAgICAgICAgICAgOiBrZXlQcm9wXHJcbiAgICAgICAgICAgICAgICA/IDEyOCAvKiBLRVlFRF9GUkFHTUVOVCAqL1xyXG4gICAgICAgICAgICAgICAgOiAyNTYgLyogVU5LRVlFRF9GUkFHTUVOVCAqLztcclxuICAgICAgICBmb3JOb2RlLmNvZGVnZW5Ob2RlID0gY3JlYXRlVk5vZGVDYWxsKGNvbnRleHQsIGhlbHBlcihGUkFHTUVOVCksIHVuZGVmaW5lZCwgcmVuZGVyRXhwLCBmcmFnbWVudEZsYWcgK1xyXG4gICAgICAgICAgICAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYCAvKiAke1BhdGNoRmxhZ05hbWVzW2ZyYWdtZW50RmxhZ119ICovYCA6IGBgKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUgLyogaXNCbG9jayAqLywgIWlzU3RhYmxlRnJhZ21lbnQgLyogZGlzYWJsZVRyYWNraW5nICovLCBmYWxzZSAvKiBpc0NvbXBvbmVudCAqLywgbm9kZS5sb2MpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGZpbmlzaCB0aGUgY29kZWdlbiBub3cgdGhhdCBhbGwgY2hpbGRyZW4gaGF2ZSBiZWVuIHRyYXZlcnNlZFxyXG4gICAgICAgICAgICBsZXQgY2hpbGRCbG9jaztcclxuICAgICAgICAgICAgY29uc3QgeyBjaGlsZHJlbiB9ID0gZm9yTm9kZTtcclxuICAgICAgICAgICAgLy8gY2hlY2sgPHRlbXBsYXRlIHYtZm9yPiBrZXkgcGxhY2VtZW50XHJcbiAgICAgICAgICAgIGlmICgoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8ICF0cnVlKSAmJiBpc1RlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuLnNvbWUoYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMudHlwZSA9PT0gMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGZpbmRQcm9wKGMsICdrZXknKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzMgLyogWF9WX0ZPUl9URU1QTEFURV9LRVlfUExBQ0VNRU5UICovLCBrZXkubG9jKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5lZWRGcmFnbWVudFdyYXBwZXIgPSBjaGlsZHJlbi5sZW5ndGggIT09IDEgfHwgY2hpbGRyZW5bMF0udHlwZSAhPT0gMSAvKiBFTEVNRU5UICovO1xyXG4gICAgICAgICAgICBjb25zdCBzbG90T3V0bGV0ID0gaXNTbG90T3V0bGV0KG5vZGUpXHJcbiAgICAgICAgICAgICAgICA/IG5vZGVcclxuICAgICAgICAgICAgICAgIDogaXNUZW1wbGF0ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXHJcbiAgICAgICAgICAgICAgICAgICAgaXNTbG90T3V0bGV0KG5vZGUuY2hpbGRyZW5bMF0pXHJcbiAgICAgICAgICAgICAgICAgICAgPyBub2RlLmNoaWxkcmVuWzBdIC8vIGFwaS1leHRyYWN0b3Igc29tZWhvdyBmYWlscyB0byBpbmZlciB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoc2xvdE91dGxldCkge1xyXG4gICAgICAgICAgICAgICAgLy8gPHNsb3Qgdi1mb3I9XCIuLi5cIj4gb3IgPHRlbXBsYXRlIHYtZm9yPVwiLi4uXCI+PHNsb3QvPjwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgICAgICBjaGlsZEJsb2NrID0gc2xvdE91dGxldC5jb2RlZ2VuTm9kZTtcclxuICAgICAgICAgICAgICAgIGlmIChpc1RlbXBsYXRlICYmIGtleVByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gPHRlbXBsYXRlIHYtZm9yPVwiLi4uXCIgOmtleT1cIi4uLlwiPjxzbG90Lz48L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gaW5qZWN0IHRoZSBrZXkgdG8gdGhlIHJlbmRlclNsb3QoKSBjYWxsLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBwcm9wcyBmb3IgcmVuZGVyU2xvdCBpcyBwYXNzZWQgYXMgdGhlIDNyZCBhcmd1bWVudC5cclxuICAgICAgICAgICAgICAgICAgICBpbmplY3RQcm9wKGNoaWxkQmxvY2ssIGtleVByb3BlcnR5LCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChuZWVkRnJhZ21lbnRXcmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICAvLyA8dGVtcGxhdGUgdi1mb3I9XCIuLi5cIj4gd2l0aCB0ZXh0IG9yIG11bHRpLWVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgZ2VuZXJhdGUgYSBmcmFnbWVudCBibG9jayBmb3IgZWFjaCBsb29wXHJcbiAgICAgICAgICAgICAgICBjaGlsZEJsb2NrID0gY3JlYXRlVk5vZGVDYWxsKGNvbnRleHQsIGhlbHBlcihGUkFHTUVOVCksIGtleVByb3BlcnR5ID8gY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihba2V5UHJvcGVydHldKSA6IHVuZGVmaW5lZCwgbm9kZS5jaGlsZHJlbiwgNjQgLyogU1RBQkxFX0ZSQUdNRU5UICovICtcclxuICAgICAgICAgICAgICAgICAgICAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYCAvKiAke1BhdGNoRmxhZ05hbWVzWzY0IC8qIFNUQUJMRV9GUkFHTUVOVCAqL119ICovYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGBgKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUsIHVuZGVmaW5lZCwgZmFsc2UgLyogaXNDb21wb25lbnQgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gTm9ybWFsIGVsZW1lbnQgdi1mb3IuIERpcmVjdGx5IHVzZSB0aGUgY2hpbGQncyBjb2RlZ2VuTm9kZVxyXG4gICAgICAgICAgICAgICAgLy8gYnV0IG1hcmsgaXQgYXMgYSBibG9jay5cclxuICAgICAgICAgICAgICAgIGNoaWxkQmxvY2sgPSBjaGlsZHJlblswXVxyXG4gICAgICAgICAgICAgICAgICAgIC5jb2RlZ2VuTm9kZTtcclxuICAgICAgICAgICAgICAgIGlmIChpc1RlbXBsYXRlICYmIGtleVByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5qZWN0UHJvcChjaGlsZEJsb2NrLCBrZXlQcm9wZXJ0eSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRCbG9jay5pc0Jsb2NrICE9PSAhaXNTdGFibGVGcmFnbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZEJsb2NrLmlzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3dpdGNoIGZyb20gYmxvY2sgdG8gdm5vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlSGVscGVyKE9QRU5fQkxPQ0spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVIZWxwZXIoZ2V0Vk5vZGVCbG9ja0hlbHBlcihjb250ZXh0LmluU1NSLCBjaGlsZEJsb2NrLmlzQ29tcG9uZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzd2l0Y2ggZnJvbSB2bm9kZSB0byBibG9ja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVIZWxwZXIoZ2V0Vk5vZGVIZWxwZXIoY29udGV4dC5pblNTUiwgY2hpbGRCbG9jay5pc0NvbXBvbmVudCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoaWxkQmxvY2suaXNCbG9jayA9ICFpc1N0YWJsZUZyYWdtZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkQmxvY2suaXNCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlbHBlcihPUEVOX0JMT0NLKTtcclxuICAgICAgICAgICAgICAgICAgICBoZWxwZXIoZ2V0Vk5vZGVCbG9ja0hlbHBlcihjb250ZXh0LmluU1NSLCBjaGlsZEJsb2NrLmlzQ29tcG9uZW50KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWxwZXIoZ2V0Vk5vZGVIZWxwZXIoY29udGV4dC5pblNTUiwgY2hpbGRCbG9jay5pc0NvbXBvbmVudCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChtZW1vKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsb29wID0gY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKGNyZWF0ZUZvckxvb3BQYXJhbXMoZm9yTm9kZS5wYXJzZVJlc3VsdCwgW1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYF9jYWNoZWRgKVxyXG4gICAgICAgICAgICAgICAgXSkpO1xyXG4gICAgICAgICAgICAgICAgbG9vcC5ib2R5ID0gY3JlYXRlQmxvY2tTdGF0ZW1lbnQoW1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbYGNvbnN0IF9tZW1vID0gKGAsIG1lbW8uZXhwLCBgKWBdKSxcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBgaWYgKF9jYWNoZWRgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4oa2V5RXhwID8gW2AgJiYgX2NhY2hlZC5rZXkgPT09IGAsIGtleUV4cF0gOiBbXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGAgJiYgJHtjb250ZXh0LmhlbHBlclN0cmluZyhJU19NRU1PX1NBTUUpfShfY2FjaGVkLCBfbWVtbykpIHJldHVybiBfY2FjaGVkYFxyXG4gICAgICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbYGNvbnN0IF9pdGVtID0gYCwgY2hpbGRCbG9ja10pLFxyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYF9pdGVtLm1lbW8gPSBfbWVtb2ApLFxyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHJldHVybiBfaXRlbWApXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgIHJlbmRlckV4cC5hcmd1bWVudHMucHVzaChsb29wLCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBfY2FjaGVgKSwgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihTdHJpbmcoY29udGV4dC5jYWNoZWQrKykpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckV4cC5hcmd1bWVudHMucHVzaChjcmVhdGVGdW5jdGlvbkV4cHJlc3Npb24oY3JlYXRlRm9yTG9vcFBhcmFtcyhmb3JOb2RlLnBhcnNlUmVzdWx0KSwgY2hpbGRCbG9jaywgdHJ1ZSAvKiBmb3JjZSBuZXdsaW5lICovKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbn0pO1xyXG4vLyB0YXJnZXQtYWdub3N0aWMgdHJhbnNmb3JtIHVzZWQgZm9yIGJvdGggQ2xpZW50IGFuZCBTU1JcclxuZnVuY3Rpb24gcHJvY2Vzc0Zvcihub2RlLCBkaXIsIGNvbnRleHQsIHByb2Nlc3NDb2RlZ2VuKSB7XHJcbiAgICBpZiAoIWRpci5leHApIHtcclxuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcigzMSAvKiBYX1ZfRk9SX05PX0VYUFJFU1NJT04gKi8sIGRpci5sb2MpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXJzZVJlc3VsdCA9IHBhcnNlRm9yRXhwcmVzc2lvbihcclxuICAgIC8vIGNhbiBvbmx5IGJlIHNpbXBsZSBleHByZXNzaW9uIGJlY2F1c2UgdkZvciB0cmFuc2Zvcm0gaXMgYXBwbGllZFxyXG4gICAgLy8gYmVmb3JlIGV4cHJlc3Npb24gdHJhbnNmb3JtLlxyXG4gICAgZGlyLmV4cCwgY29udGV4dCk7XHJcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSB7XHJcbiAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzIgLyogWF9WX0ZPUl9NQUxGT1JNRURfRVhQUkVTU0lPTiAqLywgZGlyLmxvYykpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgYWRkSWRlbnRpZmllcnMsIHJlbW92ZUlkZW50aWZpZXJzLCBzY29wZXMgfSA9IGNvbnRleHQ7XHJcbiAgICBjb25zdCB7IHNvdXJjZSwgdmFsdWUsIGtleSwgaW5kZXggfSA9IHBhcnNlUmVzdWx0O1xyXG4gICAgY29uc3QgZm9yTm9kZSA9IHtcclxuICAgICAgICB0eXBlOiAxMSAvKiBGT1IgKi8sXHJcbiAgICAgICAgbG9jOiBkaXIubG9jLFxyXG4gICAgICAgIHNvdXJjZSxcclxuICAgICAgICB2YWx1ZUFsaWFzOiB2YWx1ZSxcclxuICAgICAgICBrZXlBbGlhczoga2V5LFxyXG4gICAgICAgIG9iamVjdEluZGV4QWxpYXM6IGluZGV4LFxyXG4gICAgICAgIHBhcnNlUmVzdWx0LFxyXG4gICAgICAgIGNoaWxkcmVuOiBpc1RlbXBsYXRlTm9kZShub2RlKSA/IG5vZGUuY2hpbGRyZW4gOiBbbm9kZV1cclxuICAgIH07XHJcbiAgICBjb250ZXh0LnJlcGxhY2VOb2RlKGZvck5vZGUpO1xyXG4gICAgLy8gYm9va2tlZXBpbmdcclxuICAgIHNjb3Blcy52Rm9yKys7XHJcbiAgICBjb25zdCBvbkV4aXQgPSBwcm9jZXNzQ29kZWdlbiAmJiBwcm9jZXNzQ29kZWdlbihmb3JOb2RlKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgc2NvcGVzLnZGb3ItLTtcclxuICAgICAgICBpZiAob25FeGl0KVxyXG4gICAgICAgICAgICBvbkV4aXQoKTtcclxuICAgIH07XHJcbn1cclxuY29uc3QgZm9yQWxpYXNSRSA9IC8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLztcclxuLy8gVGhpcyByZWdleCBkb2Vzbid0IGNvdmVyIHRoZSBjYXNlIGlmIGtleSBvciBpbmRleCBhbGlhc2VzIGhhdmUgZGVzdHJ1Y3R1cmluZyxcclxuLy8gYnV0IHRob3NlIGRvIG5vdCBtYWtlIHNlbnNlIGluIHRoZSBmaXJzdCBwbGFjZSwgc28gdGhpcyB3b3JrcyBpbiBwcmFjdGljZS5cclxuY29uc3QgZm9ySXRlcmF0b3JSRSA9IC8sKFteLFxcfVxcXV0qKSg/OiwoW14sXFx9XFxdXSopKT8kLztcclxuY29uc3Qgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcclxuZnVuY3Rpb24gcGFyc2VGb3JFeHByZXNzaW9uKGlucHV0LCBjb250ZXh0KSB7XHJcbiAgICBjb25zdCBsb2MgPSBpbnB1dC5sb2M7XHJcbiAgICBjb25zdCBleHAgPSBpbnB1dC5jb250ZW50O1xyXG4gICAgY29uc3QgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcclxuICAgIGlmICghaW5NYXRjaClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBjb25zdCBbLCBMSFMsIFJIU10gPSBpbk1hdGNoO1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgICAgIHNvdXJjZTogY3JlYXRlQWxpYXNFeHByZXNzaW9uKGxvYywgUkhTLnRyaW0oKSwgZXhwLmluZGV4T2YoUkhTLCBMSFMubGVuZ3RoKSksXHJcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcclxuICAgICAgICBrZXk6IHVuZGVmaW5lZCxcclxuICAgICAgICBpbmRleDogdW5kZWZpbmVkXHJcbiAgICB9O1xyXG4gICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiB0cnVlKSB7XHJcbiAgICAgICAgdmFsaWRhdGVCcm93c2VyRXhwcmVzc2lvbihyZXN1bHQuc291cmNlLCBjb250ZXh0KTtcclxuICAgIH1cclxuICAgIGxldCB2YWx1ZUNvbnRlbnQgPSBMSFMudHJpbSgpLnJlcGxhY2Uoc3RyaXBQYXJlbnNSRSwgJycpLnRyaW0oKTtcclxuICAgIGNvbnN0IHRyaW1tZWRPZmZzZXQgPSBMSFMuaW5kZXhPZih2YWx1ZUNvbnRlbnQpO1xyXG4gICAgY29uc3QgaXRlcmF0b3JNYXRjaCA9IHZhbHVlQ29udGVudC5tYXRjaChmb3JJdGVyYXRvclJFKTtcclxuICAgIGlmIChpdGVyYXRvck1hdGNoKSB7XHJcbiAgICAgICAgdmFsdWVDb250ZW50ID0gdmFsdWVDb250ZW50LnJlcGxhY2UoZm9ySXRlcmF0b3JSRSwgJycpLnRyaW0oKTtcclxuICAgICAgICBjb25zdCBrZXlDb250ZW50ID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XHJcbiAgICAgICAgbGV0IGtleU9mZnNldDtcclxuICAgICAgICBpZiAoa2V5Q29udGVudCkge1xyXG4gICAgICAgICAgICBrZXlPZmZzZXQgPSBleHAuaW5kZXhPZihrZXlDb250ZW50LCB0cmltbWVkT2Zmc2V0ICsgdmFsdWVDb250ZW50Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBjcmVhdGVBbGlhc0V4cHJlc3Npb24obG9jLCBrZXlDb250ZW50LCBrZXlPZmZzZXQpO1xyXG4gICAgICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24ocmVzdWx0LmtleSwgY29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXhDb250ZW50ID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleENvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5pbmRleCA9IGNyZWF0ZUFsaWFzRXhwcmVzc2lvbihsb2MsIGluZGV4Q29udGVudCwgZXhwLmluZGV4T2YoaW5kZXhDb250ZW50LCByZXN1bHQua2V5XHJcbiAgICAgICAgICAgICAgICAgICAgPyBrZXlPZmZzZXQgKyBrZXlDb250ZW50Lmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICAgIDogdHJpbW1lZE9mZnNldCArIHZhbHVlQ29udGVudC5sZW5ndGgpKTtcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQnJvd3NlckV4cHJlc3Npb24ocmVzdWx0LmluZGV4LCBjb250ZXh0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh2YWx1ZUNvbnRlbnQpIHtcclxuICAgICAgICByZXN1bHQudmFsdWUgPSBjcmVhdGVBbGlhc0V4cHJlc3Npb24obG9jLCB2YWx1ZUNvbnRlbnQsIHRyaW1tZWRPZmZzZXQpO1xyXG4gICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgdHJ1ZSkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUJyb3dzZXJFeHByZXNzaW9uKHJlc3VsdC52YWx1ZSwgY29udGV4dCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVBbGlhc0V4cHJlc3Npb24ocmFuZ2UsIGNvbnRlbnQsIG9mZnNldCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oY29udGVudCwgZmFsc2UsIGdldElubmVyUmFuZ2UocmFuZ2UsIG9mZnNldCwgY29udGVudC5sZW5ndGgpKTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVGb3JMb29wUGFyYW1zKHsgdmFsdWUsIGtleSwgaW5kZXggfSwgbWVtb0FyZ3MgPSBbXSkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZVBhcmFtc0xpc3QoW3ZhbHVlLCBrZXksIGluZGV4LCAuLi5tZW1vQXJnc10pO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVBhcmFtc0xpc3QoYXJncykge1xyXG4gICAgbGV0IGkgPSBhcmdzLmxlbmd0aDtcclxuICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICBpZiAoYXJnc1tpXSlcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJnc1xyXG4gICAgICAgIC5zbGljZSgwLCBpICsgMSlcclxuICAgICAgICAubWFwKChhcmcsIGkpID0+IGFyZyB8fCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBfYC5yZXBlYXQoaSArIDEpLCBmYWxzZSkpO1xyXG59XG5cbmNvbnN0IGRlZmF1bHRGYWxsYmFjayA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHVuZGVmaW5lZGAsIGZhbHNlKTtcclxuLy8gQSBOb2RlVHJhbnNmb3JtIHRoYXQ6XHJcbi8vIDEuIFRyYWNrcyBzY29wZSBpZGVudGlmaWVycyBmb3Igc2NvcGVkIHNsb3RzIHNvIHRoYXQgdGhleSBkb24ndCBnZXQgcHJlZml4ZWRcclxuLy8gICAgYnkgdHJhbnNmb3JtRXhwcmVzc2lvbi4gVGhpcyBpcyBvbmx5IGFwcGxpZWQgaW4gbm9uLWJyb3dzZXIgYnVpbGRzIHdpdGhcclxuLy8gICAgeyBwcmVmaXhJZGVudGlmaWVyczogdHJ1ZSB9LlxyXG4vLyAyLiBUcmFjayB2LXNsb3QgZGVwdGhzIHNvIHRoYXQgd2Uga25vdyBhIHNsb3QgaXMgaW5zaWRlIGFub3RoZXIgc2xvdC5cclxuLy8gICAgTm90ZSB0aGUgZXhpdCBjYWxsYmFjayBpcyBleGVjdXRlZCBiZWZvcmUgYnVpbGRTbG90cygpIG9uIHRoZSBzYW1lIG5vZGUsXHJcbi8vICAgIHNvIG9ubHkgbmVzdGVkIHNsb3RzIHNlZSBwb3NpdGl2ZSBudW1iZXJzLlxyXG5jb25zdCB0cmFja1Nsb3RTY29wZXMgPSAobm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMSAvKiBFTEVNRU5UICovICYmXHJcbiAgICAgICAgKG5vZGUudGFnVHlwZSA9PT0gMSAvKiBDT01QT05FTlQgKi8gfHxcclxuICAgICAgICAgICAgbm9kZS50YWdUeXBlID09PSAzIC8qIFRFTVBMQVRFICovKSkge1xyXG4gICAgICAgIC8vIFdlIGFyZSBvbmx5IGNoZWNraW5nIG5vbi1lbXB0eSB2LXNsb3QgaGVyZVxyXG4gICAgICAgIC8vIHNpbmNlIHdlIG9ubHkgY2FyZSBhYm91dCBzbG90cyB0aGF0IGludHJvZHVjZSBzY29wZSB2YXJpYWJsZXMuXHJcbiAgICAgICAgY29uc3QgdlNsb3QgPSBmaW5kRGlyKG5vZGUsICdzbG90Jyk7XHJcbiAgICAgICAgaWYgKHZTbG90KSB7XHJcbiAgICAgICAgICAgIHZTbG90LmV4cDtcclxuICAgICAgICAgICAgY29udGV4dC5zY29wZXMudlNsb3QrKztcclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2NvcGVzLnZTbG90LS07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4vLyBBIE5vZGVUcmFuc2Zvcm0gdGhhdCB0cmFja3Mgc2NvcGUgaWRlbnRpZmllcnMgZm9yIHNjb3BlZCBzbG90cyB3aXRoIHYtZm9yLlxyXG4vLyBUaGlzIHRyYW5zZm9ybSBpcyBvbmx5IGFwcGxpZWQgaW4gbm9uLWJyb3dzZXIgYnVpbGRzIHdpdGggeyBwcmVmaXhJZGVudGlmaWVyczogdHJ1ZSB9XHJcbmNvbnN0IHRyYWNrVkZvclNsb3RTY29wZXMgPSAobm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgbGV0IHZGb3I7XHJcbiAgICBpZiAoaXNUZW1wbGF0ZU5vZGUobm9kZSkgJiZcclxuICAgICAgICBub2RlLnByb3BzLnNvbWUoaXNWU2xvdCkgJiZcclxuICAgICAgICAodkZvciA9IGZpbmREaXIobm9kZSwgJ2ZvcicpKSkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9ICh2Rm9yLnBhcnNlUmVzdWx0ID0gcGFyc2VGb3JFeHByZXNzaW9uKHZGb3IuZXhwLCBjb250ZXh0KSk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBrZXksIGluZGV4IH0gPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgYWRkSWRlbnRpZmllcnMsIHJlbW92ZUlkZW50aWZpZXJzIH0gPSBjb250ZXh0O1xyXG4gICAgICAgICAgICB2YWx1ZSAmJiBhZGRJZGVudGlmaWVycyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIGtleSAmJiBhZGRJZGVudGlmaWVycyhrZXkpO1xyXG4gICAgICAgICAgICBpbmRleCAmJiBhZGRJZGVudGlmaWVycyhpbmRleCk7XHJcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSAmJiByZW1vdmVJZGVudGlmaWVycyh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBrZXkgJiYgcmVtb3ZlSWRlbnRpZmllcnMoa2V5KTtcclxuICAgICAgICAgICAgICAgIGluZGV4ICYmIHJlbW92ZUlkZW50aWZpZXJzKGluZGV4KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGJ1aWxkQ2xpZW50U2xvdEZuID0gKHByb3BzLCBjaGlsZHJlbiwgbG9jKSA9PiBjcmVhdGVGdW5jdGlvbkV4cHJlc3Npb24ocHJvcHMsIGNoaWxkcmVuLCBmYWxzZSAvKiBuZXdsaW5lICovLCB0cnVlIC8qIGlzU2xvdCAqLywgY2hpbGRyZW4ubGVuZ3RoID8gY2hpbGRyZW5bMF0ubG9jIDogbG9jKTtcclxuLy8gSW5zdGVhZCBvZiBiZWluZyBhIERpcmVjdGl2ZVRyYW5zZm9ybSwgdi1zbG90IHByb2Nlc3NpbmcgaXMgY2FsbGVkIGR1cmluZ1xyXG4vLyB0cmFuc2Zvcm1FbGVtZW50IHRvIGJ1aWxkIHRoZSBzbG90cyBvYmplY3QgZm9yIGEgY29tcG9uZW50LlxyXG5mdW5jdGlvbiBidWlsZFNsb3RzKG5vZGUsIGNvbnRleHQsIGJ1aWxkU2xvdEZuID0gYnVpbGRDbGllbnRTbG90Rm4pIHtcclxuICAgIGNvbnRleHQuaGVscGVyKFdJVEhfQ1RYKTtcclxuICAgIGNvbnN0IHsgY2hpbGRyZW4sIGxvYyB9ID0gbm9kZTtcclxuICAgIGNvbnN0IHNsb3RzUHJvcGVydGllcyA9IFtdO1xyXG4gICAgY29uc3QgZHluYW1pY1Nsb3RzID0gW107XHJcbiAgICAvLyBJZiB0aGUgc2xvdCBpcyBpbnNpZGUgYSB2LWZvciBvciBhbm90aGVyIHYtc2xvdCwgZm9yY2UgaXQgdG8gYmUgZHluYW1pY1xyXG4gICAgLy8gc2luY2UgaXQgbGlrZWx5IHVzZXMgYSBzY29wZSB2YXJpYWJsZS5cclxuICAgIGxldCBoYXNEeW5hbWljU2xvdHMgPSBjb250ZXh0LnNjb3Blcy52U2xvdCA+IDAgfHwgY29udGV4dC5zY29wZXMudkZvciA+IDA7XHJcbiAgICAvLyAxLiBDaGVjayBmb3Igc2xvdCB3aXRoIHNsb3RQcm9wcyBvbiBjb21wb25lbnQgaXRzZWxmLlxyXG4gICAgLy8gICAgPENvbXAgdi1zbG90PVwieyBwcm9wIH1cIi8+XHJcbiAgICBjb25zdCBvbkNvbXBvbmVudFNsb3QgPSBmaW5kRGlyKG5vZGUsICdzbG90JywgdHJ1ZSk7XHJcbiAgICBpZiAob25Db21wb25lbnRTbG90KSB7XHJcbiAgICAgICAgY29uc3QgeyBhcmcsIGV4cCB9ID0gb25Db21wb25lbnRTbG90O1xyXG4gICAgICAgIGlmIChhcmcgJiYgIWlzU3RhdGljRXhwKGFyZykpIHtcclxuICAgICAgICAgICAgaGFzRHluYW1pY1Nsb3RzID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2xvdHNQcm9wZXJ0aWVzLnB1c2goY3JlYXRlT2JqZWN0UHJvcGVydHkoYXJnIHx8IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oJ2RlZmF1bHQnLCB0cnVlKSwgYnVpbGRTbG90Rm4oZXhwLCBjaGlsZHJlbiwgbG9jKSkpO1xyXG4gICAgfVxyXG4gICAgLy8gMi4gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkcmVuIGFuZCBjaGVjayBmb3IgdGVtcGxhdGUgc2xvdHNcclxuICAgIC8vICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vPVwieyBwcm9wIH1cIj5cclxuICAgIGxldCBoYXNUZW1wbGF0ZVNsb3RzID0gZmFsc2U7XHJcbiAgICBsZXQgaGFzTmFtZWREZWZhdWx0U2xvdCA9IGZhbHNlO1xyXG4gICAgY29uc3QgaW1wbGljaXREZWZhdWx0Q2hpbGRyZW4gPSBbXTtcclxuICAgIGNvbnN0IHNlZW5TbG90TmFtZXMgPSBuZXcgU2V0KCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgc2xvdEVsZW1lbnQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICBsZXQgc2xvdERpcjtcclxuICAgICAgICBpZiAoIWlzVGVtcGxhdGVOb2RlKHNsb3RFbGVtZW50KSB8fFxyXG4gICAgICAgICAgICAhKHNsb3REaXIgPSBmaW5kRGlyKHNsb3RFbGVtZW50LCAnc2xvdCcsIHRydWUpKSkge1xyXG4gICAgICAgICAgICAvLyBub3QgYSA8dGVtcGxhdGUgdi1zbG90Piwgc2tpcC5cclxuICAgICAgICAgICAgaWYgKHNsb3RFbGVtZW50LnR5cGUgIT09IDMgLyogQ09NTUVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgaW1wbGljaXREZWZhdWx0Q2hpbGRyZW4ucHVzaChzbG90RWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvbkNvbXBvbmVudFNsb3QpIHtcclxuICAgICAgICAgICAgLy8gYWxyZWFkeSBoYXMgb24tY29tcG9uZW50IHNsb3QgLSB0aGlzIGlzIGluY29ycmVjdCB1c2FnZS5cclxuICAgICAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzcgLyogWF9WX1NMT1RfTUlYRURfU0xPVF9VU0FHRSAqLywgc2xvdERpci5sb2MpKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhhc1RlbXBsYXRlU2xvdHMgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IHsgY2hpbGRyZW46IHNsb3RDaGlsZHJlbiwgbG9jOiBzbG90TG9jIH0gPSBzbG90RWxlbWVudDtcclxuICAgICAgICBjb25zdCB7IGFyZzogc2xvdE5hbWUgPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGBkZWZhdWx0YCwgdHJ1ZSksIGV4cDogc2xvdFByb3BzLCBsb2M6IGRpckxvYyB9ID0gc2xvdERpcjtcclxuICAgICAgICAvLyBjaGVjayBpZiBuYW1lIGlzIGR5bmFtaWMuXHJcbiAgICAgICAgbGV0IHN0YXRpY1Nsb3ROYW1lO1xyXG4gICAgICAgIGlmIChpc1N0YXRpY0V4cChzbG90TmFtZSkpIHtcclxuICAgICAgICAgICAgc3RhdGljU2xvdE5hbWUgPSBzbG90TmFtZSA/IHNsb3ROYW1lLmNvbnRlbnQgOiBgZGVmYXVsdGA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoYXNEeW5hbWljU2xvdHMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzbG90RnVuY3Rpb24gPSBidWlsZFNsb3RGbihzbG90UHJvcHMsIHNsb3RDaGlsZHJlbiwgc2xvdExvYyk7XHJcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBzbG90IGlzIGNvbmRpdGlvbmFsICh2LWlmL3YtZm9yKVxyXG4gICAgICAgIGxldCB2SWY7XHJcbiAgICAgICAgbGV0IHZFbHNlO1xyXG4gICAgICAgIGxldCB2Rm9yO1xyXG4gICAgICAgIGlmICgodklmID0gZmluZERpcihzbG90RWxlbWVudCwgJ2lmJykpKSB7XHJcbiAgICAgICAgICAgIGhhc0R5bmFtaWNTbG90cyA9IHRydWU7XHJcbiAgICAgICAgICAgIGR5bmFtaWNTbG90cy5wdXNoKGNyZWF0ZUNvbmRpdGlvbmFsRXhwcmVzc2lvbih2SWYuZXhwLCBidWlsZER5bmFtaWNTbG90KHNsb3ROYW1lLCBzbG90RnVuY3Rpb24pLCBkZWZhdWx0RmFsbGJhY2spKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKHZFbHNlID0gZmluZERpcihzbG90RWxlbWVudCwgL15lbHNlKC1pZik/JC8sIHRydWUgLyogYWxsb3dFbXB0eSAqLykpKSB7XHJcbiAgICAgICAgICAgIC8vIGZpbmQgYWRqYWNlbnQgdi1pZlxyXG4gICAgICAgICAgICBsZXQgaiA9IGk7XHJcbiAgICAgICAgICAgIGxldCBwcmV2O1xyXG4gICAgICAgICAgICB3aGlsZSAoai0tKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2ID0gY2hpbGRyZW5bal07XHJcbiAgICAgICAgICAgICAgICBpZiAocHJldi50eXBlICE9PSAzIC8qIENPTU1FTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHJldiAmJiBpc1RlbXBsYXRlTm9kZShwcmV2KSAmJiBmaW5kRGlyKHByZXYsICdpZicpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgbm9kZVxyXG4gICAgICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICAgICAgLy8gYXR0YWNoIHRoaXMgc2xvdCB0byBwcmV2aW91cyBjb25kaXRpb25hbFxyXG4gICAgICAgICAgICAgICAgbGV0IGNvbmRpdGlvbmFsID0gZHluYW1pY1Nsb3RzW2R5bmFtaWNTbG90cy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjb25kaXRpb25hbC5hbHRlcm5hdGUudHlwZSA9PT0gMTkgLyogSlNfQ09ORElUSU9OQUxfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbmFsID0gY29uZGl0aW9uYWwuYWx0ZXJuYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uYWwuYWx0ZXJuYXRlID0gdkVsc2UuZXhwXHJcbiAgICAgICAgICAgICAgICAgICAgPyBjcmVhdGVDb25kaXRpb25hbEV4cHJlc3Npb24odkVsc2UuZXhwLCBidWlsZER5bmFtaWNTbG90KHNsb3ROYW1lLCBzbG90RnVuY3Rpb24pLCBkZWZhdWx0RmFsbGJhY2spXHJcbiAgICAgICAgICAgICAgICAgICAgOiBidWlsZER5bmFtaWNTbG90KHNsb3ROYW1lLCBzbG90RnVuY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzAgLyogWF9WX0VMU0VfTk9fQURKQUNFTlRfSUYgKi8sIHZFbHNlLmxvYykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCh2Rm9yID0gZmluZERpcihzbG90RWxlbWVudCwgJ2ZvcicpKSkge1xyXG4gICAgICAgICAgICBoYXNEeW5hbWljU2xvdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBwYXJzZVJlc3VsdCA9IHZGb3IucGFyc2VSZXN1bHQgfHxcclxuICAgICAgICAgICAgICAgIHBhcnNlRm9yRXhwcmVzc2lvbih2Rm9yLmV4cCwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZVJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVuZGVyIHRoZSBkeW5hbWljIHNsb3RzIGFzIGFuIGFycmF5IGFuZCBhZGQgaXQgdG8gdGhlIGNyZWF0ZVNsb3QoKVxyXG4gICAgICAgICAgICAgICAgLy8gYXJncy4gVGhlIHJ1bnRpbWUga25vd3MgaG93IHRvIGhhbmRsZSBpdCBhcHByb3ByaWF0ZWx5LlxyXG4gICAgICAgICAgICAgICAgZHluYW1pY1Nsb3RzLnB1c2goY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoUkVOREVSX0xJU1QpLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VSZXN1bHQuc291cmNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbihjcmVhdGVGb3JMb29wUGFyYW1zKHBhcnNlUmVzdWx0KSwgYnVpbGREeW5hbWljU2xvdChzbG90TmFtZSwgc2xvdEZ1bmN0aW9uKSwgdHJ1ZSAvKiBmb3JjZSBuZXdsaW5lICovKVxyXG4gICAgICAgICAgICAgICAgXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzIgLyogWF9WX0ZPUl9NQUxGT1JNRURfRVhQUkVTU0lPTiAqLywgdkZvci5sb2MpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgZHVwbGljYXRlIHN0YXRpYyBuYW1lc1xyXG4gICAgICAgICAgICBpZiAoc3RhdGljU2xvdE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzZWVuU2xvdE5hbWVzLmhhcyhzdGF0aWNTbG90TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcigzOCAvKiBYX1ZfU0xPVF9EVVBMSUNBVEVfU0xPVF9OQU1FUyAqLywgZGlyTG9jKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWVuU2xvdE5hbWVzLmFkZChzdGF0aWNTbG90TmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGljU2xvdE5hbWUgPT09ICdkZWZhdWx0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc05hbWVkRGVmYXVsdFNsb3QgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNsb3RzUHJvcGVydGllcy5wdXNoKGNyZWF0ZU9iamVjdFByb3BlcnR5KHNsb3ROYW1lLCBzbG90RnVuY3Rpb24pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIW9uQ29tcG9uZW50U2xvdCkge1xyXG4gICAgICAgIGNvbnN0IGJ1aWxkRGVmYXVsdFNsb3RQcm9wZXJ0eSA9IChwcm9wcywgY2hpbGRyZW4pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZm4gPSBidWlsZFNsb3RGbihwcm9wcywgY2hpbGRyZW4sIGxvYyk7XHJcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmNvbXBhdENvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgZm4uaXNOb25TY29wZWRTbG90ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlT2JqZWN0UHJvcGVydHkoYGRlZmF1bHRgLCBmbik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoIWhhc1RlbXBsYXRlU2xvdHMpIHtcclxuICAgICAgICAgICAgLy8gaW1wbGljaXQgZGVmYXVsdCBzbG90IChvbiBjb21wb25lbnQpXHJcbiAgICAgICAgICAgIHNsb3RzUHJvcGVydGllcy5wdXNoKGJ1aWxkRGVmYXVsdFNsb3RQcm9wZXJ0eSh1bmRlZmluZWQsIGNoaWxkcmVuKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGltcGxpY2l0RGVmYXVsdENoaWxkcmVuLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAvLyAjMzc2NlxyXG4gICAgICAgICAgICAvLyB3aXRoIHdoaXRlc3BhY2U6ICdwcmVzZXJ2ZScsIHdoaXRlc3BhY2VzIGJldHdlZW4gc2xvdHMgd2lsbCBlbmQgdXAgaW5cclxuICAgICAgICAgICAgLy8gaW1wbGljaXREZWZhdWx0Q2hpbGRyZW4uIElnbm9yZSBpZiBhbGwgaW1wbGljaXQgY2hpbGRyZW4gYXJlIHdoaXRlc3BhY2VzLlxyXG4gICAgICAgICAgICBpbXBsaWNpdERlZmF1bHRDaGlsZHJlbi5zb21lKG5vZGUgPT4gaXNOb25XaGl0ZXNwYWNlQ29udGVudChub2RlKSkpIHtcclxuICAgICAgICAgICAgLy8gaW1wbGljaXQgZGVmYXVsdCBzbG90IChtaXhlZCB3aXRoIG5hbWVkIHNsb3RzKVxyXG4gICAgICAgICAgICBpZiAoaGFzTmFtZWREZWZhdWx0U2xvdCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzkgLyogWF9WX1NMT1RfRVhUUkFORU9VU19ERUZBVUxUX1NMT1RfQ0hJTERSRU4gKi8sIGltcGxpY2l0RGVmYXVsdENoaWxkcmVuWzBdLmxvYykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2xvdHNQcm9wZXJ0aWVzLnB1c2goYnVpbGREZWZhdWx0U2xvdFByb3BlcnR5KHVuZGVmaW5lZCwgaW1wbGljaXREZWZhdWx0Q2hpbGRyZW4pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHNsb3RGbGFnID0gaGFzRHluYW1pY1Nsb3RzXHJcbiAgICAgICAgPyAyIC8qIERZTkFNSUMgKi9cclxuICAgICAgICA6IGhhc0ZvcndhcmRlZFNsb3RzKG5vZGUuY2hpbGRyZW4pXHJcbiAgICAgICAgICAgID8gMyAvKiBGT1JXQVJERUQgKi9cclxuICAgICAgICAgICAgOiAxIC8qIFNUQUJMRSAqLztcclxuICAgIGxldCBzbG90cyA9IGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oc2xvdHNQcm9wZXJ0aWVzLmNvbmNhdChjcmVhdGVPYmplY3RQcm9wZXJ0eShgX2AsIFxyXG4gICAgLy8gMiA9IGNvbXBpbGVkIGJ1dCBkeW5hbWljID0gY2FuIHNraXAgbm9ybWFsaXphdGlvbiwgYnV0IG11c3QgcnVuIGRpZmZcclxuICAgIC8vIDEgPSBjb21waWxlZCBhbmQgc3RhdGljID0gY2FuIHNraXAgbm9ybWFsaXphdGlvbiBBTkQgZGlmZiBhcyBvcHRpbWl6ZWRcclxuICAgIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oc2xvdEZsYWcgKyAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYCAvKiAke3Nsb3RGbGFnc1RleHRbc2xvdEZsYWddfSAqL2AgOiBgYCksIGZhbHNlKSkpLCBsb2MpO1xyXG4gICAgaWYgKGR5bmFtaWNTbG90cy5sZW5ndGgpIHtcclxuICAgICAgICBzbG90cyA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKENSRUFURV9TTE9UUyksIFtcclxuICAgICAgICAgICAgc2xvdHMsXHJcbiAgICAgICAgICAgIGNyZWF0ZUFycmF5RXhwcmVzc2lvbihkeW5hbWljU2xvdHMpXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNsb3RzLFxyXG4gICAgICAgIGhhc0R5bmFtaWNTbG90c1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBidWlsZER5bmFtaWNTbG90KG5hbWUsIGZuKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlT2JqZWN0RXhwcmVzc2lvbihbXHJcbiAgICAgICAgY3JlYXRlT2JqZWN0UHJvcGVydHkoYG5hbWVgLCBuYW1lKSxcclxuICAgICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShgZm5gLCBmbilcclxuICAgIF0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhc0ZvcndhcmRlZFNsb3RzKGNoaWxkcmVuKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgICBzd2l0Y2ggKGNoaWxkLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAxIC8qIEVMRU1FTlQgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGQudGFnVHlwZSA9PT0gMiAvKiBTTE9UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzRm9yd2FyZGVkU2xvdHMoY2hpbGQuY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSA5IC8qIElGICovOlxyXG4gICAgICAgICAgICAgICAgaWYgKGhhc0ZvcndhcmRlZFNsb3RzKGNoaWxkLmJyYW5jaGVzKSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDEwIC8qIElGX0JSQU5DSCAqLzpcclxuICAgICAgICAgICAgY2FzZSAxMSAvKiBGT1IgKi86XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzRm9yd2FyZGVkU2xvdHMoY2hpbGQuY2hpbGRyZW4pKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGlzTm9uV2hpdGVzcGFjZUNvbnRlbnQobm9kZSkge1xyXG4gICAgaWYgKG5vZGUudHlwZSAhPT0gMiAvKiBURVhUICovICYmIG5vZGUudHlwZSAhPT0gMTIgLyogVEVYVF9DQUxMICovKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gMiAvKiBURVhUICovXHJcbiAgICAgICAgPyAhIW5vZGUuY29udGVudC50cmltKClcclxuICAgICAgICA6IGlzTm9uV2hpdGVzcGFjZUNvbnRlbnQobm9kZS5jb250ZW50KTtcclxufVxuXG4vLyBzb21lIGRpcmVjdGl2ZSB0cmFuc2Zvcm1zIChlLmcuIHYtbW9kZWwpIG1heSByZXR1cm4gYSBzeW1ib2wgZm9yIHJ1bnRpbWVcclxuLy8gaW1wb3J0LCB3aGljaCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkIG9mIGEgcmVzb2x2ZURpcmVjdGl2ZSBjYWxsLlxyXG5jb25zdCBkaXJlY3RpdmVJbXBvcnRNYXAgPSBuZXcgV2Vha01hcCgpO1xyXG4vLyBnZW5lcmF0ZSBhIEphdmFTY3JpcHQgQVNUIGZvciB0aGlzIGVsZW1lbnQncyBjb2RlZ2VuXHJcbmNvbnN0IHRyYW5zZm9ybUVsZW1lbnQgPSAobm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgLy8gcGVyZm9ybSB0aGUgd29yayBvbiBleGl0LCBhZnRlciBhbGwgY2hpbGQgZXhwcmVzc2lvbnMgaGF2ZSBiZWVuXHJcbiAgICAvLyBwcm9jZXNzZWQgYW5kIG1lcmdlZC5cclxuICAgIHJldHVybiBmdW5jdGlvbiBwb3N0VHJhbnNmb3JtRWxlbWVudCgpIHtcclxuICAgICAgICBub2RlID0gY29udGV4dC5jdXJyZW50Tm9kZTtcclxuICAgICAgICBpZiAoIShub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICAobm9kZS50YWdUeXBlID09PSAwIC8qIEVMRU1FTlQgKi8gfHxcclxuICAgICAgICAgICAgICAgIG5vZGUudGFnVHlwZSA9PT0gMSAvKiBDT01QT05FTlQgKi8pKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgdGFnLCBwcm9wcyB9ID0gbm9kZTtcclxuICAgICAgICBjb25zdCBpc0NvbXBvbmVudCA9IG5vZGUudGFnVHlwZSA9PT0gMSAvKiBDT01QT05FTlQgKi87XHJcbiAgICAgICAgLy8gVGhlIGdvYWwgb2YgdGhlIHRyYW5zZm9ybSBpcyB0byBjcmVhdGUgYSBjb2RlZ2VuTm9kZSBpbXBsZW1lbnRpbmcgdGhlXHJcbiAgICAgICAgLy8gVk5vZGVDYWxsIGludGVyZmFjZS5cclxuICAgICAgICBsZXQgdm5vZGVUYWcgPSBpc0NvbXBvbmVudFxyXG4gICAgICAgICAgICA/IHJlc29sdmVDb21wb25lbnRUeXBlKG5vZGUsIGNvbnRleHQpXHJcbiAgICAgICAgICAgIDogYFwiJHt0YWd9XCJgO1xyXG4gICAgICAgIGNvbnN0IGlzRHluYW1pY0NvbXBvbmVudCA9IGlzT2JqZWN0KHZub2RlVGFnKSAmJiB2bm9kZVRhZy5jYWxsZWUgPT09IFJFU09MVkVfRFlOQU1JQ19DT01QT05FTlQ7XHJcbiAgICAgICAgbGV0IHZub2RlUHJvcHM7XHJcbiAgICAgICAgbGV0IHZub2RlQ2hpbGRyZW47XHJcbiAgICAgICAgbGV0IHZub2RlUGF0Y2hGbGFnO1xyXG4gICAgICAgIGxldCBwYXRjaEZsYWcgPSAwO1xyXG4gICAgICAgIGxldCB2bm9kZUR5bmFtaWNQcm9wcztcclxuICAgICAgICBsZXQgZHluYW1pY1Byb3BOYW1lcztcclxuICAgICAgICBsZXQgdm5vZGVEaXJlY3RpdmVzO1xyXG4gICAgICAgIGxldCBzaG91bGRVc2VCbG9jayA9IFxyXG4gICAgICAgIC8vIGR5bmFtaWMgY29tcG9uZW50IG1heSByZXNvbHZlIHRvIHBsYWluIGVsZW1lbnRzXHJcbiAgICAgICAgaXNEeW5hbWljQ29tcG9uZW50IHx8XHJcbiAgICAgICAgICAgIHZub2RlVGFnID09PSBURUxFUE9SVCB8fFxyXG4gICAgICAgICAgICB2bm9kZVRhZyA9PT0gU1VTUEVOU0UgfHxcclxuICAgICAgICAgICAgKCFpc0NvbXBvbmVudCAmJlxyXG4gICAgICAgICAgICAgICAgLy8gPHN2Zz4gYW5kIDxmb3JlaWduT2JqZWN0PiBtdXN0IGJlIGZvcmNlZCBpbnRvIGJsb2NrcyBzbyB0aGF0IGJsb2NrXHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGVzIGluc2lkZSBnZXQgcHJvcGVyIGlzU1ZHIGZsYWcgYXQgcnVudGltZS4gKCM2MzksICM2NDMpXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRlY2huaWNhbGx5IHdlYi1zcGVjaWZpYywgYnV0IHNwbGl0dGluZyB0aGUgbG9naWMgb3V0IG9mIGNvcmVcclxuICAgICAgICAgICAgICAgIC8vIGxlYWRzIHRvIHRvbyBtdWNoIHVubmVjZXNzYXJ5IGNvbXBsZXhpdHkuXHJcbiAgICAgICAgICAgICAgICAodGFnID09PSAnc3ZnJyB8fCB0YWcgPT09ICdmb3JlaWduT2JqZWN0JykpO1xyXG4gICAgICAgIC8vIHByb3BzXHJcbiAgICAgICAgaWYgKHByb3BzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvcHNCdWlsZFJlc3VsdCA9IGJ1aWxkUHJvcHMobm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIHZub2RlUHJvcHMgPSBwcm9wc0J1aWxkUmVzdWx0LnByb3BzO1xyXG4gICAgICAgICAgICBwYXRjaEZsYWcgPSBwcm9wc0J1aWxkUmVzdWx0LnBhdGNoRmxhZztcclxuICAgICAgICAgICAgZHluYW1pY1Byb3BOYW1lcyA9IHByb3BzQnVpbGRSZXN1bHQuZHluYW1pY1Byb3BOYW1lcztcclxuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlcyA9IHByb3BzQnVpbGRSZXN1bHQuZGlyZWN0aXZlcztcclxuICAgICAgICAgICAgdm5vZGVEaXJlY3RpdmVzID1cclxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMgJiYgZGlyZWN0aXZlcy5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZUFycmF5RXhwcmVzc2lvbihkaXJlY3RpdmVzLm1hcChkaXIgPT4gYnVpbGREaXJlY3RpdmVBcmdzKGRpciwgY29udGV4dCkpKVxyXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAocHJvcHNCdWlsZFJlc3VsdC5zaG91bGRVc2VCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgc2hvdWxkVXNlQmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNoaWxkcmVuXHJcbiAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBpZiAodm5vZGVUYWcgPT09IEtFRVBfQUxJVkUpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFsdGhvdWdoIGEgYnVpbHQtaW4gY29tcG9uZW50LCB3ZSBjb21waWxlIEtlZXBBbGl2ZSB3aXRoIHJhdyBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgLy8gaW5zdGVhZCBvZiBzbG90IGZ1bmN0aW9ucyBzbyB0aGF0IGl0IGNhbiBiZSB1c2VkIGluc2lkZSBUcmFuc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAvLyBvciBvdGhlciBUcmFuc2l0aW9uLXdyYXBwaW5nIEhPQ3MuXHJcbiAgICAgICAgICAgICAgICAvLyBUbyBlbnN1cmUgY29ycmVjdCB1cGRhdGVzIHdpdGggYmxvY2sgb3B0aW1pemF0aW9ucywgd2UgbmVlZCB0bzpcclxuICAgICAgICAgICAgICAgIC8vIDEuIEZvcmNlIGtlZXAtYWxpdmUgaW50byBhIGJsb2NrLiBUaGlzIGF2b2lkcyBpdHMgY2hpbGRyZW4gYmVpbmdcclxuICAgICAgICAgICAgICAgIC8vICAgIGNvbGxlY3RlZCBieSBhIHBhcmVudCBibG9jay5cclxuICAgICAgICAgICAgICAgIHNob3VsZFVzZUJsb2NrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIDIuIEZvcmNlIGtlZXAtYWxpdmUgdG8gYWx3YXlzIGJlIHVwZGF0ZWQsIHNpbmNlIGl0IHVzZXMgcmF3IGNoaWxkcmVuLlxyXG4gICAgICAgICAgICAgICAgcGF0Y2hGbGFnIHw9IDEwMjQgLyogRFlOQU1JQ19TTE9UUyAqLztcclxuICAgICAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoNDUgLyogWF9LRUVQX0FMSVZFX0lOVkFMSURfQ0hJTERSRU4gKi8sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG5vZGUuY2hpbGRyZW5bMF0ubG9jLnN0YXJ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IG5vZGUuY2hpbGRyZW5bbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxXS5sb2MuZW5kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZEJ1aWxkQXNTbG90cyA9IGlzQ29tcG9uZW50ICYmXHJcbiAgICAgICAgICAgICAgICAvLyBUZWxlcG9ydCBpcyBub3QgYSByZWFsIGNvbXBvbmVudCBhbmQgaGFzIGRlZGljYXRlZCBydW50aW1lIGhhbmRsaW5nXHJcbiAgICAgICAgICAgICAgICB2bm9kZVRhZyAhPT0gVEVMRVBPUlQgJiZcclxuICAgICAgICAgICAgICAgIC8vIGV4cGxhaW5lZCBhYm92ZS5cclxuICAgICAgICAgICAgICAgIHZub2RlVGFnICE9PSBLRUVQX0FMSVZFO1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkQnVpbGRBc1Nsb3RzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNsb3RzLCBoYXNEeW5hbWljU2xvdHMgfSA9IGJ1aWxkU2xvdHMobm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICB2bm9kZUNoaWxkcmVuID0gc2xvdHM7XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzRHluYW1pY1Nsb3RzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0Y2hGbGFnIHw9IDEwMjQgLyogRFlOQU1JQ19TTE9UUyAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChub2RlLmNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiB2bm9kZVRhZyAhPT0gVEVMRVBPUlQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlblswXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBjaGlsZC50eXBlO1xyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgZm9yIGR5bmFtaWMgdGV4dCBjaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFzRHluYW1pY1RleHRDaGlsZCA9IHR5cGUgPT09IDUgLyogSU5URVJQT0xBVElPTiAqLyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPT09IDggLyogQ09NUE9VTkRfRVhQUkVTU0lPTiAqLztcclxuICAgICAgICAgICAgICAgIGlmIChoYXNEeW5hbWljVGV4dENoaWxkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0Q29uc3RhbnRUeXBlKGNoaWxkLCBjb250ZXh0KSA9PT0gMCAvKiBOT1RfQ09OU1RBTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXRjaEZsYWcgfD0gMSAvKiBURVhUICovO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcGFzcyBkaXJlY3RseSBpZiB0aGUgb25seSBjaGlsZCBpcyBhIHRleHQgbm9kZVxyXG4gICAgICAgICAgICAgICAgLy8gKHBsYWluIC8gaW50ZXJwb2xhdGlvbiAvIGV4cHJlc3Npb24pXHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzRHluYW1pY1RleHRDaGlsZCB8fCB0eXBlID09PSAyIC8qIFRFWFQgKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICB2bm9kZUNoaWxkcmVuID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2bm9kZUNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZub2RlQ2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHBhdGNoRmxhZyAmIGR5bmFtaWNQcm9wTmFtZXNcclxuICAgICAgICBpZiAocGF0Y2hGbGFnICE9PSAwKSB7XHJcbiAgICAgICAgICAgIGlmICgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXRjaEZsYWcgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbCBmbGFncyAobmVnYXRpdmUgYW5kIG11dHVhbGx5IGV4Y2x1c2l2ZSlcclxuICAgICAgICAgICAgICAgICAgICB2bm9kZVBhdGNoRmxhZyA9IHBhdGNoRmxhZyArIGAgLyogJHtQYXRjaEZsYWdOYW1lc1twYXRjaEZsYWddfSAqL2A7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBiaXR3aXNlIGZsYWdzXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmxhZ05hbWVzID0gT2JqZWN0LmtleXMoUGF0Y2hGbGFnTmFtZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoTnVtYmVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKG4gPT4gbiA+IDAgJiYgcGF0Y2hGbGFnICYgbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChuID0+IFBhdGNoRmxhZ05hbWVzW25dKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuam9pbihgLCBgKTtcclxuICAgICAgICAgICAgICAgICAgICB2bm9kZVBhdGNoRmxhZyA9IHBhdGNoRmxhZyArIGAgLyogJHtmbGFnTmFtZXN9ICovYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZub2RlUGF0Y2hGbGFnID0gU3RyaW5nKHBhdGNoRmxhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGR5bmFtaWNQcm9wTmFtZXMgJiYgZHluYW1pY1Byb3BOYW1lcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHZub2RlRHluYW1pY1Byb3BzID0gc3RyaW5naWZ5RHluYW1pY1Byb3BOYW1lcyhkeW5hbWljUHJvcE5hbWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBub2RlLmNvZGVnZW5Ob2RlID0gY3JlYXRlVk5vZGVDYWxsKGNvbnRleHQsIHZub2RlVGFnLCB2bm9kZVByb3BzLCB2bm9kZUNoaWxkcmVuLCB2bm9kZVBhdGNoRmxhZywgdm5vZGVEeW5hbWljUHJvcHMsIHZub2RlRGlyZWN0aXZlcywgISFzaG91bGRVc2VCbG9jaywgZmFsc2UgLyogZGlzYWJsZVRyYWNraW5nICovLCBpc0NvbXBvbmVudCwgbm9kZS5sb2MpO1xyXG4gICAgfTtcclxufTtcclxuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudFR5cGUobm9kZSwgY29udGV4dCwgc3NyID0gZmFsc2UpIHtcclxuICAgIGxldCB7IHRhZyB9ID0gbm9kZTtcclxuICAgIC8vIDEuIGR5bmFtaWMgY29tcG9uZW50XHJcbiAgICBjb25zdCBpc0V4cGxpY2l0RHluYW1pYyA9IGlzQ29tcG9uZW50VGFnKHRhZyk7XHJcbiAgICBjb25zdCBpc1Byb3AgPSBmaW5kUHJvcChub2RlLCAnaXMnKTtcclxuICAgIGlmIChpc1Byb3ApIHtcclxuICAgICAgICBpZiAoaXNFeHBsaWNpdER5bmFtaWMgfHxcclxuICAgICAgICAgICAgKGlzQ29tcGF0RW5hYmxlZChcIkNPTVBJTEVSX0lTX09OX0VMRU1FTlRcIiAvKiBDT01QSUxFUl9JU19PTl9FTEVNRU5UICovLCBjb250ZXh0KSkpIHtcclxuICAgICAgICAgICAgY29uc3QgZXhwID0gaXNQcm9wLnR5cGUgPT09IDYgLyogQVRUUklCVVRFICovXHJcbiAgICAgICAgICAgICAgICA/IGlzUHJvcC52YWx1ZSAmJiBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGlzUHJvcC52YWx1ZS5jb250ZW50LCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgOiBpc1Byb3AuZXhwO1xyXG4gICAgICAgICAgICBpZiAoZXhwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoUkVTT0xWRV9EWU5BTUlDX0NPTVBPTkVOVCksIFtcclxuICAgICAgICAgICAgICAgICAgICBleHBcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzUHJvcC50eXBlID09PSA2IC8qIEFUVFJJQlVURSAqLyAmJlxyXG4gICAgICAgICAgICBpc1Byb3AudmFsdWUuY29udGVudC5zdGFydHNXaXRoKCd2dWU6JykpIHtcclxuICAgICAgICAgICAgLy8gPGJ1dHRvbiBpcz1cInZ1ZTp4eHhcIj5cclxuICAgICAgICAgICAgLy8gaWYgbm90IDxjb21wb25lbnQ+LCBvbmx5IGlzIHZhbHVlIHRoYXQgc3RhcnRzIHdpdGggXCJ2dWU6XCIgd2lsbCBiZVxyXG4gICAgICAgICAgICAvLyB0cmVhdGVkIGFzIGNvbXBvbmVudCBieSB0aGUgcGFyc2UgcGhhc2UgYW5kIHJlYWNoIGhlcmUsIHVubGVzcyBpdCdzXHJcbiAgICAgICAgICAgIC8vIGNvbXBhdCBtb2RlIHdoZXJlIGFsbCBpcyB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgY29tcG9uZW50c1xyXG4gICAgICAgICAgICB0YWcgPSBpc1Byb3AudmFsdWUuY29udGVudC5zbGljZSg0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyAxLjUgdi1pcyAoVE9ETzogRGVwcmVjYXRlKVxyXG4gICAgY29uc3QgaXNEaXIgPSAhaXNFeHBsaWNpdER5bmFtaWMgJiYgZmluZERpcihub2RlLCAnaXMnKTtcclxuICAgIGlmIChpc0RpciAmJiBpc0Rpci5leHApIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoUkVTT0xWRV9EWU5BTUlDX0NPTVBPTkVOVCksIFtcclxuICAgICAgICAgICAgaXNEaXIuZXhwXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICAvLyAyLiBidWlsdC1pbiBjb21wb25lbnRzIChUZWxlcG9ydCwgVHJhbnNpdGlvbiwgS2VlcEFsaXZlLCBTdXNwZW5zZS4uLilcclxuICAgIGNvbnN0IGJ1aWx0SW4gPSBpc0NvcmVDb21wb25lbnQodGFnKSB8fCBjb250ZXh0LmlzQnVpbHRJbkNvbXBvbmVudCh0YWcpO1xyXG4gICAgaWYgKGJ1aWx0SW4pIHtcclxuICAgICAgICAvLyBidWlsdC1pbnMgYXJlIHNpbXBseSBmYWxsdGhyb3VnaHMgLyBoYXZlIHNwZWNpYWwgaGFuZGxpbmcgZHVyaW5nIHNzclxyXG4gICAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gaW1wb3J0IHRoZWlyIHJ1bnRpbWUgZXF1aXZhbGVudHNcclxuICAgICAgICBpZiAoIXNzcilcclxuICAgICAgICAgICAgY29udGV4dC5oZWxwZXIoYnVpbHRJbik7XHJcbiAgICAgICAgcmV0dXJuIGJ1aWx0SW47XHJcbiAgICB9XHJcbiAgICAvLyA1LiB1c2VyIGNvbXBvbmVudCAocmVzb2x2ZSlcclxuICAgIGNvbnRleHQuaGVscGVyKFJFU09MVkVfQ09NUE9ORU5UKTtcclxuICAgIGNvbnRleHQuY29tcG9uZW50cy5hZGQodGFnKTtcclxuICAgIHJldHVybiB0b1ZhbGlkQXNzZXRJZCh0YWcsIGBjb21wb25lbnRgKTtcclxufVxyXG5mdW5jdGlvbiBidWlsZFByb3BzKG5vZGUsIGNvbnRleHQsIHByb3BzID0gbm9kZS5wcm9wcywgc3NyID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IHsgdGFnLCBsb2M6IGVsZW1lbnRMb2MsIGNoaWxkcmVuIH0gPSBub2RlO1xyXG4gICAgY29uc3QgaXNDb21wb25lbnQgPSBub2RlLnRhZ1R5cGUgPT09IDEgLyogQ09NUE9ORU5UICovO1xyXG4gICAgbGV0IHByb3BlcnRpZXMgPSBbXTtcclxuICAgIGNvbnN0IG1lcmdlQXJncyA9IFtdO1xyXG4gICAgY29uc3QgcnVudGltZURpcmVjdGl2ZXMgPSBbXTtcclxuICAgIGNvbnN0IGhhc0NoaWxkcmVuID0gY2hpbGRyZW4ubGVuZ3RoID4gMDtcclxuICAgIGxldCBzaG91bGRVc2VCbG9jayA9IGZhbHNlO1xyXG4gICAgLy8gcGF0Y2hGbGFnIGFuYWx5c2lzXHJcbiAgICBsZXQgcGF0Y2hGbGFnID0gMDtcclxuICAgIGxldCBoYXNSZWYgPSBmYWxzZTtcclxuICAgIGxldCBoYXNDbGFzc0JpbmRpbmcgPSBmYWxzZTtcclxuICAgIGxldCBoYXNTdHlsZUJpbmRpbmcgPSBmYWxzZTtcclxuICAgIGxldCBoYXNIeWRyYXRpb25FdmVudEJpbmRpbmcgPSBmYWxzZTtcclxuICAgIGxldCBoYXNEeW5hbWljS2V5cyA9IGZhbHNlO1xyXG4gICAgbGV0IGhhc1Zub2RlSG9vayA9IGZhbHNlO1xyXG4gICAgY29uc3QgZHluYW1pY1Byb3BOYW1lcyA9IFtdO1xyXG4gICAgY29uc3QgYW5hbHl6ZVBhdGNoRmxhZyA9ICh7IGtleSwgdmFsdWUgfSkgPT4ge1xyXG4gICAgICAgIGlmIChpc1N0YXRpY0V4cChrZXkpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBrZXkuY29udGVudDtcclxuICAgICAgICAgICAgY29uc3QgaXNFdmVudEhhbmRsZXIgPSBpc09uKG5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoIWlzQ29tcG9uZW50ICYmXHJcbiAgICAgICAgICAgICAgICBpc0V2ZW50SGFuZGxlciAmJlxyXG4gICAgICAgICAgICAgICAgLy8gb21pdCB0aGUgZmxhZyBmb3IgY2xpY2sgaGFuZGxlcnMgYmVjYXVzZSBoeWRyYXRpb24gZ2l2ZXMgY2xpY2tcclxuICAgICAgICAgICAgICAgIC8vIGRlZGljYXRlZCBmYXN0IHBhdGguXHJcbiAgICAgICAgICAgICAgICBuYW1lLnRvTG93ZXJDYXNlKCkgIT09ICdvbmNsaWNrJyAmJlxyXG4gICAgICAgICAgICAgICAgLy8gb21pdCB2LW1vZGVsIGhhbmRsZXJzXHJcbiAgICAgICAgICAgICAgICBuYW1lICE9PSAnb25VcGRhdGU6bW9kZWxWYWx1ZScgJiZcclxuICAgICAgICAgICAgICAgIC8vIG9taXQgb25Wbm9kZVhYWCBob29rc1xyXG4gICAgICAgICAgICAgICAgIWlzUmVzZXJ2ZWRQcm9wKG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNIeWRyYXRpb25FdmVudEJpbmRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc0V2ZW50SGFuZGxlciAmJiBpc1Jlc2VydmVkUHJvcChuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgaGFzVm5vZGVIb29rID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsdWUudHlwZSA9PT0gMjAgLyogSlNfQ0FDSEVfRVhQUkVTU0lPTiAqLyB8fFxyXG4gICAgICAgICAgICAgICAgKCh2YWx1ZS50eXBlID09PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUudHlwZSA9PT0gOCAvKiBDT01QT1VORF9FWFBSRVNTSU9OICovKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGdldENvbnN0YW50VHlwZSh2YWx1ZSwgY29udGV4dCkgPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gc2tpcCBpZiB0aGUgcHJvcCBpcyBhIGNhY2hlZCBoYW5kbGVyIG9yIGhhcyBjb25zdGFudCB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAncmVmJykge1xyXG4gICAgICAgICAgICAgICAgaGFzUmVmID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChuYW1lID09PSAnY2xhc3MnKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNDbGFzc0JpbmRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdzdHlsZScpIHtcclxuICAgICAgICAgICAgICAgIGhhc1N0eWxlQmluZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobmFtZSAhPT0gJ2tleScgJiYgIWR5bmFtaWNQcm9wTmFtZXMuaW5jbHVkZXMobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGR5bmFtaWNQcm9wTmFtZXMucHVzaChuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB0cmVhdCB0aGUgZHluYW1pYyBjbGFzcyBhbmQgc3R5bGUgYmluZGluZyBvZiB0aGUgY29tcG9uZW50IGFzIGR5bmFtaWMgcHJvcHNcclxuICAgICAgICAgICAgaWYgKGlzQ29tcG9uZW50ICYmXHJcbiAgICAgICAgICAgICAgICAobmFtZSA9PT0gJ2NsYXNzJyB8fCBuYW1lID09PSAnc3R5bGUnKSAmJlxyXG4gICAgICAgICAgICAgICAgIWR5bmFtaWNQcm9wTmFtZXMuaW5jbHVkZXMobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIGR5bmFtaWNQcm9wTmFtZXMucHVzaChuYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaGFzRHluYW1pY0tleXMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgLy8gc3RhdGljIGF0dHJpYnV0ZVxyXG4gICAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpXTtcclxuICAgICAgICBpZiAocHJvcC50eXBlID09PSA2IC8qIEFUVFJJQlVURSAqLykge1xyXG4gICAgICAgICAgICBjb25zdCB7IGxvYywgbmFtZSwgdmFsdWUgfSA9IHByb3A7XHJcbiAgICAgICAgICAgIGxldCBpc1N0YXRpYyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAncmVmJykge1xyXG4gICAgICAgICAgICAgICAgaGFzUmVmID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LnNjb3Blcy52Rm9yID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMucHVzaChjcmVhdGVPYmplY3RQcm9wZXJ0eShjcmVhdGVTaW1wbGVFeHByZXNzaW9uKCdyZWZfZm9yJywgdHJ1ZSksIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oJ3RydWUnKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNraXAgaXMgb24gPGNvbXBvbmVudD4sIG9yIGlzPVwidnVlOnh4eFwiXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaXMnICYmXHJcbiAgICAgICAgICAgICAgICAoaXNDb21wb25lbnRUYWcodGFnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh2YWx1ZSAmJiB2YWx1ZS5jb250ZW50LnN0YXJ0c1dpdGgoJ3Z1ZTonKSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAoaXNDb21wYXRFbmFibGVkKFwiQ09NUElMRVJfSVNfT05fRUxFTUVOVFwiIC8qIENPTVBJTEVSX0lTX09OX0VMRU1FTlQgKi8sIGNvbnRleHQpKSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByb3BlcnRpZXMucHVzaChjcmVhdGVPYmplY3RQcm9wZXJ0eShjcmVhdGVTaW1wbGVFeHByZXNzaW9uKG5hbWUsIHRydWUsIGdldElubmVyUmFuZ2UobG9jLCAwLCBuYW1lLmxlbmd0aCkpLCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKHZhbHVlID8gdmFsdWUuY29udGVudCA6ICcnLCBpc1N0YXRpYywgdmFsdWUgPyB2YWx1ZS5sb2MgOiBsb2MpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBkaXJlY3RpdmVzXHJcbiAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgYXJnLCBleHAsIGxvYyB9ID0gcHJvcDtcclxuICAgICAgICAgICAgY29uc3QgaXNWQmluZCA9IG5hbWUgPT09ICdiaW5kJztcclxuICAgICAgICAgICAgY29uc3QgaXNWT24gPSBuYW1lID09PSAnb24nO1xyXG4gICAgICAgICAgICAvLyBza2lwIHYtc2xvdCAtIGl0IGlzIGhhbmRsZWQgYnkgaXRzIGRlZGljYXRlZCB0cmFuc2Zvcm0uXHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnc2xvdCcpIHtcclxuICAgICAgICAgICAgICAgIGlmICghaXNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcig0MCAvKiBYX1ZfU0xPVF9NSVNQTEFDRUQgKi8sIGxvYykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2tpcCB2LW9uY2Uvdi1tZW1vIC0gdGhleSBhcmUgaGFuZGxlZCBieSBkZWRpY2F0ZWQgdHJhbnNmb3Jtcy5cclxuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdvbmNlJyB8fCBuYW1lID09PSAnbWVtbycpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNraXAgdi1pcyBhbmQgOmlzIG9uIDxjb21wb25lbnQ+XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnaXMnIHx8XHJcbiAgICAgICAgICAgICAgICAoaXNWQmluZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGlzU3RhdGljQXJnT2YoYXJnLCAnaXMnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIChpc0NvbXBvbmVudFRhZyh0YWcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChpc0NvbXBhdEVuYWJsZWQoXCJDT01QSUxFUl9JU19PTl9FTEVNRU5UXCIgLyogQ09NUElMRVJfSVNfT05fRUxFTUVOVCAqLywgY29udGV4dCkpKSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNraXAgdi1vbiBpbiBTU1IgY29tcGlsYXRpb25cclxuICAgICAgICAgICAgaWYgKGlzVk9uICYmIHNzcikge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAvLyAjOTM4OiBlbGVtZW50cyB3aXRoIGR5bmFtaWMga2V5cyBzaG91bGQgYmUgZm9yY2VkIGludG8gYmxvY2tzXHJcbiAgICAgICAgICAgIChpc1ZCaW5kICYmIGlzU3RhdGljQXJnT2YoYXJnLCAna2V5JykpIHx8XHJcbiAgICAgICAgICAgICAgICAvLyBpbmxpbmUgYmVmb3JlLXVwZGF0ZSBob29rcyBuZWVkIHRvIGZvcmNlIGJsb2NrIHNvIHRoYXQgaXQgaXMgaW52b2tlZFxyXG4gICAgICAgICAgICAgICAgLy8gYmVmb3JlIGNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICAoaXNWT24gJiYgaGFzQ2hpbGRyZW4gJiYgaXNTdGF0aWNBcmdPZihhcmcsICd2dWU6YmVmb3JlLXVwZGF0ZScpKSkge1xyXG4gICAgICAgICAgICAgICAgc2hvdWxkVXNlQmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc1ZCaW5kICYmIGlzU3RhdGljQXJnT2YoYXJnLCAncmVmJykgJiYgY29udGV4dC5zY29wZXMudkZvciA+IDApIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMucHVzaChjcmVhdGVPYmplY3RQcm9wZXJ0eShjcmVhdGVTaW1wbGVFeHByZXNzaW9uKCdyZWZfZm9yJywgdHJ1ZSksIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oJ3RydWUnKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3Igdi1iaW5kIGFuZCB2LW9uIHdpdGggbm8gYXJndW1lbnRcclxuICAgICAgICAgICAgaWYgKCFhcmcgJiYgKGlzVkJpbmQgfHwgaXNWT24pKSB7XHJcbiAgICAgICAgICAgICAgICBoYXNEeW5hbWljS2V5cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXhwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQXJncy5wdXNoKGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oZGVkdXBlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSwgZWxlbWVudExvYykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZCaW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDIueCB2LWJpbmQgb2JqZWN0IG9yZGVyIGNvbXBhdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc092ZXJyaWRhYmxlS2V5cyA9IG1lcmdlQXJncy5zb21lKGFyZyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmcudHlwZSA9PT0gMTUgLyogSlNfT0JKRUNUX0VYUFJFU1NJT04gKi8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcucHJvcGVydGllcy5zb21lKCh7IGtleSB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleS50eXBlICE9PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFrZXkuaXNTdGF0aWMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoa2V5LmNvbnRlbnQgIT09ICdjbGFzcycgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5LmNvbnRlbnQgIT09ICdzdHlsZScgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWlzT24oa2V5LmNvbnRlbnQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHluYW1pYyBleHByZXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNPdmVycmlkYWJsZUtleXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tDb21wYXRFbmFibGVkKFwiQ09NUElMRVJfVl9CSU5EX09CSkVDVF9PUkRFUlwiIC8qIENPTVBJTEVSX1ZfQklORF9PQkpFQ1RfT1JERVIgKi8sIGNvbnRleHQsIGxvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29tcGF0RW5hYmxlZChcIkNPTVBJTEVSX1ZfQklORF9PQkpFQ1RfT1JERVJcIiAvKiBDT01QSUxFUl9WX0JJTkRfT0JKRUNUX09SREVSICovLCBjb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlQXJncy51bnNoaWZ0KGV4cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VBcmdzLnB1c2goZXhwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHYtb249XCJvYmpcIiAtPiB0b0hhbmRsZXJzKG9iailcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VBcmdzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogMTQgLyogSlNfQ0FMTF9FWFBSRVNTSU9OICovLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGVlOiBjb250ZXh0LmhlbHBlcihUT19IQU5ETEVSUyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHM6IFtleHBdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQub25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKGlzVkJpbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAzNCAvKiBYX1ZfQklORF9OT19FWFBSRVNTSU9OICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogMzUgLyogWF9WX09OX05PX0VYUFJFU1NJT04gKi8sIGxvYykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlVHJhbnNmb3JtID0gY29udGV4dC5kaXJlY3RpdmVUcmFuc2Zvcm1zW25hbWVdO1xyXG4gICAgICAgICAgICBpZiAoZGlyZWN0aXZlVHJhbnNmb3JtKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBoYXMgYnVpbHQtaW4gZGlyZWN0aXZlIHRyYW5zZm9ybS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgcHJvcHMsIG5lZWRSdW50aW1lIH0gPSBkaXJlY3RpdmVUcmFuc2Zvcm0ocHJvcCwgbm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAhc3NyICYmIHByb3BzLmZvckVhY2goYW5hbHl6ZVBhdGNoRmxhZyk7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnB1c2goLi4ucHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRSdW50aW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnVudGltZURpcmVjdGl2ZXMucHVzaChwcm9wKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTeW1ib2wobmVlZFJ1bnRpbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZUltcG9ydE1hcC5zZXQocHJvcCwgbmVlZFJ1bnRpbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG5vIGJ1aWx0LWluIHRyYW5zZm9ybSwgdGhpcyBpcyBhIHVzZXIgY3VzdG9tIGRpcmVjdGl2ZS5cclxuICAgICAgICAgICAgICAgIHJ1bnRpbWVEaXJlY3RpdmVzLnB1c2gocHJvcCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjdXN0b20gZGlycyBtYXkgdXNlIGJlZm9yZVVwZGF0ZSBzbyB0aGV5IG5lZWQgdG8gZm9yY2UgYmxvY2tzXHJcbiAgICAgICAgICAgICAgICAvLyB0byBlbnN1cmUgYmVmb3JlLXVwZGF0ZSBnZXRzIGNhbGxlZCBiZWZvcmUgY2hpbGRyZW4gdXBkYXRlXHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzQ2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzaG91bGRVc2VCbG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgcHJvcHNFeHByZXNzaW9uID0gdW5kZWZpbmVkO1xyXG4gICAgLy8gaGFzIHYtYmluZD1cIm9iamVjdFwiIG9yIHYtb249XCJvYmplY3RcIiwgd3JhcCB3aXRoIG1lcmdlUHJvcHNcclxuICAgIGlmIChtZXJnZUFyZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKHByb3BlcnRpZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG1lcmdlQXJncy5wdXNoKGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oZGVkdXBlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSwgZWxlbWVudExvYykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWVyZ2VBcmdzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgcHJvcHNFeHByZXNzaW9uID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoTUVSR0VfUFJPUFMpLCBtZXJnZUFyZ3MsIGVsZW1lbnRMb2MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gc2luZ2xlIHYtYmluZCB3aXRoIG5vdGhpbmcgZWxzZSAtIG5vIG5lZWQgZm9yIGEgbWVyZ2VQcm9wcyBjYWxsXHJcbiAgICAgICAgICAgIHByb3BzRXhwcmVzc2lvbiA9IG1lcmdlQXJnc1swXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcm9wZXJ0aWVzLmxlbmd0aCkge1xyXG4gICAgICAgIHByb3BzRXhwcmVzc2lvbiA9IGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oZGVkdXBlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSwgZWxlbWVudExvYyk7XHJcbiAgICB9XHJcbiAgICAvLyBwYXRjaEZsYWcgYW5hbHlzaXNcclxuICAgIGlmIChoYXNEeW5hbWljS2V5cykge1xyXG4gICAgICAgIHBhdGNoRmxhZyB8PSAxNiAvKiBGVUxMX1BST1BTICovO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKGhhc0NsYXNzQmluZGluZyAmJiAhaXNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgcGF0Y2hGbGFnIHw9IDIgLyogQ0xBU1MgKi87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChoYXNTdHlsZUJpbmRpbmcgJiYgIWlzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHBhdGNoRmxhZyB8PSA0IC8qIFNUWUxFICovO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZHluYW1pY1Byb3BOYW1lcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcGF0Y2hGbGFnIHw9IDggLyogUFJPUFMgKi87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChoYXNIeWRyYXRpb25FdmVudEJpbmRpbmcpIHtcclxuICAgICAgICAgICAgcGF0Y2hGbGFnIHw9IDMyIC8qIEhZRFJBVEVfRVZFTlRTICovO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghc2hvdWxkVXNlQmxvY2sgJiZcclxuICAgICAgICAocGF0Y2hGbGFnID09PSAwIHx8IHBhdGNoRmxhZyA9PT0gMzIgLyogSFlEUkFURV9FVkVOVFMgKi8pICYmXHJcbiAgICAgICAgKGhhc1JlZiB8fCBoYXNWbm9kZUhvb2sgfHwgcnVudGltZURpcmVjdGl2ZXMubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICBwYXRjaEZsYWcgfD0gNTEyIC8qIE5FRURfUEFUQ0ggKi87XHJcbiAgICB9XHJcbiAgICAvLyBwcmUtbm9ybWFsaXplIHByb3BzLCBTU1IgaXMgc2tpcHBlZCBmb3Igbm93XHJcbiAgICBpZiAoIWNvbnRleHQuaW5TU1IgJiYgcHJvcHNFeHByZXNzaW9uKSB7XHJcbiAgICAgICAgc3dpdGNoIChwcm9wc0V4cHJlc3Npb24udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIDE1IC8qIEpTX09CSkVDVF9FWFBSRVNTSU9OICovOlxyXG4gICAgICAgICAgICAgICAgLy8gbWVhbnMgdGhhdCB0aGVyZSBpcyBubyB2LWJpbmQsXHJcbiAgICAgICAgICAgICAgICAvLyBidXQgc3RpbGwgbmVlZCB0byBkZWFsIHdpdGggZHluYW1pYyBrZXkgYmluZGluZ1xyXG4gICAgICAgICAgICAgICAgbGV0IGNsYXNzS2V5SW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgIGxldCBzdHlsZUtleUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICBsZXQgaGFzRHluYW1pY0tleSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wc0V4cHJlc3Npb24ucHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHByb3BzRXhwcmVzc2lvbi5wcm9wZXJ0aWVzW2ldLmtleTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTdGF0aWNFeHAoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5LmNvbnRlbnQgPT09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzS2V5SW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtleS5jb250ZW50ID09PSAnc3R5bGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZUtleUluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgha2V5LmlzSGFuZGxlcktleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNEeW5hbWljS2V5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbGFzc1Byb3AgPSBwcm9wc0V4cHJlc3Npb24ucHJvcGVydGllc1tjbGFzc0tleUluZGV4XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlUHJvcCA9IHByb3BzRXhwcmVzc2lvbi5wcm9wZXJ0aWVzW3N0eWxlS2V5SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgLy8gbm8gZHluYW1pYyBrZXlcclxuICAgICAgICAgICAgICAgIGlmICghaGFzRHluYW1pY0tleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc1Byb3AgJiYgIWlzU3RhdGljRXhwKGNsYXNzUHJvcC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NQcm9wLnZhbHVlID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoTk9STUFMSVpFX0NMQVNTKSwgW2NsYXNzUHJvcC52YWx1ZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVQcm9wICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICFpc1N0YXRpY0V4cChzdHlsZVByb3AudmFsdWUpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzdGF0aWMgc3R5bGUgaXMgY29tcGlsZWQgaW50byBhbiBvYmplY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSBgaGFzU3R5bGVCaW5kaW5nYCB0byBlbnN1cmUgdGhhdCBpdCBpcyBhIGR5bmFtaWMgc3R5bGUgYmluZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAoaGFzU3R5bGVCaW5kaW5nIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2LWJpbmQ6c3R5bGUgYW5kIHN0eWxlIGJvdGggZXhpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2LWJpbmQ6c3R5bGUgd2l0aCBzdGF0aWMgbGl0ZXJhbCBvYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlUHJvcC52YWx1ZS50eXBlID09PSAxNyAvKiBKU19BUlJBWV9FWFBSRVNTSU9OICovKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZVByb3AudmFsdWUgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihOT1JNQUxJWkVfU1RZTEUpLCBbc3R5bGVQcm9wLnZhbHVlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZHluYW1pYyBrZXkgYmluZGluZywgd3JhcCB3aXRoIGBub3JtYWxpemVQcm9wc2BcclxuICAgICAgICAgICAgICAgICAgICBwcm9wc0V4cHJlc3Npb24gPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihOT1JNQUxJWkVfUFJPUFMpLCBbcHJvcHNFeHByZXNzaW9uXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxNCAvKiBKU19DQUxMX0VYUFJFU1NJT04gKi86XHJcbiAgICAgICAgICAgICAgICAvLyBtZXJnZVByb3BzIGNhbGwsIGRvIG5vdGhpbmdcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgLy8gc2luZ2xlIHYtYmluZFxyXG4gICAgICAgICAgICAgICAgcHJvcHNFeHByZXNzaW9uID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoTk9STUFMSVpFX1BST1BTKSwgW1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKEdVQVJEX1JFQUNUSVZFX1BST1BTKSwgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wc0V4cHJlc3Npb25cclxuICAgICAgICAgICAgICAgICAgICBdKVxyXG4gICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByb3BzOiBwcm9wc0V4cHJlc3Npb24sXHJcbiAgICAgICAgZGlyZWN0aXZlczogcnVudGltZURpcmVjdGl2ZXMsXHJcbiAgICAgICAgcGF0Y2hGbGFnLFxyXG4gICAgICAgIGR5bmFtaWNQcm9wTmFtZXMsXHJcbiAgICAgICAgc2hvdWxkVXNlQmxvY2tcclxuICAgIH07XHJcbn1cclxuLy8gRGVkdXBlIHByb3BzIGluIGFuIG9iamVjdCBsaXRlcmFsLlxyXG4vLyBMaXRlcmFsIGR1cGxpY2F0ZWQgYXR0cmlidXRlcyB3b3VsZCBoYXZlIGJlZW4gd2FybmVkIGR1cmluZyB0aGUgcGFyc2UgcGhhc2UsXHJcbi8vIGhvd2V2ZXIsIGl0J3MgcG9zc2libGUgdG8gZW5jb3VudGVyIGR1cGxpY2F0ZWQgYG9uWFhYYCBoYW5kbGVycyB3aXRoIGRpZmZlcmVudFxyXG4vLyBtb2RpZmllcnMuIFdlIGFsc28gbmVlZCB0byBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgY2xhc3MgLyBzdHlsZSBhdHRyaWJ1dGVzLlxyXG4vLyAtIG9uWFhYIGhhbmRsZXJzIC8gc3R5bGU6IG1lcmdlIGludG8gYXJyYXlcclxuLy8gLSBjbGFzczogbWVyZ2UgaW50byBzaW5nbGUgZXhwcmVzc2lvbiB3aXRoIGNvbmNhdGVuYXRpb25cclxuZnVuY3Rpb24gZGVkdXBlUHJvcGVydGllcyhwcm9wZXJ0aWVzKSB7XHJcbiAgICBjb25zdCBrbm93blByb3BzID0gbmV3IE1hcCgpO1xyXG4gICAgY29uc3QgZGVkdXBlZCA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgcHJvcCA9IHByb3BlcnRpZXNbaV07XHJcbiAgICAgICAgLy8gZHluYW1pYyBrZXlzIGFyZSBhbHdheXMgYWxsb3dlZFxyXG4gICAgICAgIGlmIChwcm9wLmtleS50eXBlID09PSA4IC8qIENPTVBPVU5EX0VYUFJFU1NJT04gKi8gfHwgIXByb3Aua2V5LmlzU3RhdGljKSB7XHJcbiAgICAgICAgICAgIGRlZHVwZWQucHVzaChwcm9wKTtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBwcm9wLmtleS5jb250ZW50O1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0ga25vd25Qcm9wcy5nZXQobmFtZSk7XHJcbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChuYW1lID09PSAnc3R5bGUnIHx8IG5hbWUgPT09ICdjbGFzcycgfHwgaXNPbihuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgbWVyZ2VBc0FycmF5KGV4aXN0aW5nLCBwcm9wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyB1bmV4cGVjdGVkIGR1cGxpY2F0ZSwgc2hvdWxkIGhhdmUgZW1pdHRlZCBlcnJvciBkdXJpbmcgcGFyc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGtub3duUHJvcHMuc2V0KG5hbWUsIHByb3ApO1xyXG4gICAgICAgICAgICBkZWR1cGVkLnB1c2gocHJvcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRlZHVwZWQ7XHJcbn1cclxuZnVuY3Rpb24gbWVyZ2VBc0FycmF5KGV4aXN0aW5nLCBpbmNvbWluZykge1xyXG4gICAgaWYgKGV4aXN0aW5nLnZhbHVlLnR5cGUgPT09IDE3IC8qIEpTX0FSUkFZX0VYUFJFU1NJT04gKi8pIHtcclxuICAgICAgICBleGlzdGluZy52YWx1ZS5lbGVtZW50cy5wdXNoKGluY29taW5nLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGV4aXN0aW5nLnZhbHVlID0gY3JlYXRlQXJyYXlFeHByZXNzaW9uKFtleGlzdGluZy52YWx1ZSwgaW5jb21pbmcudmFsdWVdLCBleGlzdGluZy5sb2MpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGJ1aWxkRGlyZWN0aXZlQXJncyhkaXIsIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IGRpckFyZ3MgPSBbXTtcclxuICAgIGNvbnN0IHJ1bnRpbWUgPSBkaXJlY3RpdmVJbXBvcnRNYXAuZ2V0KGRpcik7XHJcbiAgICBpZiAocnVudGltZSkge1xyXG4gICAgICAgIC8vIGJ1aWx0LWluIGRpcmVjdGl2ZSB3aXRoIHJ1bnRpbWVcclxuICAgICAgICBkaXJBcmdzLnB1c2goY29udGV4dC5oZWxwZXJTdHJpbmcocnVudGltZSkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvLyBpbmplY3Qgc3RhdGVtZW50IGZvciByZXNvbHZpbmcgZGlyZWN0aXZlXHJcbiAgICAgICAgICAgIGNvbnRleHQuaGVscGVyKFJFU09MVkVfRElSRUNUSVZFKTtcclxuICAgICAgICAgICAgY29udGV4dC5kaXJlY3RpdmVzLmFkZChkaXIubmFtZSk7XHJcbiAgICAgICAgICAgIGRpckFyZ3MucHVzaCh0b1ZhbGlkQXNzZXRJZChkaXIubmFtZSwgYGRpcmVjdGl2ZWApKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IGxvYyB9ID0gZGlyO1xyXG4gICAgaWYgKGRpci5leHApXHJcbiAgICAgICAgZGlyQXJncy5wdXNoKGRpci5leHApO1xyXG4gICAgaWYgKGRpci5hcmcpIHtcclxuICAgICAgICBpZiAoIWRpci5leHApIHtcclxuICAgICAgICAgICAgZGlyQXJncy5wdXNoKGB2b2lkIDBgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGlyQXJncy5wdXNoKGRpci5hcmcpO1xyXG4gICAgfVxyXG4gICAgaWYgKE9iamVjdC5rZXlzKGRpci5tb2RpZmllcnMpLmxlbmd0aCkge1xyXG4gICAgICAgIGlmICghZGlyLmFyZykge1xyXG4gICAgICAgICAgICBpZiAoIWRpci5leHApIHtcclxuICAgICAgICAgICAgICAgIGRpckFyZ3MucHVzaChgdm9pZCAwYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlyQXJncy5wdXNoKGB2b2lkIDBgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdHJ1ZUV4cHJlc3Npb24gPSBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGB0cnVlYCwgZmFsc2UsIGxvYyk7XHJcbiAgICAgICAgZGlyQXJncy5wdXNoKGNyZWF0ZU9iamVjdEV4cHJlc3Npb24oZGlyLm1vZGlmaWVycy5tYXAobW9kaWZpZXIgPT4gY3JlYXRlT2JqZWN0UHJvcGVydHkobW9kaWZpZXIsIHRydWVFeHByZXNzaW9uKSksIGxvYykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNyZWF0ZUFycmF5RXhwcmVzc2lvbihkaXJBcmdzLCBkaXIubG9jKTtcclxufVxyXG5mdW5jdGlvbiBzdHJpbmdpZnlEeW5hbWljUHJvcE5hbWVzKHByb3BzKSB7XHJcbiAgICBsZXQgcHJvcHNOYW1lc1N0cmluZyA9IGBbYDtcclxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gcHJvcHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgcHJvcHNOYW1lc1N0cmluZyArPSBKU09OLnN0cmluZ2lmeShwcm9wc1tpXSk7XHJcbiAgICAgICAgaWYgKGkgPCBsIC0gMSlcclxuICAgICAgICAgICAgcHJvcHNOYW1lc1N0cmluZyArPSAnLCAnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3BzTmFtZXNTdHJpbmcgKyBgXWA7XHJcbn1cclxuZnVuY3Rpb24gaXNDb21wb25lbnRUYWcodGFnKSB7XHJcbiAgICByZXR1cm4gdGFnID09PSAnY29tcG9uZW50JyB8fCB0YWcgPT09ICdDb21wb25lbnQnO1xyXG59XG5cbihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgPyBPYmplY3QuZnJlZXplKHt9KVxyXG4gICAgOiB7fTtcclxuKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXTtcclxuY29uc3QgY2FjaGVTdHJpbmdGdW5jdGlvbiA9IChmbikgPT4ge1xyXG4gICAgY29uc3QgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgcmV0dXJuICgoc3RyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcclxuICAgICAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcclxuLyoqXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5jb25zdCBjYW1lbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xyXG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIChfLCBjKSA9PiAoYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnKSk7XHJcbn0pO1xuXG5jb25zdCB0cmFuc2Zvcm1TbG90T3V0bGV0ID0gKG5vZGUsIGNvbnRleHQpID0+IHtcclxuICAgIGlmIChpc1Nsb3RPdXRsZXQobm9kZSkpIHtcclxuICAgICAgICBjb25zdCB7IGNoaWxkcmVuLCBsb2MgfSA9IG5vZGU7XHJcbiAgICAgICAgY29uc3QgeyBzbG90TmFtZSwgc2xvdFByb3BzIH0gPSBwcm9jZXNzU2xvdE91dGxldChub2RlLCBjb250ZXh0KTtcclxuICAgICAgICBjb25zdCBzbG90QXJncyA9IFtcclxuICAgICAgICAgICAgY29udGV4dC5wcmVmaXhJZGVudGlmaWVycyA/IGBfY3R4LiRzbG90c2AgOiBgJHNsb3RzYCxcclxuICAgICAgICAgICAgc2xvdE5hbWUsXHJcbiAgICAgICAgICAgICd7fScsXHJcbiAgICAgICAgICAgICd1bmRlZmluZWQnLFxyXG4gICAgICAgICAgICAndHJ1ZSdcclxuICAgICAgICBdO1xyXG4gICAgICAgIGxldCBleHBlY3RlZExlbiA9IDI7XHJcbiAgICAgICAgaWYgKHNsb3RQcm9wcykge1xyXG4gICAgICAgICAgICBzbG90QXJnc1syXSA9IHNsb3RQcm9wcztcclxuICAgICAgICAgICAgZXhwZWN0ZWRMZW4gPSAzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNsb3RBcmdzWzNdID0gY3JlYXRlRnVuY3Rpb25FeHByZXNzaW9uKFtdLCBjaGlsZHJlbiwgZmFsc2UsIGZhbHNlLCBsb2MpO1xyXG4gICAgICAgICAgICBleHBlY3RlZExlbiA9IDQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb250ZXh0LnNjb3BlSWQgJiYgIWNvbnRleHQuc2xvdHRlZCkge1xyXG4gICAgICAgICAgICBleHBlY3RlZExlbiA9IDU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNsb3RBcmdzLnNwbGljZShleHBlY3RlZExlbik7IC8vIHJlbW92ZSB1bnVzZWQgYXJndW1lbnRzXHJcbiAgICAgICAgbm9kZS5jb2RlZ2VuTm9kZSA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKFJFTkRFUl9TTE9UKSwgc2xvdEFyZ3MsIGxvYyk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0KG5vZGUsIGNvbnRleHQpIHtcclxuICAgIGxldCBzbG90TmFtZSA9IGBcImRlZmF1bHRcImA7XHJcbiAgICBsZXQgc2xvdFByb3BzID0gdW5kZWZpbmVkO1xyXG4gICAgY29uc3Qgbm9uTmFtZVByb3BzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUucHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBwID0gbm9kZS5wcm9wc1tpXTtcclxuICAgICAgICBpZiAocC50eXBlID09PSA2IC8qIEFUVFJJQlVURSAqLykge1xyXG4gICAgICAgICAgICBpZiAocC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHAubmFtZSA9PT0gJ25hbWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xvdE5hbWUgPSBKU09OLnN0cmluZ2lmeShwLnZhbHVlLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5uYW1lID0gY2FtZWxpemUocC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBub25OYW1lUHJvcHMucHVzaChwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHAubmFtZSA9PT0gJ2JpbmQnICYmIGlzU3RhdGljQXJnT2YocC5hcmcsICduYW1lJykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwLmV4cClcclxuICAgICAgICAgICAgICAgICAgICBzbG90TmFtZSA9IHAuZXhwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHAubmFtZSA9PT0gJ2JpbmQnICYmIHAuYXJnICYmIGlzU3RhdGljRXhwKHAuYXJnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAuYXJnLmNvbnRlbnQgPSBjYW1lbGl6ZShwLmFyZy5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5vbk5hbWVQcm9wcy5wdXNoKHApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG5vbk5hbWVQcm9wcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgeyBwcm9wcywgZGlyZWN0aXZlcyB9ID0gYnVpbGRQcm9wcyhub2RlLCBjb250ZXh0LCBub25OYW1lUHJvcHMpO1xyXG4gICAgICAgIHNsb3RQcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIGlmIChkaXJlY3RpdmVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcigzNiAvKiBYX1ZfU0xPVF9VTkVYUEVDVEVEX0RJUkVDVElWRV9PTl9TTE9UX09VVExFVCAqLywgZGlyZWN0aXZlc1swXS5sb2MpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNsb3ROYW1lLFxyXG4gICAgICAgIHNsb3RQcm9wc1xyXG4gICAgfTtcclxufVxuXG5jb25zdCBmbkV4cFJFID0gL15cXHMqKFtcXHckX10rfChhc3luY1xccyopP1xcKFteKV0qP1xcKSlcXHMqPT58XlxccyooYXN5bmNcXHMrKT9mdW5jdGlvbig/OlxccytbXFx3JF0rKT9cXHMqXFwoLztcclxuY29uc3QgdHJhbnNmb3JtT24gPSAoZGlyLCBub2RlLCBjb250ZXh0LCBhdWdtZW50b3IpID0+IHtcclxuICAgIGNvbnN0IHsgbG9jLCBtb2RpZmllcnMsIGFyZyB9ID0gZGlyO1xyXG4gICAgaWYgKCFkaXIuZXhwICYmICFtb2RpZmllcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzUgLyogWF9WX09OX05PX0VYUFJFU1NJT04gKi8sIGxvYykpO1xyXG4gICAgfVxyXG4gICAgbGV0IGV2ZW50TmFtZTtcclxuICAgIGlmIChhcmcudHlwZSA9PT0gNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgIGlmIChhcmcuaXNTdGF0aWMpIHtcclxuICAgICAgICAgICAgbGV0IHJhd05hbWUgPSBhcmcuY29udGVudDtcclxuICAgICAgICAgICAgLy8gVE9ETyBkZXByZWNhdGUgQHZub2RlWFhYIHVzYWdlXHJcbiAgICAgICAgICAgIGlmIChyYXdOYW1lLnN0YXJ0c1dpdGgoJ3Z1ZTonKSkge1xyXG4gICAgICAgICAgICAgICAgcmF3TmFtZSA9IGB2bm9kZS0ke3Jhd05hbWUuc2xpY2UoNCl9YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmb3IgYWxsIGV2ZW50IGxpc3RlbmVycywgYXV0byBjb252ZXJ0IGl0IHRvIGNhbWVsQ2FzZS4gU2VlIGlzc3VlICMyMjQ5XHJcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24odG9IYW5kbGVyS2V5KGNhbWVsaXplJDEocmF3TmFtZSkpLCB0cnVlLCBhcmcubG9jKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICMyMzg4XHJcbiAgICAgICAgICAgIGV2ZW50TmFtZSA9IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbXHJcbiAgICAgICAgICAgICAgICBgJHtjb250ZXh0LmhlbHBlclN0cmluZyhUT19IQU5ETEVSX0tFWSl9KGAsXHJcbiAgICAgICAgICAgICAgICBhcmcsXHJcbiAgICAgICAgICAgICAgICBgKWBcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gYWxyZWFkeSBhIGNvbXBvdW5kIGV4cHJlc3Npb24uXHJcbiAgICAgICAgZXZlbnROYW1lID0gYXJnO1xyXG4gICAgICAgIGV2ZW50TmFtZS5jaGlsZHJlbi51bnNoaWZ0KGAke2NvbnRleHQuaGVscGVyU3RyaW5nKFRPX0hBTkRMRVJfS0VZKX0oYCk7XHJcbiAgICAgICAgZXZlbnROYW1lLmNoaWxkcmVuLnB1c2goYClgKTtcclxuICAgIH1cclxuICAgIC8vIGhhbmRsZXIgcHJvY2Vzc2luZ1xyXG4gICAgbGV0IGV4cCA9IGRpci5leHA7XHJcbiAgICBpZiAoZXhwICYmICFleHAuY29udGVudC50cmltKCkpIHtcclxuICAgICAgICBleHAgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBsZXQgc2hvdWxkQ2FjaGUgPSBjb250ZXh0LmNhY2hlSGFuZGxlcnMgJiYgIWV4cCAmJiAhY29udGV4dC5pblZPbmNlO1xyXG4gICAgaWYgKGV4cCkge1xyXG4gICAgICAgIGNvbnN0IGlzTWVtYmVyRXhwID0gaXNNZW1iZXJFeHByZXNzaW9uKGV4cC5jb250ZW50KTtcclxuICAgICAgICBjb25zdCBpc0lubGluZVN0YXRlbWVudCA9ICEoaXNNZW1iZXJFeHAgfHwgZm5FeHBSRS50ZXN0KGV4cC5jb250ZW50KSk7XHJcbiAgICAgICAgY29uc3QgaGFzTXVsdGlwbGVTdGF0ZW1lbnRzID0gZXhwLmNvbnRlbnQuaW5jbHVkZXMoYDtgKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHRydWUpIHtcclxuICAgICAgICAgICAgdmFsaWRhdGVCcm93c2VyRXhwcmVzc2lvbihleHAsIGNvbnRleHQsIGZhbHNlLCBoYXNNdWx0aXBsZVN0YXRlbWVudHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNJbmxpbmVTdGF0ZW1lbnQgfHwgKHNob3VsZENhY2hlICYmIGlzTWVtYmVyRXhwKSkge1xyXG4gICAgICAgICAgICAvLyB3cmFwIGlubGluZSBzdGF0ZW1lbnQgaW4gYSBmdW5jdGlvbiBleHByZXNzaW9uXHJcbiAgICAgICAgICAgIGV4cCA9IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbXHJcbiAgICAgICAgICAgICAgICBgJHtpc0lubGluZVN0YXRlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgID8gYCRldmVudGBcclxuICAgICAgICAgICAgICAgICAgICA6IGAke2BgfSguLi5hcmdzKWB9ID0+ICR7aGFzTXVsdGlwbGVTdGF0ZW1lbnRzID8gYHtgIDogYChgfWAsXHJcbiAgICAgICAgICAgICAgICBleHAsXHJcbiAgICAgICAgICAgICAgICBoYXNNdWx0aXBsZVN0YXRlbWVudHMgPyBgfWAgOiBgKWBcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbGV0IHJldCA9IHtcclxuICAgICAgICBwcm9wczogW1xyXG4gICAgICAgICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShldmVudE5hbWUsIGV4cCB8fCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGAoKSA9PiB7fWAsIGZhbHNlLCBsb2MpKVxyXG4gICAgICAgIF1cclxuICAgIH07XHJcbiAgICAvLyBhcHBseSBleHRlbmRlZCBjb21waWxlciBhdWdtZW50b3JcclxuICAgIGlmIChhdWdtZW50b3IpIHtcclxuICAgICAgICByZXQgPSBhdWdtZW50b3IocmV0KTtcclxuICAgIH1cclxuICAgIGlmIChzaG91bGRDYWNoZSkge1xyXG4gICAgICAgIC8vIGNhY2hlIGhhbmRsZXJzIHNvIHRoYXQgaXQncyBhbHdheXMgdGhlIHNhbWUgaGFuZGxlciBiZWluZyBwYXNzZWQgZG93bi5cclxuICAgICAgICAvLyB0aGlzIGF2b2lkcyB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzIHdoZW4gdXNlcnMgdXNlIGlubGluZSBoYW5kbGVycyBvblxyXG4gICAgICAgIC8vIGNvbXBvbmVudHMuXHJcbiAgICAgICAgcmV0LnByb3BzWzBdLnZhbHVlID0gY29udGV4dC5jYWNoZShyZXQucHJvcHNbMF0udmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLy8gbWFyayB0aGUga2V5IGFzIGhhbmRsZXIgZm9yIHByb3BzIG5vcm1hbGl6YXRpb24gY2hlY2tcclxuICAgIHJldC5wcm9wcy5mb3JFYWNoKHAgPT4gKHAua2V5LmlzSGFuZGxlcktleSA9IHRydWUpKTtcclxuICAgIHJldHVybiByZXQ7XHJcbn07XG5cbi8vIHYtYmluZCB3aXRob3V0IGFyZyBpcyBoYW5kbGVkIGRpcmVjdGx5IGluIC4vdHJhbnNmb3JtRWxlbWVudHMudHMgZHVlIHRvIGl0IGFmZmVjdGluZ1xyXG4vLyBjb2RlZ2VuIGZvciB0aGUgZW50aXJlIHByb3BzIG9iamVjdC4gVGhpcyB0cmFuc2Zvcm0gaGVyZSBpcyBvbmx5IGZvciB2LWJpbmRcclxuLy8gKndpdGgqIGFyZ3MuXHJcbmNvbnN0IHRyYW5zZm9ybUJpbmQgPSAoZGlyLCBfbm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgY29uc3QgeyBleHAsIG1vZGlmaWVycywgbG9jIH0gPSBkaXI7XHJcbiAgICBjb25zdCBhcmcgPSBkaXIuYXJnO1xyXG4gICAgaWYgKGFyZy50eXBlICE9PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovKSB7XHJcbiAgICAgICAgYXJnLmNoaWxkcmVuLnVuc2hpZnQoYChgKTtcclxuICAgICAgICBhcmcuY2hpbGRyZW4ucHVzaChgKSB8fCBcIlwiYCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICghYXJnLmlzU3RhdGljKSB7XHJcbiAgICAgICAgYXJnLmNvbnRlbnQgPSBgJHthcmcuY29udGVudH0gfHwgXCJcImA7XHJcbiAgICB9XHJcbiAgICAvLyAuc3luYyBpcyByZXBsYWNlZCBieSB2LW1vZGVsOmFyZ1xyXG4gICAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcygnY2FtZWwnKSkge1xyXG4gICAgICAgIGlmIChhcmcudHlwZSA9PT0gNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgICAgICBpZiAoYXJnLmlzU3RhdGljKSB7XHJcbiAgICAgICAgICAgICAgICBhcmcuY29udGVudCA9IGNhbWVsaXplJDEoYXJnLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXJnLmNvbnRlbnQgPSBgJHtjb250ZXh0LmhlbHBlclN0cmluZyhDQU1FTElaRSl9KCR7YXJnLmNvbnRlbnR9KWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFyZy5jaGlsZHJlbi51bnNoaWZ0KGAke2NvbnRleHQuaGVscGVyU3RyaW5nKENBTUVMSVpFKX0oYCk7XHJcbiAgICAgICAgICAgIGFyZy5jaGlsZHJlbi5wdXNoKGApYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFjb250ZXh0LmluU1NSKSB7XHJcbiAgICAgICAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcygncHJvcCcpKSB7XHJcbiAgICAgICAgICAgIGluamVjdFByZWZpeChhcmcsICcuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoJ2F0dHInKSkge1xyXG4gICAgICAgICAgICBpbmplY3RQcmVmaXgoYXJnLCAnXicpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghZXhwIHx8XHJcbiAgICAgICAgKGV4cC50eXBlID09PSA0IC8qIFNJTVBMRV9FWFBSRVNTSU9OICovICYmICFleHAuY29udGVudC50cmltKCkpKSB7XHJcbiAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoMzQgLyogWF9WX0JJTkRfTk9fRVhQUkVTU0lPTiAqLywgbG9jKSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJvcHM6IFtjcmVhdGVPYmplY3RQcm9wZXJ0eShhcmcsIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oJycsIHRydWUsIGxvYykpXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByb3BzOiBbY3JlYXRlT2JqZWN0UHJvcGVydHkoYXJnLCBleHApXVxyXG4gICAgfTtcclxufTtcclxuY29uc3QgaW5qZWN0UHJlZml4ID0gKGFyZywgcHJlZml4KSA9PiB7XHJcbiAgICBpZiAoYXJnLnR5cGUgPT09IDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi8pIHtcclxuICAgICAgICBpZiAoYXJnLmlzU3RhdGljKSB7XHJcbiAgICAgICAgICAgIGFyZy5jb250ZW50ID0gcHJlZml4ICsgYXJnLmNvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhcmcuY29udGVudCA9IGBcXGAke3ByZWZpeH1cXCR7JHthcmcuY29udGVudH19XFxgYDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhcmcuY2hpbGRyZW4udW5zaGlmdChgJyR7cHJlZml4fScgKyAoYCk7XHJcbiAgICAgICAgYXJnLmNoaWxkcmVuLnB1c2goYClgKTtcclxuICAgIH1cclxufTtcblxuLy8gTWVyZ2UgYWRqYWNlbnQgdGV4dCBub2RlcyBhbmQgZXhwcmVzc2lvbnMgaW50byBhIHNpbmdsZSBleHByZXNzaW9uXHJcbi8vIGUuZy4gPGRpdj5hYmMge3sgZCB9fSB7eyBlIH19PC9kaXY+IHNob3VsZCBoYXZlIGEgc2luZ2xlIGV4cHJlc3Npb24gbm9kZSBhcyBjaGlsZC5cclxuY29uc3QgdHJhbnNmb3JtVGV4dCA9IChub2RlLCBjb250ZXh0KSA9PiB7XHJcbiAgICBpZiAobm9kZS50eXBlID09PSAwIC8qIFJPT1QgKi8gfHxcclxuICAgICAgICBub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyB8fFxyXG4gICAgICAgIG5vZGUudHlwZSA9PT0gMTEgLyogRk9SICovIHx8XHJcbiAgICAgICAgbm9kZS50eXBlID09PSAxMCAvKiBJRl9CUkFOQ0ggKi8pIHtcclxuICAgICAgICAvLyBwZXJmb3JtIHRoZSB0cmFuc2Zvcm0gb24gbm9kZSBleGl0IHNvIHRoYXQgYWxsIGV4cHJlc3Npb25zIGhhdmUgYWxyZWFkeVxyXG4gICAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLlxyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbjtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRDb250YWluZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIGxldCBoYXNUZXh0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNUZXh0KGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc1RleHQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSBjaGlsZHJlbltqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVGV4dChuZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50Q29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbnRhaW5lciA9IGNoaWxkcmVuW2ldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiA4IC8qIENPTVBPVU5EX0VYUFJFU1NJT04gKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYzogY2hpbGQubG9jLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW2NoaWxkXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGUgaW50byBjdXJyZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29udGFpbmVyLmNoaWxkcmVuLnB1c2goYCArIGAsIG5leHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uc3BsaWNlKGosIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgai0tO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbnRhaW5lciA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghaGFzVGV4dCB8fFxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhIHBsYWluIGVsZW1lbnQgd2l0aCBhIHNpbmdsZSB0ZXh0IGNoaWxkLCBsZWF2ZSBpdFxyXG4gICAgICAgICAgICAgICAgLy8gYXMtaXMgc2luY2UgdGhlIHJ1bnRpbWUgaGFzIGRlZGljYXRlZCBmYXN0IHBhdGggZm9yIHRoaXMgYnkgZGlyZWN0bHlcclxuICAgICAgICAgICAgICAgIC8vIHNldHRpbmcgdGV4dENvbnRlbnQgb2YgdGhlIGVsZW1lbnQuXHJcbiAgICAgICAgICAgICAgICAvLyBmb3IgY29tcG9uZW50IHJvb3QgaXQncyBhbHdheXMgbm9ybWFsaXplZCBhbnl3YXkuXHJcbiAgICAgICAgICAgICAgICAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKG5vZGUudHlwZSA9PT0gMCAvKiBST09UICovIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50YWdUeXBlID09PSAwIC8qIEVMRU1FTlQgKi8gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICMzNzU2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXN0b20gZGlyZWN0aXZlcyBjYW4gcG90ZW50aWFsbHkgYWRkIERPTSBlbGVtZW50cyBhcmJpdHJhcmlseSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gYXZvaWQgc2V0dGluZyB0ZXh0Q29udGVudCBvZiB0aGUgZWxlbWVudCBhdCBydW50aW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBhdm9pZCBhY2NpZGVudGFsbHkgb3ZlcndyaXRpbmcgdGhlIERPTSBlbGVtZW50cyBhZGRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnkgdGhlIHVzZXIgdGhyb3VnaCBjdXN0b20gZGlyZWN0aXZlcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFub2RlLnByb3BzLmZpbmQocCA9PiBwLnR5cGUgPT09IDcgLyogRElSRUNUSVZFICovICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWNvbnRleHQuZGlyZWN0aXZlVHJhbnNmb3Jtc1twLm5hbWVdKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW4gY29tcGF0IG1vZGUsIDx0ZW1wbGF0ZT4gdGFncyB3aXRoIG5vIHNwZWNpYWwgZGlyZWN0aXZlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2lsbCBiZSByZW5kZXJlZCBhcyBhIGZyYWdtZW50IHNvIGl0cyBjaGlsZHJlbiBtdXN0IGJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0ZWQgaW50byB2bm9kZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhKG5vZGUudGFnID09PSAndGVtcGxhdGUnKSkpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByZS1jb252ZXJ0IHRleHQgbm9kZXMgaW50byBjcmVhdGVUZXh0Vk5vZGUodGV4dCkgY2FsbHMgdG8gYXZvaWRcclxuICAgICAgICAgICAgLy8gcnVudGltZSBub3JtYWxpemF0aW9uLlxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzVGV4dChjaGlsZCkgfHwgY2hpbGQudHlwZSA9PT0gOCAvKiBDT01QT1VORF9FWFBSRVNTSU9OICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbEFyZ3MgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGVUZXh0Vk5vZGUgZGVmYXVsdHMgdG8gc2luZ2xlIHdoaXRlc3BhY2UsIHNvIGlmIGl0IGlzIGFcclxuICAgICAgICAgICAgICAgICAgICAvLyBzaW5nbGUgc3BhY2UgdGhlIGNvZGUgY291bGQgYmUgYW4gZW1wdHkgY2FsbCB0byBzYXZlIGJ5dGVzLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50eXBlICE9PSAyIC8qIFRFWFQgKi8gfHwgY2hpbGQuY29udGVudCAhPT0gJyAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxBcmdzLnB1c2goY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBtYXJrIGR5bmFtaWMgdGV4dCB3aXRoIGZsYWcgc28gaXQgZ2V0cyBwYXRjaGVkIGluc2lkZSBhIGJsb2NrXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZXh0LnNzciAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRDb25zdGFudFR5cGUoY2hpbGQsIGNvbnRleHQpID09PSAwIC8qIE5PVF9DT05TVEFOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsQXJncy5wdXNoKDEgLyogVEVYVCAqLyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYCAvKiAke1BhdGNoRmxhZ05hbWVzWzEgLyogVEVYVCAqL119ICovYCA6IGBgKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuW2ldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAxMiAvKiBURVhUX0NBTEwgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNoaWxkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2M6IGNoaWxkLmxvYyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29kZWdlbk5vZGU6IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKENSRUFURV9URVhUKSwgY2FsbEFyZ3MpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XG5cbmNvbnN0IHNlZW4gPSBuZXcgV2Vha1NldCgpO1xyXG5jb25zdCB0cmFuc2Zvcm1PbmNlID0gKG5vZGUsIGNvbnRleHQpID0+IHtcclxuICAgIGlmIChub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJiBmaW5kRGlyKG5vZGUsICdvbmNlJywgdHJ1ZSkpIHtcclxuICAgICAgICBpZiAoc2Vlbi5oYXMobm9kZSkgfHwgY29udGV4dC5pblZPbmNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2Vlbi5hZGQobm9kZSk7XHJcbiAgICAgICAgY29udGV4dC5pblZPbmNlID0gdHJ1ZTtcclxuICAgICAgICBjb250ZXh0LmhlbHBlcihTRVRfQkxPQ0tfVFJBQ0tJTkcpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuaW5WT25jZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBjdXIgPSBjb250ZXh0LmN1cnJlbnROb2RlO1xyXG4gICAgICAgICAgICBpZiAoY3VyLmNvZGVnZW5Ob2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjdXIuY29kZWdlbk5vZGUgPSBjb250ZXh0LmNhY2hlKGN1ci5jb2RlZ2VuTm9kZSwgdHJ1ZSAvKiBpc1ZOb2RlICovKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XG5cbmNvbnN0IHRyYW5zZm9ybU1vZGVsID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgY29uc3QgeyBleHAsIGFyZyB9ID0gZGlyO1xyXG4gICAgaWYgKCFleHApIHtcclxuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcig0MSAvKiBYX1ZfTU9ERUxfTk9fRVhQUkVTU0lPTiAqLywgZGlyLmxvYykpO1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVUcmFuc2Zvcm1Qcm9wcygpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmF3RXhwID0gZXhwLmxvYy5zb3VyY2U7XHJcbiAgICBjb25zdCBleHBTdHJpbmcgPSBleHAudHlwZSA9PT0gNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLyA/IGV4cC5jb250ZW50IDogcmF3RXhwO1xyXG4gICAgLy8gaW0gU0ZDIDxzY3JpcHQgc2V0dXA+IGlubGluZSBtb2RlLCB0aGUgZXhwIG1heSBoYXZlIGJlZW4gdHJhbnNmb3JtZWQgaW50b1xyXG4gICAgLy8gX3VucmVmKGV4cClcclxuICAgIGNvbnRleHQuYmluZGluZ01ldGFkYXRhW3Jhd0V4cF07XHJcbiAgICBjb25zdCBtYXliZVJlZiA9ICF0cnVlICAgIC8qIFNFVFVQX0NPTlNUICovO1xyXG4gICAgaWYgKCFleHBTdHJpbmcudHJpbSgpIHx8XHJcbiAgICAgICAgKCFpc01lbWJlckV4cHJlc3Npb24oZXhwU3RyaW5nKSAmJiAhbWF5YmVSZWYpKSB7XHJcbiAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoNDIgLyogWF9WX01PREVMX01BTEZPUk1FRF9FWFBSRVNTSU9OICovLCBleHAubG9jKSk7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVRyYW5zZm9ybVByb3BzKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9wTmFtZSA9IGFyZyA/IGFyZyA6IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oJ21vZGVsVmFsdWUnLCB0cnVlKTtcclxuICAgIGNvbnN0IGV2ZW50TmFtZSA9IGFyZ1xyXG4gICAgICAgID8gaXNTdGF0aWNFeHAoYXJnKVxyXG4gICAgICAgICAgICA/IGBvblVwZGF0ZToke2FyZy5jb250ZW50fWBcclxuICAgICAgICAgICAgOiBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oWydcIm9uVXBkYXRlOlwiICsgJywgYXJnXSlcclxuICAgICAgICA6IGBvblVwZGF0ZTptb2RlbFZhbHVlYDtcclxuICAgIGxldCBhc3NpZ25tZW50RXhwO1xyXG4gICAgY29uc3QgZXZlbnRBcmcgPSBjb250ZXh0LmlzVFMgPyBgKCRldmVudDogYW55KWAgOiBgJGV2ZW50YDtcclxuICAgIHtcclxuICAgICAgICBhc3NpZ25tZW50RXhwID0gY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFtcclxuICAgICAgICAgICAgYCR7ZXZlbnRBcmd9ID0+ICgoYCxcclxuICAgICAgICAgICAgZXhwLFxyXG4gICAgICAgICAgICBgKSA9ICRldmVudClgXHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9wcyA9IFtcclxuICAgICAgICAvLyBtb2RlbFZhbHVlOiBmb29cclxuICAgICAgICBjcmVhdGVPYmplY3RQcm9wZXJ0eShwcm9wTmFtZSwgZGlyLmV4cCksXHJcbiAgICAgICAgLy8gXCJvblVwZGF0ZTptb2RlbFZhbHVlXCI6ICRldmVudCA9PiAoZm9vID0gJGV2ZW50KVxyXG4gICAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KGV2ZW50TmFtZSwgYXNzaWdubWVudEV4cClcclxuICAgIF07XHJcbiAgICAvLyBtb2RlbE1vZGlmaWVyczogeyBmb286IHRydWUsIFwiYmFyLWJhelwiOiB0cnVlIH1cclxuICAgIGlmIChkaXIubW9kaWZpZXJzLmxlbmd0aCAmJiBub2RlLnRhZ1R5cGUgPT09IDEgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVyc1xyXG4gICAgICAgICAgICAubWFwKG0gPT4gKGlzU2ltcGxlSWRlbnRpZmllcihtKSA/IG0gOiBKU09OLnN0cmluZ2lmeShtKSkgKyBgOiB0cnVlYClcclxuICAgICAgICAgICAgLmpvaW4oYCwgYCk7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZXJzS2V5ID0gYXJnXHJcbiAgICAgICAgICAgID8gaXNTdGF0aWNFeHAoYXJnKVxyXG4gICAgICAgICAgICAgICAgPyBgJHthcmcuY29udGVudH1Nb2RpZmllcnNgXHJcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZUNvbXBvdW5kRXhwcmVzc2lvbihbYXJnLCAnICsgXCJNb2RpZmllcnNcIiddKVxyXG4gICAgICAgICAgICA6IGBtb2RlbE1vZGlmaWVyc2A7XHJcbiAgICAgICAgcHJvcHMucHVzaChjcmVhdGVPYmplY3RQcm9wZXJ0eShtb2RpZmllcnNLZXksIGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHsgJHttb2RpZmllcnN9IH1gLCBmYWxzZSwgZGlyLmxvYywgMiAvKiBDQU5fSE9JU1QgKi8pKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlVHJhbnNmb3JtUHJvcHMocHJvcHMpO1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVUcmFuc2Zvcm1Qcm9wcyhwcm9wcyA9IFtdKSB7XHJcbiAgICByZXR1cm4geyBwcm9wcyB9O1xyXG59XG5cbmNvbnN0IHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1xcdykuK1xcLV8kXFxdXS87XHJcbmNvbnN0IHRyYW5zZm9ybUZpbHRlciA9IChub2RlLCBjb250ZXh0KSA9PiB7XHJcbiAgICBpZiAoIWlzQ29tcGF0RW5hYmxlZChcIkNPTVBJTEVSX0ZJTFRFUlwiIC8qIENPTVBJTEVSX0ZJTFRFUlMgKi8sIGNvbnRleHQpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gNSAvKiBJTlRFUlBPTEFUSU9OICovKSB7XHJcbiAgICAgICAgLy8gZmlsdGVyIHJld3JpdGUgaXMgYXBwbGllZCBiZWZvcmUgZXhwcmVzc2lvbiB0cmFuc2Zvcm0gc28gb25seVxyXG4gICAgICAgIC8vIHNpbXBsZSBleHByZXNzaW9ucyBhcmUgcG9zc2libGUgYXQgdGhpcyBzdGFnZVxyXG4gICAgICAgIHJld3JpdGVGaWx0ZXIobm9kZS5jb250ZW50LCBjb250ZXh0KTtcclxuICAgIH1cclxuICAgIGlmIChub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgIG5vZGUucHJvcHMuZm9yRWFjaCgocHJvcCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocHJvcC50eXBlID09PSA3IC8qIERJUkVDVElWRSAqLyAmJlxyXG4gICAgICAgICAgICAgICAgcHJvcC5uYW1lICE9PSAnZm9yJyAmJlxyXG4gICAgICAgICAgICAgICAgcHJvcC5leHApIHtcclxuICAgICAgICAgICAgICAgIHJld3JpdGVGaWx0ZXIocHJvcC5leHAsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHJld3JpdGVGaWx0ZXIobm9kZSwgY29udGV4dCkge1xyXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gNCAvKiBTSU1QTEVfRVhQUkVTU0lPTiAqLykge1xyXG4gICAgICAgIHBhcnNlRmlsdGVyKG5vZGUsIGNvbnRleHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjaGlsZCAhPT0gJ29iamVjdCcpXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi8pIHtcclxuICAgICAgICAgICAgICAgIHBhcnNlRmlsdGVyKGNoaWxkLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjaGlsZC50eXBlID09PSA4IC8qIENPTVBPVU5EX0VYUFJFU1NJT04gKi8pIHtcclxuICAgICAgICAgICAgICAgIHJld3JpdGVGaWx0ZXIobm9kZSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY2hpbGQudHlwZSA9PT0gNSAvKiBJTlRFUlBPTEFUSU9OICovKSB7XHJcbiAgICAgICAgICAgICAgICByZXdyaXRlRmlsdGVyKGNoaWxkLmNvbnRlbnQsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHBhcnNlRmlsdGVyKG5vZGUsIGNvbnRleHQpIHtcclxuICAgIGNvbnN0IGV4cCA9IG5vZGUuY29udGVudDtcclxuICAgIGxldCBpblNpbmdsZSA9IGZhbHNlO1xyXG4gICAgbGV0IGluRG91YmxlID0gZmFsc2U7XHJcbiAgICBsZXQgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xyXG4gICAgbGV0IGluUmVnZXggPSBmYWxzZTtcclxuICAgIGxldCBjdXJseSA9IDA7XHJcbiAgICBsZXQgc3F1YXJlID0gMDtcclxuICAgIGxldCBwYXJlbiA9IDA7XHJcbiAgICBsZXQgbGFzdEZpbHRlckluZGV4ID0gMDtcclxuICAgIGxldCBjLCBwcmV2LCBpLCBleHByZXNzaW9uLCBmaWx0ZXJzID0gW107XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgZXhwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcHJldiA9IGM7XHJcbiAgICAgICAgYyA9IGV4cC5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChpblNpbmdsZSkge1xyXG4gICAgICAgICAgICBpZiAoYyA9PT0gMHgyNyAmJiBwcmV2ICE9PSAweDVjKVxyXG4gICAgICAgICAgICAgICAgaW5TaW5nbGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5Eb3VibGUpIHtcclxuICAgICAgICAgICAgaWYgKGMgPT09IDB4MjIgJiYgcHJldiAhPT0gMHg1YylcclxuICAgICAgICAgICAgICAgIGluRG91YmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluVGVtcGxhdGVTdHJpbmcpIHtcclxuICAgICAgICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1YylcclxuICAgICAgICAgICAgICAgIGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaW5SZWdleCkge1xyXG4gICAgICAgICAgICBpZiAoYyA9PT0gMHgyZiAmJiBwcmV2ICE9PSAweDVjKVxyXG4gICAgICAgICAgICAgICAgaW5SZWdleCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjID09PSAweDdjICYmIC8vIHBpcGVcclxuICAgICAgICAgICAgZXhwLmNoYXJDb2RlQXQoaSArIDEpICE9PSAweDdjICYmXHJcbiAgICAgICAgICAgIGV4cC5jaGFyQ29kZUF0KGkgLSAxKSAhPT0gMHg3YyAmJlxyXG4gICAgICAgICAgICAhY3VybHkgJiZcclxuICAgICAgICAgICAgIXNxdWFyZSAmJlxyXG4gICAgICAgICAgICAhcGFyZW4pIHtcclxuICAgICAgICAgICAgaWYgKGV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxyXG4gICAgICAgICAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XHJcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHB1c2hGaWx0ZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc3dpdGNoIChjKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4MjI6XHJcbiAgICAgICAgICAgICAgICAgICAgaW5Eb3VibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBcIlxyXG4gICAgICAgICAgICAgICAgY2FzZSAweDI3OlxyXG4gICAgICAgICAgICAgICAgICAgIGluU2luZ2xlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gJ1xyXG4gICAgICAgICAgICAgICAgY2FzZSAweDYwOlxyXG4gICAgICAgICAgICAgICAgICAgIGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBgXHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4Mjg6XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW4rKztcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gKFxyXG4gICAgICAgICAgICAgICAgY2FzZSAweDI5OlxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVuLS07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIClcclxuICAgICAgICAgICAgICAgIGNhc2UgMHg1YjpcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUrKztcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gW1xyXG4gICAgICAgICAgICAgICAgY2FzZSAweDVkOlxyXG4gICAgICAgICAgICAgICAgICAgIHNxdWFyZS0tO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBdXHJcbiAgICAgICAgICAgICAgICBjYXNlIDB4N2I6XHJcbiAgICAgICAgICAgICAgICAgICAgY3VybHkrKztcclxuICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8ge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAweDdkOlxyXG4gICAgICAgICAgICAgICAgICAgIGN1cmx5LS07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYyA9PT0gMHgyZikge1xyXG4gICAgICAgICAgICAgICAgLy8gL1xyXG4gICAgICAgICAgICAgICAgbGV0IGogPSBpIC0gMTtcclxuICAgICAgICAgICAgICAgIGxldCBwO1xyXG4gICAgICAgICAgICAgICAgLy8gZmluZCBmaXJzdCBub24td2hpdGVzcGFjZSBwcmV2IGNoYXJcclxuICAgICAgICAgICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHAgPSBleHAuY2hhckF0KGopO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwICE9PSAnICcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFwIHx8ICF2YWxpZERpdmlzaW9uQ2hhclJFLnRlc3QocCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpblJlZ2V4ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGxhc3RGaWx0ZXJJbmRleCAhPT0gMCkge1xyXG4gICAgICAgIHB1c2hGaWx0ZXIoKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHB1c2hGaWx0ZXIoKSB7XHJcbiAgICAgICAgZmlsdGVycy5wdXNoKGV4cC5zbGljZShsYXN0RmlsdGVySW5kZXgsIGkpLnRyaW0oKSk7XHJcbiAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XHJcbiAgICB9XHJcbiAgICBpZiAoZmlsdGVycy5sZW5ndGgpIHtcclxuICAgICAgICAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgJiZcclxuICAgICAgICAgICAgd2FybkRlcHJlY2F0aW9uKFwiQ09NUElMRVJfRklMVEVSXCIgLyogQ09NUElMRVJfRklMVEVSUyAqLywgY29udGV4dCwgbm9kZS5sb2MpO1xyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0sIGNvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBub2RlLmNvbnRlbnQgPSBleHByZXNzaW9uO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHdyYXBGaWx0ZXIoZXhwLCBmaWx0ZXIsIGNvbnRleHQpIHtcclxuICAgIGNvbnRleHQuaGVscGVyKFJFU09MVkVfRklMVEVSKTtcclxuICAgIGNvbnN0IGkgPSBmaWx0ZXIuaW5kZXhPZignKCcpO1xyXG4gICAgaWYgKGkgPCAwKSB7XHJcbiAgICAgICAgY29udGV4dC5maWx0ZXJzLmFkZChmaWx0ZXIpO1xyXG4gICAgICAgIHJldHVybiBgJHt0b1ZhbGlkQXNzZXRJZChmaWx0ZXIsICdmaWx0ZXInKX0oJHtleHB9KWA7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBuYW1lID0gZmlsdGVyLnNsaWNlKDAsIGkpO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBmaWx0ZXIuc2xpY2UoaSArIDEpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsdGVycy5hZGQobmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIGAke3RvVmFsaWRBc3NldElkKG5hbWUsICdmaWx0ZXInKX0oJHtleHB9JHthcmdzICE9PSAnKScgPyAnLCcgKyBhcmdzIDogYXJnc31gO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IHNlZW4kMSA9IG5ldyBXZWFrU2V0KCk7XHJcbmNvbnN0IHRyYW5zZm9ybU1lbW8gPSAobm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMSAvKiBFTEVNRU5UICovKSB7XHJcbiAgICAgICAgY29uc3QgZGlyID0gZmluZERpcihub2RlLCAnbWVtbycpO1xyXG4gICAgICAgIGlmICghZGlyIHx8IHNlZW4kMS5oYXMobm9kZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZWVuJDEuYWRkKG5vZGUpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGVnZW5Ob2RlID0gbm9kZS5jb2RlZ2VuTm9kZSB8fFxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5jdXJyZW50Tm9kZS5jb2RlZ2VuTm9kZTtcclxuICAgICAgICAgICAgaWYgKGNvZGVnZW5Ob2RlICYmIGNvZGVnZW5Ob2RlLnR5cGUgPT09IDEzIC8qIFZOT0RFX0NBTEwgKi8pIHtcclxuICAgICAgICAgICAgICAgIC8vIG5vbi1jb21wb25lbnQgc3ViIHRyZWUgc2hvdWxkIGJlIHR1cm5lZCBpbnRvIGEgYmxvY2tcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLnRhZ1R5cGUgIT09IDEgLyogQ09NUE9ORU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFrZUJsb2NrKGNvZGVnZW5Ob2RlLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5vZGUuY29kZWdlbk5vZGUgPSBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlcihXSVRIX01FTU8pLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgZGlyLmV4cCxcclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVGdW5jdGlvbkV4cHJlc3Npb24odW5kZWZpbmVkLCBjb2RlZ2VuTm9kZSksXHJcbiAgICAgICAgICAgICAgICAgICAgYF9jYWNoZWAsXHJcbiAgICAgICAgICAgICAgICAgICAgU3RyaW5nKGNvbnRleHQuY2FjaGVkKyspXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XG5cbmZ1bmN0aW9uIGdldEJhc2VUcmFuc2Zvcm1QcmVzZXQocHJlZml4SWRlbnRpZmllcnMpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm1PbmNlLFxyXG4gICAgICAgICAgICB0cmFuc2Zvcm1JZixcclxuICAgICAgICAgICAgdHJhbnNmb3JtTWVtbyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtRm9yLFxyXG4gICAgICAgICAgICAuLi4oW3RyYW5zZm9ybUZpbHRlcl0gKSxcclxuICAgICAgICAgICAgLi4uKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKVxyXG4gICAgICAgICAgICAgICAgICAgID8gW3RyYW5zZm9ybUV4cHJlc3Npb25dXHJcbiAgICAgICAgICAgICAgICAgICAgOiBbXSksXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybVNsb3RPdXRsZXQsXHJcbiAgICAgICAgICAgIHRyYW5zZm9ybUVsZW1lbnQsXHJcbiAgICAgICAgICAgIHRyYWNrU2xvdFNjb3BlcyxcclxuICAgICAgICAgICAgdHJhbnNmb3JtVGV4dFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBvbjogdHJhbnNmb3JtT24sXHJcbiAgICAgICAgICAgIGJpbmQ6IHRyYW5zZm9ybUJpbmQsXHJcbiAgICAgICAgICAgIG1vZGVsOiB0cmFuc2Zvcm1Nb2RlbFxyXG4gICAgICAgIH1cclxuICAgIF07XHJcbn1cclxuLy8gd2UgbmFtZSBpdCBgYmFzZUNvbXBpbGVgIHNvIHRoYXQgaGlnaGVyIG9yZGVyIGNvbXBpbGVycyBsaWtlXHJcbi8vIEB2dWUvY29tcGlsZXItZG9tIGNhbiBleHBvcnQgYGNvbXBpbGVgIHdoaWxlIHJlLWV4cG9ydGluZyBldmVyeXRoaW5nIGVsc2UuXHJcbmZ1bmN0aW9uIGJhc2VDb21waWxlKHRlbXBsYXRlLCBvcHRpb25zID0ge30pIHtcclxuICAgIGNvbnN0IG9uRXJyb3IgPSBvcHRpb25zLm9uRXJyb3IgfHwgZGVmYXVsdE9uRXJyb3I7XHJcbiAgICBjb25zdCBpc01vZHVsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09ICdtb2R1bGUnO1xyXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucHJlZml4SWRlbnRpZmllcnMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgb25FcnJvcihjcmVhdGVDb21waWxlckVycm9yKDQ2IC8qIFhfUFJFRklYX0lEX05PVF9TVVBQT1JURUQgKi8pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoaXNNb2R1bGVNb2RlKSB7XHJcbiAgICAgICAgICAgIG9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcig0NyAvKiBYX01PRFVMRV9NT0RFX05PVF9TVVBQT1JURUQgKi8pKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcmVmaXhJZGVudGlmaWVycyA9ICF0cnVlIDtcclxuICAgIGlmIChvcHRpb25zLmNhY2hlSGFuZGxlcnMpIHtcclxuICAgICAgICBvbkVycm9yKGNyZWF0ZUNvbXBpbGVyRXJyb3IoNDggLyogWF9DQUNIRV9IQU5ETEVSX05PVF9TVVBQT1JURUQgKi8pKTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLnNjb3BlSWQgJiYgIWlzTW9kdWxlTW9kZSkge1xyXG4gICAgICAgIG9uRXJyb3IoY3JlYXRlQ29tcGlsZXJFcnJvcig0OSAvKiBYX1NDT1BFX0lEX05PVF9TVVBQT1JURUQgKi8pKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGFzdCA9IGlzU3RyaW5nKHRlbXBsYXRlKSA/IGJhc2VQYXJzZSh0ZW1wbGF0ZSwgb3B0aW9ucykgOiB0ZW1wbGF0ZTtcclxuICAgIGNvbnN0IFtub2RlVHJhbnNmb3JtcywgZGlyZWN0aXZlVHJhbnNmb3Jtc10gPSBnZXRCYXNlVHJhbnNmb3JtUHJlc2V0KCk7XHJcbiAgICB0cmFuc2Zvcm0oYXN0LCBleHRlbmQoe30sIG9wdGlvbnMsIHtcclxuICAgICAgICBwcmVmaXhJZGVudGlmaWVycyxcclxuICAgICAgICBub2RlVHJhbnNmb3JtczogW1xyXG4gICAgICAgICAgICAuLi5ub2RlVHJhbnNmb3JtcyxcclxuICAgICAgICAgICAgLi4uKG9wdGlvbnMubm9kZVRyYW5zZm9ybXMgfHwgW10pIC8vIHVzZXIgdHJhbnNmb3Jtc1xyXG4gICAgICAgIF0sXHJcbiAgICAgICAgZGlyZWN0aXZlVHJhbnNmb3JtczogZXh0ZW5kKHt9LCBkaXJlY3RpdmVUcmFuc2Zvcm1zLCBvcHRpb25zLmRpcmVjdGl2ZVRyYW5zZm9ybXMgfHwge30gLy8gdXNlciB0cmFuc2Zvcm1zXHJcbiAgICAgICAgKVxyXG4gICAgfSkpO1xyXG4gICAgcmV0dXJuIGdlbmVyYXRlKGFzdCwgZXh0ZW5kKHt9LCBvcHRpb25zLCB7XHJcbiAgICAgICAgcHJlZml4SWRlbnRpZmllcnNcclxuICAgIH0pKTtcclxufVxuXG5jb25zdCBub29wRGlyZWN0aXZlVHJhbnNmb3JtID0gKCkgPT4gKHsgcHJvcHM6IFtdIH0pO1xuXG5leHBvcnQgeyBCQVNFX1RSQU5TSVRJT04sIENBTUVMSVpFLCBDQVBJVEFMSVpFLCBDUkVBVEVfQkxPQ0ssIENSRUFURV9DT01NRU5ULCBDUkVBVEVfRUxFTUVOVF9CTE9DSywgQ1JFQVRFX0VMRU1FTlRfVk5PREUsIENSRUFURV9TTE9UUywgQ1JFQVRFX1NUQVRJQywgQ1JFQVRFX1RFWFQsIENSRUFURV9WTk9ERSwgRlJBR01FTlQsIEdVQVJEX1JFQUNUSVZFX1BST1BTLCBJU19NRU1PX1NBTUUsIElTX1JFRiwgS0VFUF9BTElWRSwgTUVSR0VfUFJPUFMsIE5PUk1BTElaRV9DTEFTUywgTk9STUFMSVpFX1BST1BTLCBOT1JNQUxJWkVfU1RZTEUsIE9QRU5fQkxPQ0ssIFBPUF9TQ09QRV9JRCwgUFVTSF9TQ09QRV9JRCwgUkVOREVSX0xJU1QsIFJFTkRFUl9TTE9ULCBSRVNPTFZFX0NPTVBPTkVOVCwgUkVTT0xWRV9ESVJFQ1RJVkUsIFJFU09MVkVfRFlOQU1JQ19DT01QT05FTlQsIFJFU09MVkVfRklMVEVSLCBTRVRfQkxPQ0tfVFJBQ0tJTkcsIFNVU1BFTlNFLCBURUxFUE9SVCwgVE9fRElTUExBWV9TVFJJTkcsIFRPX0hBTkRMRVJTLCBUT19IQU5ETEVSX0tFWSwgVU5SRUYsIFdJVEhfQ1RYLCBXSVRIX0RJUkVDVElWRVMsIFdJVEhfTUVNTywgYWR2YW5jZVBvc2l0aW9uV2l0aENsb25lLCBhZHZhbmNlUG9zaXRpb25XaXRoTXV0YXRpb24sIGFzc2VydCwgYmFzZUNvbXBpbGUsIGJhc2VQYXJzZSwgYnVpbGRQcm9wcywgYnVpbGRTbG90cywgY2hlY2tDb21wYXRFbmFibGVkLCBjcmVhdGVBcnJheUV4cHJlc3Npb24sIGNyZWF0ZUFzc2lnbm1lbnRFeHByZXNzaW9uLCBjcmVhdGVCbG9ja1N0YXRlbWVudCwgY3JlYXRlQ2FjaGVFeHByZXNzaW9uLCBjcmVhdGVDYWxsRXhwcmVzc2lvbiwgY3JlYXRlQ29tcGlsZXJFcnJvciwgY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uLCBjcmVhdGVDb25kaXRpb25hbEV4cHJlc3Npb24sIGNyZWF0ZUZvckxvb3BQYXJhbXMsIGNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbiwgY3JlYXRlSWZTdGF0ZW1lbnQsIGNyZWF0ZUludGVycG9sYXRpb24sIGNyZWF0ZU9iamVjdEV4cHJlc3Npb24sIGNyZWF0ZU9iamVjdFByb3BlcnR5LCBjcmVhdGVSZXR1cm5TdGF0ZW1lbnQsIGNyZWF0ZVJvb3QsIGNyZWF0ZVNlcXVlbmNlRXhwcmVzc2lvbiwgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbiwgY3JlYXRlU3RydWN0dXJhbERpcmVjdGl2ZVRyYW5zZm9ybSwgY3JlYXRlVGVtcGxhdGVMaXRlcmFsLCBjcmVhdGVUcmFuc2Zvcm1Db250ZXh0LCBjcmVhdGVWTm9kZUNhbGwsIGV4dHJhY3RJZGVudGlmaWVycywgZmluZERpciwgZmluZFByb3AsIGdlbmVyYXRlLCBnZXRCYXNlVHJhbnNmb3JtUHJlc2V0LCBnZXRJbm5lclJhbmdlLCBnZXRNZW1vZWRWTm9kZUNhbGwsIGdldFZOb2RlQmxvY2tIZWxwZXIsIGdldFZOb2RlSGVscGVyLCBoYXNEeW5hbWljS2V5VkJpbmQsIGhhc1Njb3BlUmVmLCBoZWxwZXJOYW1lTWFwLCBpbmplY3RQcm9wLCBpc0J1aWx0SW5UeXBlLCBpc0NvcmVDb21wb25lbnQsIGlzRnVuY3Rpb25UeXBlLCBpc0luRGVzdHJ1Y3R1cmVBc3NpZ25tZW50LCBpc01lbWJlckV4cHJlc3Npb24sIGlzTWVtYmVyRXhwcmVzc2lvbkJyb3dzZXIsIGlzTWVtYmVyRXhwcmVzc2lvbk5vZGUsIGlzUmVmZXJlbmNlZElkZW50aWZpZXIsIGlzU2ltcGxlSWRlbnRpZmllciwgaXNTbG90T3V0bGV0LCBpc1N0YXRpY0FyZ09mLCBpc1N0YXRpY0V4cCwgaXNTdGF0aWNQcm9wZXJ0eSwgaXNTdGF0aWNQcm9wZXJ0eUtleSwgaXNUZW1wbGF0ZU5vZGUsIGlzVGV4dCwgaXNWU2xvdCwgbG9jU3R1YiwgbWFrZUJsb2NrLCBub29wRGlyZWN0aXZlVHJhbnNmb3JtLCBwcm9jZXNzRXhwcmVzc2lvbiwgcHJvY2Vzc0ZvciwgcHJvY2Vzc0lmLCBwcm9jZXNzU2xvdE91dGxldCwgcmVnaXN0ZXJSdW50aW1lSGVscGVycywgcmVzb2x2ZUNvbXBvbmVudFR5cGUsIHRvVmFsaWRBc3NldElkLCB0cmFja1Nsb3RTY29wZXMsIHRyYWNrVkZvclNsb3RTY29wZXMsIHRyYW5zZm9ybSwgdHJhbnNmb3JtQmluZCwgdHJhbnNmb3JtRWxlbWVudCwgdHJhbnNmb3JtRXhwcmVzc2lvbiwgdHJhbnNmb3JtTW9kZWwsIHRyYW5zZm9ybU9uLCB0cmF2ZXJzZU5vZGUsIHdhbGtCbG9ja0RlY2xhcmF0aW9ucywgd2Fsa0Z1bmN0aW9uUGFyYW1zLCB3YWxrSWRlbnRpZmllcnMsIHdhcm5EZXByZWNhdGlvbiB9O1xuIiwiaW1wb3J0IHsgcmVnaXN0ZXJSdW50aW1lSGVscGVycywgaXNCdWlsdEluVHlwZSwgY3JlYXRlU2ltcGxlRXhwcmVzc2lvbiwgY3JlYXRlQ29tcGlsZXJFcnJvciwgY3JlYXRlT2JqZWN0UHJvcGVydHksIGNyZWF0ZUNhbGxFeHByZXNzaW9uLCBUT19ESVNQTEFZX1NUUklORywgdHJhbnNmb3JtTW9kZWwgYXMgdHJhbnNmb3JtTW9kZWwkMSwgZmluZFByb3AsIGhhc0R5bmFtaWNLZXlWQmluZCwgdHJhbnNmb3JtT24gYXMgdHJhbnNmb3JtT24kMSwgY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uLCBpc1N0YXRpY0V4cCwgY2hlY2tDb21wYXRFbmFibGVkLCBub29wRGlyZWN0aXZlVHJhbnNmb3JtLCBiYXNlQ29tcGlsZSwgYmFzZVBhcnNlIH0gZnJvbSAnQHZ1ZS9jb21waWxlci1jb3JlJztcbmV4cG9ydCAqIGZyb20gJ0B2dWUvY29tcGlsZXItY29yZSc7XG5pbXBvcnQgeyBpc1ZvaWRUYWcsIGlzSFRNTFRhZywgaXNTVkdUYWcsIG1ha2VNYXAsIHBhcnNlU3RyaW5nU3R5bGUsIGNhcGl0YWxpemUsIGV4dGVuZCB9IGZyb20gJ0B2dWUvc2hhcmVkJztcblxuY29uc3QgVl9NT0RFTF9SQURJTyA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgdk1vZGVsUmFkaW9gIDogYGApO1xyXG5jb25zdCBWX01PREVMX0NIRUNLQk9YID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGB2TW9kZWxDaGVja2JveGAgOiBgYCk7XHJcbmNvbnN0IFZfTU9ERUxfVEVYVCA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgdk1vZGVsVGV4dGAgOiBgYCk7XHJcbmNvbnN0IFZfTU9ERUxfU0VMRUNUID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGB2TW9kZWxTZWxlY3RgIDogYGApO1xyXG5jb25zdCBWX01PREVMX0RZTkFNSUMgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHZNb2RlbER5bmFtaWNgIDogYGApO1xyXG5jb25zdCBWX09OX1dJVEhfTU9ESUZJRVJTID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGB2T25Nb2RpZmllcnNHdWFyZGAgOiBgYCk7XHJcbmNvbnN0IFZfT05fV0lUSF9LRVlTID0gU3ltYm9sKChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSA/IGB2T25LZXlzR3VhcmRgIDogYGApO1xyXG5jb25zdCBWX1NIT1cgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYHZTaG93YCA6IGBgKTtcclxuY29uc3QgVFJBTlNJVElPTiA9IFN5bWJvbCgocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBgVHJhbnNpdGlvbmAgOiBgYCk7XHJcbmNvbnN0IFRSQU5TSVRJT05fR1JPVVAgPSBTeW1ib2woKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gYFRyYW5zaXRpb25Hcm91cGAgOiBgYCk7XHJcbnJlZ2lzdGVyUnVudGltZUhlbHBlcnMoe1xyXG4gICAgW1ZfTU9ERUxfUkFESU9dOiBgdk1vZGVsUmFkaW9gLFxyXG4gICAgW1ZfTU9ERUxfQ0hFQ0tCT1hdOiBgdk1vZGVsQ2hlY2tib3hgLFxyXG4gICAgW1ZfTU9ERUxfVEVYVF06IGB2TW9kZWxUZXh0YCxcclxuICAgIFtWX01PREVMX1NFTEVDVF06IGB2TW9kZWxTZWxlY3RgLFxyXG4gICAgW1ZfTU9ERUxfRFlOQU1JQ106IGB2TW9kZWxEeW5hbWljYCxcclxuICAgIFtWX09OX1dJVEhfTU9ESUZJRVJTXTogYHdpdGhNb2RpZmllcnNgLFxyXG4gICAgW1ZfT05fV0lUSF9LRVlTXTogYHdpdGhLZXlzYCxcclxuICAgIFtWX1NIT1ddOiBgdlNob3dgLFxyXG4gICAgW1RSQU5TSVRJT05dOiBgVHJhbnNpdGlvbmAsXHJcbiAgICBbVFJBTlNJVElPTl9HUk9VUF06IGBUcmFuc2l0aW9uR3JvdXBgXHJcbn0pO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgKi9cclxubGV0IGRlY29kZXI7XHJcbmZ1bmN0aW9uIGRlY29kZUh0bWxCcm93c2VyKHJhdywgYXNBdHRyID0gZmFsc2UpIHtcclxuICAgIGlmICghZGVjb2Rlcikge1xyXG4gICAgICAgIGRlY29kZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIH1cclxuICAgIGlmIChhc0F0dHIpIHtcclxuICAgICAgICBkZWNvZGVyLmlubmVySFRNTCA9IGA8ZGl2IGZvbz1cIiR7cmF3LnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKX1cIj5gO1xyXG4gICAgICAgIHJldHVybiBkZWNvZGVyLmNoaWxkcmVuWzBdLmdldEF0dHJpYnV0ZSgnZm9vJyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBkZWNvZGVyLmlubmVySFRNTCA9IHJhdztcclxuICAgICAgICByZXR1cm4gZGVjb2Rlci50ZXh0Q29udGVudDtcclxuICAgIH1cclxufVxuXG5jb25zdCBpc1Jhd1RleHRDb250YWluZXIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoJ3N0eWxlLGlmcmFtZSxzY3JpcHQsbm9zY3JpcHQnLCB0cnVlKTtcclxuY29uc3QgcGFyc2VyT3B0aW9ucyA9IHtcclxuICAgIGlzVm9pZFRhZyxcclxuICAgIGlzTmF0aXZlVGFnOiB0YWcgPT4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkdUYWcodGFnKSxcclxuICAgIGlzUHJlVGFnOiB0YWcgPT4gdGFnID09PSAncHJlJyxcclxuICAgIGRlY29kZUVudGl0aWVzOiBkZWNvZGVIdG1sQnJvd3NlciAsXHJcbiAgICBpc0J1aWx0SW5Db21wb25lbnQ6ICh0YWcpID0+IHtcclxuICAgICAgICBpZiAoaXNCdWlsdEluVHlwZSh0YWcsIGBUcmFuc2l0aW9uYCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFRSQU5TSVRJT047XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlzQnVpbHRJblR5cGUodGFnLCBgVHJhbnNpdGlvbkdyb3VwYCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFRSQU5TSVRJT05fR1JPVVA7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCN0cmVlLWNvbnN0cnVjdGlvbi1kaXNwYXRjaGVyXHJcbiAgICBnZXROYW1lc3BhY2UodGFnLCBwYXJlbnQpIHtcclxuICAgICAgICBsZXQgbnMgPSBwYXJlbnQgPyBwYXJlbnQubnMgOiAwIC8qIEhUTUwgKi87XHJcbiAgICAgICAgaWYgKHBhcmVudCAmJiBucyA9PT0gMiAvKiBNQVRIX01MICovKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQudGFnID09PSAnYW5ub3RhdGlvbi14bWwnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFnID09PSAnc3ZnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxIC8qIFNWRyAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnQucHJvcHMuc29tZShhID0+IGEudHlwZSA9PT0gNiAvKiBBVFRSSUJVVEUgKi8gJiZcclxuICAgICAgICAgICAgICAgICAgICBhLm5hbWUgPT09ICdlbmNvZGluZycgJiZcclxuICAgICAgICAgICAgICAgICAgICBhLnZhbHVlICE9IG51bGwgJiZcclxuICAgICAgICAgICAgICAgICAgICAoYS52YWx1ZS5jb250ZW50ID09PSAndGV4dC9odG1sJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhLnZhbHVlLmNvbnRlbnQgPT09ICdhcHBsaWNhdGlvbi94aHRtbCt4bWwnKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBucyA9IDAgLyogSFRNTCAqLztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgvXm0oPzpbaW9uc118dGV4dCkkLy50ZXN0KHBhcmVudC50YWcpICYmXHJcbiAgICAgICAgICAgICAgICB0YWcgIT09ICdtZ2x5cGgnICYmXHJcbiAgICAgICAgICAgICAgICB0YWcgIT09ICdtYWxpZ25tYXJrJykge1xyXG4gICAgICAgICAgICAgICAgbnMgPSAwIC8qIEhUTUwgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocGFyZW50ICYmIG5zID09PSAxIC8qIFNWRyAqLykge1xyXG4gICAgICAgICAgICBpZiAocGFyZW50LnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnIHx8XHJcbiAgICAgICAgICAgICAgICBwYXJlbnQudGFnID09PSAnZGVzYycgfHxcclxuICAgICAgICAgICAgICAgIHBhcmVudC50YWcgPT09ICd0aXRsZScpIHtcclxuICAgICAgICAgICAgICAgIG5zID0gMCAvKiBIVE1MICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChucyA9PT0gMCAvKiBIVE1MICovKSB7XHJcbiAgICAgICAgICAgIGlmICh0YWcgPT09ICdzdmcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAvKiBTVkcgKi87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMiAvKiBNQVRIX01MICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBucztcclxuICAgIH0sXHJcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjcGFyc2luZy1odG1sLWZyYWdtZW50c1xyXG4gICAgZ2V0VGV4dE1vZGUoeyB0YWcsIG5zIH0pIHtcclxuICAgICAgICBpZiAobnMgPT09IDAgLyogSFRNTCAqLykge1xyXG4gICAgICAgICAgICBpZiAodGFnID09PSAndGV4dGFyZWEnIHx8IHRhZyA9PT0gJ3RpdGxlJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEgLyogUkNEQVRBICovO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc1Jhd1RleHRDb250YWluZXIodGFnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDIgLyogUkFXVEVYVCAqLztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMCAvKiBEQVRBICovO1xyXG4gICAgfVxyXG59O1xuXG4vLyBQYXJzZSBpbmxpbmUgQ1NTIHN0cmluZ3MgZm9yIHN0YXRpYyBzdHlsZSBhdHRyaWJ1dGVzIGludG8gYW4gb2JqZWN0LlxyXG4vLyBUaGlzIGlzIGEgTm9kZVRyYW5zZm9ybSBzaW5jZSBpdCB3b3JrcyBvbiB0aGUgc3RhdGljIGBzdHlsZWAgYXR0cmlidXRlIGFuZFxyXG4vLyBjb252ZXJ0cyBpdCBpbnRvIGEgZHluYW1pYyBlcXVpdmFsZW50OlxyXG4vLyBzdHlsZT1cImNvbG9yOiByZWRcIiAtPiA6c3R5bGU9J3sgXCJjb2xvclwiOiBcInJlZFwiIH0nXHJcbi8vIEl0IGlzIHRoZW4gcHJvY2Vzc2VkIGJ5IGB0cmFuc2Zvcm1FbGVtZW50YCBhbmQgaW5jbHVkZWQgaW4gdGhlIGdlbmVyYXRlZFxyXG4vLyBwcm9wcy5cclxuY29uc3QgdHJhbnNmb3JtU3R5bGUgPSBub2RlID0+IHtcclxuICAgIGlmIChub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLykge1xyXG4gICAgICAgIG5vZGUucHJvcHMuZm9yRWFjaCgocCwgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAocC50eXBlID09PSA2IC8qIEFUVFJJQlVURSAqLyAmJiBwLm5hbWUgPT09ICdzdHlsZScgJiYgcC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVwbGFjZSBwIHdpdGggYW4gZXhwcmVzc2lvbiBub2RlXHJcbiAgICAgICAgICAgICAgICBub2RlLnByb3BzW2ldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IDcgLyogRElSRUNUSVZFICovLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGBiaW5kYCxcclxuICAgICAgICAgICAgICAgICAgICBhcmc6IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHN0eWxlYCwgdHJ1ZSwgcC5sb2MpLFxyXG4gICAgICAgICAgICAgICAgICAgIGV4cDogcGFyc2VJbmxpbmVDU1MocC52YWx1ZS5jb250ZW50LCBwLmxvYyksXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXJzOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBsb2M6IHAubG9jXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IHBhcnNlSW5saW5lQ1NTID0gKGNzc1RleHQsIGxvYykgPT4ge1xyXG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHBhcnNlU3RyaW5nU3R5bGUoY3NzVGV4dCk7XHJcbiAgICByZXR1cm4gY3JlYXRlU2ltcGxlRXhwcmVzc2lvbihKU09OLnN0cmluZ2lmeShub3JtYWxpemVkKSwgZmFsc2UsIGxvYywgMyAvKiBDQU5fU1RSSU5HSUZZICovKTtcclxufTtcblxuZnVuY3Rpb24gY3JlYXRlRE9NQ29tcGlsZXJFcnJvcihjb2RlLCBsb2MpIHtcclxuICAgIHJldHVybiBjcmVhdGVDb21waWxlckVycm9yKGNvZGUsIGxvYywgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHx8ICF0cnVlID8gRE9NRXJyb3JNZXNzYWdlcyA6IHVuZGVmaW5lZCk7XHJcbn1cclxuY29uc3QgRE9NRXJyb3JNZXNzYWdlcyA9IHtcclxuICAgIFs1MCAvKiBYX1ZfSFRNTF9OT19FWFBSRVNTSU9OICovXTogYHYtaHRtbCBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcclxuICAgIFs1MSAvKiBYX1ZfSFRNTF9XSVRIX0NISUxEUkVOICovXTogYHYtaHRtbCB3aWxsIG92ZXJyaWRlIGVsZW1lbnQgY2hpbGRyZW4uYCxcclxuICAgIFs1MiAvKiBYX1ZfVEVYVF9OT19FWFBSRVNTSU9OICovXTogYHYtdGV4dCBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcclxuICAgIFs1MyAvKiBYX1ZfVEVYVF9XSVRIX0NISUxEUkVOICovXTogYHYtdGV4dCB3aWxsIG92ZXJyaWRlIGVsZW1lbnQgY2hpbGRyZW4uYCxcclxuICAgIFs1NCAvKiBYX1ZfTU9ERUxfT05fSU5WQUxJRF9FTEVNRU5UICovXTogYHYtbW9kZWwgY2FuIG9ubHkgYmUgdXNlZCBvbiA8aW5wdXQ+LCA8dGV4dGFyZWE+IGFuZCA8c2VsZWN0PiBlbGVtZW50cy5gLFxyXG4gICAgWzU1IC8qIFhfVl9NT0RFTF9BUkdfT05fRUxFTUVOVCAqL106IGB2LW1vZGVsIGFyZ3VtZW50IGlzIG5vdCBzdXBwb3J0ZWQgb24gcGxhaW4gZWxlbWVudHMuYCxcclxuICAgIFs1NiAvKiBYX1ZfTU9ERUxfT05fRklMRV9JTlBVVF9FTEVNRU5UICovXTogYHYtbW9kZWwgY2Fubm90IGJlIHVzZWQgb24gZmlsZSBpbnB1dHMgc2luY2UgdGhleSBhcmUgcmVhZC1vbmx5LiBVc2UgYSB2LW9uOmNoYW5nZSBsaXN0ZW5lciBpbnN0ZWFkLmAsXHJcbiAgICBbNTcgLyogWF9WX01PREVMX1VOTkVDRVNTQVJZX1ZBTFVFICovXTogYFVubmVjZXNzYXJ5IHZhbHVlIGJpbmRpbmcgdXNlZCBhbG9uZ3NpZGUgdi1tb2RlbC4gSXQgd2lsbCBpbnRlcmZlcmUgd2l0aCB2LW1vZGVsJ3MgYmVoYXZpb3IuYCxcclxuICAgIFs1OCAvKiBYX1ZfU0hPV19OT19FWFBSRVNTSU9OICovXTogYHYtc2hvdyBpcyBtaXNzaW5nIGV4cHJlc3Npb24uYCxcclxuICAgIFs1OSAvKiBYX1RSQU5TSVRJT05fSU5WQUxJRF9DSElMRFJFTiAqL106IGA8VHJhbnNpdGlvbj4gZXhwZWN0cyBleGFjdGx5IG9uZSBjaGlsZCBlbGVtZW50IG9yIGNvbXBvbmVudC5gLFxyXG4gICAgWzYwIC8qIFhfSUdOT1JFRF9TSURFX0VGRkVDVF9UQUcgKi9dOiBgVGFncyB3aXRoIHNpZGUgZWZmZWN0ICg8c2NyaXB0PiBhbmQgPHN0eWxlPikgYXJlIGlnbm9yZWQgaW4gY2xpZW50IGNvbXBvbmVudCB0ZW1wbGF0ZXMuYFxyXG59O1xuXG5jb25zdCB0cmFuc2Zvcm1WSHRtbCA9IChkaXIsIG5vZGUsIGNvbnRleHQpID0+IHtcclxuICAgIGNvbnN0IHsgZXhwLCBsb2MgfSA9IGRpcjtcclxuICAgIGlmICghZXhwKSB7XHJcbiAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoNTAgLyogWF9WX0hUTUxfTk9fRVhQUkVTU0lPTiAqLywgbG9jKSk7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1MSAvKiBYX1ZfSFRNTF9XSVRIX0NISUxEUkVOICovLCBsb2MpKTtcclxuICAgICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByb3BzOiBbXHJcbiAgICAgICAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYGlubmVySFRNTGAsIHRydWUsIGxvYyksIGV4cCB8fCBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKCcnLCB0cnVlKSlcclxuICAgICAgICBdXHJcbiAgICB9O1xyXG59O1xuXG5jb25zdCB0cmFuc2Zvcm1WVGV4dCA9IChkaXIsIG5vZGUsIGNvbnRleHQpID0+IHtcclxuICAgIGNvbnN0IHsgZXhwLCBsb2MgfSA9IGRpcjtcclxuICAgIGlmICghZXhwKSB7XHJcbiAgICAgICAgY29udGV4dC5vbkVycm9yKGNyZWF0ZURPTUNvbXBpbGVyRXJyb3IoNTIgLyogWF9WX1RFWFRfTk9fRVhQUkVTU0lPTiAqLywgbG9jKSk7XHJcbiAgICB9XHJcbiAgICBpZiAobm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1MyAvKiBYX1ZfVEVYVF9XSVRIX0NISUxEUkVOICovLCBsb2MpKTtcclxuICAgICAgICBub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByb3BzOiBbXHJcbiAgICAgICAgICAgIGNyZWF0ZU9iamVjdFByb3BlcnR5KGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYHRleHRDb250ZW50YCwgdHJ1ZSksIGV4cFxyXG4gICAgICAgICAgICAgICAgPyBjcmVhdGVDYWxsRXhwcmVzc2lvbihjb250ZXh0LmhlbHBlclN0cmluZyhUT19ESVNQTEFZX1NUUklORyksIFtleHBdLCBsb2MpXHJcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oJycsIHRydWUpKVxyXG4gICAgICAgIF1cclxuICAgIH07XHJcbn07XG5cbmNvbnN0IHRyYW5zZm9ybU1vZGVsID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgY29uc3QgYmFzZVJlc3VsdCA9IHRyYW5zZm9ybU1vZGVsJDEoZGlyLCBub2RlLCBjb250ZXh0KTtcclxuICAgIC8vIGJhc2UgdHJhbnNmb3JtIGhhcyBlcnJvcnMgT1IgY29tcG9uZW50IHYtbW9kZWwgKG9ubHkgbmVlZCBwcm9wcylcclxuICAgIGlmICghYmFzZVJlc3VsdC5wcm9wcy5sZW5ndGggfHwgbm9kZS50YWdUeXBlID09PSAxIC8qIENPTVBPTkVOVCAqLykge1xyXG4gICAgICAgIHJldHVybiBiYXNlUmVzdWx0O1xyXG4gICAgfVxyXG4gICAgaWYgKGRpci5hcmcpIHtcclxuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1NSAvKiBYX1ZfTU9ERUxfQVJHX09OX0VMRU1FTlQgKi8sIGRpci5hcmcubG9jKSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZWRWYWx1ZSgpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGZpbmRQcm9wKG5vZGUsICd2YWx1ZScpO1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1NyAvKiBYX1ZfTU9ERUxfVU5ORUNFU1NBUllfVkFMVUUgKi8sIHZhbHVlLmxvYykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHsgdGFnIH0gPSBub2RlO1xyXG4gICAgY29uc3QgaXNDdXN0b21FbGVtZW50ID0gY29udGV4dC5pc0N1c3RvbUVsZW1lbnQodGFnKTtcclxuICAgIGlmICh0YWcgPT09ICdpbnB1dCcgfHxcclxuICAgICAgICB0YWcgPT09ICd0ZXh0YXJlYScgfHxcclxuICAgICAgICB0YWcgPT09ICdzZWxlY3QnIHx8XHJcbiAgICAgICAgaXNDdXN0b21FbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IGRpcmVjdGl2ZVRvVXNlID0gVl9NT0RFTF9URVhUO1xyXG4gICAgICAgIGxldCBpc0ludmFsaWRUeXBlID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCBpc0N1c3RvbUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IGZpbmRQcm9wKG5vZGUsIGB0eXBlYCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZS50eXBlID09PSA3IC8qIERJUkVDVElWRSAqLykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIDp0eXBlPVwiZm9vXCJcclxuICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVUb1VzZSA9IFZfTU9ERUxfRFlOQU1JQztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUudmFsdWUuY29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyYWRpbyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVUb1VzZSA9IFZfTU9ERUxfUkFESU87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2hlY2tib3gnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlVG9Vc2UgPSBWX01PREVMX0NIRUNLQk9YO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNJbnZhbGlkVHlwZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1NiAvKiBYX1ZfTU9ERUxfT05fRklMRV9JTlBVVF9FTEVNRU5UICovLCBkaXIubG9jKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRleHQgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIGNoZWNrRHVwbGljYXRlZFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaGFzRHluYW1pY0tleVZCaW5kKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGhhcyBiaW5kaW5ncyB3aXRoIGR5bmFtaWMga2V5cywgd2hpY2ggY2FuIHBvc3NpYmx5IGNvbnRhaW5cclxuICAgICAgICAgICAgICAgIC8vIFwidHlwZVwiLlxyXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlVG9Vc2UgPSBWX01PREVMX0RZTkFNSUM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0ZXh0IHR5cGVcclxuICAgICAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjaGVja0R1cGxpY2F0ZWRWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcclxuICAgICAgICAgICAgZGlyZWN0aXZlVG9Vc2UgPSBWX01PREVMX1NFTEVDVDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHRleHRhcmVhXHJcbiAgICAgICAgICAgIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAmJiBjaGVja0R1cGxpY2F0ZWRWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpbmplY3QgcnVudGltZSBkaXJlY3RpdmVcclxuICAgICAgICAvLyBieSByZXR1cm5pbmcgdGhlIGhlbHBlciBzeW1ib2wgdmlhIG5lZWRSdW50aW1lXHJcbiAgICAgICAgLy8gdGhlIGltcG9ydCB3aWxsIHJlcGxhY2VkIGEgcmVzb2x2ZURpcmVjdGl2ZSBjYWxsLlxyXG4gICAgICAgIGlmICghaXNJbnZhbGlkVHlwZSkge1xyXG4gICAgICAgICAgICBiYXNlUmVzdWx0Lm5lZWRSdW50aW1lID0gY29udGV4dC5oZWxwZXIoZGlyZWN0aXZlVG9Vc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnRleHQub25FcnJvcihjcmVhdGVET01Db21waWxlckVycm9yKDU0IC8qIFhfVl9NT0RFTF9PTl9JTlZBTElEX0VMRU1FTlQgKi8sIGRpci5sb2MpKTtcclxuICAgIH1cclxuICAgIC8vIG5hdGl2ZSB2bW9kZWwgZG9lc24ndCBuZWVkIHRoZSBgbW9kZWxWYWx1ZWAgcHJvcHMgc2luY2UgdGhleSBhcmUgYWxzb1xyXG4gICAgLy8gcGFzc2VkIHRvIHRoZSBydW50aW1lIGFzIGBiaW5kaW5nLnZhbHVlYC4gcmVtb3ZpbmcgaXQgcmVkdWNlcyBjb2RlIHNpemUuXHJcbiAgICBiYXNlUmVzdWx0LnByb3BzID0gYmFzZVJlc3VsdC5wcm9wcy5maWx0ZXIocCA9PiAhKHAua2V5LnR5cGUgPT09IDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi8gJiZcclxuICAgICAgICBwLmtleS5jb250ZW50ID09PSAnbW9kZWxWYWx1ZScpKTtcclxuICAgIHJldHVybiBiYXNlUmVzdWx0O1xyXG59O1xuXG5jb25zdCBpc0V2ZW50T3B0aW9uTW9kaWZpZXIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYHBhc3NpdmUsb25jZSxjYXB0dXJlYCk7XHJcbmNvbnN0IGlzTm9uS2V5TW9kaWZpZXIgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoXHJcbi8vIGV2ZW50IHByb3BhZ2F0aW9uIG1hbmFnZW1lbnRcclxuYHN0b3AscHJldmVudCxzZWxmLGAgK1xyXG4gICAgLy8gc3lzdGVtIG1vZGlmaWVycyArIGV4YWN0XHJcbiAgICBgY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCxgICtcclxuICAgIC8vIG1vdXNlXHJcbiAgICBgbWlkZGxlYCk7XHJcbi8vIGxlZnQgJiByaWdodCBjb3VsZCBiZSBtb3VzZSBvciBrZXkgbW9kaWZpZXJzIGJhc2VkIG9uIGV2ZW50IHR5cGVcclxuY29uc3QgbWF5YmVLZXlNb2RpZmllciA9IC8qI19fUFVSRV9fKi8gbWFrZU1hcCgnbGVmdCxyaWdodCcpO1xyXG5jb25zdCBpc0tleWJvYXJkRXZlbnQgPSAvKiNfX1BVUkVfXyovIG1ha2VNYXAoYG9ua2V5dXAsb25rZXlkb3duLG9ua2V5cHJlc3NgLCB0cnVlKTtcclxuY29uc3QgcmVzb2x2ZU1vZGlmaWVycyA9IChrZXksIG1vZGlmaWVycywgY29udGV4dCwgbG9jKSA9PiB7XHJcbiAgICBjb25zdCBrZXlNb2RpZmllcnMgPSBbXTtcclxuICAgIGNvbnN0IG5vbktleU1vZGlmaWVycyA9IFtdO1xyXG4gICAgY29uc3QgZXZlbnRPcHRpb25Nb2RpZmllcnMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbW9kaWZpZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZXIgPSBtb2RpZmllcnNbaV07XHJcbiAgICAgICAgaWYgKG1vZGlmaWVyID09PSAnbmF0aXZlJyAmJlxyXG4gICAgICAgICAgICBjaGVja0NvbXBhdEVuYWJsZWQoXCJDT01QSUxFUl9WX09OX05BVElWRVwiIC8qIENPTVBJTEVSX1ZfT05fTkFUSVZFICovLCBjb250ZXh0LCBsb2MpKSB7XHJcbiAgICAgICAgICAgIGV2ZW50T3B0aW9uTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpc0V2ZW50T3B0aW9uTW9kaWZpZXIobW9kaWZpZXIpKSB7XHJcbiAgICAgICAgICAgIC8vIGV2ZW50T3B0aW9uTW9kaWZpZXJzOiBtb2RpZmllcnMgZm9yIGFkZEV2ZW50TGlzdGVuZXIoKSBvcHRpb25zLFxyXG4gICAgICAgICAgICAvLyBlLmcuIC5wYXNzaXZlICYgLmNhcHR1cmVcclxuICAgICAgICAgICAgZXZlbnRPcHRpb25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBydW50aW1lTW9kaWZpZXJzOiBtb2RpZmllcnMgdGhhdCBuZWVkcyBydW50aW1lIGd1YXJkc1xyXG4gICAgICAgICAgICBpZiAobWF5YmVLZXlNb2RpZmllcihtb2RpZmllcikpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1N0YXRpY0V4cChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzS2V5Ym9hcmRFdmVudChrZXkuY29udGVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5TW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9uS2V5TW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICBub25LZXlNb2RpZmllcnMucHVzaChtb2RpZmllcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOb25LZXlNb2RpZmllcihtb2RpZmllcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBub25LZXlNb2RpZmllcnMucHVzaChtb2RpZmllcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXlNb2RpZmllcnMucHVzaChtb2RpZmllcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGtleU1vZGlmaWVycyxcclxuICAgICAgICBub25LZXlNb2RpZmllcnMsXHJcbiAgICAgICAgZXZlbnRPcHRpb25Nb2RpZmllcnNcclxuICAgIH07XHJcbn07XHJcbmNvbnN0IHRyYW5zZm9ybUNsaWNrID0gKGtleSwgZXZlbnQpID0+IHtcclxuICAgIGNvbnN0IGlzU3RhdGljQ2xpY2sgPSBpc1N0YXRpY0V4cChrZXkpICYmIGtleS5jb250ZW50LnRvTG93ZXJDYXNlKCkgPT09ICdvbmNsaWNrJztcclxuICAgIHJldHVybiBpc1N0YXRpY0NsaWNrXHJcbiAgICAgICAgPyBjcmVhdGVTaW1wbGVFeHByZXNzaW9uKGV2ZW50LCB0cnVlKVxyXG4gICAgICAgIDoga2V5LnR5cGUgIT09IDQgLyogU0lNUExFX0VYUFJFU1NJT04gKi9cclxuICAgICAgICAgICAgPyBjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24oW1xyXG4gICAgICAgICAgICAgICAgYChgLFxyXG4gICAgICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICAgICAgYCkgPT09IFwib25DbGlja1wiID8gXCIke2V2ZW50fVwiIDogKGAsXHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICBgKWBcclxuICAgICAgICAgICAgXSlcclxuICAgICAgICAgICAgOiBrZXk7XHJcbn07XHJcbmNvbnN0IHRyYW5zZm9ybU9uID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgcmV0dXJuIHRyYW5zZm9ybU9uJDEoZGlyLCBub2RlLCBjb250ZXh0LCBiYXNlUmVzdWx0ID0+IHtcclxuICAgICAgICBjb25zdCB7IG1vZGlmaWVycyB9ID0gZGlyO1xyXG4gICAgICAgIGlmICghbW9kaWZpZXJzLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIGJhc2VSZXN1bHQ7XHJcbiAgICAgICAgbGV0IHsga2V5LCB2YWx1ZTogaGFuZGxlckV4cCB9ID0gYmFzZVJlc3VsdC5wcm9wc1swXTtcclxuICAgICAgICBjb25zdCB7IGtleU1vZGlmaWVycywgbm9uS2V5TW9kaWZpZXJzLCBldmVudE9wdGlvbk1vZGlmaWVycyB9ID0gcmVzb2x2ZU1vZGlmaWVycyhrZXksIG1vZGlmaWVycywgY29udGV4dCwgZGlyLmxvYyk7XHJcbiAgICAgICAgLy8gbm9ybWFsaXplIGNsaWNrLnJpZ2h0IGFuZCBjbGljay5taWRkbGUgc2luY2UgdGhleSBkb24ndCBhY3R1YWxseSBmaXJlXHJcbiAgICAgICAgaWYgKG5vbktleU1vZGlmaWVycy5pbmNsdWRlcygncmlnaHQnKSkge1xyXG4gICAgICAgICAgICBrZXkgPSB0cmFuc2Zvcm1DbGljayhrZXksIGBvbkNvbnRleHRtZW51YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub25LZXlNb2RpZmllcnMuaW5jbHVkZXMoJ21pZGRsZScpKSB7XHJcbiAgICAgICAgICAgIGtleSA9IHRyYW5zZm9ybUNsaWNrKGtleSwgYG9uTW91c2V1cGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobm9uS2V5TW9kaWZpZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBoYW5kbGVyRXhwID0gY3JlYXRlQ2FsbEV4cHJlc3Npb24oY29udGV4dC5oZWxwZXIoVl9PTl9XSVRIX01PRElGSUVSUyksIFtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXJFeHAsXHJcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShub25LZXlNb2RpZmllcnMpXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoa2V5TW9kaWZpZXJzLmxlbmd0aCAmJlxyXG4gICAgICAgICAgICAvLyBpZiBldmVudCBuYW1lIGlzIGR5bmFtaWMsIGFsd2F5cyB3cmFwIHdpdGgga2V5cyBndWFyZFxyXG4gICAgICAgICAgICAoIWlzU3RhdGljRXhwKGtleSkgfHwgaXNLZXlib2FyZEV2ZW50KGtleS5jb250ZW50KSkpIHtcclxuICAgICAgICAgICAgaGFuZGxlckV4cCA9IGNyZWF0ZUNhbGxFeHByZXNzaW9uKGNvbnRleHQuaGVscGVyKFZfT05fV0lUSF9LRVlTKSwgW1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlckV4cCxcclxuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGtleU1vZGlmaWVycylcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChldmVudE9wdGlvbk1vZGlmaWVycy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgbW9kaWZpZXJQb3N0Zml4ID0gZXZlbnRPcHRpb25Nb2RpZmllcnMubWFwKGNhcGl0YWxpemUpLmpvaW4oJycpO1xyXG4gICAgICAgICAgICBrZXkgPSBpc1N0YXRpY0V4cChrZXkpXHJcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZVNpbXBsZUV4cHJlc3Npb24oYCR7a2V5LmNvbnRlbnR9JHttb2RpZmllclBvc3RmaXh9YCwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgIDogY3JlYXRlQ29tcG91bmRFeHByZXNzaW9uKFtgKGAsIGtleSwgYCkgKyBcIiR7bW9kaWZpZXJQb3N0Zml4fVwiYF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwcm9wczogW2NyZWF0ZU9iamVjdFByb3BlcnR5KGtleSwgaGFuZGxlckV4cCldXHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59O1xuXG5jb25zdCB0cmFuc2Zvcm1TaG93ID0gKGRpciwgbm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgY29uc3QgeyBleHAsIGxvYyB9ID0gZGlyO1xyXG4gICAgaWYgKCFleHApIHtcclxuICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1OCAvKiBYX1ZfU0hPV19OT19FWFBSRVNTSU9OICovLCBsb2MpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcHJvcHM6IFtdLFxyXG4gICAgICAgIG5lZWRSdW50aW1lOiBjb250ZXh0LmhlbHBlcihWX1NIT1cpXHJcbiAgICB9O1xyXG59O1xuXG5jb25zdCB3YXJuVHJhbnNpdGlvbkNoaWxkcmVuID0gKG5vZGUsIGNvbnRleHQpID0+IHtcclxuICAgIGlmIChub2RlLnR5cGUgPT09IDEgLyogRUxFTUVOVCAqLyAmJlxyXG4gICAgICAgIG5vZGUudGFnVHlwZSA9PT0gMSAvKiBDT01QT05FTlQgKi8pIHtcclxuICAgICAgICBjb25zdCBjb21wb25lbnQgPSBjb250ZXh0LmlzQnVpbHRJbkNvbXBvbmVudChub2RlLnRhZyk7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudCA9PT0gVFJBTlNJVElPTikge1xyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoICYmIGhhc011bHRpcGxlQ2hpbGRyZW4obm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm9uRXJyb3IoY3JlYXRlRE9NQ29tcGlsZXJFcnJvcig1OSAvKiBYX1RSQU5TSVRJT05fSU5WQUxJRF9DSElMRFJFTiAqLywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbm9kZS5jaGlsZHJlblswXS5sb2Muc3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogbm9kZS5jaGlsZHJlbltub2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdLmxvYy5lbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogJydcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBoYXNNdWx0aXBsZUNoaWxkcmVuKG5vZGUpIHtcclxuICAgIC8vICMxMzUyIGZpbHRlciBvdXQgcG90ZW50aWFsIGNvbW1lbnQgbm9kZXMuXHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IChub2RlLmNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbi5maWx0ZXIoYyA9PiBjLnR5cGUgIT09IDMgLyogQ09NTUVOVCAqLyAmJlxyXG4gICAgICAgICEoYy50eXBlID09PSAyIC8qIFRFWFQgKi8gJiYgIWMuY29udGVudC50cmltKCkpKSk7XHJcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuWzBdO1xyXG4gICAgcmV0dXJuIChjaGlsZHJlbi5sZW5ndGggIT09IDEgfHxcclxuICAgICAgICBjaGlsZC50eXBlID09PSAxMSAvKiBGT1IgKi8gfHxcclxuICAgICAgICAoY2hpbGQudHlwZSA9PT0gOSAvKiBJRiAqLyAmJiBjaGlsZC5icmFuY2hlcy5zb21lKGhhc011bHRpcGxlQ2hpbGRyZW4pKSk7XHJcbn1cblxuY29uc3QgaWdub3JlU2lkZUVmZmVjdFRhZ3MgPSAobm9kZSwgY29udGV4dCkgPT4ge1xyXG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMSAvKiBFTEVNRU5UICovICYmXHJcbiAgICAgICAgbm9kZS50YWdUeXBlID09PSAwIC8qIEVMRU1FTlQgKi8gJiZcclxuICAgICAgICAobm9kZS50YWcgPT09ICdzY3JpcHQnIHx8IG5vZGUudGFnID09PSAnc3R5bGUnKSkge1xyXG4gICAgICAgIGNvbnRleHQub25FcnJvcihjcmVhdGVET01Db21waWxlckVycm9yKDYwIC8qIFhfSUdOT1JFRF9TSURFX0VGRkVDVF9UQUcgKi8sIG5vZGUubG9jKSk7XHJcbiAgICAgICAgY29udGV4dC5yZW1vdmVOb2RlKCk7XHJcbiAgICB9XHJcbn07XG5cbmNvbnN0IERPTU5vZGVUcmFuc2Zvcm1zID0gW1xyXG4gICAgdHJhbnNmb3JtU3R5bGUsXHJcbiAgICAuLi4oKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gW3dhcm5UcmFuc2l0aW9uQ2hpbGRyZW5dIDogW10pXHJcbl07XHJcbmNvbnN0IERPTURpcmVjdGl2ZVRyYW5zZm9ybXMgPSB7XHJcbiAgICBjbG9hazogbm9vcERpcmVjdGl2ZVRyYW5zZm9ybSxcclxuICAgIGh0bWw6IHRyYW5zZm9ybVZIdG1sLFxyXG4gICAgdGV4dDogdHJhbnNmb3JtVlRleHQsXHJcbiAgICBtb2RlbDogdHJhbnNmb3JtTW9kZWwsXHJcbiAgICBvbjogdHJhbnNmb3JtT24sXHJcbiAgICBzaG93OiB0cmFuc2Zvcm1TaG93XHJcbn07XHJcbmZ1bmN0aW9uIGNvbXBpbGUodGVtcGxhdGUsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgcmV0dXJuIGJhc2VDb21waWxlKHRlbXBsYXRlLCBleHRlbmQoe30sIHBhcnNlck9wdGlvbnMsIG9wdGlvbnMsIHtcclxuICAgICAgICBub2RlVHJhbnNmb3JtczogW1xyXG4gICAgICAgICAgICAvLyBpZ25vcmUgPHNjcmlwdD4gYW5kIDx0YWc+XHJcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHB1dCBpbnNpZGUgRE9NTm9kZVRyYW5zZm9ybXMgYmVjYXVzZSB0aGF0IGxpc3QgaXMgdXNlZFxyXG4gICAgICAgICAgICAvLyBieSBjb21waWxlci1zc3IgdG8gZ2VuZXJhdGUgdm5vZGUgZmFsbGJhY2sgYnJhbmNoZXNcclxuICAgICAgICAgICAgaWdub3JlU2lkZUVmZmVjdFRhZ3MsXHJcbiAgICAgICAgICAgIC4uLkRPTU5vZGVUcmFuc2Zvcm1zLFxyXG4gICAgICAgICAgICAuLi4ob3B0aW9ucy5ub2RlVHJhbnNmb3JtcyB8fCBbXSlcclxuICAgICAgICBdLFxyXG4gICAgICAgIGRpcmVjdGl2ZVRyYW5zZm9ybXM6IGV4dGVuZCh7fSwgRE9NRGlyZWN0aXZlVHJhbnNmb3Jtcywgb3B0aW9ucy5kaXJlY3RpdmVUcmFuc2Zvcm1zIHx8IHt9KSxcclxuICAgICAgICB0cmFuc2Zvcm1Ib2lzdDogbnVsbCBcclxuICAgIH0pKTtcclxufVxyXG5mdW5jdGlvbiBwYXJzZSh0ZW1wbGF0ZSwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICByZXR1cm4gYmFzZVBhcnNlKHRlbXBsYXRlLCBleHRlbmQoe30sIHBhcnNlck9wdGlvbnMsIG9wdGlvbnMpKTtcclxufVxuXG5leHBvcnQgeyBET01EaXJlY3RpdmVUcmFuc2Zvcm1zLCBET01Ob2RlVHJhbnNmb3JtcywgVFJBTlNJVElPTiwgVFJBTlNJVElPTl9HUk9VUCwgVl9NT0RFTF9DSEVDS0JPWCwgVl9NT0RFTF9EWU5BTUlDLCBWX01PREVMX1JBRElPLCBWX01PREVMX1NFTEVDVCwgVl9NT0RFTF9URVhULCBWX09OX1dJVEhfS0VZUywgVl9PTl9XSVRIX01PRElGSUVSUywgVl9TSE9XLCBjb21waWxlLCBjcmVhdGVET01Db21waWxlckVycm9yLCBwYXJzZSwgcGFyc2VyT3B0aW9ucywgdHJhbnNmb3JtU3R5bGUgfTtcbiIsImltcG9ydCAqIGFzIHJ1bnRpbWVEb20gZnJvbSAnQHZ1ZS9ydW50aW1lLWRvbSc7XG5pbXBvcnQgeyBpbml0Q3VzdG9tRm9ybWF0dGVyLCB3YXJuLCByZWdpc3RlclJ1bnRpbWVDb21waWxlciB9IGZyb20gJ0B2dWUvcnVudGltZS1kb20nO1xuZXhwb3J0ICogZnJvbSAnQHZ1ZS9ydW50aW1lLWRvbSc7XG5pbXBvcnQgeyBjb21waWxlIH0gZnJvbSAnQHZ1ZS9jb21waWxlci1kb20nO1xuaW1wb3J0IHsgaXNTdHJpbmcsIE5PT1AsIGV4dGVuZCwgZ2VuZXJhdGVDb2RlRnJhbWUgfSBmcm9tICdAdnVlL3NoYXJlZCc7XG5cbmZ1bmN0aW9uIGluaXREZXYoKSB7XHJcbiAgICB7XHJcbiAgICAgICAgaW5pdEN1c3RvbUZvcm1hdHRlcigpO1xyXG4gICAgfVxyXG59XG5cbi8vIFRoaXMgZW50cnkgaXMgdGhlIFwiZnVsbC1idWlsZFwiIHRoYXQgaW5jbHVkZXMgYm90aCB0aGUgcnVudGltZVxyXG5pZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpKSB7XHJcbiAgICBpbml0RGV2KCk7XHJcbn1cclxuY29uc3QgY29tcGlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb24odGVtcGxhdGUsIG9wdGlvbnMpIHtcclxuICAgIGlmICghaXNTdHJpbmcodGVtcGxhdGUpKSB7XHJcbiAgICAgICAgaWYgKHRlbXBsYXRlLm5vZGVUeXBlKSB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuaW5uZXJIVE1MO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmIHdhcm4oYGludmFsaWQgdGVtcGxhdGUgb3B0aW9uOiBgLCB0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBOT09QO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGtleSA9IHRlbXBsYXRlO1xyXG4gICAgY29uc3QgY2FjaGVkID0gY29tcGlsZUNhY2hlW2tleV07XHJcbiAgICBpZiAoY2FjaGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIGNhY2hlZDtcclxuICAgIH1cclxuICAgIGlmICh0ZW1wbGF0ZVswXSA9PT0gJyMnKSB7XHJcbiAgICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRlbXBsYXRlKTtcclxuICAgICAgICBpZiAoKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpICYmICFlbCkge1xyXG4gICAgICAgICAgICB3YXJuKGBUZW1wbGF0ZSBlbGVtZW50IG5vdCBmb3VuZCBvciBpcyBlbXB0eTogJHt0ZW1wbGF0ZX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gX19VTlNBRkVfX1xyXG4gICAgICAgIC8vIFJlYXNvbjogcG90ZW50aWFsIGV4ZWN1dGlvbiBvZiBKUyBleHByZXNzaW9ucyBpbiBpbi1ET00gdGVtcGxhdGUuXHJcbiAgICAgICAgLy8gVGhlIHVzZXIgbXVzdCBtYWtlIHN1cmUgdGhlIGluLURPTSB0ZW1wbGF0ZSBpcyB0cnVzdGVkLiBJZiBpdCdzIHJlbmRlcmVkXHJcbiAgICAgICAgLy8gYnkgdGhlIHNlcnZlciwgdGhlIHRlbXBsYXRlIHNob3VsZCBub3QgY29udGFpbiBhbnkgdXNlciBkYXRhLlxyXG4gICAgICAgIHRlbXBsYXRlID0gZWwgPyBlbC5pbm5lckhUTUwgOiBgYDtcclxuICAgIH1cclxuICAgIGNvbnN0IHsgY29kZSB9ID0gY29tcGlsZSh0ZW1wbGF0ZSwgZXh0ZW5kKHtcclxuICAgICAgICBob2lzdFN0YXRpYzogdHJ1ZSxcclxuICAgICAgICBvbkVycm9yOiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgPyBvbkVycm9yIDogdW5kZWZpbmVkLFxyXG4gICAgICAgIG9uV2FybjogKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpID8gZSA9PiBvbkVycm9yKGUsIHRydWUpIDogTk9PUFxyXG4gICAgfSwgb3B0aW9ucykpO1xyXG4gICAgZnVuY3Rpb24gb25FcnJvcihlcnIsIGFzV2FybmluZyA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGFzV2FybmluZ1xyXG4gICAgICAgICAgICA/IGVyci5tZXNzYWdlXHJcbiAgICAgICAgICAgIDogYFRlbXBsYXRlIGNvbXBpbGF0aW9uIGVycm9yOiAke2Vyci5tZXNzYWdlfWA7XHJcbiAgICAgICAgY29uc3QgY29kZUZyYW1lID0gZXJyLmxvYyAmJlxyXG4gICAgICAgICAgICBnZW5lcmF0ZUNvZGVGcmFtZSh0ZW1wbGF0ZSwgZXJyLmxvYy5zdGFydC5vZmZzZXQsIGVyci5sb2MuZW5kLm9mZnNldCk7XHJcbiAgICAgICAgd2Fybihjb2RlRnJhbWUgPyBgJHttZXNzYWdlfVxcbiR7Y29kZUZyYW1lfWAgOiBtZXNzYWdlKTtcclxuICAgIH1cclxuICAgIC8vIFRoZSB3aWxkY2FyZCBpbXBvcnQgcmVzdWx0cyBpbiBhIGh1Z2Ugb2JqZWN0IHdpdGggZXZlcnkgZXhwb3J0XHJcbiAgICAvLyB3aXRoIGtleXMgdGhhdCBjYW5ub3QgYmUgbWFuZ2xlZCwgYW5kIGNhbiBiZSBxdWl0ZSBoZWF2eSBzaXplLXdpc2UuXHJcbiAgICAvLyBJbiB0aGUgZ2xvYmFsIGJ1aWxkIHdlIGtub3cgYFZ1ZWAgaXMgYXZhaWxhYmxlIGdsb2JhbGx5IHNvIHdlIGNhbiBhdm9pZFxyXG4gICAgLy8gdGhlIHdpbGRjYXJkIG9iamVjdC5cclxuICAgIGNvbnN0IHJlbmRlciA9IChuZXcgRnVuY3Rpb24oJ1Z1ZScsIGNvZGUpKHJ1bnRpbWVEb20pKTtcclxuICAgIHJlbmRlci5fcmMgPSB0cnVlO1xyXG4gICAgcmV0dXJuIChjb21waWxlQ2FjaGVba2V5XSA9IHJlbmRlcik7XHJcbn1cclxucmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIoY29tcGlsZVRvRnVuY3Rpb24pO1xuXG5leHBvcnQgeyBjb21waWxlVG9GdW5jdGlvbiBhcyBjb21waWxlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tIFwidnVlXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSkge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsXG4gICAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgfSwgW1xuICAgIF9jcmVhdGVWTm9kZShcInBhdGhcIiwgeyBkOiBcIk0xMiAxNGw5LTUtOS01LTkgNSA5IDV6XCIgfSksXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7IGQ6IFwiTTEyIDE0bDYuMTYtMy40MjJhMTIuMDgzIDEyLjA4MyAwIDAxLjY2NSA2LjQ3OUExMS45NTIgMTEuOTUyIDAgMDAxMiAyMC4wNTVhMTEuOTUyIDExLjk1MiAwIDAwLTYuODI0LTIuOTk4IDEyLjA3OCAxMi4wNzggMCAwMS42NjUtNi40NzlMMTIgMTR6XCIgfSksXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNMTIgMTRsOS01LTktNS05IDUgOSA1em0wIDBsNi4xNi0zLjQyMmExMi4wODMgMTIuMDgzIDAgMDEuNjY1IDYuNDc5QTExLjk1MiAxMS45NTIgMCAwMDEyIDIwLjA1NWExMS45NTIgMTEuOTUyIDAgMDAtNi44MjQtMi45OTggMTIuMDc4IDEyLjA3OCAwIDAxLjY2NS02LjQ3OUwxMiAxNHptLTQgNnYtNy41bDQtMi4yMjJcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNMTIgNi4yNTN2MTNtMC0xM0MxMC44MzIgNS40NzcgOS4yNDYgNSA3LjUgNVM0LjE2OCA1LjQ3NyAzIDYuMjUzdjEzQzQuMTY4IDE4LjQ3NyA1Ljc1NCAxOCA3LjUgMThzMy4zMzIuNDc3IDQuNSAxLjI1M20wLTEzQzEzLjE2OCA1LjQ3NyAxNC43NTQgNSAxNi41IDVjMS43NDcgMCAzLjMzMi40NzcgNC41IDEuMjUzdjEzQzE5LjgzMiAxOC40NzcgMTguMjQ3IDE4IDE2LjUgMThjLTEuNzQ2IDAtMy4zMzIuNDc3LTQuNSAxLjI1M1wiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHtcbiAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2Utd2lkdGhcIjogXCIyXCIsXG4gICAgICBkOiBcIk04IDdWM204IDRWM20tOSA4aDEwTTUgMjFoMTRhMiAyIDAgMDAyLTJWN2EyIDIgMCAwMC0yLTJINWEyIDIgMCAwMC0yIDJ2MTJhMiAyIDAgMDAyIDJ6XCJcbiAgICB9KVxuICBdKSlcbn0iLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tIFwidnVlXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSkge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsXG4gICAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgfSwgW1xuICAgIF9jcmVhdGVWTm9kZShcInBhdGhcIiwge1xuICAgICAgXCJzdHJva2UtbGluZWNhcFwiOiBcInJvdW5kXCIsXG4gICAgICBcInN0cm9rZS1saW5lam9pblwiOiBcInJvdW5kXCIsXG4gICAgICBcInN0cm9rZS13aWR0aFwiOiBcIjJcIixcbiAgICAgIGQ6IFwiTTUgMTNsNCA0TDE5IDdcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNMTkgMTNsLTcgNy03LTdtMTQtOGwtNyA3LTctN1wiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHtcbiAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2Utd2lkdGhcIjogXCIyXCIsXG4gICAgICBkOiBcIk01IDExbDctNyA3IDdNNSAxOWw3LTcgNyA3XCJcbiAgICB9KVxuICBdKSlcbn0iLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tIFwidnVlXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSkge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsXG4gICAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgfSwgW1xuICAgIF9jcmVhdGVWTm9kZShcInBhdGhcIiwge1xuICAgICAgXCJzdHJva2UtbGluZWNhcFwiOiBcInJvdW5kXCIsXG4gICAgICBcInN0cm9rZS1saW5lam9pblwiOiBcInJvdW5kXCIsXG4gICAgICBcInN0cm9rZS13aWR0aFwiOiBcIjJcIixcbiAgICAgIGQ6IFwiTTE5IDlsLTcgNy03LTdcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNOSA1bDcgNy03IDdcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNOSA1SDdhMiAyIDAgMDAtMiAydjEyYTIgMiAwIDAwMiAyaDEwYTIgMiAwIDAwMi0yVjdhMiAyIDAgMDAtMi0yaC0yTTkgNWEyIDIgMCAwMDIgMmgyYTIgMiAwIDAwMi0yTTkgNWEyIDIgMCAwMTItMmgyYTIgMiAwIDAxMiAybS0zIDdoM20tMyA0aDNtLTYtNGguMDFNOSAxNmguMDFcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNMTkgMTFINW0xNCAwYTIgMiAwIDAxMiAydjZhMiAyIDAgMDEtMiAySDVhMiAyIDAgMDEtMi0ydi02YTIgMiAwIDAxMi0ybTE0IDBWOWEyIDIgMCAwMC0yLTJNNSAxMVY5YTIgMiAwIDAxMi0ybTAgMFY1YTIgMiAwIDAxMi0yaDZhMiAyIDAgMDEyIDJ2Mk03IDdoMTBcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNMyAxMGgxOE03IDE1aDFtNCAwaDFtLTcgNGgxMmEzIDMgMCAwMDMtM1Y4YTMgMyAwIDAwLTMtM0g2YTMgMyAwIDAwLTMgM3Y4YTMgMyAwIDAwMyAzelwiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHtcbiAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2Utd2lkdGhcIjogXCIyXCIsXG4gICAgICBkOiBcIk0xMiA5djJtMCA0aC4wMW0tNi45MzggNGgxMy44NTZjMS41NCAwIDIuNTAyLTEuNjY3IDEuNzMyLTNMMTMuNzMyIDRjLS43Ny0xLjMzMy0yLjY5NC0xLjMzMy0zLjQ2NCAwTDMuMzQgMTZjLS43NyAxLjMzMy4xOTIgMyAxLjczMiAzelwiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHtcbiAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2Utd2lkdGhcIjogXCIyXCIsXG4gICAgICBkOiBcIk0xNS4yMzIgNS4yMzJsMy41MzYgMy41MzZtLTIuMDM2LTUuMDM2YTIuNSAyLjUgMCAxMTMuNTM2IDMuNTM2TDYuNSAyMS4wMzZIM3YtMy41NzJMMTYuNzMyIDMuNzMyelwiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHtcbiAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2Utd2lkdGhcIjogXCIyXCIsXG4gICAgICBkOiBcIk0xOSA3bC0uODY3IDEyLjE0MkEyIDIgMCAwMTE2LjEzOCAyMUg3Ljg2MmEyIDIgMCAwMS0xLjk5NS0xLjg1OEw1IDdtNSA0djZtNC02djZtMS0xMFY0YTEgMSAwIDAwLTEtMWgtNGExIDEgMCAwMC0xIDF2M000IDdoMTZcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNMTggOXYzbTAgMHYzbTAtM2gzbS0zIDBoLTNtLTItNWE0IDQgMCAxMS04IDAgNCA0IDAgMDE4IDB6TTMgMjBhNiA2IDAgMDExMiAwdjFIM3YtMXpcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgZmlsbDogXCJub25lXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjQgMjRcIixcbiAgICBzdHJva2U6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcInN0cm9rZS1saW5lY2FwXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLWxpbmVqb2luXCI6IFwicm91bmRcIixcbiAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMlwiLFxuICAgICAgZDogXCJNMTcgMjBoNXYtMmEzIDMgMCAwMC01LjM1Ni0xLjg1N00xNyAyMEg3bTEwIDB2LTJjMC0uNjU2LS4xMjYtMS4yODMtLjM1Ni0xLjg1N003IDIwSDJ2LTJhMyAzIDAgMDE1LjM1Ni0xLjg1N003IDIwdi0yYzAtLjY1Ni4xMjYtMS4yODMuMzU2LTEuODU3bTAgMGE1LjAwMiA1LjAwMiAwIDAxOS4yODggME0xNSA3YTMgMyAwIDExLTYgMCAzIDMgMCAwMTYgMHptNiAzYTIgMiAwIDExLTQgMCAyIDIgMCAwMTQgMHpNNyAxMGEyIDIgMCAxMS00IDAgMiAyIDAgMDE0IDB6XCJcbiAgICB9KVxuICBdKSlcbn0iLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tIFwidnVlXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSkge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIGZpbGw6IFwibm9uZVwiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDI0IDI0XCIsXG4gICAgc3Ryb2tlOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgfSwgW1xuICAgIF9jcmVhdGVWTm9kZShcInBhdGhcIiwge1xuICAgICAgXCJzdHJva2UtbGluZWNhcFwiOiBcInJvdW5kXCIsXG4gICAgICBcInN0cm9rZS1saW5lam9pblwiOiBcInJvdW5kXCIsXG4gICAgICBcInN0cm9rZS13aWR0aFwiOiBcIjJcIixcbiAgICAgIGQ6IFwiTTEyIDQuMzU0YTQgNCAwIDExMCA1LjI5Mk0xNSAyMUgzdi0xYTYgNiAwIDAxMTIgMHYxem0wIDBoNnYtMWE2IDYgMCAwMC05LTUuMTk3TTEzIDdhNCA0IDAgMTEtOCAwIDQgNCAwIDAxOCAwelwiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICBmaWxsOiBcIm5vbmVcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyNCAyNFwiLFxuICAgIHN0cm9rZTogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHtcbiAgICAgIFwic3Ryb2tlLWxpbmVjYXBcIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2UtbGluZWpvaW5cIjogXCJyb3VuZFwiLFxuICAgICAgXCJzdHJva2Utd2lkdGhcIjogXCIyXCIsXG4gICAgICBkOiBcIk02IDE4TDE4IDZNNiA2bDEyIDEyXCJcbiAgICB9KVxuICBdKSlcbn0iLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tIFwidnVlXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSkge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDIwIDIwXCIsXG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHtcbiAgICAgIFwiZmlsbC1ydWxlXCI6IFwiZXZlbm9kZFwiLFxuICAgICAgZDogXCJNNS4yOTMgNy4yOTNhMSAxIDAgMDExLjQxNCAwTDEwIDEwLjU4NmwzLjI5My0zLjI5M2ExIDEgMCAxMTEuNDE0IDEuNDE0bC00IDRhMSAxIDAgMDEtMS40MTQgMGwtNC00YTEgMSAwIDAxMC0xLjQxNHpcIixcbiAgICAgIFwiY2xpcC1ydWxlXCI6IFwiZXZlbm9kZFwiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyMCAyMFwiLFxuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcImZpbGwtcnVsZVwiOiBcImV2ZW5vZGRcIixcbiAgICAgIGQ6IFwiTTMgM2ExIDEgMCAwMC0xIDF2MTJhMSAxIDAgMTAyIDBWNGExIDEgMCAwMC0xLTF6bTEwLjI5MyA5LjI5M2ExIDEgMCAwMDEuNDE0IDEuNDE0bDMtM2ExIDEgMCAwMDAtMS40MTRsLTMtM2ExIDEgMCAxMC0xLjQxNCAxLjQxNEwxNC41ODYgOUg3YTEgMSAwIDEwMCAyaDcuNTg2bC0xLjI5MyAxLjI5M3pcIixcbiAgICAgIFwiY2xpcC1ydWxlXCI6IFwiZXZlbm9kZFwiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyMCAyMFwiLFxuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcImZpbGwtcnVsZVwiOiBcImV2ZW5vZGRcIixcbiAgICAgIGQ6IFwiTTMgNWExIDEgMCAwMTEtMWgxMmExIDEgMCAxMTAgMkg0YTEgMSAwIDAxLTEtMXpNMyAxMGExIDEgMCAwMTEtMWgxMmExIDEgMCAxMTAgMkg0YTEgMSAwIDAxLTEtMXpNMyAxNWExIDEgMCAwMTEtMWgxMmExIDEgMCAxMTAgMkg0YTEgMSAwIDAxLTEtMXpcIixcbiAgICAgIFwiY2xpcC1ydWxlXCI6IFwiZXZlbm9kZFwiXG4gICAgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyMCAyMFwiLFxuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcImZpbGwtcnVsZVwiOiBcImV2ZW5vZGRcIixcbiAgICAgIGQ6IFwiTTggNGE0IDQgMCAxMDAgOCA0IDQgMCAwMDAtOHpNMiA4YTYgNiAwIDExMTAuODkgMy40NzZsNC44MTcgNC44MTdhMSAxIDAgMDEtMS40MTQgMS40MTRsLTQuODE2LTQuODE2QTYgNiAwIDAxMiA4elwiLFxuICAgICAgXCJjbGlwLXJ1bGVcIjogXCJldmVub2RkXCJcbiAgICB9KVxuICBdKSlcbn0iLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tIFwidnVlXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSkge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDIwIDIwXCIsXG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHsgZDogXCJNMyAzYTEgMSAwIDAwMCAyaDExYTEgMSAwIDEwMC0ySDN6TTMgN2ExIDEgMCAwMDAgMmg1YTEgMSAwIDAwMC0ySDN6TTMgMTFhMSAxIDAgMTAwIDJoNGExIDEgMCAxMDAtMkgzek0xMyAxNmExIDEgMCAxMDIgMHYtNS41ODZsMS4yOTMgMS4yOTNhMSAxIDAgMDAxLjQxNC0xLjQxNGwtMy0zYTEgMSAwIDAwLTEuNDE0IDBsLTMgM2ExIDEgMCAxMDEuNDE0IDEuNDE0TDEzIDEwLjQxNFYxNnpcIiB9KVxuICBdKSlcbn0iLCJpbXBvcnQgeyBjcmVhdGVWTm9kZSBhcyBfY3JlYXRlVk5vZGUsIG9wZW5CbG9jayBhcyBfb3BlbkJsb2NrLCBjcmVhdGVCbG9jayBhcyBfY3JlYXRlQmxvY2sgfSBmcm9tIFwidnVlXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSkge1xuICByZXR1cm4gKF9vcGVuQmxvY2soKSwgX2NyZWF0ZUJsb2NrKFwic3ZnXCIsIHtcbiAgICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgIHZpZXdCb3g6IFwiMCAwIDIwIDIwXCIsXG4gICAgZmlsbDogXCJjdXJyZW50Q29sb3JcIixcbiAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiXG4gIH0sIFtcbiAgICBfY3JlYXRlVk5vZGUoXCJwYXRoXCIsIHsgZDogXCJNMyAzYTEgMSAwIDAwMCAyaDExYTEgMSAwIDEwMC0ySDN6TTMgN2ExIDEgMCAwMDAgMmg3YTEgMSAwIDEwMC0ySDN6TTMgMTFhMSAxIDAgMTAwIDJoNGExIDEgMCAxMDAtMkgzek0xNSA4YTEgMSAwIDEwLTIgMHY1LjU4NmwtMS4yOTMtMS4yOTNhMSAxIDAgMDAtMS40MTQgMS40MTRsMyAzYTEgMSAwIDAwMS40MTQgMGwzLTNhMSAxIDAgMDAtMS40MTQtMS40MTRMMTUgMTMuNTg2Vjh6XCIgfSlcbiAgXSkpXG59IiwiaW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrIH0gZnJvbSBcInZ1ZVwiXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUpIHtcbiAgcmV0dXJuIChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhcInN2Z1wiLCB7XG4gICAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICB2aWV3Qm94OiBcIjAgMCAyMCAyMFwiLFxuICAgIGZpbGw6IFwiY3VycmVudENvbG9yXCIsXG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIlxuICB9LCBbXG4gICAgX2NyZWF0ZVZOb2RlKFwicGF0aFwiLCB7XG4gICAgICBcImZpbGwtcnVsZVwiOiBcImV2ZW5vZGRcIixcbiAgICAgIGQ6IFwiTTEwIDlhMyAzIDAgMTAwLTYgMyAzIDAgMDAwIDZ6bS03IDlhNyA3IDAgMTExNCAwSDN6XCIsXG4gICAgICBcImNsaXAtcnVsZVwiOiBcImV2ZW5vZGRcIlxuICAgIH0pXG4gIF0pKVxufSIsImltcG9ydCB7IGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gXCJ2dWVcIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW5kZXIoX2N0eCwgX2NhY2hlKSB7XG4gIHJldHVybiAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soXCJzdmdcIiwge1xuICAgIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgdmlld0JveDogXCIwIDAgMjAgMjBcIixcbiAgICBmaWxsOiBcImN1cnJlbnRDb2xvclwiLFxuICAgIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCJcbiAgfSwgW1xuICAgIF9jcmVhdGVWTm9kZShcInBhdGhcIiwge1xuICAgICAgXCJmaWxsLXJ1bGVcIjogXCJldmVub2RkXCIsXG4gICAgICBkOiBcIk00LjI5MyA0LjI5M2ExIDEgMCAwMTEuNDE0IDBMMTAgOC41ODZsNC4yOTMtNC4yOTNhMSAxIDAgMTExLjQxNCAxLjQxNEwxMS40MTQgMTBsNC4yOTMgNC4yOTNhMSAxIDAgMDEtMS40MTQgMS40MTRMMTAgMTEuNDE0bC00LjI5MyA0LjI5M2ExIDEgMCAwMS0xLjQxNC0xLjQxNEw4LjU4NiAxMCA0LjI5MyA1LjcwN2ExIDEgMCAwMTAtMS40MTR6XCIsXG4gICAgICBcImNsaXAtcnVsZVwiOiBcImV2ZW5vZGRcIlxuICAgIH0pXG4gIF0pKVxufSJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJ0aGlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJrZXlzIiwiaW5kZXhPZiIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSIsIm8iLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJpc0FycmF5IiwibWluTGVuIiwibiIsInRvU3RyaW5nIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImRvbmUiLCJ2YWx1ZSIsIlR5cGVFcnJvciIsIm5leHQiLCJiaW5kIiwiRGVzY3JpcHRpb25Db250ZXh0IiwidXNlRGVzY3JpcHRpb25zIiwiX3RlbXAiLCJfcmVmIiwiX3JlZiRzbG90Iiwic2xvdCIsInJlZiIsIl9yZWYkbmFtZSIsIl9yZWYkcHJvcHMiLCJwcm9wcyIsImRlc2NyaXB0aW9uSWRzIiwicHJvdmlkZSIsInJlZ2lzdGVyIiwicHVzaCIsImlkeCIsInNwbGljZSIsImNvbXB1dGVkIiwiam9pbiIsInVuZGVmaW5lZCIsIkRlc2NyaXB0aW9uIiwiZGVmaW5lQ29tcG9uZW50IiwiYXMiLCJ0eXBlIiwiU3RyaW5nIiwicmVuZGVyIiwiX3RoaXMkY29udGV4dCIsImNvbnRleHQiLCJfdGhpcyRjb250ZXh0JG5hbWUiLCJfdGhpcyRjb250ZXh0JHNsb3QiLCJfdGhpcyRjb250ZXh0JHByb3BzIiwicGFzc1Rocm91Z2hQcm9wcyIsIiRwcm9wcyIsInByb3BzV2VDb250cm9sIiwiZW50cmllcyIsInJlZHVjZSIsImFjYyIsIl9yZWYyIiwiX09iamVjdCRhc3NpZ24iLCJ1bnJlZiIsImlkIiwiYXR0cnMiLCIkYXR0cnMiLCJzbG90cyIsIiRzbG90cyIsInNldHVwIiwiaW5qZWN0IiwiRXJyb3IiLCJ1c2VEZXNjcmlwdGlvbkNvbnRleHQiLCJvbk1vdW50ZWQiLCJvblVubW91bnRlZCIsInVzZVdpbmRvd0V2ZW50IiwibGlzdGVuZXIiLCJvcHRpb25zIiwid2luZG93Iiwid2F0Y2hFZmZlY3QiLCJvbkludmFsaWRhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNvbnRhaW5zIiwiY29udGFpbmVycyIsImVsZW1lbnQiLCJfc3RlcCIsIl9pdGVyYXRvciIsIkZvY3VzIiwiRm9jdXNSZXN1bHQiLCJEaXJlY3Rpb24iLCJGb2N1c2FibGVNb2RlIiwiZm9jdXNhYmxlU2VsZWN0b3IiLCJtYXAiLCJzZWxlY3RvciIsImZvY3VzRWxlbWVudCIsImZvY3VzIiwicHJldmVudFNjcm9sbCIsImZvY3VzSW4iLCJjb250YWluZXIiLCJlbGVtZW50cyIsInNvcnQiLCJhIiwiYiIsInBvc2l0aW9uIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOb2RlIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwiRE9DVU1FTlRfUE9TSVRJT05fUFJFQ0VESU5HIiwiZG9jdW1lbnQiLCJib2R5IiwicXVlcnlTZWxlY3RvckFsbCIsImdldEZvY3VzYWJsZUVsZW1lbnRzIiwiYWN0aXZlIiwiYWN0aXZlRWxlbWVudCIsImRpcmVjdGlvbiIsIkZpcnN0IiwiTmV4dCIsIlByZXZpb3VzIiwiTGFzdCIsInN0YXJ0SW5kZXgiLCJNYXRoIiwibWF4IiwiZm9jdXNPcHRpb25zIiwiTm9TY3JvbGwiLCJvZmZzZXQiLCJ0b3RhbCIsIl9uZXh0IiwibmV4dElkeCIsIldyYXBBcm91bmQiLCJVbmRlcmZsb3ciLCJPdmVyZmxvdyIsImhhc0F0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIlN1Y2Nlc3MiLCJDSElMRFJFTl9TRUxFQ1RPUiIsImludGVyYWN0YWJsZXMiLCJTZXQiLCJvcmlnaW5hbHMiLCJNYXAiLCJpbmVydCIsInJlc3RvcmUiLCJvcmlnaW5hbCIsImdldCIsInJlbW92ZUF0dHJpYnV0ZSIsIlN0YWNrTWVzc2FnZSIsIlN0YWNrQ29udGV4dCIsInVzZVN0YWNrQ29udGV4dCIsInVzZVN0YWNrUHJvdmlkZXIiLCJvblVwZGF0ZSIsInBhcmVudFVwZGF0ZSIsIl9sZW4iLCJhcmdzIiwiX2tleSIsIkZvcmNlUG9ydGFsUm9vdENvbnRleHQiLCJGb3JjZVBvcnRhbFJvb3QiLCJmb3JjZSIsIkJvb2xlYW4iLCJnZXRQb3J0YWxSb290IiwiZXhpc3RpbmdSb290IiwiZ2V0RWxlbWVudEJ5SWQiLCJyb290IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiRGlhbG9nU3RhdGVzIiwiUG9ydGFsIiwiZm9yY2VQb3J0YWxSb290IiwiZ3JvdXBDb250ZXh0IiwiUG9ydGFsR3JvdXBDb250ZXh0IiwibXlUYXJnZXQiLCJyZXNvbHZlVGFyZ2V0Iiwibm90aWZ5IiwiZG9tRWxlbWVudCIsIkFkZEVsZW1lbnQiLCJSZW1vdmVFbGVtZW50IiwidXNlRWxlbWVuU3RhY2siLCJfbXlUYXJnZXQkdmFsdWUkcGFyZW4iLCJjaGlsZHJlbiIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsImgiLCJUZWxlcG9ydCIsInRvIiwiUG9ydGFsR3JvdXAiLCJhcGkiLCJyZWFjdGl2ZSIsIkRpYWxvZ0NvbnRleHQiLCJ1c2VEaWFsb2dDb250ZXh0IiwiY29tcG9uZW50IiwiZXJyIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJNaXNzaW5nIiwiRGlhbG9nIiwiaW5oZXJpdEF0dHJzIiwidW5tb3VudCIsIm9wZW4iLCJpbml0aWFsRm9jdXMiLCJlbWl0cyIsImNsb3NlIiwiX2Nsb3NlIiwiX3RoaXMiLCJyb2xlIiwiZGlhbG9nU3RhdGUiLCJPcGVuIiwidGl0bGVJZCIsImRlc2NyaWJlZGJ5Iiwib25DbGljayIsImhhbmRsZUNsaWNrIiwiX3RoaXMkJHByb3BzIiwiZGlhbG9nUmVmIiwidmlzaWJsZSIsImZlYXR1cmVzIiwiZW1pdCIsInVzZXNPcGVuQ2xvc2VkU3RhdGUiLCJfbWF0Y2giLCJDbG9zZWQiLCJpbnRlcm5hbERpYWxvZ1JlZiIsImVuYWJsZWQiLCJvblVwZGF0ZWQiLCJmb2N1c1RyYXBPcHRpb25zIiwicmVzdG9yZUVsZW1lbnQiLCJwcmV2aW91c0FjdGl2ZUVsZW1lbnQiLCJoYW5kbGVGb2N1cyIsInNpemUiLCJjb3VsZEZvY3VzIiwiY29uc29sZSIsIndhcm4iLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsInNoaWZ0S2V5IiwicHJldmlvdXMiLCJ0b0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsInN0b3BQcm9wYWdhdGlvbiIsInVzZUZvY3VzVHJhcCIsImFkZCIsImZvckVhY2giLCJjaGlsZCIsImludGVyYWN0YWJsZSIsInNldCIsImdldEF0dHJpYnV0ZSIsImhhcyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJfc3RlcDQiLCJfaXRlcmF0b3I0IiwiX2VsZW1lbnQiLCJ1c2VJbmVydE90aGVycyIsIm1lc3NhZ2UiLCJfbWF0Y2gyIiwic2V0VGl0bGVJZCIsIm5leHRUaWNrIiwib3ZlcmZsb3ciLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsInBhZGRpbmdSaWdodCIsInNjcm9sbGJhcldpZHRoIiwiaW5uZXJXaWR0aCIsImNsaWVudFdpZHRoIiwib2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJ5IiwiYm91bmRpbmdDbGllbnRSZWN0IiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwiZWwiLCJEaWFsb2dPdmVybGF5IiwiY3VycmVudFRhcmdldCIsIkRpYWxvZ1RpdGxlIiwicmVzb2x2ZVR5cGUiLCJ0YWciLCJ0b0xvd2VyQ2FzZSIsIkxhYmVsQ29udGV4dCIsInVzZUxhYmVsQ29udGV4dCIsIkxhYmVsIiwicGFzc2l2ZSIsImFsbFByb3BzIiwiR3JvdXBDb250ZXh0IiwiU3dpdGNoR3JvdXAiLCJzd2l0Y2hSZWYiLCJsYWJlbGxlZGJ5IiwibGFiZWxJZHMiLCJ1c2VMYWJlbHMiLCJjbGljayIsIlN3aXRjaCIsIl92YWx1ZSIsIm1vZGVsVmFsdWUiLCJjaGVja2VkIiwidGFiSW5kZXgiLCJvbktleXVwIiwiaGFuZGxlS2V5VXAiLCJvbktleXByZXNzIiwiaGFuZGxlS2V5UHJlc3MiLCJ0b2dnbGUiLCJkYXRhIiwicmVmRWxlbWVudCIsImludGVybmFsU3dpdGNoUmVmIiwiX2RvbSIsIkhUTUxCdXR0b25FbGVtZW50IiwiU3dpdGNoTGFiZWwiLCJSZWFzb24iLCJkaXNwb3NhYmxlcyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyYWYiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsInNldFRpbWVvdXQiLCJfc2V0VGltZW91dCIsInRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiY2IiLCJkaXNwb3NlIiwiYWRkQ2xhc3NlcyIsIm5vZGUiLCJfbm9kZSRjbGFzc0xpc3QiLCJjbGFzc2VzIiwiY2xhc3NMaXN0IiwicmVtb3ZlQ2xhc3NlcyIsIl9ub2RlJGNsYXNzTGlzdDIiLCJfbGVuMiIsIl9rZXkyIiwicmVtb3ZlIiwidHJhbnNpdGlvbiIsImJhc2UiLCJlbnRlcmVkIiwic3RhdGUiLCJkIiwiX2RvbmUiLCJjYWxsZWQiLCJjb25jYXQiLCJfZ2V0Q29tcHV0ZWRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJfbWFwIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwidHJhbnNpdGlvbkRlbGF5IiwiX3ZhbHVlJHNwbGl0JGZpbHRlciRtMiIsInNwbGl0IiwiZmlsdGVyIiwidiIsImluY2x1ZGVzIiwicGFyc2VGbG9hdCIsInoiLCJkdXJhdGlvbk1zIiwiZGVsYXlzTXMiLCJGaW5pc2hlZCIsIkNhbmNlbGxlZCIsIndhaXRGb3JUcmFuc2l0aW9uIiwicmVhc29uIiwic3BsaXRDbGFzc2VzIiwiY2xhc3NOYW1lIiwidHJpbSIsIlRyZWVTdGF0ZXMiLCJUcmFuc2l0aW9uQ29udGV4dCIsIk5lc3RpbmdDb250ZXh0IiwiaGFzQ2hpbGRyZW4iLCJiYWciLCJWaXNpYmxlIiwidXNlTmVzdGluZyIsInRyYW5zaXRpb25hYmxlQ2hpbGRyZW4iLCJtb3VudGVkIiwidW5yZWdpc3RlciIsImNoaWxkSWQiLCJzdHJhdGVneSIsImZpbmRJbmRleCIsIkhpZGRlbiIsImZpbmQiLCJfcmVmMyIsIlRyYW5zaXRpb25DaGlsZFJlbmRlckZlYXR1cmVzIiwiVHJhbnNpdGlvbkNoaWxkIiwic2hvdyIsImFwcGVhciIsImVudGVyIiwiZW50ZXJGcm9tIiwiZW50ZXJUbyIsImxlYXZlIiwibGVhdmVGcm9tIiwibGVhdmVUbyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsInJlbmRlckFzUm9vdCIsIlRyYW5zaXRpb25Sb290Iiwib25CZWZvcmVFbnRlciIsIiRlbWl0Iiwib25BZnRlckVudGVyIiwib25CZWZvcmVMZWF2ZSIsIm9uQWZ0ZXJMZWF2ZSIsInBhc3N0aHJvdWdoUHJvcHMiLCJfcmVmNCIsIl91c2VUcmFuc2l0aW9uQ29udGV4dCIsInVzZVRyYW5zaXRpb25Db250ZXh0IiwiX3VzZVBhcmVudE5lc3RpbmciLCJ1c2VQYXJlbnROZXN0aW5nIiwiaW5pdGlhbCIsImlzVHJhbnNpdGlvbmluZyIsIm5lc3RpbmciLCJlbnRlckNsYXNzZXMiLCJlbnRlckZyb21DbGFzc2VzIiwiZW50ZXJUb0NsYXNzZXMiLCJlbnRlcmVkQ2xhc3NlcyIsImxlYXZlQ2xhc3NlcyIsImxlYXZlRnJvbUNsYXNzZXMiLCJsZWF2ZVRvQ2xhc3NlcyIsIkNvbW1lbnQiLCJ3YXRjaCIsIl9vbGRWYWx1ZXMiLCJfbmV3VmFsdWVzIiwic2tpcCIsImV4ZWN1dGVUcmFuc2l0aW9uIiwiaW1tZWRpYXRlIiwiX21hdGNoMyIsIl90aGlzMiIsIl90aGlzJCRwcm9wczIiLCJzaGFyZWRQcm9wcyIsIl9tYXRjaDQiLCJuZXN0aW5nQmFnIiwidHJhbnNpdGlvbkJhZyIsInVzZUlkIiwiU3RhdGUiLCJDb250ZXh0IiwiaGFzT3BlbkNsb3NlZCIsInVzZU9wZW5DbG9zZWQiLCJ1c2VPcGVuQ2xvc2VkUHJvdmlkZXIiLCJLZXlzIiwiZG9tIiwiX3JlZiR2YWx1ZSQkZWwiLCIkZWwiLCJtYXRjaCIsImxvb2t1cCIsInJldHVyblZhbHVlIiwiZXJyb3IiLCJGZWF0dXJlcyIsIlJlbmRlclN0cmF0ZWd5IiwiX3JlZiR2aXNpYmxlIiwiX3JlZiRmZWF0dXJlcyIsIk5vbmUiLCJtYWluIiwiX3JlbmRlciIsIlN0YXRpYyIsIl9tYWluJHByb3BzJHVubW91bnQiLCJVbm1vdW50IiwiaGlkZGVuIiwiZGlzcGxheSIsImlucHV0IiwiX29taXQiLCJvYmplY3QiLCJrZXlzVG9PbWl0IiwiY2xvbmUiLCJvbWl0IiwiZmlyc3RDaGlsZCIsIm90aGVyIiwibGluZSIsImNsb25lVk5vZGUiLCJlIiwiZGVmYXVsdCIsInIiLCJ0IiwidSIsInMiLCJJbmVydGlhIiwiYyIsImwiLCJwIiwiZiIsImlzRGlydHkiLCJlcnJvcnMiLCJoYXNFcnJvcnMiLCJwcm9jZXNzaW5nIiwicHJvZ3Jlc3MiLCJ3YXNTdWNjZXNzZnVsIiwicmVjZW50bHlTdWNjZXNzZnVsIiwidHJhbnNmb3JtIiwiZGVmYXVsdHMiLCJyZXNldCIsInNldEVycm9yIiwiY2xlYXJFcnJvcnMiLCJzdWJtaXQiLCJvbkNhbmNlbFRva2VuIiwib25CZWZvcmUiLCJvblN0YXJ0Iiwib25Qcm9ncmVzcyIsIm9uU3VjY2VzcyIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInJlamVjdCIsIm9uRXJyb3IiLCJvbkNhbmNlbCIsIm9uRmluaXNoIiwiZGVsZXRlIiwicG9zdCIsInB1dCIsInBhdGNoIiwiY2FuY2VsIiwiX19yZW1lbWJlcmFibGUiLCJfX3JlbWVtYmVyIiwiX19yZXN0b3JlIiwicmVtZW1iZXIiLCJkZWVwIiwiY3JlYXRlZCIsIiRvcHRpb25zIiwiRnVuY3Rpb24iLCIkd2F0Y2giLCJpbml0aWFsUGFnZSIsInJlcXVpcmVkIiwiaW5pdGlhbENvbXBvbmVudCIsInJlc29sdmVDb21wb25lbnQiLCJ0aXRsZUNhbGxiYWNrIiwib25IZWFkVXBkYXRlIiwibWFya1JhdyIsImNyZWF0ZUhlYWRNYW5hZ2VyIiwiaW5pdCIsInN3YXBDb21wb25lbnQiLCJwYWdlIiwicHJlc2VydmVTdGF0ZSIsIkRhdGUiLCJub3ciLCJsYXlvdXQiLCJyZXZlcnNlIiwiaW5zdGFsbCIsImZvcm0iLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZyIsImdsb2JhbFByb3BlcnRpZXMiLCJtaXhpbiIsInRpdGxlIiwicHJvdmlkZXIiLCIkaGVhZE1hbmFnZXIiLCJjcmVhdGVQcm92aWRlciIsImJlZm9yZVVubW91bnQiLCJtZXRob2RzIiwiaXNVbmFyeVRhZyIsInJlbmRlclRhZ1N0YXJ0IiwiaW5lcnRpYSIsInJlbmRlclRhZ0NoaWxkcmVuIiwicmVuZGVyVGFnIiwiYWRkVGl0bGVFbGVtZW50Iiwic3RhcnRzV2l0aCIsInJlbmRlck5vZGVzIiwiZmxhdE1hcCIsInVwZGF0ZSIsIm0iLCJocmVmIiwibWV0aG9kIiwicmVwbGFjZSIsInByZXNlcnZlU2Nyb2xsIiwib25seSIsImhlYWRlcnMiLCJxdWVyeVN0cmluZ0FycmF5Rm9ybWF0IiwibWVyZ2VEYXRhSW50b1F1ZXJ5U3RyaW5nIiwic2hvdWxkSW50ZXJjZXB0IiwidmlzaXQiLCJKU09OIiwicGFyc2UiLCJkYXRhc2V0IiwiYXBwIiwiQXBwIiwicGx1Z2luIiwiY3JlYXRlU1NSQXBwIiwic3RyaW5naWZ5IiwiaW5uZXJIVE1MIiwiaGVhZCIsIm1vZGFsIiwicGFkZGluZyIsImJveFNpemluZyIsImJhY2tncm91bmRDb2xvciIsInpJbmRleCIsImhpZGUiLCJib3JkZXJSYWRpdXMiLCJwcmVwZW5kIiwiY29udGVudFdpbmRvdyIsIndyaXRlIiwib3V0ZXJIVE1MIiwiaGlkZU9uRXNjYXBlIiwia2V5Q29kZSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidG9JU09TdHJpbmciLCJGaWxlIiwiQmxvYiIsIlVSTCIsImxvY2F0aW9uIiwiTWV0aG9kIiwiR0VUIiwic2VhcmNoIiwiaWdub3JlUXVlcnlQcmVmaXgiLCJlbmNvZGVWYWx1ZXNPbmx5IiwiYXJyYXlGb3JtYXQiLCJwcm90b2NvbCIsImhvc3QiLCJwYXRobmFtZSIsInN1YnN0cmluZyIsImhhc2giLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJQT1NUIiwiUFVUIiwiUEFUQ0giLCJERUxFVEUiLCJkZXRhaWwiLCJnIiwidyIsInZpc2l0SWQiLCJpc0JhY2tGb3J3YXJkVmlzaXQiLCJoYW5kbGVCYWNrRm9yd2FyZFZpc2l0IiwiaXNMb2NhdGlvblZpc2l0IiwiaGFuZGxlTG9jYXRpb25WaXNpdCIsImhhbmRsZUluaXRpYWxQYWdlVmlzaXQiLCJzZXR1cEV2ZW50TGlzdGVuZXJzIiwidXJsIiwic2V0UGFnZSIsImhhbmRsZVBvcHN0YXRlRXZlbnQiLCJoYW5kbGVTY3JvbGxFdmVudCIsInNjcm9sbFJlZ2lvbnMiLCJzYXZlU2Nyb2xsUG9zaXRpb25zIiwicmVwbGFjZVN0YXRlIiwidG9wIiwic2Nyb2xsVG9wIiwibGVmdCIsInNjcm9sbExlZnQiLCJyZXNldFNjcm9sbFBvc2l0aW9ucyIsInNjcm9sbEludG9WaWV3IiwicmVzdG9yZVNjcm9sbFBvc2l0aW9ucyIsImhpc3RvcnkiLCJwZXJmb3JtYW5jZSIsImdldEVudHJpZXNCeVR5cGUiLCJ2ZXJzaW9uIiwibG9jYXRpb25WaXNpdCIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsInJlbG9hZCIsImdldEl0ZW0iLCJyZW1vdmVJdGVtIiwicmVtZW1iZXJlZFN0YXRlIiwiaXNMb2NhdGlvblZpc2l0UmVzcG9uc2UiLCJzdGF0dXMiLCJpc0luZXJ0aWFSZXNwb25zZSIsImNyZWF0ZVZpc2l0SWQiLCJjYW5jZWxWaXNpdCIsImNhbmNlbGxlZCIsImludGVycnVwdGVkIiwiY29tcGxldGVkIiwiY2FuY2VsVG9rZW4iLCJmaW5pc2hWaXNpdCIsInJlc29sdmVQcmVzZXJ2ZU9wdGlvbiIsIlMiLCJFIiwiUCIsIkkiLCJWIiwiZXJyb3JCYWciLCJUIiwiTCIsImZvcmNlRm9ybURhdGEiLCJPIiwiayIsIkMiLCJNIiwiQSIsIkYiLCJSIiwiaiIsIkQiLCJCIiwicSIsIk4iLCJIIiwiVyIsIkciLCJVIiwiWCIsIkoiLCJLIiwiXyIsIkZpbGVMaXN0IiwidmFsdWVzIiwic29tZSIsIlEiLCJZIiwiY2FuY2VsYWJsZSIsImFjdGl2ZVZpc2l0IiwiWiIsIkNhbmNlbFRva2VuIiwicGFyYW1zIiwidG9rZW4iLCJBY2NlcHQiLCJvblVwbG9hZFByb2dyZXNzIiwicGVyY2VudGFnZSIsInJvdW5kIiwibG9hZGVkIiwicmVzcG9uc2UiLCJjYXRjaCIsImlzQ2FuY2VsIiwiZXhjZXB0aW9uIiwicHVzaFN0YXRlIiwib24iLCJkZWZhdWx0UHJldmVudGVkIiwiYnVpbGRET01FbGVtZW50IiwiY29udGVudCIsImdldEF0dHJpYnV0ZU5hbWVzIiwiaXNJbmVydGlhTWFuYWdlZEVsZW1lbnQiLCJub2RlVHlwZSIsIkVMRU1FTlRfTk9ERSIsImZpbmRNYXRjaGluZ0VsZW1lbnRJbmRleCIsImNoaWxkTm9kZXMiLCJpc0VxdWFsTm9kZSIsInBhcmVudE5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJocmVmVG9VcmwiLCJ0YWdOYW1lIiwiaXNDb250ZW50RWRpdGFibGUiLCJ3aGljaCIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5IiwidXJsV2l0aG91dEhhc2giLCJzdGFydCIsImlzU3RhcnRlZCIsImRlbGF5IiwiY29sb3IiLCJpbmNsdWRlQ1NTIiwic2hvd1NwaW5uZXIiLCJjb25maWd1cmUiLCJ0ZXh0Q29udGVudCIsInV0aWxzIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsInJlc3BvbnNlVHlwZSIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0IiwidG9VcHBlckNhc2UiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInRyYW5zaXRpb25hbCIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInhzcmZDb29raWVOYW1lIiwicmVhZCIsInhzcmZIZWFkZXJOYW1lIiwidmFsIiwic2V0UmVxdWVzdEhlYWRlciIsImlzVW5kZWZpbmVkIiwib25Eb3dubG9hZFByb2dyZXNzIiwidXBsb2FkIiwicHJvbWlzZSIsImFib3J0Iiwic2VuZCIsIkF4aW9zIiwibWVyZ2VDb25maWciLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsImV4dGVuZCIsImF4aW9zIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsIl9fQ0FOQ0VMX18iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwidGhyb3dJZlJlcXVlc3RlZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsInZhbGlkYXRvciIsInZhbGlkYXRvcnMiLCJpbnRlcmNlcHRvcnMiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicnVuV2hlbiIsInN5bmNocm9ub3VzIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJzaGlmdCIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdldFVyaSIsImhhbmRsZXJzIiwidXNlIiwiZWplY3QiLCJmbiIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsInJlcXVlc3RlZFVSTCIsImVuaGFuY2VFcnJvciIsImNvZGUiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImRpcmVjdE1lcmdlS2V5cyIsImdldE1lcmdlZFZhbHVlIiwiaXNQbGFpbk9iamVjdCIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJwcm9wIiwiYXhpb3NLZXlzIiwib3RoZXJLZXlzIiwidmFsaWRhdGVTdGF0dXMiLCJmbnMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJwcm9jZXNzIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNPYmplY3QiLCJyYXdWYWx1ZSIsInBhcnNlciIsImVuY29kZXIiLCJpc1N0cmluZyIsInN0cmluZ2lmeVNhZmVseSIsInN0cmljdEpTT05QYXJzaW5nIiwibWF4Q29udGVudExlbmd0aCIsIm1heEJvZHlMZW5ndGgiLCJ0aGlzQXJnIiwiZW5jb2RlIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwiaXNEYXRlIiwiaGFzaG1hcmtJbmRleCIsInJlbGF0aXZlVVJMIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsInRvR01UU3RyaW5nIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGF5bG9hZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJob3N0bmFtZSIsInBvcnQiLCJjaGFyQXQiLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwibm9ybWFsaXplZE5hbWUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInN1YnN0ciIsImNhbGxiYWNrIiwicGtnIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJjdXJyZW50VmVyQXJyIiwiaXNPbGRlclZlcnNpb24iLCJ0aGFuVmVyc2lvbiIsInBrZ1ZlcnNpb25BcnIiLCJkZXN0VmVyIiwiaXNEZXByZWNhdGVkIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwicmVzdWx0IiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwib2JqIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwiVVJMU2VhcmNoUGFyYW1zIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwic3RyIiwic3RyaXBCT00iLCJjaGFyQ29kZUF0IiwiR2V0SW50cmluc2ljIiwiY2FsbEJpbmQiLCIkaW5kZXhPZiIsImFsbG93TWlzc2luZyIsImludHJpbnNpYyIsIiRhcHBseSIsIiRjYWxsIiwiJHJlZmxlY3RBcHBseSIsIiRnT1BEIiwiJGRlZmluZVByb3BlcnR5IiwiJG1heCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJmdW5jIiwiY29uZmlndXJhYmxlIiwiYXBwbHlCaW5kIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJpdGVtIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJfc2xpY2VkVG9BcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJfaXRlbSIsImNzc01hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIiQkdHlwZW9mIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJmb3IiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImRlZXBtZXJnZSIsImRlZmF1bHRBcnJheU1lcmdlIiwiZ2V0S2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZ2V0RW51bWVyYWJsZU93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNPbk9iamVjdCIsInByb3BlcnR5IiwibWVyZ2VPYmplY3QiLCJkZXN0aW5hdGlvbiIsInByb3BlcnR5SXNVbnNhZmUiLCJjdXN0b21NZXJnZSIsImdldE1lcmdlRnVuY3Rpb24iLCJhcnJheU1lcmdlIiwic291cmNlSXNBcnJheSIsImFycmF5IiwicHJldiIsImRlZXBtZXJnZV8xIiwiRVJST1JfTUVTU0FHRSIsInRvU3RyIiwiZnVuY1R5cGUiLCJ0aGF0IiwiYm91bmQiLCJiaW5kZXIiLCJib3VuZExlbmd0aCIsImJvdW5kQXJncyIsIkVtcHR5IiwiaW1wbGVtZW50YXRpb24iLCIkU3ludGF4RXJyb3IiLCJTeW50YXhFcnJvciIsIiRGdW5jdGlvbiIsIiRUeXBlRXJyb3IiLCJnZXRFdmFsbGVkQ29uc3RydWN0b3IiLCJleHByZXNzaW9uU3ludGF4IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidGhyb3dUeXBlRXJyb3IiLCJUaHJvd1R5cGVFcnJvciIsImNhbGxlZVRocm93cyIsImdPUER0aHJvd3MiLCJoYXNTeW1ib2xzIiwiZ2V0UHJvdG8iLCJfX3Byb3RvX18iLCJuZWVkc0V2YWwiLCJUeXBlZEFycmF5IiwiVWludDhBcnJheSIsIklOVFJJTlNJQ1MiLCJBZ2dyZWdhdGVFcnJvciIsIkF0b21pY3MiLCJCaWdJbnQiLCJEYXRhVmlldyIsImRlY29kZVVSSSIsImVuY29kZVVSSSIsImV2YWwiLCJFdmFsRXJyb3IiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJGaW5hbGl6YXRpb25SZWdpc3RyeSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiaXNGaW5pdGUiLCJpc05hTiIsIk51bWJlciIsInBhcnNlSW50IiwiUHJveHkiLCJSYW5nZUVycm9yIiwiUmVmZXJlbmNlRXJyb3IiLCJSZWZsZWN0IiwiU2hhcmVkQXJyYXlCdWZmZXIiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJVUklFcnJvciIsIldlYWtNYXAiLCJXZWFrUmVmIiwiV2Vha1NldCIsImRvRXZhbCIsImdlbiIsIkxFR0FDWV9BTElBU0VTIiwiaGFzT3duIiwiJGNvbmNhdCIsIiRzcGxpY2VBcHBseSIsIiRyZXBsYWNlIiwiJHN0clNsaWNlIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsInN0cmluZyIsImZpcnN0IiwibGFzdCIsInF1b3RlIiwic3ViU3RyaW5nIiwiZ2V0QmFzZUludHJpbnNpYyIsImFsaWFzIiwiaW50cmluc2ljTmFtZSIsImludHJpbnNpY0Jhc2VOYW1lIiwiaW50cmluc2ljUmVhbE5hbWUiLCJza2lwRnVydGhlckNhY2hpbmciLCJpc093biIsInBhcnQiLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsInN5bSIsInN5bU9iaiIsImdldE93blByb3BlcnR5TmFtZXMiLCJzeW1zIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJIQVNIX1VOREVGSU5FRCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhcmdzVGFnIiwiYm9vbFRhZyIsImRhdGVUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwib2JqZWN0VGFnIiwicHJvbWlzZVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDhDbGFtcGVkVGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVGbGFncyIsInJlSXNIb3N0Q3RvciIsInJlSXNVaW50IiwiY2xvbmVhYmxlVGFncyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsInNlbGYiLCJmcmVlRXhwb3J0cyIsImZyZWVNb2R1bGUiLCJtb2R1bGVFeHBvcnRzIiwiYWRkTWFwRW50cnkiLCJwYWlyIiwiYWRkU2V0RW50cnkiLCJhcnJheVJlZHVjZSIsIml0ZXJhdGVlIiwiYWNjdW11bGF0b3IiLCJpbml0QWNjdW0iLCJpbmRleCIsImlzSG9zdE9iamVjdCIsIm1hcFRvQXJyYXkiLCJvdmVyQXJnIiwiYXJnIiwic2V0VG9BcnJheSIsInVpZCIsImFycmF5UHJvdG8iLCJmdW5jUHJvdG8iLCJvYmplY3RQcm90byIsImNvcmVKc0RhdGEiLCJtYXNrU3JjS2V5IiwiZXhlYyIsIklFX1BST1RPIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0VG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwibmF0aXZlR2V0U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwibmF0aXZlS2V5cyIsImdldE5hdGl2ZSIsIm5hdGl2ZUNyZWF0ZSIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsIkhhc2giLCJjbGVhciIsIkxpc3RDYWNoZSIsIk1hcENhY2hlIiwiU3RhY2siLCJfX2RhdGFfXyIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc09iamVjdExpa2UiLCJpc0FycmF5TGlrZSIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNBcmd1bWVudHMiLCJiYXNlVGltZXMiLCJza2lwSW5kZXhlcyIsImlzSW5kZXgiLCJvYmpWYWx1ZSIsImVxIiwiYXNzb2NJbmRleE9mIiwiYmFzZUNsb25lIiwiaXNEZWVwIiwiaXNGdWxsIiwiY3VzdG9taXplciIsImlzQXJyIiwiaW5pdENsb25lQXJyYXkiLCJjb3B5QXJyYXkiLCJnZXRUYWciLCJpc0Z1bmMiLCJjb3B5IiwiY2xvbmVCdWZmZXIiLCJpc1Byb3RvdHlwZSIsInByb3RvIiwiaW5pdENsb25lT2JqZWN0IiwiY29weU9iamVjdCIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsImJhc2VBc3NpZ24iLCJjbG9uZUZ1bmMiLCJDdG9yIiwiY2xvbmVBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwidHlwZWRBcnJheSIsImNsb25lVHlwZWRBcnJheSIsImNsb25lTWFwIiwicmVnZXhwIiwibGFzdEluZGV4IiwiY2xvbmVSZWdFeHAiLCJjbG9uZVNldCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJhcnJheVB1c2giLCJiYXNlR2V0QWxsS2V5cyIsImdldEFsbEtleXMiLCJhcnJheUVhY2giLCJzdWJWYWx1ZSIsImJhc2VJc05hdGl2ZSIsImFycmF5QnVmZmVyIiwibmV3VmFsdWUiLCJnZXRNYXBEYXRhIiwiZ2V0VmFsdWUiLCJwb3AiLCJjYWNoZSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImN0b3JTdHJpbmciLCJpc0xlbmd0aCIsImJhc2VLZXlzIiwiYXJyYXlUYWciLCJlcnJvclRhZyIsInR5cGVkQXJyYXlUYWdzIiwiZnJlZVByb2Nlc3MiLCJub2RlVXRpbCIsImJpbmRpbmciLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXJyYXlTb21lIiwicHJlZGljYXRlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiU2V0Q2FjaGUiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsImJhc2VHZXRUYWciLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiYml0bWFzayIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib3RoTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJpc01hc2tlZCIsImFyckxlbmd0aCIsInNlZW4iLCJhcnJWYWx1ZSIsIm90aEluZGV4IiwicmVzSW5kZXgiLCJhcnJheUZpbHRlciIsImJhc2VVbmFyeSIsImN1cnJlbnQiLCJOUHJvZ3Jlc3MiLCJTZXR0aW5ncyIsInNldHRpbmdzIiwibWluaW11bSIsImVhc2luZyIsInBvc2l0aW9uVXNpbmciLCJzcGVlZCIsInRyaWNrbGUiLCJ0cmlja2xlUmF0ZSIsInRyaWNrbGVTcGVlZCIsImJhclNlbGVjdG9yIiwic3Bpbm5lclNlbGVjdG9yIiwicGFyZW50IiwidGVtcGxhdGUiLCJjbGFtcCIsIm1pbiIsInRvQmFyUGVyYyIsImJhclBvc2l0aW9uQ1NTIiwiZWFzZSIsImJhckNTUyIsInN0YXJ0ZWQiLCJiYXIiLCJxdWVyeVNlbGVjdG9yIiwib2Zmc2V0V2lkdGgiLCJxdWV1ZSIsImdldFBvc2l0aW9uaW5nQ1NTIiwiY3NzIiwib3BhY2l0eSIsIndvcmsiLCJpbmMiLCJyYW5kb20iLCJhbW91bnQiLCIkcHJvbWlzZSIsImFsd2F5cyIsImZyb21TdGFydCIsImlzUmVuZGVyZWQiLCJhZGRDbGFzcyIsInNwaW5uZXIiLCJwZXJjIiwicmVtb3ZlRWxlbWVudCIsInJlbW92ZUNsYXNzIiwiYm9keVN0eWxlIiwidmVuZG9yUHJlZml4IiwicGVuZGluZyIsImNzc1ByZWZpeGVzIiwiY3NzUHJvcHMiLCJjYW1lbENhc2UiLCJsZXR0ZXIiLCJnZXRWZW5kb3JQcm9wIiwidmVuZG9yTmFtZSIsImNhcE5hbWUiLCJnZXRTdHlsZVByb3AiLCJhcHBseUNzcyIsInByb3BlcnRpZXMiLCJoYXNDbGFzcyIsIm9sZExpc3QiLCJuZXdMaXN0IiwiaGFzTWFwIiwibWFwU2l6ZURlc2NyaXB0b3IiLCJtYXBTaXplIiwibWFwRm9yRWFjaCIsImhhc1NldCIsInNldFNpemVEZXNjcmlwdG9yIiwic2V0U2l6ZSIsInNldEZvckVhY2giLCJ3ZWFrTWFwSGFzIiwid2Vha1NldEhhcyIsIndlYWtSZWZEZXJlZiIsImRlcmVmIiwiYm9vbGVhblZhbHVlT2YiLCJmdW5jdGlvblRvU3RyaW5nIiwiJG1hdGNoIiwiJHNsaWNlIiwiJHRvVXBwZXJDYXNlIiwiJHRvTG93ZXJDYXNlIiwiJHRlc3QiLCIkam9pbiIsIiRhcnJTbGljZSIsIiRmbG9vciIsImZsb29yIiwiYmlnSW50VmFsdWVPZiIsImdPUFMiLCJzeW1Ub1N0cmluZyIsImhhc1NoYW1tZWRTeW1ib2xzIiwiaXNFbnVtZXJhYmxlIiwiZ1BPIiwiYWRkTnVtZXJpY1NlcGFyYXRvciIsIm51bSIsIkluZmluaXR5Iiwic2VwUmVnZXgiLCJpbnQiLCJpbnRTdHIiLCJkZWMiLCJpbnNwZWN0Q3VzdG9tIiwiaW5zcGVjdFN5bWJvbCIsImlzU3ltYm9sIiwid3JhcFF1b3RlcyIsImRlZmF1bHRTdHlsZSIsInF1b3RlQ2hhciIsInF1b3RlU3R5bGUiLCJpbnNwZWN0XyIsImRlcHRoIiwibWF4U3RyaW5nTGVuZ3RoIiwiY3VzdG9tSW5zcGVjdCIsImluZGVudCIsIm51bWVyaWNTZXBhcmF0b3IiLCJpbnNwZWN0U3RyaW5nIiwiYmlnSW50U3RyIiwibWF4RGVwdGgiLCJiYXNlSW5kZW50IiwiZ2V0SW5kZW50IiwiaW5zcGVjdCIsIm5vSW5kZW50IiwibmV3T3B0cyIsIm5hbWVPZiIsImFyck9iaktleXMiLCJzeW1TdHJpbmciLCJtYXJrQm94ZWQiLCJub2RlTmFtZSIsImlzRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJ4cyIsInNpbmdsZUxpbmVWYWx1ZXMiLCJpbmRlbnRlZEpvaW4iLCJpc0Vycm9yIiwiY2F1c2UiLCJpc01hcCIsIm1hcFBhcnRzIiwiY29sbGVjdGlvbk9mIiwiaXNTZXQiLCJzZXRQYXJ0cyIsImlzV2Vha01hcCIsIndlYWtDb2xsZWN0aW9uT2YiLCJpc1dlYWtTZXQiLCJpc1dlYWtSZWYiLCJpc0JpZ0ludCIsImlzQm9vbGVhbiIsImlzUmVnRXhwIiwieXMiLCJwcm90b1RhZyIsInJlbWFpbmluZyIsInRyYWlsZXIiLCJsb3dieXRlIiwibGluZUpvaW5lciIsInN5bU1hcCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiY3dkIiwiY2hkaXIiLCJkaXIiLCJ1bWFzayIsInBlcmNlbnRUd2VudGllcyIsIkZvcm1hdCIsImZvcm1hdHRlcnMiLCJSRkMxNzM4IiwiUkZDMzk4NiIsImZvcm1hdHMiLCJhbGxvd0RvdHMiLCJhbGxvd1Byb3RvdHlwZXMiLCJhbGxvd1NwYXJzZSIsImFycmF5TGltaXQiLCJjaGFyc2V0IiwiY2hhcnNldFNlbnRpbmVsIiwiY29tbWEiLCJkZWNvZGVyIiwiZGVjb2RlIiwiZGVsaW1pdGVyIiwiaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzIiwicGFyYW1ldGVyTGltaXQiLCJwYXJzZUFycmF5cyIsInBsYWluT2JqZWN0cyIsInN0cmljdE51bGxIYW5kbGluZyIsIiQwIiwibnVtYmVyU3RyIiwiZnJvbUNoYXJDb2RlIiwicGFyc2VBcnJheVZhbHVlIiwicGFyc2VLZXlzIiwiZ2l2ZW5LZXkiLCJ2YWx1ZXNQYXJzZWQiLCJzZWdtZW50IiwibGVhZiIsImNsZWFuUm9vdCIsInBhcnNlT2JqZWN0Iiwibm9ybWFsaXplUGFyc2VPcHRpb25zIiwidGVtcE9iaiIsImNsZWFuU3RyIiwibGltaXQiLCJza2lwSW5kZXgiLCJicmFja2V0RXF1YWxzUG9zIiwicG9zIiwibWF5YmVNYXAiLCJlbmNvZGVkVmFsIiwiY29tYmluZSIsInBhcnNlVmFsdWVzIiwibmV3T2JqIiwiY29tcGFjdCIsImdldFNpZGVDaGFubmVsIiwiYXJyYXlQcmVmaXhHZW5lcmF0b3JzIiwiYnJhY2tldHMiLCJwcmVmaXgiLCJpbmRpY2VzIiwicmVwZWF0IiwicHVzaFRvQXJyYXkiLCJ2YWx1ZU9yQXJyYXkiLCJ0b0lTTyIsImRlZmF1bHRGb3JtYXQiLCJhZGRRdWVyeVByZWZpeCIsImZvcm1hdCIsImZvcm1hdHRlciIsInNlcmlhbGl6ZURhdGUiLCJkYXRlIiwic2tpcE51bGxzIiwic2VudGluZWwiLCJnZW5lcmF0ZUFycmF5UHJlZml4Iiwic2lkZUNoYW5uZWwiLCJ0bXBTYyIsInN0ZXAiLCJmaW5kRmxhZyIsImtleVZhbHVlIiwidmFsdWVzQXJyYXkiLCJ2YWx1ZXNKb2luZWQiLCJvYmpLZXlzIiwia2V5UHJlZml4IiwidmFsdWVTaWRlQ2hhbm5lbCIsIm5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMiLCJqb2luZWQiLCJoZXhUYWJsZSIsImFycmF5VG9PYmplY3QiLCJyZWZzIiwiY29tcGFjdGVkIiwiY29tcGFjdFF1ZXVlIiwic3RyV2l0aG91dFBsdXMiLCJkZWZhdWx0RW5jb2RlciIsImtpbmQiLCJlc2NhcGUiLCJvdXQiLCJtYXBwZWQiLCJtZXJnZVRhcmdldCIsInRhcmdldEl0ZW0iLCJydW50aW1lIiwiT3AiLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwiZGVmaW5lIiwid3JpdGFibGUiLCJ3cmFwIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJpdGVyYWJsZSIsIml0ZXJhdG9yTWV0aG9kIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwic2tpcFRlbXBSZXNldCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlZ2VuZXJhdG9yUnVudGltZSIsImFjY2lkZW50YWxTdHJpY3RNb2RlIiwiZ2xvYmFsVGhpcyIsImNhbGxCb3VuZCIsIiRXZWFrTWFwIiwiJE1hcCIsIiR3ZWFrTWFwR2V0IiwiJHdlYWtNYXBTZXQiLCIkd2Vha01hcEhhcyIsIiRtYXBHZXQiLCIkbWFwU2V0IiwiJG1hcEhhcyIsImxpc3RHZXROb2RlIiwiY3VyciIsIiR3bSIsIiRtIiwiJG8iLCJjaGFubmVsIiwiYXNzZXJ0Iiwib2JqZWN0cyIsImxpc3RHZXQiLCJsaXN0SGFzIiwibGlzdFNldCIsIm1lbW8iLCJpc09sZElFIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImNvdW50IiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwibm9uY2UiLCJpbnNlcnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZUluZGV4IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibGFzdElkZW50aWZpZXJzIiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwiY3R4IiwiZXZ0QXJyIiwiZXZ0cyIsImxpdmVFdmVudHMiLCJUaW55RW1pdHRlciIsInNmYyIsIl9fdmNjT3B0cyIsImV4cGVjdHNMb3dlckNhc2UiLCJpc0dsb2JhbGx5V2hpdGVsaXN0ZWQiLCJzcGVjaWFsQm9vbGVhbkF0dHJzIiwiaXNTcGVjaWFsQm9vbGVhbkF0dHIiLCJpbmNsdWRlQm9vbGVhbkF0dHIiLCJub3JtYWxpemVTdHlsZSIsInJlcyIsIm5vcm1hbGl6ZWQiLCJwYXJzZVN0cmluZ1N0eWxlIiwibGlzdERlbGltaXRlclJFIiwicHJvcGVydHlEZWxpbWl0ZXJSRSIsInJldCIsInRtcCIsIm5vcm1hbGl6ZUNsYXNzIiwibm9ybWFsaXplUHJvcHMiLCJjbGFzcyIsImtsYXNzIiwiaXNWb2lkVGFnIiwibG9vc2VFcXVhbCIsImFWYWxpZFR5cGUiLCJiVmFsaWRUeXBlIiwiZ2V0VGltZSIsImVxdWFsIiwibG9vc2VDb21wYXJlQXJyYXlzIiwiYUhhc0tleSIsImJIYXNLZXkiLCJsb29zZUluZGV4T2YiLCJ0b0Rpc3BsYXlTdHJpbmciLCJyZXBsYWNlciIsIl9fdl9pc1JlZiIsIkVNUFRZX09CSiIsIkVNUFRZX0FSUiIsIm9uUkUiLCJpc09uIiwiaXNNb2RlbExpc3RlbmVyIiwidG9UeXBlU3RyaW5nIiwiaXNQcm9taXNlIiwiaXNJbnRlZ2VyS2V5IiwiaXNSZXNlcnZlZFByb3AiLCJjYWNoZVN0cmluZ0Z1bmN0aW9uIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiaHlwaGVuYXRlUkUiLCJ0b0hhbmRsZXJLZXkiLCJoYXNDaGFuZ2VkIiwib2xkVmFsdWUiLCJpcyIsImludm9rZUFycmF5Rm5zIiwiZGVmIiwidG9OdW1iZXIiLCJfZ2xvYmFsVGhpcyIsImFjdGl2ZUVmZmVjdFNjb3BlIiwiZWZmZWN0U2NvcGVTdGFjayIsIkVmZmVjdFNjb3BlIiwiZGV0YWNoZWQiLCJlZmZlY3RzIiwiY2xlYW51cHMiLCJzY29wZXMiLCJmcm9tUGFyZW50IiwiY2xlYW51cCIsImVmZmVjdFNjb3BlIiwicmVjb3JkRWZmZWN0U2NvcGUiLCJlZmZlY3QiLCJzY29wZSIsImdldEN1cnJlbnRTY29wZSIsIm9uU2NvcGVEaXNwb3NlIiwiY3JlYXRlRGVwIiwiZGVwIiwid2FzVHJhY2tlZCIsInRyYWNrT3BCaXQiLCJuZXdUcmFja2VkIiwidGFyZ2V0TWFwIiwiZWZmZWN0VHJhY2tEZXB0aCIsImVmZmVjdFN0YWNrIiwiYWN0aXZlRWZmZWN0IiwiSVRFUkFURV9LRVkiLCJNQVBfS0VZX0lURVJBVEVfS0VZIiwiUmVhY3RpdmVFZmZlY3QiLCJzY2hlZHVsZXIiLCJkZXBzIiwidHJhY2tTdGFjayIsInNob3VsZFRyYWNrIiwiaW5pdERlcE1hcmtlcnMiLCJjbGVhbnVwRWZmZWN0IiwicHRyIiwiZmluYWxpemVEZXBNYXJrZXJzIiwicmVzZXRUcmFja2luZyIsIm9uU3RvcCIsIl9lZmZlY3QiLCJsYXp5IiwicnVubmVyIiwicGF1c2VUcmFja2luZyIsInRyYWNrIiwiaXNUcmFja2luZyIsImRlcHNNYXAiLCJ0cmFja0VmZmVjdHMiLCJkZWJ1Z2dlckV2ZW50RXh0cmFJbmZvIiwidHJpZ2dlciIsIm9sZFRhcmdldCIsInRyaWdnZXJFZmZlY3RzIiwiYWxsb3dSZWN1cnNlIiwiaXNOb25UcmFja2FibGVLZXlzIiwiYnVpbHRJblN5bWJvbHMiLCJjcmVhdGVHZXR0ZXIiLCJzaGFsbG93R2V0IiwicmVhZG9ubHlHZXQiLCJzaGFsbG93UmVhZG9ubHlHZXQiLCJhcnJheUluc3RydW1lbnRhdGlvbnMiLCJjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMiLCJpbnN0cnVtZW50YXRpb25zIiwiaXNSZWFkb25seSIsInNoYWxsb3ciLCJyZWNlaXZlciIsInNoYWxsb3dSZWFkb25seU1hcCIsInJlYWRvbmx5TWFwIiwic2hhbGxvd1JlYWN0aXZlTWFwIiwicmVhY3RpdmVNYXAiLCJ0YXJnZXRJc0FycmF5IiwiaXNSZWYiLCJyZWFkb25seSIsImNyZWF0ZVNldHRlciIsImlzU2hhbGxvdyIsImhhZEtleSIsIm11dGFibGVIYW5kbGVycyIsImRlbGV0ZVByb3BlcnR5Iiwib3duS2V5cyIsInJlYWRvbmx5SGFuZGxlcnMiLCJzaGFsbG93UmVhY3RpdmVIYW5kbGVycyIsInNoYWxsb3dSZWFkb25seUhhbmRsZXJzIiwidG9TaGFsbG93IiwiZ2V0JDEiLCJyYXdUYXJnZXQiLCJyYXdLZXkiLCJ0b1JlYWRvbmx5IiwidG9SZWFjdGl2ZSIsImhhcyQxIiwic2V0JDEiLCJkZWxldGVFbnRyeSIsImhhZEl0ZW1zIiwiY3JlYXRlRm9yRWFjaCIsIm9ic2VydmVkIiwiY3JlYXRlSXRlcmFibGVNZXRob2QiLCJ0YXJnZXRJc01hcCIsImlzUGFpciIsImlzS2V5T25seSIsImlubmVySXRlcmF0b3IiLCJjcmVhdGVSZWFkb25seU1ldGhvZCIsImNyZWF0ZUluc3RydW1lbnRhdGlvbnMiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3dJbnN0cnVtZW50YXRpb25zIiwicmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIiwic2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyIsImNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlciIsIm11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93Q29sbGVjdGlvbkhhbmRsZXJzIiwicmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJzaGFsbG93UmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMiLCJnZXRUYXJnZXRUeXBlIiwiaXNFeHRlbnNpYmxlIiwicmF3VHlwZSIsInRhcmdldFR5cGVNYXAiLCJjcmVhdGVSZWFjdGl2ZU9iamVjdCIsInNoYWxsb3dSZWFjdGl2ZSIsInNoYWxsb3dSZWFkb25seSIsImJhc2VIYW5kbGVycyIsImNvbGxlY3Rpb25IYW5kbGVycyIsInByb3h5TWFwIiwiZXhpc3RpbmdQcm94eSIsInRhcmdldFR5cGUiLCJwcm94eSIsImlzUmVhY3RpdmUiLCJpc1Byb3h5IiwicmF3IiwidHJhY2tSZWZWYWx1ZSIsInRyaWdnZXJSZWZWYWx1ZSIsIm5ld1ZhbCIsImNyZWF0ZVJlZiIsInNoYWxsb3dSZWYiLCJSZWZJbXBsIiwiX192X2lzU2hhbGxvdyIsIl9yYXdWYWx1ZSIsInRyaWdnZXJSZWYiLCJzaGFsbG93VW53cmFwSGFuZGxlcnMiLCJwcm94eVJlZnMiLCJvYmplY3RXaXRoUmVmcyIsIkN1c3RvbVJlZkltcGwiLCJmYWN0b3J5IiwiX2dldCIsIl9zZXQiLCJjdXN0b21SZWYiLCJ0b1JlZnMiLCJ0b1JlZiIsIk9iamVjdFJlZkltcGwiLCJfb2JqZWN0IiwiX2RlZmF1bHRWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsIkNvbXB1dGVkUmVmSW1wbCIsImdldHRlciIsIl9zZXR0ZXIiLCJpc1NTUiIsIl9kaXJ0eSIsIl9jYWNoZWFibGUiLCJtc2ciLCJhcHBXYXJuSGFuZGxlciIsImFwcENvbnRleHQiLCJ3YXJuSGFuZGxlciIsInRyYWNlIiwiY3VycmVudFZOb2RlIiwibm9ybWFsaXplZFN0YWNrIiwidm5vZGUiLCJyZWN1cnNlQ291bnQiLCJwYXJlbnRJbnN0YW5jZSIsImdldENvbXBvbmVudFRyYWNlIiwiY2FsbFdpdGhFcnJvckhhbmRsaW5nIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsIndhcm5BcmdzIiwibG9ncyIsInBvc3RmaXgiLCJpc1Jvb3QiLCJmb3JtYXRQcm9wcyIsImZvcm1hdFRyYWNlRW50cnkiLCJmb3JtYXRUcmFjZSIsImZvcm1hdFByb3AiLCJoYW5kbGVFcnJvciIsImNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nIiwidGhyb3dJbkRldiIsImN1ciIsImV4cG9zZWRJbnN0YW5jZSIsImVycm9ySW5mbyIsImVycm9yQ2FwdHVyZWRIb29rcyIsImVjIiwiYXBwRXJyb3JIYW5kbGVyIiwiZXJyb3JIYW5kbGVyIiwiY29udGV4dFZOb2RlIiwibG9nRXJyb3IiLCJpc0ZsdXNoaW5nIiwiaXNGbHVzaFBlbmRpbmciLCJmbHVzaEluZGV4IiwicGVuZGluZ1ByZUZsdXNoQ2JzIiwiYWN0aXZlUHJlRmx1c2hDYnMiLCJwcmVGbHVzaEluZGV4IiwicGVuZGluZ1Bvc3RGbHVzaENicyIsImFjdGl2ZVBvc3RGbHVzaENicyIsInBvc3RGbHVzaEluZGV4IiwicmVzb2x2ZWRQcm9taXNlIiwiY3VycmVudEZsdXNoUHJvbWlzZSIsImN1cnJlbnRQcmVGbHVzaFBhcmVudEpvYiIsInF1ZXVlSm9iIiwiam9iIiwiZW5kIiwibWlkZGxlIiwiZ2V0SWQiLCJmaW5kSW5zZXJ0aW9uSW5kZXgiLCJxdWV1ZUZsdXNoIiwiZmx1c2hKb2JzIiwicXVldWVDYiIsImFjdGl2ZVF1ZXVlIiwicGVuZGluZ1F1ZXVlIiwicXVldWVQb3N0Rmx1c2hDYiIsImZsdXNoUHJlRmx1c2hDYnMiLCJwYXJlbnRKb2IiLCJmbHVzaFBvc3RGbHVzaENicyIsImRlZHVwZWQiLCJkZXZ0b29scyIsImRldnRvb2xzTm90SW5zdGFsbGVkIiwic2V0RGV2dG9vbHNIb29rIiwiaG9vayIsIl9hIiwiX2IiLCJfX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fIiwibmV3SG9vayIsImVtaXQkMSIsInJhd0FyZ3MiLCJtb2RlbEFyZyIsIm1vZGlmaWVyc0tleSIsImhhbmRsZXJOYW1lIiwiaGFuZGxlciIsIm9uY2VIYW5kbGVyIiwiZW1pdHRlZCIsIm5vcm1hbGl6ZUVtaXRzT3B0aW9ucyIsImNvbXAiLCJhc01peGluIiwiZW1pdHNDYWNoZSIsImNhY2hlZCIsImhhc0V4dGVuZHMiLCJleHRlbmRFbWl0cyIsIm5vcm1hbGl6ZWRGcm9tRXh0ZW5kIiwibWl4aW5zIiwiZXh0ZW5kcyIsImlzRW1pdExpc3RlbmVyIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwiY3VycmVudFNjb3BlSWQiLCJzZXRDdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJfX3Njb3BlSWQiLCJwdXNoU2NvcGVJZCIsInBvcFNjb3BlSWQiLCJ3aXRoU2NvcGVJZCIsIl9pZCIsIndpdGhDdHgiLCJpc05vblNjb3BlZFNsb3QiLCJyZW5kZXJGbldpdGhDb250ZXh0Iiwic2V0QmxvY2tUcmFja2luZyIsInByZXZJbnN0YW5jZSIsIl9jIiwicmVuZGVyQ29tcG9uZW50Um9vdCIsIkNvbXBvbmVudCIsIndpdGhQcm94eSIsInByb3BzT3B0aW9ucyIsInJlbmRlckNhY2hlIiwic2V0dXBTdGF0ZSIsImZhbGx0aHJvdWdoQXR0cnMiLCJzaGFwZUZsYWciLCJwcm94eVRvVXNlIiwibm9ybWFsaXplVk5vZGUiLCJnZXRGdW5jdGlvbmFsRmFsbHRocm91Z2giLCJibG9ja1N0YWNrIiwiY3JlYXRlVk5vZGUiLCJmaWx0ZXJNb2RlbExpc3RlbmVycyIsImRpcnMiLCJmaWx0ZXJTaW5nbGVSb290Iiwic2luZ2xlUm9vdCIsImlzVk5vZGUiLCJoYXNQcm9wc0NoYW5nZWQiLCJwcmV2UHJvcHMiLCJuZXh0UHJvcHMiLCJlbWl0c09wdGlvbnMiLCJuZXh0S2V5cyIsInVwZGF0ZUhPQ0hvc3RFbCIsInN1YlRyZWUiLCJTdXNwZW5zZSIsIl9faXNTdXNwZW5zZSIsIm4xIiwibjIiLCJhbmNob3IiLCJwYXJlbnRDb21wb25lbnQiLCJwYXJlbnRTdXNwZW5zZSIsImlzU1ZHIiwic2xvdFNjb3BlSWRzIiwib3B0aW1pemVkIiwicmVuZGVyZXJJbnRlcm5hbHMiLCJoaWRkZW5Db250YWluZXIiLCJzdXNwZW5zZSIsImNyZWF0ZVN1c3BlbnNlQm91bmRhcnkiLCJwZW5kaW5nQnJhbmNoIiwic3NDb250ZW50IiwidHJpZ2dlckV2ZW50Iiwic3NGYWxsYmFjayIsInNldEFjdGl2ZUJyYW5jaCIsIm1vdW50U3VzcGVuc2UiLCJ1bSIsIm5ld0JyYW5jaCIsIm5ld0ZhbGxiYWNrIiwiYWN0aXZlQnJhbmNoIiwiaXNJbkZhbGxiYWNrIiwiaXNIeWRyYXRpbmciLCJpc1NhbWVWTm9kZVR5cGUiLCJwZW5kaW5nSWQiLCJmYWxsYmFjayIsInBhdGNoU3VzcGVuc2UiLCJoeWRyYXRlIiwiaHlkcmF0ZU5vZGUiLCJub3JtYWxpemUiLCJpc1Nsb3RDaGlsZHJlbiIsIm5vcm1hbGl6ZVN1c3BlbnNlU2xvdCIsImV2ZW50TGlzdGVuZXIiLCJtb3ZlIiwiaXNVbm1vdW50ZWQiLCJyZXN1bWUiLCJkZWxheUVudGVyIiwibW9kZSIsImhhc1VucmVzb2x2ZWRBbmNlc3RvciIsImZhbGxiYWNrVk5vZGUiLCJtb3VudEZhbGxiYWNrIiwicmVnaXN0ZXJEZXAiLCJzZXR1cFJlbmRlckVmZmVjdCIsImlzSW5QZW5kaW5nU3VzcGVuc2UiLCJoeWRyYXRlZEVsIiwiYXN5bmNEZXAiLCJhc3luY1NldHVwUmVzdWx0Iiwic3VzcGVuc2VJZCIsImFzeW5jUmVzb2x2ZWQiLCJoYW5kbGVTZXR1cFJlc3VsdCIsInBsYWNlaG9sZGVyIiwiZG9SZW1vdmUiLCJibG9jayIsInRyYWNrQmxvY2siLCJpc0Jsb2NrVHJlZUVuYWJsZWQiLCJvcGVuQmxvY2siLCJjdXJyZW50QmxvY2siLCJjbG9zZUJsb2NrIiwic2luZ2xlQ2hpbGQiLCJkeW5hbWljQ2hpbGRyZW4iLCJxdWV1ZUVmZmVjdFdpdGhTdXNwZW5zZSIsImJyYW5jaCIsImN1cnJlbnRJbnN0YW5jZSIsInByb3ZpZGVzIiwicGFyZW50UHJvdmlkZXMiLCJ0cmVhdERlZmF1bHRBc0ZhY3RvcnkiLCJkb1dhdGNoIiwid2F0Y2hQb3N0RWZmZWN0IiwiZmx1c2giLCJ3YXRjaFN5bmNFZmZlY3QiLCJJTklUSUFMX1dBVENIRVJfVkFMVUUiLCJvblRyYWNrIiwib25UcmlnZ2VyIiwiZm9yY2VUcmlnZ2VyIiwiaXNNdWx0aVNvdXJjZSIsInRyYXZlcnNlIiwib25DbGVhbnVwIiwiYmFzZUdldHRlciIsImlzSW5TU1JDb21wb25lbnRTZXR1cCIsInF1ZXVlUG9zdFJlbmRlckVmZmVjdCIsImlzTW91bnRlZCIsInF1ZXVlUHJlRmx1c2hDYiIsImluc3RhbmNlV2F0Y2giLCJwdWJsaWNUaGlzIiwiY3JlYXRlUGF0aEdldHRlciIsInNldEN1cnJlbnRJbnN0YW5jZSIsInVuc2V0Q3VycmVudEluc3RhbmNlIiwic2VnbWVudHMiLCJ1c2VUcmFuc2l0aW9uU3RhdGUiLCJpc0xlYXZpbmciLCJpc1VubW91bnRpbmciLCJsZWF2aW5nVk5vZGVzIiwib25CZWZvcmVVbm1vdW50IiwiVHJhbnNpdGlvbkhvb2tWYWxpZGF0b3IiLCJCYXNlVHJhbnNpdGlvbiIsInBlcnNpc3RlZCIsIm9uRW50ZXIiLCJvbkVudGVyQ2FuY2VsbGVkIiwib25MZWF2ZSIsIm9uTGVhdmVDYW5jZWxsZWQiLCJvbkJlZm9yZUFwcGVhciIsIm9uQXBwZWFyIiwib25BZnRlckFwcGVhciIsIm9uQXBwZWFyQ2FuY2VsbGVkIiwiZ2V0Q3VycmVudEluc3RhbmNlIiwicHJldlRyYW5zaXRpb25LZXkiLCJnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4iLCJyYXdQcm9wcyIsImVtcHR5UGxhY2Vob2xkZXIiLCJpbm5lckNoaWxkIiwiZ2V0S2VlcEFsaXZlQ2hpbGQiLCJlbnRlckhvb2tzIiwicmVzb2x2ZVRyYW5zaXRpb25Ib29rcyIsInNldFRyYW5zaXRpb25Ib29rcyIsIm9sZENoaWxkIiwib2xkSW5uZXJDaGlsZCIsInRyYW5zaXRpb25LZXlDaGFuZ2VkIiwiZ2V0VHJhbnNpdGlvbktleSIsImxlYXZpbmdIb29rcyIsImRlbGF5TGVhdmUiLCJlYXJseVJlbW92ZSIsImRlbGF5ZWRMZWF2ZSIsImdldExlYXZpbmdOb2Rlc0ZvclR5cGUiLCJfbGVhdmVDYiIsImxlYXZpbmdWTm9kZXNDYWNoZSIsImNhbGxIb29rIiwiaG9va3MiLCJsZWF2aW5nVk5vZGUiLCJhZnRlckhvb2siLCJjYW5jZWxIb29rIiwiX2VudGVyQ2IiLCJpc0tlZXBBbGl2ZSIsImtlZXBDb21tZW50Iiwia2V5ZWRGcmFnbWVudENvdW50IiwiRnJhZ21lbnQiLCJwYXRjaEZsYWciLCJpc0FzeW5jV3JhcHBlciIsIl9fYXN5bmNMb2FkZXIiLCJkZWZpbmVBc3luY0NvbXBvbmVudCIsImxvYWRlciIsImxvYWRpbmdDb21wb25lbnQiLCJlcnJvckNvbXBvbmVudCIsInN1c3BlbnNpYmxlIiwidXNlck9uRXJyb3IiLCJyZXNvbHZlZENvbXAiLCJwZW5kaW5nUmVxdWVzdCIsInJldHJpZXMiLCJsb2FkIiwidGhpc1JlcXVlc3QiLCJfX2VzTW9kdWxlIiwiX19hc3luY1Jlc29sdmVkIiwiY3JlYXRlSW5uZXJDb21wIiwiZGVsYXllZCIsIl9faXNLZWVwQWxpdmUiLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsInNoYXJlZENvbnRleHQiLCJyZW5kZXJlciIsIl91bm1vdW50Iiwic3RvcmFnZUNvbnRhaW5lciIsInJlc2V0U2hhcGVGbGFnIiwicHJ1bmVDYWNoZSIsImdldENvbXBvbmVudE5hbWUiLCJwcnVuZUNhY2hlRW50cnkiLCJhY3RpdmF0ZSIsImlzRGVhY3RpdmF0ZWQiLCJ2bm9kZUhvb2siLCJvblZub2RlTW91bnRlZCIsImludm9rZVZOb2RlSG9vayIsImRlYWN0aXZhdGUiLCJkYSIsIm9uVm5vZGVVbm1vdW50ZWQiLCJtYXRjaGVzIiwicGVuZGluZ0NhY2hlS2V5IiwiY2FjaGVTdWJ0cmVlIiwiZ2V0SW5uZXJDaGlsZCIsInJhd1ZOb2RlIiwiY2FjaGVkVk5vZGUiLCJwYXR0ZXJuIiwib25BY3RpdmF0ZWQiLCJyZWdpc3RlcktlZXBBbGl2ZUhvb2siLCJvbkRlYWN0aXZhdGVkIiwid3JhcHBlZEhvb2siLCJfX3dkYyIsImluamVjdEhvb2siLCJpbmplY3RUb0tlZXBBbGl2ZVJvb3QiLCJrZWVwQWxpdmVSb290IiwiaW5qZWN0ZWQiLCJfX3dlaCIsImNyZWF0ZUhvb2siLCJsaWZlY3ljbGUiLCJvbkJlZm9yZU1vdW50Iiwib25CZWZvcmVVcGRhdGUiLCJvblNlcnZlclByZWZldGNoIiwib25SZW5kZXJUcmlnZ2VyZWQiLCJvblJlbmRlclRyYWNrZWQiLCJvbkVycm9yQ2FwdHVyZWQiLCJzaG91bGRDYWNoZUFjY2VzcyIsImFwcGx5T3B0aW9ucyIsInJlc29sdmVNZXJnZWRPcHRpb25zIiwiYmVmb3JlQ3JlYXRlIiwiZGF0YU9wdGlvbnMiLCJjb21wdXRlZE9wdGlvbnMiLCJ3YXRjaE9wdGlvbnMiLCJwcm92aWRlT3B0aW9ucyIsImluamVjdE9wdGlvbnMiLCJiZWZvcmVNb3VudCIsImJlZm9yZVVwZGF0ZSIsInVwZGF0ZWQiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImJlZm9yZURlc3Ryb3kiLCJkZXN0cm95ZWQiLCJ1bm1vdW50ZWQiLCJyZW5kZXJUcmFja2VkIiwicmVuZGVyVHJpZ2dlcmVkIiwiZXJyb3JDYXB0dXJlZCIsInNlcnZlclByZWZldGNoIiwiZXhwb3NlIiwiY29tcG9uZW50cyIsImRpcmVjdGl2ZXMiLCJmaWx0ZXJzIiwiY2hlY2tEdXBsaWNhdGVQcm9wZXJ0aWVzIiwidW53cmFwUmVmIiwibm9ybWFsaXplSW5qZWN0IiwicmVzb2x2ZUluamVjdGlvbnMiLCJ1bndyYXBJbmplY3RlZFJlZiIsIm1ldGhvZEhhbmRsZXIiLCJjcmVhdGVXYXRjaGVyIiwicmVnaXN0ZXJMaWZlY3ljbGVIb29rIiwiX2hvb2siLCJleHBvc2VkIiwiZXh0ZW5kc09wdGlvbnMiLCJnbG9iYWxNaXhpbnMiLCJvcHRpb25zQ2FjaGUiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJyZXNvbHZlZCIsIm1lcmdlT3B0aW9ucyIsInN0cmF0cyIsInN0cmF0IiwiaW50ZXJuYWxPcHRpb25NZXJnZVN0cmF0cyIsIm1lcmdlRGF0YUZuIiwibWVyZ2VPYmplY3RPcHRpb25zIiwibWVyZ2VBc0FycmF5IiwibWVyZ2VkIiwic2V0RnVsbFByb3BzIiwibmVlZENhc3RLZXlzIiwicmF3Q2FzdFZhbHVlcyIsImhhc0F0dHJzQ2hhbmdlZCIsImNhbWVsS2V5IiwicmF3Q3VycmVudFByb3BzIiwiY2FzdFZhbHVlcyIsInJlc29sdmVQcm9wVmFsdWUiLCJpc0Fic2VudCIsImhhc0RlZmF1bHQiLCJwcm9wc0RlZmF1bHRzIiwibm9ybWFsaXplUHJvcHNPcHRpb25zIiwicHJvcHNDYWNoZSIsImV4dGVuZFByb3BzIiwibm9ybWFsaXplZEtleSIsInZhbGlkYXRlUHJvcE5hbWUiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsImdldFR5cGUiLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImlzSW50ZXJuYWxLZXkiLCJub3JtYWxpemVTbG90VmFsdWUiLCJub3JtYWxpemVTbG90IiwicmF3U2xvdCIsIm5vcm1hbGl6ZU9iamVjdFNsb3RzIiwicmF3U2xvdHMiLCJfY3R4Iiwibm9ybWFsaXplVk5vZGVTbG90cyIsIndpdGhEaXJlY3RpdmVzIiwiYmluZGluZ3MiLCJtb2RpZmllcnMiLCJpbnZva2VEaXJlY3RpdmVIb29rIiwicHJldlZOb2RlIiwib2xkQmluZGluZ3MiLCJjcmVhdGVBcHBDb250ZXh0IiwiaXNOYXRpdmVUYWciLCJjb21waWxlck9wdGlvbnMiLCJjcmVhdGVBcHBBUEkiLCJyb290Q29tcG9uZW50Iiwicm9vdFByb3BzIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwiX2luc3RhbmNlIiwiZGlyZWN0aXZlIiwibW91bnQiLCJyb290Q29udGFpbmVyIiwiaXNIeWRyYXRlIiwiX192dWVfYXBwX18iLCJnZXRFeHBvc2VQcm94eSIsInNldFJlZiIsInJhd1JlZiIsIm9sZFJhd1JlZiIsImlzVW5tb3VudCIsInJlZlZhbHVlIiwib3duZXIiLCJvbGRSZWYiLCJfaXNTdHJpbmciLCJfaXNSZWYiLCJkb1NldCIsImV4aXN0aW5nIiwiaGFzTWlzbWF0Y2giLCJpc1NWR0NvbnRhaW5lciIsIm5hbWVzcGFjZVVSSSIsImlzQ29tbWVudCIsImNyZWF0ZUh5ZHJhdGlvbkZ1bmN0aW9ucyIsIm10IiwibW91bnRDb21wb25lbnQiLCJwYXRjaFByb3AiLCJuZXh0U2libGluZyIsImNyZWF0ZUNvbW1lbnQiLCJpc0ZyYWdtZW50U3RhcnQiLCJvbk1pc21hdGNoIiwiaGFuZGxlTWlzbWF0Y2giLCJkb21UeXBlIiwibmV4dE5vZGUiLCJUZXh0IiwibmVlZFRvQWRvcHRDb250ZW50Iiwic3RhdGljQ291bnQiLCJoeWRyYXRlRnJhZ21lbnQiLCJoeWRyYXRlRWxlbWVudCIsImxvY2F0ZUNsb3NpbmdBc3luY0FuY2hvciIsInByZXZpb3VzU2libGluZyIsImxhc3RDaGlsZCIsImNyZWF0ZVRleHRWTm9kZSIsImh5ZHJhdGVDaGlsZHJlbiIsImZvcmNlUGF0Y2hWYWx1ZSIsImVuZHNXaXRoIiwidm5vZGVIb29rcyIsIm9uVm5vZGVCZWZvcmVNb3VudCIsInBhcmVudFZOb2RlIiwiZnJhZ21lbnRTbG90U2NvcGVJZHMiLCJpc0ZyYWdtZW50IiwiaGFzQ2hpbGROb2RlcyIsImNyZWF0ZVJlbmRlcmVyIiwiYmFzZUNyZWF0ZVJlbmRlcmVyIiwiY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25GbnMiLCJfX1ZVRV9fIiwiaG9zdEluc2VydCIsImhvc3RSZW1vdmUiLCJob3N0UGF0Y2hQcm9wIiwiaG9zdENyZWF0ZUVsZW1lbnQiLCJjcmVhdGVUZXh0IiwiaG9zdENyZWF0ZVRleHQiLCJob3N0Q3JlYXRlQ29tbWVudCIsInNldFRleHQiLCJob3N0U2V0VGV4dCIsInNldEVsZW1lbnRUZXh0IiwiaG9zdFNldEVsZW1lbnRUZXh0IiwiaG9zdFBhcmVudE5vZGUiLCJob3N0TmV4dFNpYmxpbmciLCJzZXRTY29wZUlkIiwiaG9zdFNldFNjb3BlSWQiLCJjbG9uZU5vZGUiLCJob3N0Q2xvbmVOb2RlIiwiaW5zZXJ0U3RhdGljQ29udGVudCIsImhvc3RJbnNlcnRTdGF0aWNDb250ZW50IiwiZ2V0TmV4dEhvc3ROb2RlIiwicHJvY2Vzc1RleHQiLCJwcm9jZXNzQ29tbWVudE5vZGUiLCJtb3VudFN0YXRpY05vZGUiLCJwcm9jZXNzRnJhZ21lbnQiLCJwcm9jZXNzRWxlbWVudCIsInByb2Nlc3NDb21wb25lbnQiLCJpbnRlcm5hbHMiLCJyZW1vdmVTdGF0aWNOb2RlIiwibW91bnRFbGVtZW50IiwicGF0Y2hFbGVtZW50IiwibW91bnRDaGlsZHJlbiIsInVubW91bnRDaGlsZHJlbiIsInNjb3BlSWQiLCJuZWVkQ2FsbFRyYW5zaXRpb25Ib29rcyIsImNsb25lSWZNb3VudGVkIiwib2xkUHJvcHMiLCJuZXdQcm9wcyIsInRvZ2dsZVJlY3Vyc2UiLCJvblZub2RlQmVmb3JlVXBkYXRlIiwiYXJlQ2hpbGRyZW5TVkciLCJwYXRjaEJsb2NrQ2hpbGRyZW4iLCJwYXRjaENoaWxkcmVuIiwicGF0Y2hQcm9wcyIsInByb3BzVG9VcGRhdGUiLCJkeW5hbWljUHJvcHMiLCJvblZub2RlVXBkYXRlZCIsIm9sZENoaWxkcmVuIiwibmV3Q2hpbGRyZW4iLCJmYWxsYmFja0NvbnRhaW5lciIsIm9sZFZOb2RlIiwibmV3Vk5vZGUiLCJmcmFnbWVudFN0YXJ0QW5jaG9yIiwiZnJhZ21lbnRFbmRBbmNob3IiLCJ0cmF2ZXJzZVN0YXRpY0NoaWxkcmVuIiwidXBkYXRlQ29tcG9uZW50IiwiaW5pdGlhbFZOb2RlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2UiLCJzZXR1cENvbXBvbmVudCIsIm5leHRWTm9kZSIsInByZXZDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsIiRzdGFibGUiLCJzaG91bGRVcGRhdGVDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnRQcmVSZW5kZXIiLCJpbnZhbGlkYXRlSm9iIiwiYnUiLCJvcmlnaW5OZXh0IiwibmV4dFRyZWUiLCJwcmV2VHJlZSIsImJtIiwiaXNBc3luY1dyYXBwZXJWTm9kZSIsImh5ZHJhdGVTdWJUcmVlIiwic2NvcGVkSW5pdGlhbFZOb2RlIiwicmF3UHJldlByb3BzIiwia2ViYWJLZXkiLCJjYW1lbGl6ZWRLZXkiLCJ1cGRhdGVQcm9wcyIsIm5lZWREZWxldGlvbkNoZWNrIiwiZGVsZXRpb25Db21wYXJpc29uVGFyZ2V0IiwidXBkYXRlU2xvdHMiLCJjMSIsInByZXZTaGFwZUZsYWciLCJjMiIsInBhdGNoS2V5ZWRDaGlsZHJlbiIsInBhdGNoVW5rZXllZENoaWxkcmVuIiwib2xkTGVuZ3RoIiwibmV3TGVuZ3RoIiwiY29tbW9uTGVuZ3RoIiwibmV4dENoaWxkIiwicGFyZW50QW5jaG9yIiwibDIiLCJlMSIsImUyIiwibmV4dFBvcyIsInMxIiwiczIiLCJrZXlUb05ld0luZGV4TWFwIiwicGF0Y2hlZCIsInRvQmVQYXRjaGVkIiwibW92ZWQiLCJtYXhOZXdJbmRleFNvRmFyIiwibmV3SW5kZXhUb09sZEluZGV4TWFwIiwicHJldkNoaWxkIiwibmV3SW5kZXgiLCJpbmNyZWFzaW5nTmV3SW5kZXhTZXF1ZW5jZSIsImFyckkiLCJnZXRTZXF1ZW5jZSIsIm5leHRJbmRleCIsIm1vdmVUeXBlIiwibW92ZVN0YXRpY05vZGUiLCJwZXJmb3JtTGVhdmUiLCJzaG91bGRJbnZva2VEaXJzIiwic2hvdWxkSW52b2tlVm5vZGVIb29rIiwib25Wbm9kZUJlZm9yZVVubW91bnQiLCJ1bm1vdW50Q29tcG9uZW50IiwicmVtb3ZlRnJhZ21lbnQiLCJwZXJmb3JtUmVtb3ZlIiwiYnVtIiwiX3Zub2RlIiwibWMiLCJwYyIsInBiYyIsImNyZWF0ZUFwcCIsImFsbG93ZWQiLCJjaDEiLCJjaDIiLCJpc1RlbGVwb3J0RGlzYWJsZWQiLCJkaXNhYmxlZCIsImlzVGFyZ2V0U1ZHIiwiU1ZHRWxlbWVudCIsInNlbGVjdCIsInRhcmdldFNlbGVjdG9yIiwibW92ZVRlbGVwb3J0IiwidGFyZ2V0QW5jaG9yIiwiaXNSZW9yZGVyIiwiX19pc1RlbGVwb3J0IiwibWFpbkFuY2hvciIsIndhc0Rpc2FibGVkIiwiY3VycmVudENvbnRhaW5lciIsImN1cnJlbnRBbmNob3IiLCJuZXh0VGFyZ2V0IiwidGFyZ2V0Tm9kZSIsIl9scGEiLCJDT01QT05FTlRTIiwibWF5YmVTZWxmUmVmZXJlbmNlIiwicmVzb2x2ZUFzc2V0IiwiTlVMTF9EWU5BTUlDX0NPTVBPTkVOVCIsInJlc29sdmVEeW5hbWljQ29tcG9uZW50IiwicmVzb2x2ZURpcmVjdGl2ZSIsIndhcm5NaXNzaW5nIiwic2VsZk5hbWUiLCJyZWdpc3RyeSIsImRpc2FibGVUcmFja2luZyIsInZub2RlQXJnc1RyYW5zZm9ybWVyIiwic2V0dXBCbG9jayIsImNyZWF0ZUVsZW1lbnRCbG9jayIsImNyZWF0ZUJhc2VWTm9kZSIsImNyZWF0ZUJsb2NrIiwiX192X2lzVk5vZGUiLCJ0cmFuc2Zvcm1WTm9kZUFyZ3MiLCJ0cmFuc2Zvcm1lciIsIkludGVybmFsT2JqZWN0S2V5Iiwibm9ybWFsaXplS2V5Iiwibm9ybWFsaXplUmVmIiwicmVmX2tleSIsInJlZl9mb3IiLCJpc0Jsb2NrTm9kZSIsIm5lZWRGdWxsQ2hpbGRyZW5Ob3JtYWxpemF0aW9uIiwiX192X3NraXAiLCJub3JtYWxpemVDaGlsZHJlbiIsIl9jcmVhdGVWTm9kZSIsImNsb25lZCIsImlzQ2xhc3NDb21wb25lbnQiLCJndWFyZFJlYWN0aXZlUHJvcHMiLCJpc1N1c3BlbnNlIiwiaXNUZWxlcG9ydCIsImV4dHJhUHJvcHMiLCJtZXJnZVJlZiIsIm1lcmdlZFByb3BzIiwibWVyZ2VQcm9wcyIsInRleHQiLCJmbGFnIiwiY3JlYXRlU3RhdGljVk5vZGUiLCJudW1iZXJPZk5vZGVzIiwiY3JlYXRlQ29tbWVudFZOb2RlIiwiYXNCbG9jayIsInNsb3RGbGFnIiwidG9NZXJnZSIsImluY29taW5nIiwicmVuZGVyTGlzdCIsInJlbmRlckl0ZW0iLCJjcmVhdGVTbG90cyIsImR5bmFtaWNTbG90cyIsInJlbmRlclNsb3QiLCJub1Nsb3R0ZWQiLCJpc0NFIiwidmFsaWRTbG90Q29udGVudCIsImVuc3VyZVZhbGlkVk5vZGUiLCJyZW5kZXJlZCIsInZub2RlcyIsInRvSGFuZGxlcnMiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImlzU3RhdGVmdWxDb21wb25lbnQiLCJwdWJsaWNQcm9wZXJ0aWVzTWFwIiwiJCIsIiRkYXRhIiwiJHJlZnMiLCIkcGFyZW50IiwiJHJvb3QiLCIkZm9yY2VVcGRhdGUiLCIkbmV4dFRpY2siLCJQdWJsaWNJbnN0YW5jZVByb3h5SGFuZGxlcnMiLCJhY2Nlc3NDYWNoZSIsIm5vcm1hbGl6ZWRQcm9wcyIsInB1YmxpY0dldHRlciIsImNzc01vZHVsZSIsIl9fY3NzTW9kdWxlcyIsIlJ1bnRpbWVDb21waWxlZFB1YmxpY0luc3RhbmNlUHJveHlIYW5kbGVycyIsInVuc2NvcGFibGVzIiwiZW1wdHlBcHBDb250ZXh0IiwidWlkJDEiLCJleHBvc2VQcm94eSIsInNldHVwQ29udGV4dCIsImJjIiwicnRnIiwicnRjIiwic3AiLCJjZSIsImNvbXBpbGUiLCJpbnN0YWxsV2l0aFByb3h5IiwiaXNTdGF0ZWZ1bCIsImluaXRQcm9wcyIsImluaXRTbG90cyIsInNldHVwUmVzdWx0IiwiY3JlYXRlU2V0dXBDb250ZXh0IiwicmVzb2x2ZWRSZXN1bHQiLCJmaW5pc2hDb21wb25lbnRTZXR1cCIsInNldHVwU3RhdGVmdWxDb21wb25lbnQiLCJfX3NzcklubGluZVJlbmRlciIsInNzclJlbmRlciIsInJlZ2lzdGVyUnVudGltZUNvbXBpbGVyIiwiX2NvbXBpbGUiLCJfcmMiLCJza2lwT3B0aW9ucyIsImlzQ3VzdG9tRWxlbWVudCIsImRlbGltaXRlcnMiLCJjb21wb25lbnRDb21waWxlck9wdGlvbnMiLCJmaW5hbENvbXBpbGVyT3B0aW9ucyIsImNyZWF0ZUF0dHJzUHJveHkiLCJjbGFzc2lmeVJFIiwiX19maWxlIiwiaW5mZXJGcm9tUmVnaXN0cnkiLCJnZXR0ZXJPck9wdGlvbnMiLCJkZWJ1Z09wdGlvbnMiLCJzZXR0ZXIiLCJvbmx5R2V0dGVyIiwiZGVmaW5lUHJvcHMiLCJkZWZpbmVFbWl0cyIsImRlZmluZUV4cG9zZSIsIndpdGhEZWZhdWx0cyIsInVzZVNsb3RzIiwiZ2V0Q29udGV4dCIsInVzZUF0dHJzIiwibWVyZ2VEZWZhdWx0cyIsImNyZWF0ZVByb3BzUmVzdFByb3h5IiwiZXhjbHVkZWRLZXlzIiwid2l0aEFzeW5jQ29udGV4dCIsImdldEF3YWl0YWJsZSIsImF3YWl0YWJsZSIsInByb3BzT3JDaGlsZHJlbiIsInNzckNvbnRleHRLZXkiLCJ1c2VTU1JDb250ZXh0Iiwid2l0aE1lbW8iLCJpc01lbW9TYW1lIiwic3NyVXRpbHMiLCJyZXNvbHZlRmlsdGVyIiwiY29tcGF0VXRpbHMiLCJkb2MiLCJ0ZW1wbGF0ZUNvbnRhaW5lciIsIm5vZGVPcHMiLCJjcmVhdGVFbGVtZW50TlMiLCJtdWx0aXBsZSIsIm5vZGVWYWx1ZSIsImJlZm9yZSIsIndyYXBwZXIiLCJpbXBvcnRhbnRSRSIsInNldFN0eWxlIiwic2V0UHJvcGVydHkiLCJwcmVmaXhlZCIsInJhd05hbWUiLCJwcmVmaXhDYWNoZSIsInByZWZpeGVzIiwiYXV0b1ByZWZpeCIsInhsaW5rTlMiLCJfZ2V0Tm93Iiwic2tpcFRpbWVzdGFtcENoZWNrIiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmZk1hdGNoIiwiY2FjaGVkTm93IiwicGF0Y2hFdmVudCIsInByZXZWYWx1ZSIsIm5leHRWYWx1ZSIsImludm9rZXJzIiwiX3ZlaSIsImV4aXN0aW5nSW52b2tlciIsIm9wdGlvbnNNb2RpZmllclJFIiwicGFyc2VOYW1lIiwiaW52b2tlciIsImluaXRpYWxWYWx1ZSIsImF0dGFjaGVkIiwib3JpZ2luYWxTdG9wIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwiX3N0b3BwZWQiLCJwYXRjaFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImdldE5vdyIsImNyZWF0ZUludm9rZXIiLCJuYXRpdmVPblJFIiwiZGVmaW5lQ3VzdG9tRWxlbWVudCIsImh5ZGF0ZSIsIkNvbXAiLCJWdWVDdXN0b21FbGVtZW50IiwiVnVlRWxlbWVudCIsImluaXRpYWxQcm9wcyIsInN1cGVyIiwiZGVmaW5lU1NSQ3VzdG9tRWxlbWVudCIsIkJhc2VDbGFzcyIsIl9kZWYiLCJfY29ubmVjdGVkIiwiX3Jlc29sdmVkIiwiX251bWJlclByb3BzIiwic2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsImNvbm5lY3RlZENhbGxiYWNrIiwiX3Jlc29sdmVEZWYiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsIl9zZXRBdHRyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsImF0dHJpYnV0ZU5hbWUiLCJzdHlsZXMiLCJoYXNPcHRpb25zIiwicmF3S2V5cyIsIm51bWJlclByb3BzIiwiX3NldFByb3AiLCJfZ2V0UHJvcCIsIl9hcHBseVN0eWxlcyIsIl91cGRhdGUiLCJhc3luY0RlZiIsInNob3VsZFJlZmxlY3QiLCJzaG91bGRVcGRhdGUiLCJ1c2VDc3NNb2R1bGUiLCJtb2QiLCJ1c2VDc3NWYXJzIiwic2V0VmFycyIsInNldFZhcnNPblZOb2RlIiwib2IiLCJjaGlsZExpc3QiLCJ2YXJzIiwic2V0VmFyc09uTm9kZSIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJUcmFuc2l0aW9uIiwicmVzb2x2ZVRyYW5zaXRpb25Qcm9wcyIsIkRPTVRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJkdXJhdGlvbiIsImVudGVyRnJvbUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImVudGVyVG9DbGFzcyIsImFwcGVhckZyb21DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImxlYXZlRnJvbUNsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsIlRyYW5zaXRpb25Qcm9wc1ZhbGlkYXRvcnMiLCJoYXNFeHBsaWNpdENhbGxiYWNrIiwiYmFzZVByb3BzIiwiZHVyYXRpb25zIiwiTnVtYmVyT2YiLCJub3JtYWxpemVEdXJhdGlvbiIsImVudGVyRHVyYXRpb24iLCJsZWF2ZUR1cmF0aW9uIiwiZmluaXNoRW50ZXIiLCJpc0FwcGVhciIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsImZpbmlzaExlYXZlIiwibWFrZUVudGVySG9vayIsImFkZFRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImZvcmNlUmVmbG93IiwiY2xzIiwiX3Z0YyIsImVuZElkIiwiZXhwZWN0ZWRUeXBlIiwiZXhwbGljaXRUaW1lb3V0IiwiX2VuZElkIiwicmVzb2x2ZUlmTm90U3RhbGUiLCJwcm9wQ291bnQiLCJnZXRUcmFuc2l0aW9uSW5mbyIsImVuZEV2ZW50IiwiZW5kZWQiLCJvbkVuZCIsImdldFN0eWxlUHJvcGVydGllcyIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsInRvTXMiLCJvZmZzZXRIZWlnaHQiLCJwb3NpdGlvbk1hcCIsIm5ld1Bvc2l0aW9uTWFwIiwiVHJhbnNpdGlvbkdyb3VwIiwibW92ZUNsYXNzIiwiaGFzQ1NTVHJhbnNmb3JtIiwiY2FsbFBlbmRpbmdDYnMiLCJyZWNvcmRQb3NpdGlvbiIsIm1vdmVkQ2hpbGRyZW4iLCJhcHBseVRyYW5zbGF0aW9uIiwid2Via2l0VHJhbnNmb3JtIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsImNzc1RyYW5zaXRpb25Qcm9wcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9sZFBvcyIsIm5ld1BvcyIsImR4IiwiZHkiLCJnZXRNb2RlbEFzc2lnbmVyIiwib25Db21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaW5nIiwib25Db21wb3NpdGlvbkVuZCIsImluaXRFdmVudCIsInZNb2RlbFRleHQiLCJfYXNzaWduIiwiY2FzdFRvTnVtYmVyIiwiZG9tVmFsdWUiLCJ2TW9kZWxDaGVja2JveCIsIl9tb2RlbFZhbHVlIiwiZWxlbWVudFZhbHVlIiwiZm91bmQiLCJmaWx0ZXJlZCIsImdldENoZWNrYm94VmFsdWUiLCJzZXRDaGVja2VkIiwidk1vZGVsUmFkaW8iLCJ2TW9kZWxTZWxlY3QiLCJpc1NldE1vZGVsIiwic2VsZWN0ZWRWYWwiLCJzZWxlY3RlZCIsInNldFNlbGVjdGVkIiwiX2JpbmRpbmciLCJpc011bHRpcGxlIiwib3B0aW9uIiwib3B0aW9uVmFsdWUiLCJzZWxlY3RlZEluZGV4Iiwidk1vZGVsRHluYW1pYyIsImNhbGxNb2RlbEhvb2siLCJtb2RlbFRvVXNlIiwic3lzdGVtTW9kaWZpZXJzIiwibW9kaWZpZXJHdWFyZHMiLCJwcmV2ZW50IiwiY3RybCIsImFsdCIsIm1ldGEiLCJidXR0b24iLCJyaWdodCIsImV4YWN0Iiwid2l0aE1vZGlmaWVycyIsImd1YXJkIiwia2V5TmFtZXMiLCJlc2MiLCJzcGFjZSIsInVwIiwiZG93biIsIndpdGhLZXlzIiwiZXZlbnRLZXkiLCJ2U2hvdyIsIl92b2QiLCJzZXREaXNwbGF5IiwicmVuZGVyZXJPcHRpb25zIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJwYXRjaENsYXNzIiwiaXNDc3NTdHJpbmciLCJjdXJyZW50RGlzcGxheSIsInBhdGNoU3R5bGUiLCJzaG91bGRTZXRBc1Byb3AiLCJwYXRjaERPTVByb3AiLCJfdHJ1ZVZhbHVlIiwiX2ZhbHNlVmFsdWUiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwicGF0Y2hBdHRyIiwiZW5hYmxlZEh5ZHJhdGlvbiIsImVuc3VyZVJlbmRlcmVyIiwiZW5zdXJlSHlkcmF0aW9uUmVuZGVyZXIiLCJjb250YWluZXJPclNlbGVjdG9yIiwibm9ybWFsaXplQ29udGFpbmVyIiwiRWxlbWVudCIsInNzckRpcmVjdGl2ZUluaXRpYWxpemVkIiwiaW5pdERpcmVjdGl2ZXNGb3JTU1IiLCJnZXRTU1JQcm9wcyIsImRlZmF1bHRPbkVycm9yIiwiZGVmYXVsdE9uV2FybiIsImNyZWF0ZUNvbXBpbGVyRXJyb3IiLCJtZXNzYWdlcyIsImFkZGl0aW9uYWxNZXNzYWdlIiwiRlJBR01FTlQiLCJURUxFUE9SVCIsIlNVU1BFTlNFIiwiS0VFUF9BTElWRSIsIkJBU0VfVFJBTlNJVElPTiIsIk9QRU5fQkxPQ0siLCJDUkVBVEVfQkxPQ0siLCJDUkVBVEVfRUxFTUVOVF9CTE9DSyIsIkNSRUFURV9WTk9ERSIsIkNSRUFURV9FTEVNRU5UX1ZOT0RFIiwiQ1JFQVRFX0NPTU1FTlQiLCJDUkVBVEVfVEVYVCIsIkNSRUFURV9TVEFUSUMiLCJSRVNPTFZFX0NPTVBPTkVOVCIsIlJFU09MVkVfRFlOQU1JQ19DT01QT05FTlQiLCJSRVNPTFZFX0RJUkVDVElWRSIsIlJFU09MVkVfRklMVEVSIiwiV0lUSF9ESVJFQ1RJVkVTIiwiUkVOREVSX0xJU1QiLCJSRU5ERVJfU0xPVCIsIkNSRUFURV9TTE9UUyIsIlRPX0RJU1BMQVlfU1RSSU5HIiwiTUVSR0VfUFJPUFMiLCJOT1JNQUxJWkVfQ0xBU1MiLCJOT1JNQUxJWkVfU1RZTEUiLCJOT1JNQUxJWkVfUFJPUFMiLCJHVUFSRF9SRUFDVElWRV9QUk9QUyIsIlRPX0hBTkRMRVJTIiwiQ0FNRUxJWkUiLCJDQVBJVEFMSVpFIiwiVE9fSEFORExFUl9LRVkiLCJTRVRfQkxPQ0tfVFJBQ0tJTkciLCJQVVNIX1NDT1BFX0lEIiwiUE9QX1NDT1BFX0lEIiwiV0lUSF9DVFgiLCJVTlJFRiIsIklTX1JFRiIsIldJVEhfTUVNTyIsIklTX01FTU9fU0FNRSIsImhlbHBlck5hbWVNYXAiLCJsb2NTdHViIiwiY29sdW1uIiwiY3JlYXRlVk5vZGVDYWxsIiwiaXNCbG9jayIsImlzQ29tcG9uZW50IiwiaGVscGVyIiwiZ2V0Vk5vZGVCbG9ja0hlbHBlciIsImluU1NSIiwiZ2V0Vk5vZGVIZWxwZXIiLCJjcmVhdGVBcnJheUV4cHJlc3Npb24iLCJjcmVhdGVPYmplY3RFeHByZXNzaW9uIiwiY3JlYXRlT2JqZWN0UHJvcGVydHkiLCJjcmVhdGVTaW1wbGVFeHByZXNzaW9uIiwiaXNTdGF0aWMiLCJjb25zdFR5cGUiLCJjcmVhdGVDb21wb3VuZEV4cHJlc3Npb24iLCJjcmVhdGVDYWxsRXhwcmVzc2lvbiIsImNhbGxlZSIsImNyZWF0ZUZ1bmN0aW9uRXhwcmVzc2lvbiIsInJldHVybnMiLCJuZXdsaW5lIiwiaXNTbG90IiwiY3JlYXRlQ29uZGl0aW9uYWxFeHByZXNzaW9uIiwiY29uc2VxdWVudCIsImFsdGVybmF0ZSIsImlzU3RhdGljRXhwIiwiaXNCdWlsdEluVHlwZSIsImV4cGVjdGVkIiwiaXNDb3JlQ29tcG9uZW50Iiwibm9uSWRlbnRpZmllclJFIiwiaXNTaW1wbGVJZGVudGlmaWVyIiwidmFsaWRGaXJzdElkZW50Q2hhclJFIiwidmFsaWRJZGVudENoYXJSRSIsIndoaXRlc3BhY2VSRSIsImlzTWVtYmVyRXhwcmVzc2lvbiIsInN0YXRlU3RhY2siLCJjdXJyZW50T3BlbkJyYWNrZXRDb3VudCIsImN1cnJlbnRPcGVuUGFyZW5zQ291bnQiLCJjdXJyZW50U3RyaW5nVHlwZSIsImNoYXIiLCJnZXRJbm5lclJhbmdlIiwibmV3TG9jIiwiYWR2YW5jZVBvc2l0aW9uV2l0aENsb25lIiwibnVtYmVyT2ZDaGFyYWN0ZXJzIiwiYWR2YW5jZVBvc2l0aW9uV2l0aE11dGF0aW9uIiwibGluZXNDb3VudCIsImxhc3ROZXdMaW5lUG9zIiwiZmluZERpciIsImFsbG93RW1wdHkiLCJleHAiLCJmaW5kUHJvcCIsImR5bmFtaWNPbmx5IiwiaXNTdGF0aWNBcmdPZiIsImlzVGV4dCIsImlzVlNsb3QiLCJpc1RlbXBsYXRlTm9kZSIsInRhZ1R5cGUiLCJpc1Nsb3RPdXRsZXQiLCJzc3IiLCJwcm9wc0hlbHBlclNldCIsImdldFVubm9ybWFsaXplZFByb3BzIiwiY2FsbFBhdGgiLCJpbmplY3RQcm9wIiwicHJvcHNXaXRoSW5qZWN0aW9uIiwicGFyZW50Q2FsbCIsImFscmVhZHlFeGlzdHMiLCJwcm9wS2V5TmFtZSIsInRvVmFsaWRBc3NldElkIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJtYWtlQmxvY2siLCJyZW1vdmVIZWxwZXIiLCJnZXRDb21wYXRWYWx1ZSIsImNvbXBhdENvbmZpZyIsImlzQ29tcGF0RW5hYmxlZCIsImNoZWNrQ29tcGF0RW5hYmxlZCIsImRlY29kZVJFIiwiZGVjb2RlTWFwIiwiZ3QiLCJsdCIsImFtcCIsImFwb3MiLCJxdW90IiwiZGVmYXVsdFBhcnNlck9wdGlvbnMiLCJnZXROYW1lc3BhY2UiLCJnZXRUZXh0TW9kZSIsImlzUHJlVGFnIiwiZGVjb2RlRW50aXRpZXMiLCJyYXdUZXh0IiwicDEiLCJvbldhcm4iLCJjb21tZW50cyIsInJhd09wdGlvbnMiLCJvcmlnaW5hbFNvdXJjZSIsImluUHJlIiwiaW5WUHJlIiwiY3JlYXRlUGFyc2VyQ29udGV4dCIsImdldEN1cnNvciIsImhlbHBlcnMiLCJob2lzdHMiLCJpbXBvcnRzIiwidGVtcHMiLCJjb2RlZ2VuTm9kZSIsImNyZWF0ZVJvb3QiLCJwYXJzZUNoaWxkcmVuIiwiZ2V0U2VsZWN0aW9uIiwiYW5jZXN0b3JzIiwibnMiLCJub2RlcyIsImlzRW5kIiwicGFyc2VJbnRlcnBvbGF0aW9uIiwiZW1pdEVycm9yIiwicGFyc2VDb21tZW50IiwicGFyc2VCb2d1c0NvbW1lbnQiLCJwYXJzZUNEQVRBIiwiYWR2YW5jZUJ5IiwicGFyc2VUYWciLCJwYXJzZUVsZW1lbnQiLCJpc1NwZWNpYWxUZW1wbGF0ZURpcmVjdGl2ZSIsInBhcnNlVGV4dCIsInB1c2hOb2RlIiwicmVtb3ZlZFdoaXRlc3BhY2UiLCJzaG91bGRDb25kZW5zZSIsIndoaXRlc3BhY2UiLCJwcmV2SW5kZXgiLCJuZXN0ZWRJbmRleCIsImNvbnRlbnRTdGFydCIsImNsb3NlSW5kZXgiLCJ3YXNJblByZSIsIndhc0luVlByZSIsImlzUHJlQm91bmRhcnkiLCJpc1ZQcmVCb3VuZGFyeSIsImlzU2VsZkNsb3NpbmciLCJpbmxpbmVUZW1wbGF0ZVByb3AiLCJzdGFydHNXaXRoRW5kVGFnT3BlbiIsImFkdmFuY2VTcGFjZXMiLCJjdXJzb3IiLCJjdXJyZW50U291cmNlIiwicGFyc2VBdHRyaWJ1dGVzIiwiaXNCdWlsdEluQ29tcG9uZW50IiwiYXR0cmlidXRlTmFtZXMiLCJhdHRyIiwicGFyc2VBdHRyaWJ1dGUiLCJuYW1lU2V0IiwiaXNRdW90ZWQiLCJlbmRJbmRleCIsInBhcnNlVGV4dERhdGEiLCJ1bmV4cGVjdGVkQ2hhcnMiLCJwYXJzZUF0dHJpYnV0ZVZhbHVlIiwiaXNQcm9wU2hvcnRoYW5kIiwiZGlyTmFtZSIsInN0YXJ0T2Zmc2V0IiwibGFzdEluZGV4T2YiLCJnZXROZXdQb3NpdGlvbiIsInZhbHVlTG9jIiwiaW5uZXJTdGFydCIsImlubmVyRW5kIiwicmF3Q29udGVudExlbmd0aCIsInJhd0NvbnRlbnQiLCJwcmVUcmltQ29udGVudCIsImVuZFRva2VucyIsInNlYXJjaFN0cmluZyIsImhvaXN0U3RhdGljIiwid2FsayIsImlzU2luZ2xlRWxlbWVudFJvb3QiLCJkb05vdEhvaXN0Tm9kZSIsIm9yaWdpbmFsQ291bnQiLCJob2lzdGVkQ291bnQiLCJjb25zdGFudFR5cGUiLCJnZXRDb25zdGFudFR5cGUiLCJob2lzdCIsImdldFBhdGNoRmxhZyIsImdldEdlbmVyYXRlZFByb3BzQ29uc3RhbnRUeXBlIiwiZ2V0Tm9kZVByb3BzIiwidlNsb3QiLCJicmFuY2hlcyIsInRyYW5zZm9ybUhvaXN0IiwiY29uc3RhbnRDYWNoZSIsInJldHVyblR5cGUiLCJnZW5lcmF0ZWRQcm9wc1R5cGUiLCJjaGlsZFR5cGUiLCJleHBUeXBlIiwiYWxsb3dIb2lzdGVkSGVscGVyU2V0IiwiZ2V0Q29uc3RhbnRUeXBlT2ZIZWxwZXJDYWxsIiwia2V5VHlwZSIsInZhbHVlVHlwZSIsImNyZWF0ZVRyYW5zZm9ybUNvbnRleHQiLCJmaWxlbmFtZSIsInByZWZpeElkZW50aWZpZXJzIiwiY2FjaGVIYW5kbGVycyIsIm5vZGVUcmFuc2Zvcm1zIiwiZGlyZWN0aXZlVHJhbnNmb3JtcyIsImV4cHJlc3Npb25QbHVnaW5zIiwic2xvdHRlZCIsInNzckNzc1ZhcnMiLCJiaW5kaW5nTWV0YWRhdGEiLCJpbmxpbmUiLCJpc1RTIiwibmFtZU1hdGNoIiwidkZvciIsInZQcmUiLCJ2T25jZSIsImN1cnJlbnROb2RlIiwiY2hpbGRJbmRleCIsImluVk9uY2UiLCJjdXJyZW50Q291bnQiLCJoZWxwZXJTdHJpbmciLCJyZXBsYWNlTm9kZSIsInJlbW92ZU5vZGUiLCJyZW1vdmFsSW5kZXgiLCJvbk5vZGVSZW1vdmVkIiwiYWRkSWRlbnRpZmllcnMiLCJyZW1vdmVJZGVudGlmaWVycyIsImhvaXN0ZWQiLCJjcmVhdGVDYWNoZUV4cHJlc3Npb24iLCJ0cmF2ZXJzZU5vZGUiLCJjcmVhdGVSb290Q29kZWdlbiIsImV4aXRGbnMiLCJvbkV4aXQiLCJub2RlUmVtb3ZlZCIsInRyYXZlcnNlQ2hpbGRyZW4iLCJjcmVhdGVTdHJ1Y3R1cmFsRGlyZWN0aXZlVHJhbnNmb3JtIiwiUFVSRV9BTk5PVEFUSU9OIiwiZ2VuZXJhdGUiLCJhc3QiLCJvcHRpbWl6ZUltcG9ydHMiLCJydW50aW1lR2xvYmFsTmFtZSIsInJ1bnRpbWVNb2R1bGVOYW1lIiwic3NyUnVudGltZU1vZHVsZU5hbWUiLCJpbmRlbnRMZXZlbCIsInB1cmUiLCJkZWluZGVudCIsIndpdGhvdXROZXdMaW5lIiwiY3JlYXRlQ29kZWdlbkNvbnRleHQiLCJvbkNvbnRleHRDcmVhdGVkIiwiaGFzSGVscGVycyIsInVzZVdpdGhCbG9jayIsIlZ1ZUJpbmRpbmciLCJhbGlhc0hlbHBlciIsImdlbk5vZGUiLCJnZW5Ib2lzdHMiLCJnZW5GdW5jdGlvblByZWFtYmxlIiwiZ2VuQXNzZXRzIiwicHJlYW1ibGUiLCJhc3NldHMiLCJyZXNvbHZlciIsImdlbk5vZGVMaXN0QXNBcnJheSIsIm11bHRpbGluZXMiLCJnZW5Ob2RlTGlzdCIsImdlblRleHQiLCJnZW5FeHByZXNzaW9uIiwiZ2VuSW50ZXJwb2xhdGlvbiIsImdlbkNvbXBvdW5kRXhwcmVzc2lvbiIsImdlbkNvbW1lbnQiLCJjYWxsSGVscGVyIiwiZ2VuTnVsbGFibGVBcmdzIiwiZ2VuVk5vZGVDYWxsIiwiZ2VuQ2FsbEV4cHJlc3Npb24iLCJnZW5FeHByZXNzaW9uQXNQcm9wZXJ0eUtleSIsImdlbk9iamVjdEV4cHJlc3Npb24iLCJnZW5BcnJheUV4cHJlc3Npb24iLCJnZW5GdW5jdGlvbkV4cHJlc3Npb24iLCJuZWVkTmV3bGluZSIsIm5lZWRzUGFyZW5zIiwiaXNOZXN0ZWQiLCJnZW5Db25kaXRpb25hbEV4cHJlc3Npb24iLCJnZW5DYWNoZUV4cHJlc3Npb24iLCJ0cmFuc2Zvcm1JZiIsInByb2Nlc3NDb2RlZ2VuIiwiY3JlYXRlSWZCcmFuY2giLCJpZk5vZGUiLCJzaWJsaW5ncyIsInNpYmxpbmciLCJjb25kaXRpb24iLCJwcm9jZXNzSWYiLCJjcmVhdGVDb2RlZ2VuTm9kZUZvckJyYW5jaCIsInBhcmVudENvbmRpdGlvbiIsImdldFBhcmVudENvbmRpdGlvbiIsInVzZXJLZXkiLCJrZXlJbmRleCIsImNyZWF0ZUNoaWxkcmVuQ29kZWdlbk5vZGUiLCJrZXlQcm9wZXJ0eSIsInZub2RlQ2FsbCIsInRyYW5zZm9ybUZvciIsInBhcnNlUmVzdWx0IiwicGFyc2VGb3JFeHByZXNzaW9uIiwiZm9yTm9kZSIsInZhbHVlQWxpYXMiLCJrZXlBbGlhcyIsIm9iamVjdEluZGV4QWxpYXMiLCJwcm9jZXNzRm9yIiwicmVuZGVyRXhwIiwiaXNUZW1wbGF0ZSIsImtleVByb3AiLCJrZXlFeHAiLCJpc1N0YWJsZUZyYWdtZW50IiwiZnJhZ21lbnRGbGFnIiwiY2hpbGRCbG9jayIsIm5lZWRGcmFnbWVudFdyYXBwZXIiLCJzbG90T3V0bGV0IiwibG9vcCIsImNyZWF0ZUZvckxvb3BQYXJhbXMiLCJmb3JBbGlhc1JFIiwiZm9ySXRlcmF0b3JSRSIsInN0cmlwUGFyZW5zUkUiLCJpbk1hdGNoIiwiTEhTIiwiUkhTIiwiY3JlYXRlQWxpYXNFeHByZXNzaW9uIiwidmFsdWVDb250ZW50IiwidHJpbW1lZE9mZnNldCIsIml0ZXJhdG9yTWF0Y2giLCJrZXlDb250ZW50Iiwia2V5T2Zmc2V0IiwiaW5kZXhDb250ZW50IiwicmFuZ2UiLCJtZW1vQXJncyIsImNyZWF0ZVBhcmFtc0xpc3QiLCJkZWZhdWx0RmFsbGJhY2siLCJ0cmFja1Nsb3RTY29wZXMiLCJidWlsZENsaWVudFNsb3RGbiIsImJ1aWxkU2xvdHMiLCJidWlsZFNsb3RGbiIsInNsb3RzUHJvcGVydGllcyIsImhhc0R5bmFtaWNTbG90cyIsIm9uQ29tcG9uZW50U2xvdCIsImhhc1RlbXBsYXRlU2xvdHMiLCJoYXNOYW1lZERlZmF1bHRTbG90IiwiaW1wbGljaXREZWZhdWx0Q2hpbGRyZW4iLCJzZWVuU2xvdE5hbWVzIiwic2xvdEVsZW1lbnQiLCJzbG90RGlyIiwic2xvdENoaWxkcmVuIiwic2xvdExvYyIsInNsb3ROYW1lIiwic2xvdFByb3BzIiwiZGlyTG9jIiwic3RhdGljU2xvdE5hbWUiLCJzbG90RnVuY3Rpb24iLCJ2SWYiLCJ2RWxzZSIsImJ1aWxkRHluYW1pY1Nsb3QiLCJjb25kaXRpb25hbCIsImJ1aWxkRGVmYXVsdFNsb3RQcm9wZXJ0eSIsImlzTm9uV2hpdGVzcGFjZUNvbnRlbnQiLCJoYXNGb3J3YXJkZWRTbG90cyIsImRpcmVjdGl2ZUltcG9ydE1hcCIsInRyYW5zZm9ybUVsZW1lbnQiLCJ2bm9kZVRhZyIsImlzRXhwbGljaXREeW5hbWljIiwiaXNDb21wb25lbnRUYWciLCJpc1Byb3AiLCJpc0RpciIsImJ1aWx0SW4iLCJyZXNvbHZlQ29tcG9uZW50VHlwZSIsInZub2RlUHJvcHMiLCJ2bm9kZUNoaWxkcmVuIiwidm5vZGVQYXRjaEZsYWciLCJ2bm9kZUR5bmFtaWNQcm9wcyIsImR5bmFtaWNQcm9wTmFtZXMiLCJ2bm9kZURpcmVjdGl2ZXMiLCJzaG91bGRVc2VCbG9jayIsInByb3BzQnVpbGRSZXN1bHQiLCJidWlsZFByb3BzIiwiZGlyQXJncyIsInRydWVFeHByZXNzaW9uIiwibW9kaWZpZXIiLCJidWlsZERpcmVjdGl2ZUFyZ3MiLCJoYXNEeW5hbWljVGV4dENoaWxkIiwicHJvcHNOYW1lc1N0cmluZyIsInN0cmluZ2lmeUR5bmFtaWNQcm9wTmFtZXMiLCJlbGVtZW50TG9jIiwibWVyZ2VBcmdzIiwicnVudGltZURpcmVjdGl2ZXMiLCJoYXNSZWYiLCJoYXNDbGFzc0JpbmRpbmciLCJoYXNTdHlsZUJpbmRpbmciLCJoYXNIeWRyYXRpb25FdmVudEJpbmRpbmciLCJoYXNEeW5hbWljS2V5cyIsImhhc1Zub2RlSG9vayIsImFuYWx5emVQYXRjaEZsYWciLCJpc0V2ZW50SGFuZGxlciIsImlzVkJpbmQiLCJpc1ZPbiIsImRlZHVwZVByb3BlcnRpZXMiLCJkaXJlY3RpdmVUcmFuc2Zvcm0iLCJuZWVkUnVudGltZSIsInByb3BzRXhwcmVzc2lvbiIsImNsYXNzS2V5SW5kZXgiLCJzdHlsZUtleUluZGV4IiwiaGFzRHluYW1pY0tleSIsImlzSGFuZGxlcktleSIsImNsYXNzUHJvcCIsInN0eWxlUHJvcCIsImtub3duUHJvcHMiLCJ0cmFuc2Zvcm1TbG90T3V0bGV0Iiwibm9uTmFtZVByb3BzIiwicHJvY2Vzc1Nsb3RPdXRsZXQiLCJzbG90QXJncyIsImV4cGVjdGVkTGVuIiwiZm5FeHBSRSIsInRyYW5zZm9ybU9uIiwiYXVnbWVudG9yIiwiZXZlbnROYW1lIiwic2hvdWxkQ2FjaGUiLCJpc01lbWJlckV4cCIsImlzSW5saW5lU3RhdGVtZW50IiwiaGFzTXVsdGlwbGVTdGF0ZW1lbnRzIiwidHJhbnNmb3JtQmluZCIsIl9ub2RlIiwiaW5qZWN0UHJlZml4IiwidHJhbnNmb3JtVGV4dCIsImhhc1RleHQiLCJjYWxsQXJncyIsInRyYW5zZm9ybU9uY2UiLCJ0cmFuc2Zvcm1Nb2RlbCIsImNyZWF0ZVRyYW5zZm9ybVByb3BzIiwicmF3RXhwIiwiZXhwU3RyaW5nIiwicHJvcE5hbWUiLCJhc3NpZ25tZW50RXhwIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInRyYW5zZm9ybUZpbHRlciIsInJld3JpdGVGaWx0ZXIiLCJwYXJzZUZpbHRlciIsImV4cHJlc3Npb24iLCJpblNpbmdsZSIsImluRG91YmxlIiwiaW5UZW1wbGF0ZVN0cmluZyIsImluUmVnZXgiLCJjdXJseSIsInNxdWFyZSIsInBhcmVuIiwibGFzdEZpbHRlckluZGV4IiwicHVzaEZpbHRlciIsIndyYXBGaWx0ZXIiLCJzZWVuJDEiLCJ0cmFuc2Zvcm1NZW1vIiwiYmFzZUNvbXBpbGUiLCJpc01vZHVsZU1vZGUiLCJtb2RlbCIsIlZfTU9ERUxfUkFESU8iLCJWX01PREVMX0NIRUNLQk9YIiwiVl9NT0RFTF9URVhUIiwiVl9NT0RFTF9TRUxFQ1QiLCJWX01PREVMX0RZTkFNSUMiLCJWX09OX1dJVEhfTU9ESUZJRVJTIiwiVl9PTl9XSVRIX0tFWVMiLCJWX1NIT1ciLCJUUkFOU0lUSU9OX0dST1VQIiwiaXNSYXdUZXh0Q29udGFpbmVyIiwicGFyc2VyT3B0aW9ucyIsImFzQXR0ciIsInBhcnNlSW5saW5lQ1NTIiwiY3JlYXRlRE9NQ29tcGlsZXJFcnJvciIsImlzRXZlbnRPcHRpb25Nb2RpZmllciIsImlzTm9uS2V5TW9kaWZpZXIiLCJtYXliZUtleU1vZGlmaWVyIiwiaXNLZXlib2FyZEV2ZW50IiwidHJhbnNmb3JtQ2xpY2siLCJpZ25vcmVTaWRlRWZmZWN0VGFncyIsIkRPTU5vZGVUcmFuc2Zvcm1zIiwiRE9NRGlyZWN0aXZlVHJhbnNmb3JtcyIsImNsb2FrIiwiaHRtbCIsImJhc2VSZXN1bHQiLCJkaXJlY3RpdmVUb1VzZSIsImlzSW52YWxpZFR5cGUiLCJoYXNEeW5hbWljS2V5VkJpbmQiLCJoYW5kbGVyRXhwIiwia2V5TW9kaWZpZXJzIiwibm9uS2V5TW9kaWZpZXJzIiwiZXZlbnRPcHRpb25Nb2RpZmllcnMiLCJyZXNvbHZlTW9kaWZpZXJzIiwibW9kaWZpZXJQb3N0Zml4IiwiY29tcGlsZUNhY2hlIiwiY29tcGlsZVRvRnVuY3Rpb24iLCJfY2FjaGUiLCJ4bWxucyIsImZpbGwiLCJ2aWV3Qm94Iiwic3Ryb2tlIl0sInNvdXJjZVJvb3QiOiIifQ==